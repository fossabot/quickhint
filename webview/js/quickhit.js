// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 167772160;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1) { { eval(Pointer_stringify($0) + "('" + Pointer_stringify($1) + "')"); } }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 23136;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_quickhit_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,248,1,0,0,17,0,0,0,18,0,0,0,252,255,255,255,252,255,255,255,248,1,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,16,2,0,0,7,0,0,0,8,0,0,0,56,0,0,0,248,255,255,255,16,2,0,0,9,0,0,0,10,0,0,0,192,255,255,255,192,255,255,255,16,2,0,0,11,0,0,0,12,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,224,1,0,0,13,0,0,0,14,0,0,0,192,255,255,255,192,255,255,255,224,1,0,0,15,0,0,0,16,0,0,0,56,0,0,0,0,0,0,0,248,1,0,0,17,0,0,0,18,0,0,0,200,255,255,255,200,255,255,255,248,1,0,0,19,0,0,0,20,0,0,0,184,37,0,0,25,42,0,0,16,2,0,0,0,0,0,0,184,37,0,0,94,42,0,0,216,1,0,0,0,0,0,0,144,37,0,0,223,42,0,0,96,38,0,0,160,42,0,0,0,0,0,0,1,0,0,0,240,0,0,0,0,0,0,0,184,37,0,0,55,43,0,0,224,6,0,0,0,0,0,0,144,37,0,0,22,43,0,0,144,37,0,0,168,46,0,0,144,37,0,0,199,46,0,0,144,37,0,0,230,46,0,0,144,37,0,0,5,47,0,0,144,37,0,0,36,47,0,0,144,37,0,0,67,47,0,0,144,37,0,0,98,47,0,0,144,37,0,0,129,47,0,0,144,37,0,0,160,47,0,0,144,37,0,0,191,47,0,0,144,37,0,0,222,47,0,0,144,37,0,0,253,47,0,0,144,37,0,0,28,48,0,0,96,38,0,0,47,48,0,0,0,0,0,0,1,0,0,0,240,0,0,0,0,0,0,0,96,38,0,0,110,48,0,0,0,0,0,0,1,0,0,0,240,0,0,0,0,0,0,0,184,37,0,0,187,59,0,0,208,1,0,0,0,0,0,0,144,37,0,0,169,59,0,0,144,37,0,0,229,59,0,0,96,38,0,0,22,60,0,0,0,0,0,0,1,0,0,0,192,1,0,0,3,244,255,255,96,38,0,0,69,60,0,0,0,0,0,0,1,0,0,0,192,1,0,0,3,244,255,255,96,38,0,0,116,60,0,0,3,0,0,0,2,0,0,0,224,1,0,0,2,0,0,0,248,1,0,0,2,8,0,0,12,0,0,0,0,0,0,0,224,1,0,0,13,0,0,0,14,0,0,0,244,255,255,255,244,255,255,255,224,1,0,0,15,0,0,0,16,0,0,0,184,37,0,0,209,60,0,0,16,7,0,0,0,0,0,0,184,37,0,0,239,60,0,0,0,7,0,0,0,0,0,0,184,37,0,0,25,61,0,0,136,2,0,0,0,0,0,0,184,37,0,0,45,61,0,0,216,6,0,0,0,0,0,0,184,37,0,0,67,61,0,0,136,2,0,0,0,0,0,0,96,38,0,0,125,61,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,200,2,0,0,0,0,0,0,96,38,0,0,193,61,0,0,0,0,0,0,1,0,0,0,224,2,0,0,0,0,0,0,144,37,0,0,215,61,0,0,96,38,0,0,240,61,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,8,3,0,0,0,0,0,0,96,38,0,0,52,62,0,0,0,0,0,0,1,0,0,0,224,2,0,0,0,0,0,0,96,38,0,0,93,62,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,64,3,0,0,0,0,0,0,96,38,0,0,161,62,0,0,0,0,0,0,1,0,0,0,88,3,0,0,0,0,0,0,144,37,0,0,183,62,0,0,96,38,0,0,208,62,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,128,3,0,0,0,0,0,0,96,38,0,0,20,63,0,0,0,0,0,0,1,0,0,0,88,3,0,0,0,0,0,0,96,38,0,0,106,64,0,0,0,0,0,0,3,0,0,0,136,2,0,0,2,0,0,0,192,3,0,0,2,0,0,0,200,3,0,0,0,8,0,0,144,37,0,0,209,64,0,0,144,37,0,0,175,64,0,0,96,38,0,0,228,64,0,0,0,0,0,0,3,0,0,0,136,2,0,0,2,0,0,0,192,3,0,0,2,0,0,0,248,3,0,0,0,8,0,0,144,37,0,0,41,65,0,0,96,38,0,0,75,65,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,32,4,0,0,0,8,0,0,144,37,0,0,144,65,0,0,96,38,0,0,186,65,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,32,4,0,0,0,8,0,0,96,38,0,0,255,65,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,104,4,0,0,2,0,0,0,144,37,0,0,27,66,0,0,96,38,0,0,48,66,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,104,4,0,0,2,0,0,0,96,38,0,0,76,66,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,104,4,0,0,2,0,0,0,96,38,0,0,104,66,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,104,4,0,0,2,0,0,0,96,38,0,0,163,66,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,240,4,0,0,0,0,0,0,144,37,0,0,233,66,0,0,96,38,0,0,13,67,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,24,5,0,0,0,0,0,0,144,37,0,0,83,67,0,0,96,38,0,0,114,67,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,64,5,0,0,0,0,0,0,144,37,0,0,184,67,0,0,96,38,0,0,209,67,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,104,5,0,0,0,0,0,0,144,37,0,0,23,68,0,0,96,38,0,0,48,68,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,144,5,0,0,2,0,0,0,144,37,0,0,69,68,0,0,96,38,0,0,220,68,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,144,5,0,0,2,0,0,0,184,37,0,0,93,68,0,0,200,5,0,0,0,0,0,0,96,38,0,0,128,68,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,232,5,0,0,2,0,0,0,144,37,0,0,163,68,0,0,184,37,0,0,186,68,0,0,200,5,0,0,0,0,0,0,96,38,0,0,241,68,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,232,5,0,0,2,0,0,0,96,38,0,0,19,69,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,232,5,0,0,2,0,0,0,96,38,0,0,53,69,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,232,5,0,0,2,0,0,0,184,37,0,0,88,69,0,0,136,2,0,0,0,0,0,0,96,38,0,0,110,69,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,144,6,0,0,2,0,0,0,144,37,0,0,128,69,0,0,96,38,0,0,149,69,0,0,0,0,0,0,2,0,0,0,136,2,0,0,2,0,0,0,144,6,0,0,2,0,0,0,184,37,0,0,178,69,0,0,136,2,0,0,0,0,0,0,184,37,0,0,199,69,0,0,136,2,0,0,0,0,0,0,144,37,0,0,227,69,0,0,96,38,0,0,252,69,0,0,0,0,0,0,1,0,0,0,216,6,0,0,0,0,0,0,144,37,0,0,39,70,0,0,184,37,0,0,64,70,0,0,128,7,0,0,0,0,0,0,184,37,0,0,87,70,0,0,248,6,0,0,0,0,0,0,144,37,0,0,2,71,0,0,184,37,0,0,98,71,0,0,56,7,0,0,0,0,0,0,184,37,0,0,15,71,0,0,72,7,0,0,0,0,0,0,144,37,0,0,48,71,0,0,184,37,0,0,61,71,0,0,40,7,0,0,0,0,0,0,184,37,0,0,133,72,0,0,32,7,0,0,0,0,0,0,184,37,0,0,146,72,0,0,32,7,0,0,0,0,0,0,184,37,0,0,162,72,0,0,32,7,0,0,0,0,0,0,184,37,0,0,180,72,0,0,112,7,0,0,0,0,0,0,184,37,0,0,211,72,0,0,32,7,0,0,0,0,0,0,184,37,0,0,3,73,0,0,56,7,0,0,0,0,0,0,184,37,0,0,223,72,0,0,176,7,0,0,0,0,0,0,184,37,0,0,37,73,0,0,56,7,0,0,0,0,0,0,68,38,0,0,77,73,0,0,68,38,0,0,79,73,0,0,68,38,0,0,81,73,0,0,68,38,0,0,83,73,0,0,68,38,0,0,85,73,0,0,68,38,0,0,87,73,0,0,68,38,0,0,89,73,0,0,68,38,0,0,91,73,0,0,68,38,0,0,93,73,0,0,68,38,0,0,91,62,0,0,68,38,0,0,95,73,0,0,68,38,0,0,97,73,0,0,68,38,0,0,99,73,0,0,184,37,0,0,101,73,0,0,40,7,0,0,0,0,0,0,64,0,0,0,0,0,0,0,208,0,0,0,1,0,0,0,2,0,0,0,56,0,0,0,248,255,255,255,208,0,0,0,3,0,0,0,4,0,0,0,192,255,255,255,192,255,255,255,208,0,0,0,5,0,0,0,6,0,0,0,100,8,0,0,76,0,0,0,140,0,0,0,160,0,0,0,180,0,0,0,200,0,0,0,116,0,0,0,96,0,0,0,140,8,0,0,120,8,0,0,0,0,0,0,224,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,224,7,0,0,248,0,0,0,224,7,0,0,248,0,0,0,248,0,0,0,248,0,0,0,224,7,0,0,248,0,0,0,248,0,0,0,248,0,0,0,248,0,0,0,0,0,0,0,16,1,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,96,9,0,0,20,0,0,0,67,46,85,84,70,45,56,0,0,0,0,0,0,0,0,0,0,0,0,0,222,18,4,149,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,68,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,92,10,0,0,5,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,42,0,0,0,84,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,42,0,0,0,92,86,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,39,0,0,208,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,192,1,0,0,45,0,0,0,46,0,0,0,0,0,0,0,208,1,0,0,47,0,0,0,48,0,0,0,0,0,0,0,216,1,0,0,49,0,0,0,50,0,0,0,23,0,0,0,24,0,0,0,51,0,0,0,52,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,53,0,0,0,31,0,0,0,54,0,0,0,33,0,0,0,55,0,0,0,8,0,0,0,0,0,0,0,224,1,0,0,13,0,0,0,14,0,0,0,248,255,255,255,248,255,255,255,224,1,0,0,15,0,0,0,16,0,0,0,104,25,0,0,124,25,0,0,28,0,0,0,48,0,0,0,12,0,0,0,0,0,0,0,16,2,0,0,7,0,0,0,8,0,0,0,4,0,0,0,248,255,255,255,16,2,0,0,9,0,0,0,10,0,0,0,244,255,255,255,244,255,255,255,16,2,0,0,11,0,0,0,12,0,0,0,160,25,0,0,60,2,0,0,80,2,0,0,28,0,0,0,48,0,0,0,200,25,0,0,180,25,0,0,0,0,0,0,88,2,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,0,0,0,0,104,2,0,0,63,0,0,0,64,0,0,0,65,0,0,0,244,25,0,0,0,0,0,0,120,2,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,152,2,0,0,72,0,0,0,73,0,0,0,68,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,168,2,0,0,77,0,0,0,78,0,0,0,68,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,0,0,0,0,232,2,0,0,90,0,0,0,91,0,0,0,68,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,0,0,0,0,32,3,0,0,103,0,0,0,104,0,0,0,68,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,0,0,0,0,96,3,0,0,113,0,0,0,114,0,0,0,68,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,0,0,0,0,152,3,0,0,123,0,0,0,124,0,0,0,68,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,248,255,255,255,152,3,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,0,0,0,0,208,3,0,0,139,0,0,0,140,0,0,0,68,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,248,255,255,255,208,3,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,4,0,0,155,0,0,0,156,0,0,0,68,0,0,0,157,0,0,0,0,0,0,0,40,4,0,0,158,0,0,0,159,0,0,0,68,0,0,0,160,0,0,0,0,0,0,0,72,4,0,0,161,0,0,0,162,0,0,0,68,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,0,0,0,0,112,4,0,0,172,0,0,0,173,0,0,0,68,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,0,0,0,0,144,4,0,0,183,0,0,0,184,0,0,0,68,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,0,0,0,0,176,4,0,0,194,0,0,0,195,0,0,0,68,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,208,4,0,0,205,0,0,0,206,0,0,0,68,0,0,0,207,0,0,0,208,0,0,0,0,0,0,0,248,4,0,0,209,0,0,0,210,0,0,0,68,0,0,0,211,0,0,0,212,0,0,0,0,0,0,0,32,5,0,0,213,0,0,0,214,0,0,0,68,0,0,0,215,0,0,0,216,0,0,0,0,0,0,0,72,5,0,0,217,0,0,0,218,0,0,0,68,0,0,0,219,0,0,0,220,0,0,0,0,0,0,0,112,5,0,0,221,0,0,0,222,0,0,0,68,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,0,0,0,0,152,5,0,0,226,0,0,0,227,0,0,0,68,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,0,0,0,0,240,5,0,0,231,0,0,0,232,0,0,0,68,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,184,5,0,0,231,0,0,0,240,0,0,0,68,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,32,6,0,0,241,0,0,0,242,0,0,0,68,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,96,6,0,0,250,0,0,0,251,0,0,0,68,0,0,0,0,0,0,0,112,6,0,0,252,0,0,0,253,0,0,0,68,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,0,0,0,0,184,6,0,0,6,1,0,0,7,1,0,0,68,0,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,0,0,0,200,6,0,0,13,1,0,0,14,1,0,0,68,0,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,136,2,0,0,231,0,0,0,20,1,0,0,68,0,0,0,0,0,0,0,152,6,0,0,231,0,0,0,21,1,0,0,68,0,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,0,0,0,0,0,6,0,0,231,0,0,0,34,1,0,0,68,0,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,0,0,0,0,64,6,0,0,231,0,0,0,42,1,0,0,68,0,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,0,0,0,0,200,5,0,0,231,0,0,0,50,1,0,0,68,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,200,3,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,0,0,0,0,248,3,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,0,0,0,0,216,6,0,0,51,1,0,0,52,1,0,0,53,1,0,0,0,0,0,0,224,6,0,0,51,1,0,0,54,1,0,0,53,1,0,0,55,1,0,0,53,1,0,0,0,0,0,0,0,7,0,0,56,1,0,0,57,1,0,0,65,0,0,0,58,1,0,0,249,70,0,0,0,0,0,0,40,7,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,0,0,0,0,80,7,0,0,59,1,0,0,67,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,0,0,0,0,96,7,0,0,71,1,0,0,72,1,0,0,73,1,0,0,0,0,0,0,112,7,0,0,74,1,0,0,75,1,0,0,76,1,0,0,0,0,0,0,128,7,0,0,77,1,0,0,78,1,0,0,65,0,0,0,0,0,0,0,144,7,0,0,74,1,0,0,79,1,0,0,76,1,0,0,0,0,0,0,160,7,0,0,80,1,0,0,81,1,0,0,82,1,0,0,0,0,0,0,208,7,0,0,59,1,0,0,83,1,0,0,61,1,0,0,62,1,0,0,84,1,0,0,0,0,0,0,72,8,0,0,59,1,0,0,85,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  var _emscripten_asm_const_int=true;

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }


  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_pthread_cond_broadcast"] = _pthread_cond_broadcast;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

   
  Module["_memmove"] = _memmove;

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function _pthread_cond_wait() { return 0; }

  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _llvm_trap() {
      abort('trap!');
    }


  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didd(x) { Module["printErr"]("Invalid function pointer called with signature 'didd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_didd(index,a1,a2,a3) {
  try {
    return Module["dynCall_didd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiiiiiiii": nullFunc_iiiiiiiiiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_didd": nullFunc_didd, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_didd": invoke_didd, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "___lock": ___lock, "createNamedFunction": createNamedFunction, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "_llvm_pow_f64": _llvm_pow_f64, "integerReadValueFromPointer": integerReadValueFromPointer, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "_pthread_key_create": _pthread_key_create, "___gxx_personality_v0": ___gxx_personality_v0, "__embind_register_integer": __embind_register_integer, "__embind_register_void": __embind_register_void, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "extendError": extendError, "___buildEnvironment": ___buildEnvironment, "exposePublicSymbol": exposePublicSymbol, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "___syscall91": ___syscall91, "__addDays": __addDays, "_strftime_l": _strftime_l, "___setErrNo": ___setErrNo, "__emval_register": __emval_register, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__embind_register_emval": __embind_register_emval, "getTypeName": getTypeName, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "embind_init_charCodes": embind_init_charCodes, "readLatin1String": readLatin1String, "_embind_repr": _embind_repr, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "_getenv": _getenv, "runDestructors": runDestructors, "makeLegalFunctionName": makeLegalFunctionName, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "___syscall54": ___syscall54, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "__isLeapYear": __isLeapYear, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "new_": new_, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "registerType": registerType, "___cxa_throw": ___cxa_throw, "___cxa_rethrow": ___cxa_rethrow, "__arraySum": __arraySum, "___syscall6": ___syscall6, "throwBindingError": throwBindingError, "ensureOverloadTable": ensureOverloadTable, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "__embind_register_float": __embind_register_float, "__embind_register_std_wstring": __embind_register_std_wstring, "_atexit": _atexit, "___syscall140": ___syscall140, "_llvm_trap": _llvm_trap, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___cxa_pure_virtual": ___cxa_pure_virtual, "___syscall146": ___syscall146, "___map_file": ___map_file, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiiiiiiii=env.nullFunc_iiiiiiiiiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_didd=env.nullFunc_didd;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiiiiiiii=env.invoke_iiiiiiiiiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_didd=env.invoke_didd;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___lock=env.___lock;
  var createNamedFunction=env.createNamedFunction;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var _pthread_key_create=env._pthread_key_create;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var extendError=env.extendError;
  var ___buildEnvironment=env.___buildEnvironment;
  var exposePublicSymbol=env.exposePublicSymbol;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var ___syscall91=env.___syscall91;
  var __addDays=env.__addDays;
  var _strftime_l=env._strftime_l;
  var ___setErrNo=env.___setErrNo;
  var __emval_register=env.__emval_register;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __embind_register_emval=env.__embind_register_emval;
  var getTypeName=env.getTypeName;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var embind_init_charCodes=env.embind_init_charCodes;
  var readLatin1String=env.readLatin1String;
  var _embind_repr=env._embind_repr;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var _getenv=env._getenv;
  var runDestructors=env.runDestructors;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var new_=env.new_;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var __arraySum=env.__arraySum;
  var ___syscall6=env.___syscall6;
  var throwBindingError=env.throwBindingError;
  var ensureOverloadTable=env.ensureOverloadTable;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var _llvm_trap=env._llvm_trap;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___syscall146=env.___syscall146;
  var ___map_file=env.___map_file;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z8loadWordNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 8|0;
 $5 = (__ZN7Encoder6sharedEv()|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2,$0);
 __THREW__ = 0;
 invoke_viiii(345,($1|0),($5|0),($2|0),1);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $3 = $8;
  $4 = $9;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $10 = $3;
  $11 = $4;
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI5LevelED2Ev($1);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__210shared_ptrI5LevelED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZNSt3__219__shared_weak_count16__release_sharedEv($7);
 STACKTOP = sp;return;
}
function __Z18loadFileFromSourceNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$sink1 = 0, $$sink2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $44 = sp + 48|0;
 $47 = sp + 24|0;
 $48 = sp + 16|0;
 $49 = sp;
 $39 = $44;
 $40 = $0;
 $41 = 24;
 $50 = $39;
 $51 = ((($50)) + 64|0);
 $38 = $51;
 $52 = $38;
 $37 = $52;
 $53 = $37;
 HEAP32[$53>>2] = (6420);
 HEAP32[$52>>2] = (6404);
 HEAP32[$50>>2] = (2148);
 $54 = ((($50)) + 64|0);
 HEAP32[$54>>2] = (2188);
 $55 = ((($50)) + 8|0);
 HEAP32[$55>>2] = (2168);
 $56 = ((($50)) + 12|0);
 $20 = $50;
 $57 = 2200;
 $21 = $57;
 $22 = $56;
 $58 = $20;
 $59 = $21;
 $60 = $22;
 $61 = ((($59)) + 4|0);
 $17 = $58;
 $18 = $61;
 $19 = $60;
 $62 = $17;
 $63 = $18;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = ((($63)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$62>>2]|0;
 $68 = ((($67)) + -12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($62) + ($69)|0);
 HEAP32[$70>>2] = $66;
 $71 = ((($62)) + 4|0);
 HEAP32[$71>>2] = 0;
 $72 = HEAP32[$62>>2]|0;
 $73 = ((($72)) + -12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($62) + ($74)|0);
 $76 = $19;
 $15 = $75;
 $16 = $76;
 $77 = $15;
 $78 = $16;
 __THREW__ = 0;
 invoke_vii(346,($77|0),($78|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $137 = ___cxa_find_matching_catch_2()|0;
  $138 = tempRet0;
  $42 = $137;
  $43 = $138;
  $142 = ((($50)) + 64|0);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($142);
  $143 = $42;
  $144 = $43;
  ___resumeException($143|0);
  // unreachable;
 }
 $81 = ((($77)) + 72|0);
 HEAP32[$81>>2] = 0;
 $82 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $83 = ((($77)) + 76|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($58)) + 8|0);
 $85 = ((($59)) + 12|0);
 $13 = $84;
 $14 = $85;
 $86 = $13;
 $87 = $14;
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$86>>2] = $88;
 $89 = ((($87)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$86>>2]|0;
 $92 = ((($91)) + -12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($86) + ($93)|0);
 HEAP32[$94>>2] = $90;
 $95 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $95;
 $96 = ((($59)) + 20|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$58>>2]|0;
 $99 = ((($98)) + -12|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($58) + ($100)|0);
 HEAP32[$101>>2] = $97;
 $102 = ((($59)) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($58)) + 8|0);
 HEAP32[$104>>2] = $103;
 HEAP32[$50>>2] = (2148);
 $105 = ((($50)) + 64|0);
 HEAP32[$105>>2] = (2188);
 $106 = ((($50)) + 8|0);
 HEAP32[$106>>2] = (2168);
 $107 = ((($50)) + 12|0);
 $108 = $40;
 $109 = $41;
 $32 = $107;
 $33 = $108;
 $34 = $109;
 $110 = $32;
 __THREW__ = 0;
 invoke_vi(347,($110|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 do {
  if ($112) {
   $139 = ___cxa_find_matching_catch_2()|0;
   $140 = tempRet0;
   $$sink1 = $140;$$sink2 = $139;
  } else {
   HEAP32[$110>>2] = (2244);
   $113 = ((($110)) + 32|0);
   $31 = $113;
   $114 = $31;
   $30 = $114;
   $115 = $30;
   $29 = $115;
   $116 = $29;
   $28 = $116;
   ;HEAP32[$116>>2]=0|0;HEAP32[$116+4>>2]=0|0;HEAP32[$116+8>>2]=0|0;
   $25 = $114;
   $117 = $25;
   $24 = $117;
   $118 = $24;
   $23 = $118;
   $119 = $23;
   $26 = $119;
   $27 = 0;
   while(1) {
    $120 = $27;
    $121 = ($120>>>0)<(3);
    if (!($121)) {
     break;
    }
    $122 = $26;
    $123 = $27;
    $124 = (($122) + ($123<<2)|0);
    HEAP32[$124>>2] = 0;
    $125 = $27;
    $126 = (($125) + 1)|0;
    $27 = $126;
   }
   $127 = ((($110)) + 44|0);
   HEAP32[$127>>2] = 0;
   $128 = ((($110)) + 48|0);
   $129 = $34;
   HEAP32[$128>>2] = $129;
   $130 = $33;
   __THREW__ = 0;
   invoke_vii(348,($110|0),($130|0));
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    $133 = ___cxa_find_matching_catch_2()|0;
    $134 = tempRet0;
    $35 = $133;
    $36 = $134;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($113);
    __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($110);
    $135 = $35;
    $136 = $36;
    $$sink1 = $136;$$sink2 = $135;
    break;
   }
   while(1) {
    $12 = $44;
    $145 = $12;
    $146 = ((($145)) + 12|0);
    $11 = $146;
    $147 = $11;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ((($147)) + 16|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($149>>>0)<($151>>>0);
    if ($152) {
     $153 = ((($147)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($147)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = $154;
     $158 = $156;
     $159 = (($157) - ($158))|0;
     $10 = $159;
    } else {
     $160 = HEAP32[$147>>2]|0;
     $161 = ((($160)) + 28|0);
     $162 = HEAP32[$161>>2]|0;
     __THREW__ = 0;
     $163 = (invoke_ii($162|0,($147|0))|0);
     $164 = __THREW__; __THREW__ = 0;
     $165 = $164&1;
     if ($165) {
      label = 25;
      break;
     }
     $10 = $163;
    }
    $166 = $10;
    $167 = ($166|0)!=(0);
    if (!($167)) {
     label = 29;
     break;
    }
    $9 = $47;
    $168 = $9;
    $8 = $168;
    $169 = $8;
    $7 = $169;
    $170 = $7;
    $6 = $170;
    ;HEAP32[$170>>2]=0|0;HEAP32[$170+4>>2]=0|0;HEAP32[$170+8>>2]=0|0;
    $3 = $168;
    $171 = $3;
    $2 = $171;
    $172 = $2;
    $1 = $172;
    $173 = $1;
    $4 = $173;
    $5 = 0;
    while(1) {
     $174 = $5;
     $175 = ($174>>>0)<(3);
     if (!($175)) {
      break;
     }
     $176 = $4;
     $177 = $5;
     $178 = (($176) + ($177<<2)|0);
     HEAP32[$178>>2] = 0;
     $179 = $5;
     $180 = (($179) + 1)|0;
     $5 = $180;
    }
    __THREW__ = 0;
    (invoke_iii(349,($44|0),($47|0))|0);
    $181 = __THREW__; __THREW__ = 0;
    $182 = $181&1;
    if ($182) {
     label = 26;
     break;
    }
    __THREW__ = 0;
    $183 = (invoke_i(350)|0);
    $184 = __THREW__; __THREW__ = 0;
    $185 = $184&1;
    if ($185) {
     label = 26;
     break;
    }
    __THREW__ = 0;
    invoke_vii(351,($49|0),($47|0));
    $186 = __THREW__; __THREW__ = 0;
    $187 = $186&1;
    if ($187) {
     label = 26;
     break;
    }
    __THREW__ = 0;
    invoke_viiii(345,($48|0),($183|0),($49|0),1);
    $188 = __THREW__; __THREW__ = 0;
    $189 = $188&1;
    if ($189) {
     label = 27;
     break;
    }
    __ZNSt3__210shared_ptrI5LevelED2Ev($48);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($49);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($47);
   }
   if ((label|0) == 25) {
    $190 = ___cxa_find_matching_catch_2()|0;
    $191 = tempRet0;
    $45 = $190;
    $46 = $191;
    __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    $196 = $45;
    $197 = $46;
    ___resumeException($196|0);
    // unreachable;
   }
   else if ((label|0) == 26) {
    $192 = ___cxa_find_matching_catch_2()|0;
    $193 = tempRet0;
    $45 = $192;
    $46 = $193;
   }
   else if ((label|0) == 27) {
    $194 = ___cxa_find_matching_catch_2()|0;
    $195 = tempRet0;
    $45 = $194;
    $46 = $195;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($49);
   }
   else if ((label|0) == 29) {
    __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    STACKTOP = sp;return;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($47);
   __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
   $196 = $45;
   $197 = $46;
   ___resumeException($196|0);
   // unreachable;
  }
 } while(0);
 $42 = $$sink2;
 $43 = $$sink1;
 $141 = 2200;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($50,$141);
 $142 = ((($50)) + 64|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($142);
 $143 = $42;
 $144 = $43;
 ___resumeException($143|0);
 // unreachable;
}
function __ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $27 = sp;
 $29 = sp + 258|0;
 $57 = sp + 257|0;
 $58 = sp + 256|0;
 $62 = sp + 255|0;
 $68 = sp + 12|0;
 $60 = $0;
 $61 = $1;
 $72 = $60;
 __THREW__ = 0;
 invoke_viii(352,($62|0),($72|0),0);
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 L1: do {
  if ($74) {
   label = 8;
  } else {
   $59 = $62;
   $75 = $59;
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&1;
   if (!($77)) {
    $267 = $60;
    $268 = HEAP32[$267>>2]|0;
    $269 = ((($268)) + -12|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = (($267) + ($270)|0);
    $23 = $271;
    $24 = 4;
    $272 = $23;
    $273 = $24;
    $21 = $272;
    $22 = $273;
    $274 = $21;
    $275 = ((($274)) + 16|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = $22;
    $278 = $276 | $277;
    __THREW__ = 0;
    invoke_vii(357,($274|0),($278|0));
    $279 = __THREW__; __THREW__ = 0;
    $280 = $279&1;
    if ($280) {
     label = 8;
     break;
    }
    $186 = $60;
    STACKTOP = sp;return ($186|0);
   }
   $78 = $61;
   $56 = $78;
   $79 = $56;
   $55 = $79;
   $54 = $79;
   $80 = $54;
   $53 = $80;
   $81 = $53;
   $52 = $81;
   $82 = $52;
   $83 = ((($82)) + 11|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $85 & 128;
   $87 = ($86|0)!=(0);
   if ($87) {
    $47 = $79;
    $88 = $47;
    $46 = $88;
    $89 = $46;
    $45 = $89;
    $90 = $45;
    $91 = HEAP32[$90>>2]|0;
    HEAP8[$57>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($91,$57);
    $38 = $79;
    $39 = 0;
    $92 = $38;
    $93 = $39;
    $37 = $92;
    $94 = $37;
    $36 = $94;
    $95 = $36;
    $96 = ((($95)) + 4|0);
    HEAP32[$96>>2] = $93;
   } else {
    $44 = $79;
    $97 = $44;
    $43 = $97;
    $98 = $43;
    $42 = $98;
    $99 = $42;
    $41 = $99;
    $100 = $41;
    $40 = $100;
    $101 = $40;
    HEAP8[$58>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($101,$58);
    $50 = $79;
    $51 = 0;
    $102 = $50;
    $103 = $51;
    $104 = $103&255;
    $49 = $102;
    $105 = $49;
    $48 = $105;
    $106 = $48;
    $107 = ((($106)) + 11|0);
    HEAP8[$107>>0] = $104;
   }
   $108 = $60;
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($109)) + -12|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($108) + ($111)|0);
   $35 = $112;
   $113 = $35;
   $114 = ((($113)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $65 = $115;
   $116 = $65;
   $117 = ($116|0)<=(0);
   if ($117) {
    $118 = $61;
    $33 = $118;
    $119 = $33;
    $32 = $119;
    $120 = $32;
    $31 = $120;
    $121 = $31;
    $30 = $121;
    $122 = $30;
    $28 = $122;
    $123 = $28;
    ;HEAP8[$27>>0]=HEAP8[$29>>0]|0;
    $26 = $123;
    $124 = $26;
    $25 = $124;
    $34 = -1;
    $125 = $34;
    $126 = (($125) - 16)|0;
    $65 = $126;
   }
   $129 = $65;
   $130 = ($129|0)<=(0);
   if ($130) {
    $65 = 2147483647;
   }
   $66 = 0;
   $131 = $60;
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($132)) + -12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($131) + ($134)|0);
   __THREW__ = 0;
   invoke_vii(353,($68|0),($135|0));
   $136 = __THREW__; __THREW__ = 0;
   $137 = $136&1;
   if ($137) {
    label = 8;
   } else {
    $16 = $68;
    $138 = $16;
    __THREW__ = 0;
    $139 = (invoke_iii(354,($138|0),(20160|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $176 = ___cxa_find_matching_catch_3(0|0)|0;
     $177 = tempRet0;
     $63 = $176;
     $64 = $177;
     __ZNSt3__26localeD2Ev($68);
     break;
    }
    __ZNSt3__26localeD2Ev($68);
    $67 = $139;
    $69 = 0;
    while(1) {
     $142 = $66;
     $143 = $65;
     $144 = ($142|0)<($143|0);
     if (!($144)) {
      break;
     }
     $145 = $60;
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($146)) + -12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($145) + ($148)|0);
     $15 = $149;
     $150 = $15;
     $14 = $150;
     $151 = $14;
     $152 = ((($151)) + 24|0);
     $153 = HEAP32[$152>>2]|0;
     $8 = $153;
     $154 = $8;
     $155 = ((($154)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($154)) + 16|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($156|0)==($158|0);
     if ($159) {
      $160 = HEAP32[$154>>2]|0;
      $161 = ((($160)) + 36|0);
      $162 = HEAP32[$161>>2]|0;
      __THREW__ = 0;
      $163 = (invoke_ii($162|0,($154|0))|0);
      $164 = __THREW__; __THREW__ = 0;
      $165 = $164&1;
      if ($165) {
       label = 8;
       break L1;
      }
      $7 = $163;
     } else {
      $166 = ((($154)) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = HEAP8[$167>>0]|0;
      $169 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($168)|0);
      $7 = $169;
     }
     $170 = $7;
     $70 = $170;
     $171 = $70;
     $172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($171,$172)|0);
     if ($173) {
      label = 20;
      break;
     }
     $187 = $70;
     $188 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($187)|0);
     $71 = $188;
     $189 = $67;
     $190 = $71;
     $4 = $189;
     $5 = 8192;
     $6 = $190;
     $191 = $4;
     $192 = $6;
     $193 = $192 << 24 >> 24;
     $194 = ($193>>>0)<(128);
     if ($194) {
      $195 = ((($191)) + 8|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $6;
      $198 = $197 << 24 >> 24;
      $199 = (($196) + ($198<<1)|0);
      $200 = HEAP16[$199>>1]|0;
      $201 = $200&65535;
      $202 = $5;
      $203 = $202&65535;
      $204 = $201 & $203;
      $205 = ($204|0)!=(0);
      if ($205) {
       break;
      }
     }
     $206 = $61;
     $207 = $71;
     __THREW__ = 0;
     invoke_vii(356,($206|0),($207|0));
     $208 = __THREW__; __THREW__ = 0;
     $209 = $208&1;
     if ($209) {
      label = 8;
      break L1;
     }
     $210 = $66;
     $211 = (($210) + 1)|0;
     $66 = $211;
     $212 = $60;
     $213 = HEAP32[$212>>2]|0;
     $214 = ((($213)) + -12|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = (($212) + ($215)|0);
     $3 = $216;
     $217 = $3;
     $2 = $217;
     $218 = $2;
     $219 = ((($218)) + 24|0);
     $220 = HEAP32[$219>>2]|0;
     $10 = $220;
     $221 = $10;
     $222 = ((($221)) + 12|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ((($221)) + 16|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($223|0)==($225|0);
     if ($226) {
      $227 = HEAP32[$221>>2]|0;
      $228 = ((($227)) + 40|0);
      $229 = HEAP32[$228>>2]|0;
      __THREW__ = 0;
      $230 = (invoke_ii($229|0,($221|0))|0);
      $231 = __THREW__; __THREW__ = 0;
      $232 = $231&1;
      if ($232) {
       label = 8;
       break L1;
      }
      $9 = $230;
     } else {
      $233 = ((($221)) + 12|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ((($234)) + 1|0);
      HEAP32[$233>>2] = $235;
      $236 = HEAP8[$234>>0]|0;
      $237 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($236)|0);
      $9 = $237;
     }
    }
    if ((label|0) == 20) {
     $174 = $69;
     $175 = $174 | 2;
     $69 = $175;
    }
    $238 = $60;
    $239 = HEAP32[$238>>2]|0;
    $240 = ((($239)) + -12|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($238) + ($241)|0);
    $11 = $242;
    $12 = 0;
    $243 = $11;
    $244 = ((($243)) + 12|0);
    $245 = HEAP32[$244>>2]|0;
    $13 = $245;
    $246 = $12;
    $247 = ((($243)) + 12|0);
    HEAP32[$247>>2] = $246;
    $248 = $66;
    $249 = ($248|0)==(0);
    if ($249) {
     $250 = $69;
     $251 = $250 | 4;
     $69 = $251;
    }
    $252 = $60;
    $253 = HEAP32[$252>>2]|0;
    $254 = ((($253)) + -12|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = (($252) + ($255)|0);
    $257 = $69;
    $19 = $256;
    $20 = $257;
    $258 = $19;
    $259 = $20;
    $17 = $258;
    $18 = $259;
    $260 = $17;
    $261 = ((($260)) + 16|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $18;
    $264 = $262 | $263;
    __THREW__ = 0;
    invoke_vii(357,($260|0),($264|0));
    $265 = __THREW__; __THREW__ = 0;
    $266 = $265&1;
    if ($266) {
     label = 8;
    } else {
     $186 = $60;
     STACKTOP = sp;return ($186|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $127 = ___cxa_find_matching_catch_3(0|0)|0;
  $128 = tempRet0;
  $63 = $127;
  $64 = $128;
 }
 $178 = $63;
 (___cxa_begin_catch(($178|0))|0);
 $179 = $60;
 $180 = HEAP32[$179>>2]|0;
 $181 = ((($180)) + -12|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($179) + ($182)|0);
 __THREW__ = 0;
 invoke_vi(355,($183|0));
 $184 = __THREW__; __THREW__ = 0;
 $185 = $184&1;
 if (!($185)) {
  ___cxa_end_catch();
  $186 = $60;
  STACKTOP = sp;return ($186|0);
 }
 $281 = ___cxa_find_matching_catch_2()|0;
 $282 = tempRet0;
 $63 = $281;
 $64 = $282;
 __THREW__ = 0;
 invoke_v(358);
 $283 = __THREW__; __THREW__ = 0;
 $284 = $283&1;
 if ($284) {
  $287 = ___cxa_find_matching_catch_3(0|0)|0;
  $288 = tempRet0;
  ___clang_call_terminate($287);
  // unreachable;
 } else {
  $285 = $63;
  $286 = $64;
  ___resumeException($285|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2,2196);
 $3 = ((($2)) + 64|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __Z8completeNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink1 = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1344|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1344|0);
 $44 = sp + 1156|0;
 $47 = sp + 1144|0;
 $51 = sp + 1128|0;
 $54 = sp + 1116|0;
 $86 = sp + 980|0;
 $98 = sp + 64|0;
 $102 = sp + 1329|0;
 $107 = sp + 56|0;
 $113 = sp + 884|0;
 $117 = sp + 864|0;
 $131 = sp + 48|0;
 $135 = sp + 1328|0;
 $140 = sp + 40|0;
 $146 = sp + 756|0;
 $150 = sp + 736|0;
 $164 = sp + 32|0;
 $168 = sp + 1327|0;
 $173 = sp + 24|0;
 $179 = sp + 628|0;
 $183 = sp + 608|0;
 $197 = sp + 16|0;
 $201 = sp + 1326|0;
 $206 = sp + 8|0;
 $212 = sp + 500|0;
 $216 = sp + 480|0;
 $228 = sp;
 $230 = sp + 1325|0;
 $231 = sp + 1324|0;
 $232 = sp + 416|0;
 $233 = sp + 400|0;
 $234 = sp + 392|0;
 $237 = sp + 376|0;
 $238 = sp + 360|0;
 $239 = sp + 352|0;
 $240 = sp + 344|0;
 $241 = sp + 328|0;
 $242 = sp + 320|0;
 $243 = sp + 312|0;
 $244 = sp + 296|0;
 $245 = sp + 288|0;
 $246 = sp + 280|0;
 $248 = sp + 260|0;
 $249 = sp + 248|0;
 $250 = sp + 104|0;
 $252 = sp + 96|0;
 $253 = sp + 92|0;
 $254 = sp + 80|0;
 $255 = sp + 68|0;
 $229 = $232;
 $256 = $229;
 ;HEAP8[$228>>0]=HEAP8[$231>>0]|0;
 $227 = $230;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($256,$230);
 HEAP32[$234>>2] = 0;
 $224 = $233;
 $225 = 10624;
 $226 = $234;
 $257 = $224;
 $258 = $225;
 $223 = $258;
 $259 = $223;
 $220 = $257;
 $221 = $259;
 $260 = $220;
 $219 = $260;
 $261 = $219;
 $218 = $261;
 $262 = $218;
 $217 = $262;
 ;HEAP32[$262>>2]=0|0;HEAP32[$262+4>>2]=0|0;HEAP32[$262+8>>2]=0|0;
 $263 = $221;
 $264 = $221;
 __THREW__ = 0;
 $265 = (invoke_ii(359,($264|0))|0);
 $266 = __THREW__; __THREW__ = 0;
 $267 = $266&1;
 if (!($267)) {
  __THREW__ = 0;
  invoke_viii(360,($260|0),($263|0),($265|0));
  $268 = __THREW__; __THREW__ = 0;
  $269 = $268&1;
  if (!($269)) {
   $270 = ((($257)) + 12|0);
   $271 = $226;
   $222 = $271;
   $272 = $222;
   $273 = HEAP32[$272>>2]|0;
   HEAP32[$270>>2] = $273;
   $214 = $232;
   $215 = $233;
   $274 = $214;
   $275 = $215;
   $213 = $275;
   $276 = $213;
   $203 = $274;
   $204 = $276;
   $277 = $203;
   $278 = $204;
   $202 = $278;
   $279 = $202;
   $199 = $277;
   $200 = $279;
   $280 = $199;
   $281 = $200;
   $198 = $281;
   $282 = $198;
   ;HEAP8[$197>>0]=HEAP8[$201>>0]|0;
   $195 = $280;
   $196 = $282;
   $283 = $195;
   $284 = $196;
   $285 = $196;
   $194 = $285;
   $286 = $194;
   __THREW__ = 0;
   invoke_viiii(361,($216|0),($283|0),($284|0),($286|0));
   $287 = __THREW__; __THREW__ = 0;
   $288 = $287&1;
   if ($288) {
    $589 = ___cxa_find_matching_catch_2()|0;
    $590 = tempRet0;
    $235 = $589;
    $236 = $590;
    __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($233);
    __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
    $652 = $235;
    $653 = $236;
    ___resumeException($652|0);
    // unreachable;
   }
   $209 = $237;
   $210 = $216;
   $211 = 0;
   $289 = $209;
   $290 = $210;
   $208 = $290;
   $291 = $208;
   ;HEAP32[$212>>2]=HEAP32[$291>>2]|0;
   ;HEAP8[$206>>0]=HEAP8[$212>>0]|0;HEAP8[$206+1>>0]=HEAP8[$212+1>>0]|0;HEAP8[$206+2>>0]=HEAP8[$212+2>>0]|0;HEAP8[$206+3>>0]=HEAP8[$212+3>>0]|0;
   $205 = $289;
   $292 = $205;
   ;HEAP32[$292>>2]=HEAP32[$206>>2]|0;
   $293 = ((($289)) + 4|0);
   $294 = $210;
   $295 = ((($294)) + 4|0);
   $207 = $295;
   $296 = $207;
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&1;
   $299 = $298&1;
   HEAP8[$293>>0] = $299;
   __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($233);
   HEAP32[$239>>2] = 1;
   $191 = $238;
   $192 = 10630;
   $193 = $239;
   $300 = $191;
   $301 = $192;
   $190 = $301;
   $302 = $190;
   $187 = $300;
   $188 = $302;
   $303 = $187;
   $186 = $303;
   $304 = $186;
   $185 = $304;
   $305 = $185;
   $184 = $305;
   ;HEAP32[$305>>2]=0|0;HEAP32[$305+4>>2]=0|0;HEAP32[$305+8>>2]=0|0;
   $306 = $188;
   $307 = $188;
   __THREW__ = 0;
   $308 = (invoke_ii(359,($307|0))|0);
   $309 = __THREW__; __THREW__ = 0;
   $310 = $309&1;
   if (!($310)) {
    __THREW__ = 0;
    invoke_viii(360,($303|0),($306|0),($308|0));
    $311 = __THREW__; __THREW__ = 0;
    $312 = $311&1;
    if (!($312)) {
     $313 = ((($300)) + 12|0);
     $314 = $193;
     $189 = $314;
     $315 = $189;
     $316 = HEAP32[$315>>2]|0;
     HEAP32[$313>>2] = $316;
     $181 = $232;
     $182 = $238;
     $317 = $181;
     $318 = $182;
     $180 = $318;
     $319 = $180;
     $170 = $317;
     $171 = $319;
     $320 = $170;
     $321 = $171;
     $169 = $321;
     $322 = $169;
     $166 = $320;
     $167 = $322;
     $323 = $166;
     $324 = $167;
     $165 = $324;
     $325 = $165;
     ;HEAP8[$164>>0]=HEAP8[$168>>0]|0;
     $162 = $323;
     $163 = $325;
     $326 = $162;
     $327 = $163;
     $328 = $163;
     $161 = $328;
     $329 = $161;
     __THREW__ = 0;
     invoke_viiii(361,($183|0),($326|0),($327|0),($329|0));
     $330 = __THREW__; __THREW__ = 0;
     $331 = $330&1;
     if ($331) {
      $591 = ___cxa_find_matching_catch_2()|0;
      $592 = tempRet0;
      $235 = $591;
      $236 = $592;
      __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($238);
      __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
      $652 = $235;
      $653 = $236;
      ___resumeException($652|0);
      // unreachable;
     }
     $176 = $240;
     $177 = $183;
     $178 = 0;
     $332 = $176;
     $333 = $177;
     $175 = $333;
     $334 = $175;
     ;HEAP32[$179>>2]=HEAP32[$334>>2]|0;
     ;HEAP8[$173>>0]=HEAP8[$179>>0]|0;HEAP8[$173+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$173+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$173+3>>0]=HEAP8[$179+3>>0]|0;
     $172 = $332;
     $335 = $172;
     ;HEAP32[$335>>2]=HEAP32[$173>>2]|0;
     $336 = ((($332)) + 4|0);
     $337 = $177;
     $338 = ((($337)) + 4|0);
     $174 = $338;
     $339 = $174;
     $340 = HEAP8[$339>>0]|0;
     $341 = $340&1;
     $342 = $341&1;
     HEAP8[$336>>0] = $342;
     __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($238);
     HEAP32[$242>>2] = 2;
     $158 = $241;
     $159 = 10639;
     $160 = $242;
     $343 = $158;
     $344 = $159;
     $157 = $344;
     $345 = $157;
     $154 = $343;
     $155 = $345;
     $346 = $154;
     $153 = $346;
     $347 = $153;
     $152 = $347;
     $348 = $152;
     $151 = $348;
     ;HEAP32[$348>>2]=0|0;HEAP32[$348+4>>2]=0|0;HEAP32[$348+8>>2]=0|0;
     $349 = $155;
     $350 = $155;
     __THREW__ = 0;
     $351 = (invoke_ii(359,($350|0))|0);
     $352 = __THREW__; __THREW__ = 0;
     $353 = $352&1;
     if (!($353)) {
      __THREW__ = 0;
      invoke_viii(360,($346|0),($349|0),($351|0));
      $354 = __THREW__; __THREW__ = 0;
      $355 = $354&1;
      if (!($355)) {
       $356 = ((($343)) + 12|0);
       $357 = $160;
       $156 = $357;
       $358 = $156;
       $359 = HEAP32[$358>>2]|0;
       HEAP32[$356>>2] = $359;
       $148 = $232;
       $149 = $241;
       $360 = $148;
       $361 = $149;
       $147 = $361;
       $362 = $147;
       $137 = $360;
       $138 = $362;
       $363 = $137;
       $364 = $138;
       $136 = $364;
       $365 = $136;
       $133 = $363;
       $134 = $365;
       $366 = $133;
       $367 = $134;
       $132 = $367;
       $368 = $132;
       ;HEAP8[$131>>0]=HEAP8[$135>>0]|0;
       $129 = $366;
       $130 = $368;
       $369 = $129;
       $370 = $130;
       $371 = $130;
       $128 = $371;
       $372 = $128;
       __THREW__ = 0;
       invoke_viiii(361,($150|0),($369|0),($370|0),($372|0));
       $373 = __THREW__; __THREW__ = 0;
       $374 = $373&1;
       if ($374) {
        $593 = ___cxa_find_matching_catch_2()|0;
        $594 = tempRet0;
        $235 = $593;
        $236 = $594;
        __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($241);
        __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
        $652 = $235;
        $653 = $236;
        ___resumeException($652|0);
        // unreachable;
       }
       $143 = $243;
       $144 = $150;
       $145 = 0;
       $375 = $143;
       $376 = $144;
       $142 = $376;
       $377 = $142;
       ;HEAP32[$146>>2]=HEAP32[$377>>2]|0;
       ;HEAP8[$140>>0]=HEAP8[$146>>0]|0;HEAP8[$140+1>>0]=HEAP8[$146+1>>0]|0;HEAP8[$140+2>>0]=HEAP8[$146+2>>0]|0;HEAP8[$140+3>>0]=HEAP8[$146+3>>0]|0;
       $139 = $375;
       $378 = $139;
       ;HEAP32[$378>>2]=HEAP32[$140>>2]|0;
       $379 = ((($375)) + 4|0);
       $380 = $144;
       $381 = ((($380)) + 4|0);
       $141 = $381;
       $382 = $141;
       $383 = HEAP8[$382>>0]|0;
       $384 = $383&1;
       $385 = $384&1;
       HEAP8[$379>>0] = $385;
       __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($241);
       HEAP32[$245>>2] = 3;
       $125 = $244;
       $126 = 10643;
       $127 = $245;
       $386 = $125;
       $387 = $126;
       $124 = $387;
       $388 = $124;
       $121 = $386;
       $122 = $388;
       $389 = $121;
       $120 = $389;
       $390 = $120;
       $119 = $390;
       $391 = $119;
       $118 = $391;
       ;HEAP32[$391>>2]=0|0;HEAP32[$391+4>>2]=0|0;HEAP32[$391+8>>2]=0|0;
       $392 = $122;
       $393 = $122;
       __THREW__ = 0;
       $394 = (invoke_ii(359,($393|0))|0);
       $395 = __THREW__; __THREW__ = 0;
       $396 = $395&1;
       if (!($396)) {
        __THREW__ = 0;
        invoke_viii(360,($389|0),($392|0),($394|0));
        $397 = __THREW__; __THREW__ = 0;
        $398 = $397&1;
        if (!($398)) {
         $399 = ((($386)) + 12|0);
         $400 = $127;
         $123 = $400;
         $401 = $123;
         $402 = HEAP32[$401>>2]|0;
         HEAP32[$399>>2] = $402;
         $115 = $232;
         $116 = $244;
         $403 = $115;
         $404 = $116;
         $114 = $404;
         $405 = $114;
         $104 = $403;
         $105 = $405;
         $406 = $104;
         $407 = $105;
         $103 = $407;
         $408 = $103;
         $100 = $406;
         $101 = $408;
         $409 = $100;
         $410 = $101;
         $99 = $410;
         $411 = $99;
         ;HEAP8[$98>>0]=HEAP8[$102>>0]|0;
         $96 = $409;
         $97 = $411;
         $412 = $96;
         $413 = $97;
         $414 = $97;
         $95 = $414;
         $415 = $95;
         __THREW__ = 0;
         invoke_viiii(361,($117|0),($412|0),($413|0),($415|0));
         $416 = __THREW__; __THREW__ = 0;
         $417 = $416&1;
         if ($417) {
          $595 = ___cxa_find_matching_catch_2()|0;
          $596 = tempRet0;
          $235 = $595;
          $236 = $596;
          __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($244);
          __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
          $652 = $235;
          $653 = $236;
          ___resumeException($652|0);
          // unreachable;
         }
         $110 = $246;
         $111 = $117;
         $112 = 0;
         $418 = $110;
         $419 = $111;
         $109 = $419;
         $420 = $109;
         ;HEAP32[$113>>2]=HEAP32[$420>>2]|0;
         ;HEAP8[$107>>0]=HEAP8[$113>>0]|0;HEAP8[$107+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$113+3>>0]|0;
         $106 = $418;
         $421 = $106;
         ;HEAP32[$421>>2]=HEAP32[$107>>2]|0;
         $422 = ((($418)) + 4|0);
         $423 = $111;
         $424 = ((($423)) + 4|0);
         $108 = $424;
         $425 = $108;
         $426 = HEAP8[$425>>0]|0;
         $427 = $426&1;
         $428 = $427&1;
         HEAP8[$422>>0] = $428;
         __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($244);
         __THREW__ = 0;
         $429 = (invoke_iii(362,($232|0),($0|0))|0);
         $430 = __THREW__; __THREW__ = 0;
         $431 = $430&1;
         if (!($431)) {
          $432 = HEAP32[$429>>2]|0;
          $247 = $432;
          __THREW__ = 0;
          $433 = (invoke_i(350)|0);
          $434 = __THREW__; __THREW__ = 0;
          $435 = $434&1;
          if (!($435)) {
           __THREW__ = 0;
           invoke_vii(351,($249|0),($1|0));
           $436 = __THREW__; __THREW__ = 0;
           $437 = $436&1;
           if (!($437)) {
            $438 = $247;
            __THREW__ = 0;
            invoke_viiiii(363,($248|0),($433|0),($249|0),($438|0),1);
            $439 = __THREW__; __THREW__ = 0;
            $440 = $439&1;
            if ($440) {
             $597 = ___cxa_find_matching_catch_2()|0;
             $598 = tempRet0;
             $235 = $597;
             $236 = $598;
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($249);
             __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
             $652 = $235;
             $653 = $236;
             ___resumeException($652|0);
             // unreachable;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($249);
            $91 = $250;
            $92 = 24;
            $441 = $91;
            $442 = ((($441)) + 64|0);
            $90 = $442;
            $443 = $90;
            $89 = $443;
            $444 = $89;
            HEAP32[$444>>2] = (6420);
            HEAP32[$443>>2] = (6404);
            HEAP32[$441>>2] = (2148);
            $445 = ((($441)) + 64|0);
            HEAP32[$445>>2] = (2188);
            $446 = ((($441)) + 8|0);
            HEAP32[$446>>2] = (2168);
            $447 = ((($441)) + 12|0);
            $63 = $441;
            $448 = 2200;
            $64 = $448;
            $65 = $447;
            $449 = $63;
            $450 = $64;
            $451 = $65;
            $452 = ((($450)) + 4|0);
            $60 = $449;
            $61 = $452;
            $62 = $451;
            $453 = $60;
            $454 = $61;
            $455 = HEAP32[$454>>2]|0;
            HEAP32[$453>>2] = $455;
            $456 = ((($454)) + 4|0);
            $457 = HEAP32[$456>>2]|0;
            $458 = HEAP32[$453>>2]|0;
            $459 = ((($458)) + -12|0);
            $460 = HEAP32[$459>>2]|0;
            $461 = (($453) + ($460)|0);
            HEAP32[$461>>2] = $457;
            $462 = ((($453)) + 4|0);
            HEAP32[$462>>2] = 0;
            $463 = HEAP32[$453>>2]|0;
            $464 = ((($463)) + -12|0);
            $465 = HEAP32[$464>>2]|0;
            $466 = (($453) + ($465)|0);
            $467 = $62;
            $58 = $466;
            $59 = $467;
            $468 = $58;
            $469 = $59;
            __THREW__ = 0;
            invoke_vii(346,($468|0),($469|0));
            $470 = __THREW__; __THREW__ = 0;
            $471 = $470&1;
            L33: do {
             if ($471) {
              $539 = ___cxa_find_matching_catch_2()|0;
              $540 = tempRet0;
              $93 = $539;
              $94 = $540;
              label = 30;
             } else {
              $472 = ((($468)) + 72|0);
              HEAP32[$472>>2] = 0;
              $473 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
              $474 = ((($468)) + 76|0);
              HEAP32[$474>>2] = $473;
              $475 = ((($449)) + 8|0);
              $476 = ((($450)) + 12|0);
              $56 = $475;
              $57 = $476;
              $477 = $56;
              $478 = $57;
              $479 = HEAP32[$478>>2]|0;
              HEAP32[$477>>2] = $479;
              $480 = ((($478)) + 4|0);
              $481 = HEAP32[$480>>2]|0;
              $482 = HEAP32[$477>>2]|0;
              $483 = ((($482)) + -12|0);
              $484 = HEAP32[$483>>2]|0;
              $485 = (($477) + ($484)|0);
              HEAP32[$485>>2] = $481;
              $486 = HEAP32[$450>>2]|0;
              HEAP32[$449>>2] = $486;
              $487 = ((($450)) + 20|0);
              $488 = HEAP32[$487>>2]|0;
              $489 = HEAP32[$449>>2]|0;
              $490 = ((($489)) + -12|0);
              $491 = HEAP32[$490>>2]|0;
              $492 = (($449) + ($491)|0);
              HEAP32[$492>>2] = $488;
              $493 = ((($450)) + 24|0);
              $494 = HEAP32[$493>>2]|0;
              $495 = ((($449)) + 8|0);
              HEAP32[$495>>2] = $494;
              HEAP32[$441>>2] = (2148);
              $496 = ((($441)) + 64|0);
              HEAP32[$496>>2] = (2188);
              $497 = ((($441)) + 8|0);
              HEAP32[$497>>2] = (2168);
              $498 = ((($441)) + 12|0);
              $499 = $92;
              $84 = $498;
              $85 = $499;
              $500 = $84;
              __THREW__ = 0;
              invoke_vi(347,($500|0));
              $501 = __THREW__; __THREW__ = 0;
              $502 = $501&1;
              do {
               if ($502) {
                $541 = ___cxa_find_matching_catch_2()|0;
                $542 = tempRet0;
                $$sink1 = $542;$$sink2 = $541;
               } else {
                HEAP32[$500>>2] = (2244);
                $503 = ((($500)) + 32|0);
                $83 = $503;
                $504 = $83;
                $82 = $504;
                $505 = $82;
                $81 = $505;
                $506 = $81;
                $80 = $506;
                ;HEAP32[$506>>2]=0|0;HEAP32[$506+4>>2]=0|0;HEAP32[$506+8>>2]=0|0;
                $77 = $504;
                $507 = $77;
                $76 = $507;
                $508 = $76;
                $75 = $508;
                $509 = $75;
                $78 = $509;
                $79 = 0;
                while(1) {
                 $510 = $79;
                 $511 = ($510>>>0)<(3);
                 if (!($511)) {
                  break;
                 }
                 $512 = $78;
                 $513 = $79;
                 $514 = (($512) + ($513<<2)|0);
                 HEAP32[$514>>2] = 0;
                 $515 = $79;
                 $516 = (($515) + 1)|0;
                 $79 = $516;
                }
                $517 = ((($500)) + 44|0);
                HEAP32[$517>>2] = 0;
                $518 = ((($500)) + 48|0);
                $519 = $85;
                HEAP32[$518>>2] = $519;
                $74 = $86;
                $520 = $74;
                $73 = $520;
                $521 = $73;
                $72 = $521;
                $522 = $72;
                $71 = $522;
                ;HEAP32[$522>>2]=0|0;HEAP32[$522+4>>2]=0|0;HEAP32[$522+8>>2]=0|0;
                $68 = $520;
                $523 = $68;
                $67 = $523;
                $524 = $67;
                $66 = $524;
                $525 = $66;
                $69 = $525;
                $70 = 0;
                while(1) {
                 $526 = $70;
                 $527 = ($526>>>0)<(3);
                 if (!($527)) {
                  break;
                 }
                 $528 = $69;
                 $529 = $70;
                 $530 = (($528) + ($529<<2)|0);
                 HEAP32[$530>>2] = 0;
                 $531 = $70;
                 $532 = (($531) + 1)|0;
                 $70 = $532;
                }
                __THREW__ = 0;
                invoke_vii(348,($500|0),($86|0));
                $533 = __THREW__; __THREW__ = 0;
                $534 = $533&1;
                if ($534) {
                 $535 = ___cxa_find_matching_catch_2()|0;
                 $536 = tempRet0;
                 $87 = $535;
                 $88 = $536;
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($86);
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($503);
                 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($500);
                 $537 = $87;
                 $538 = $88;
                 $$sink1 = $538;$$sink2 = $537;
                 break;
                }
                __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($86);
                $251 = $248;
                $547 = $251;
                $55 = $547;
                $548 = $55;
                $549 = HEAP32[$548>>2]|0;
                $52 = $548;
                $53 = $549;
                $550 = $53;
                $49 = $51;
                $50 = $550;
                $551 = $49;
                $552 = $50;
                HEAP32[$551>>2] = $552;
                $553 = HEAP32[$51>>2]|0;
                HEAP32[$54>>2] = $553;
                $554 = HEAP32[$54>>2]|0;
                HEAP32[$252>>2] = $554;
                $555 = $251;
                $48 = $555;
                $556 = $48;
                $557 = ((($556)) + 4|0);
                $558 = HEAP32[$557>>2]|0;
                $45 = $556;
                $46 = $558;
                $559 = $46;
                $42 = $44;
                $43 = $559;
                $560 = $42;
                $561 = $43;
                HEAP32[$560>>2] = $561;
                $562 = HEAP32[$44>>2]|0;
                HEAP32[$47>>2] = $562;
                $563 = HEAP32[$47>>2]|0;
                HEAP32[$253>>2] = $563;
                while(1) {
                 $40 = $252;
                 $41 = $253;
                 $564 = $40;
                 $565 = $41;
                 $38 = $564;
                 $39 = $565;
                 $566 = $38;
                 $37 = $566;
                 $567 = $37;
                 $568 = HEAP32[$567>>2]|0;
                 $569 = $39;
                 $36 = $569;
                 $570 = $36;
                 $571 = HEAP32[$570>>2]|0;
                 $572 = ($568|0)==($571|0);
                 $573 = $572 ^ 1;
                 if (!($573)) {
                  label = 45;
                  break;
                 }
                 $35 = $252;
                 $574 = $35;
                 $575 = HEAP32[$574>>2]|0;
                 __THREW__ = 0;
                 invoke_vii(351,($254|0),($575|0));
                 $576 = __THREW__; __THREW__ = 0;
                 $577 = $576&1;
                 if ($577) {
                  label = 43;
                  break;
                 }
                 $578 = ((($250)) + 8|0);
                 __THREW__ = 0;
                 $579 = (invoke_iii(364,($578|0),($254|0))|0);
                 $580 = __THREW__; __THREW__ = 0;
                 $581 = $580&1;
                 if ($581) {
                  label = 44;
                  break;
                 }
                 __THREW__ = 0;
                 (invoke_iii(365,($579|0),(10651|0))|0);
                 $582 = __THREW__; __THREW__ = 0;
                 $583 = $582&1;
                 if ($583) {
                  label = 44;
                  break;
                 }
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($254);
                 $34 = $252;
                 $584 = $34;
                 $585 = HEAP32[$584>>2]|0;
                 $586 = ((($585)) + 12|0);
                 HEAP32[$584>>2] = $586;
                }
                do {
                 if ((label|0) == 44) {
                  $601 = ___cxa_find_matching_catch_2()|0;
                  $602 = tempRet0;
                  $235 = $601;
                  $236 = $602;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($254);
                 }
                 else if ((label|0) == 45) {
                  $33 = $2;
                  $603 = $33;
                  $32 = $603;
                  $604 = $32;
                  $31 = $604;
                  $605 = $31;
                  $30 = $605;
                  $606 = $30;
                  $29 = $606;
                  $607 = $29;
                  $28 = $607;
                  $608 = $28;
                  $609 = ((($608)) + 11|0);
                  $610 = HEAP8[$609>>0]|0;
                  $611 = $610&255;
                  $612 = $611 & 128;
                  $613 = ($612|0)!=(0);
                  if ($613) {
                   $22 = $605;
                   $614 = $22;
                   $21 = $614;
                   $615 = $21;
                   $20 = $615;
                   $616 = $20;
                   $617 = HEAP32[$616>>2]|0;
                   $623 = $617;
                  } else {
                   $27 = $605;
                   $618 = $27;
                   $26 = $618;
                   $619 = $26;
                   $25 = $619;
                   $620 = $25;
                   $24 = $620;
                   $621 = $24;
                   $23 = $621;
                   $622 = $23;
                   $623 = $622;
                  }
                  $19 = $623;
                  $624 = $19;
                  $18 = $250;
                  $625 = $18;
                  $626 = ((($625)) + 12|0);
                  __THREW__ = 0;
                  invoke_vii(366,($255|0),($626|0));
                  $627 = __THREW__; __THREW__ = 0;
                  $628 = $627&1;
                  if ($628) {
                   label = 43;
                   break;
                  }
                  $17 = $255;
                  $629 = $17;
                  $16 = $629;
                  $630 = $16;
                  $15 = $630;
                  $631 = $15;
                  $14 = $631;
                  $632 = $14;
                  $13 = $632;
                  $633 = $13;
                  $12 = $633;
                  $634 = $12;
                  $635 = ((($634)) + 11|0);
                  $636 = HEAP8[$635>>0]|0;
                  $637 = $636&255;
                  $638 = $637 & 128;
                  $639 = ($638|0)!=(0);
                  if ($639) {
                   $6 = $631;
                   $640 = $6;
                   $5 = $640;
                   $641 = $5;
                   $4 = $641;
                   $642 = $4;
                   $643 = HEAP32[$642>>2]|0;
                   $649 = $643;
                   $3 = $649;
                   $650 = $3;
                   $651 = _emscripten_asm_const_iii(0, ($624|0), ($650|0))|0;
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($255);
                   __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($250);
                   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($248);
                   __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
                   STACKTOP = sp;return;
                  } else {
                   $11 = $631;
                   $644 = $11;
                   $10 = $644;
                   $645 = $10;
                   $9 = $645;
                   $646 = $9;
                   $8 = $646;
                   $647 = $8;
                   $7 = $647;
                   $648 = $7;
                   $649 = $648;
                   $3 = $649;
                   $650 = $3;
                   $651 = _emscripten_asm_const_iii(0, ($624|0), ($650|0))|0;
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($255);
                   __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($250);
                   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($248);
                   __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
                   STACKTOP = sp;return;
                  }
                 }
                } while(0);
                if ((label|0) == 43) {
                 $599 = ___cxa_find_matching_catch_2()|0;
                 $600 = tempRet0;
                 $235 = $599;
                 $236 = $600;
                }
                __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($250);
                break L33;
               }
              } while(0);
              $93 = $$sink2;
              $94 = $$sink1;
              $543 = 2200;
              __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($441,$543);
              label = 30;
             }
            } while(0);
            if ((label|0) == 30) {
             $544 = ((($441)) + 64|0);
             __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($544);
             $545 = $93;
             $546 = $94;
             $235 = $545;
             $236 = $546;
            }
            __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($248);
            __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
            $652 = $235;
            $653 = $236;
            ___resumeException($652|0);
            // unreachable;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $587 = ___cxa_find_matching_catch_2()|0;
 $588 = tempRet0;
 $235 = $587;
 $236 = $588;
 __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($232);
 $652 = $235;
 $653 = $236;
 ___resumeException($652|0);
 // unreachable;
}
function __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSB_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 113|0;
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $19 = sp + 112|0;
 $20 = sp + 111|0;
 $21 = sp + 110|0;
 $22 = sp + 109|0;
 $24 = sp + 52|0;
 $28 = sp + 32|0;
 $29 = sp + 28|0;
 $30 = sp + 108|0;
 $26 = $0;
 $27 = $1;
 $31 = $26;
 $32 = $27;
 $33 = $27;
 $25 = $33;
 $34 = $25;
 $23 = $34;
 $35 = $23;
 $17 = $24;
 $18 = $35;
 $36 = $17;
 $37 = $18;
 ;HEAP8[$13>>0]=HEAP8[$22>>0]|0;
 ;HEAP8[$14>>0]=HEAP8[$21>>0]|0;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$16>>0]=HEAP8[$19>>0]|0;
 $11 = $36;
 $12 = $37;
 $38 = $11;
 $39 = $12;
 $10 = $39;
 $40 = $10;
 $8 = $38;
 $9 = $40;
 $41 = $8;
 $42 = $9;
 $7 = $42;
 $43 = $7;
 HEAP32[$41>>2] = $43;
 $44 = HEAP32[$24>>2]|0;
 HEAP32[$29>>2] = $44;
 $2 = $3;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSK_IJEEEEEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEEiEEbEERKT_DpOT0_($28,$31,$32,22089,$29,$30);
 $6 = $28;
 $45 = $6;
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 16|0);
 $5 = $47;
 $48 = $5;
 $4 = $48;
 $49 = $4;
 $50 = ((($49)) + 12|0);
 STACKTOP = sp;return ($50|0);
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (__ZNSt3__211char_traitsIcE6lengthEPKc($6)|0);
 $8 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($4,$5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $26 = $0;
 $27 = $1;
 $28 = $26;
 $29 = $27;
 $25 = $29;
 $30 = $25;
 $24 = $30;
 $31 = $24;
 $23 = $31;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $21 = $33;
 $34 = $21;
 $35 = ((($34)) + 11|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 & 128;
 $39 = ($38|0)!=(0);
 if ($39) {
  $15 = $31;
  $40 = $15;
  $14 = $40;
  $41 = $14;
  $13 = $41;
  $42 = $13;
  $43 = HEAP32[$42>>2]|0;
  $49 = $43;
 } else {
  $20 = $31;
  $44 = $20;
  $19 = $44;
  $45 = $19;
  $18 = $45;
  $46 = $18;
  $17 = $46;
  $47 = $17;
  $16 = $47;
  $48 = $16;
  $49 = $48;
 }
 $12 = $49;
 $50 = $12;
 $51 = $27;
 $11 = $51;
 $52 = $11;
 $10 = $52;
 $53 = $10;
 $9 = $53;
 $54 = $9;
 $8 = $54;
 $55 = $8;
 $56 = ((($55)) + 11|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $58 & 128;
 $60 = ($59|0)!=(0);
 if ($60) {
  $4 = $52;
  $61 = $4;
  $3 = $61;
  $62 = $3;
  $2 = $62;
  $63 = $2;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $72 = $65;
  $73 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($28,$50,$72)|0);
  STACKTOP = sp;return ($73|0);
 } else {
  $7 = $52;
  $66 = $7;
  $6 = $66;
  $67 = $6;
  $5 = $67;
  $68 = $5;
  $69 = ((($68)) + 11|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71;
  $73 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($28,$50,$72)|0);
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __Z12completeFromNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_S5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1520|0);
 $45 = sp + 1336|0;
 $48 = sp + 1324|0;
 $52 = sp + 1308|0;
 $55 = sp + 1296|0;
 $65 = sp + 72|0;
 $70 = sp + 1511|0;
 $80 = sp + 1510|0;
 $96 = sp + 1144|0;
 $99 = sp + 1132|0;
 $137 = sp + 64|0;
 $141 = sp + 1509|0;
 $146 = sp + 56|0;
 $152 = sp + 932|0;
 $156 = sp + 912|0;
 $170 = sp + 48|0;
 $174 = sp + 1508|0;
 $179 = sp + 40|0;
 $185 = sp + 804|0;
 $189 = sp + 784|0;
 $203 = sp + 32|0;
 $207 = sp + 1507|0;
 $212 = sp + 24|0;
 $218 = sp + 676|0;
 $222 = sp + 656|0;
 $236 = sp + 16|0;
 $240 = sp + 1506|0;
 $245 = sp + 8|0;
 $251 = sp + 548|0;
 $255 = sp + 528|0;
 $267 = sp;
 $269 = sp + 1505|0;
 $270 = sp + 1504|0;
 $271 = sp + 464|0;
 $272 = sp + 448|0;
 $273 = sp + 440|0;
 $276 = sp + 424|0;
 $277 = sp + 408|0;
 $278 = sp + 400|0;
 $279 = sp + 392|0;
 $280 = sp + 376|0;
 $281 = sp + 368|0;
 $282 = sp + 360|0;
 $283 = sp + 344|0;
 $284 = sp + 336|0;
 $285 = sp + 328|0;
 $287 = sp + 176|0;
 $288 = sp + 160|0;
 $289 = sp + 148|0;
 $290 = sp + 136|0;
 $291 = sp + 124|0;
 $292 = sp + 112|0;
 $294 = sp + 104|0;
 $295 = sp + 100|0;
 $296 = sp + 88|0;
 $297 = sp + 76|0;
 $268 = $271;
 $298 = $268;
 ;HEAP8[$267>>0]=HEAP8[$270>>0]|0;
 $266 = $269;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($298,$269);
 HEAP32[$273>>2] = 0;
 $263 = $272;
 $264 = 10624;
 $265 = $273;
 $299 = $263;
 $300 = $264;
 $262 = $300;
 $301 = $262;
 $259 = $299;
 $260 = $301;
 $302 = $259;
 $258 = $302;
 $303 = $258;
 $257 = $303;
 $304 = $257;
 $256 = $304;
 ;HEAP32[$304>>2]=0|0;HEAP32[$304+4>>2]=0|0;HEAP32[$304+8>>2]=0|0;
 $305 = $260;
 $306 = $260;
 __THREW__ = 0;
 $307 = (invoke_ii(359,($306|0))|0);
 $308 = __THREW__; __THREW__ = 0;
 $309 = $308&1;
 if ($309) {
  label = 40;
 } else {
  __THREW__ = 0;
  invoke_viii(360,($302|0),($305|0),($307|0));
  $310 = __THREW__; __THREW__ = 0;
  $311 = $310&1;
  if ($311) {
   label = 40;
  } else {
   $312 = ((($299)) + 12|0);
   $313 = $265;
   $261 = $313;
   $314 = $261;
   $315 = HEAP32[$314>>2]|0;
   HEAP32[$312>>2] = $315;
   $253 = $271;
   $254 = $272;
   $316 = $253;
   $317 = $254;
   $252 = $317;
   $318 = $252;
   $242 = $316;
   $243 = $318;
   $319 = $242;
   $320 = $243;
   $241 = $320;
   $321 = $241;
   $238 = $319;
   $239 = $321;
   $322 = $238;
   $323 = $239;
   $237 = $323;
   $324 = $237;
   ;HEAP8[$236>>0]=HEAP8[$240>>0]|0;
   $234 = $322;
   $235 = $324;
   $325 = $234;
   $326 = $235;
   $327 = $235;
   $233 = $327;
   $328 = $233;
   __THREW__ = 0;
   invoke_viiii(361,($255|0),($325|0),($326|0),($328|0));
   $329 = __THREW__; __THREW__ = 0;
   $330 = $329&1;
   if ($330) {
    $656 = ___cxa_find_matching_catch_2()|0;
    $657 = tempRet0;
    $274 = $656;
    $275 = $657;
    __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($272);
    __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
    $775 = $274;
    $776 = $275;
    ___resumeException($775|0);
    // unreachable;
   }
   $248 = $276;
   $249 = $255;
   $250 = 0;
   $331 = $248;
   $332 = $249;
   $247 = $332;
   $333 = $247;
   ;HEAP32[$251>>2]=HEAP32[$333>>2]|0;
   ;HEAP8[$245>>0]=HEAP8[$251>>0]|0;HEAP8[$245+1>>0]=HEAP8[$251+1>>0]|0;HEAP8[$245+2>>0]=HEAP8[$251+2>>0]|0;HEAP8[$245+3>>0]=HEAP8[$251+3>>0]|0;
   $244 = $331;
   $334 = $244;
   ;HEAP32[$334>>2]=HEAP32[$245>>2]|0;
   $335 = ((($331)) + 4|0);
   $336 = $249;
   $337 = ((($336)) + 4|0);
   $246 = $337;
   $338 = $246;
   $339 = HEAP8[$338>>0]|0;
   $340 = $339&1;
   $341 = $340&1;
   HEAP8[$335>>0] = $341;
   __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($272);
   HEAP32[$278>>2] = 1;
   $230 = $277;
   $231 = 10630;
   $232 = $278;
   $342 = $230;
   $343 = $231;
   $229 = $343;
   $344 = $229;
   $226 = $342;
   $227 = $344;
   $345 = $226;
   $225 = $345;
   $346 = $225;
   $224 = $346;
   $347 = $224;
   $223 = $347;
   ;HEAP32[$347>>2]=0|0;HEAP32[$347+4>>2]=0|0;HEAP32[$347+8>>2]=0|0;
   $348 = $227;
   $349 = $227;
   __THREW__ = 0;
   $350 = (invoke_ii(359,($349|0))|0);
   $351 = __THREW__; __THREW__ = 0;
   $352 = $351&1;
   if ($352) {
    label = 40;
   } else {
    __THREW__ = 0;
    invoke_viii(360,($345|0),($348|0),($350|0));
    $353 = __THREW__; __THREW__ = 0;
    $354 = $353&1;
    if ($354) {
     label = 40;
    } else {
     $355 = ((($342)) + 12|0);
     $356 = $232;
     $228 = $356;
     $357 = $228;
     $358 = HEAP32[$357>>2]|0;
     HEAP32[$355>>2] = $358;
     $220 = $271;
     $221 = $277;
     $359 = $220;
     $360 = $221;
     $219 = $360;
     $361 = $219;
     $209 = $359;
     $210 = $361;
     $362 = $209;
     $363 = $210;
     $208 = $363;
     $364 = $208;
     $205 = $362;
     $206 = $364;
     $365 = $205;
     $366 = $206;
     $204 = $366;
     $367 = $204;
     ;HEAP8[$203>>0]=HEAP8[$207>>0]|0;
     $201 = $365;
     $202 = $367;
     $368 = $201;
     $369 = $202;
     $370 = $202;
     $200 = $370;
     $371 = $200;
     __THREW__ = 0;
     invoke_viiii(361,($222|0),($368|0),($369|0),($371|0));
     $372 = __THREW__; __THREW__ = 0;
     $373 = $372&1;
     if ($373) {
      $658 = ___cxa_find_matching_catch_2()|0;
      $659 = tempRet0;
      $274 = $658;
      $275 = $659;
      __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($277);
      __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
      $775 = $274;
      $776 = $275;
      ___resumeException($775|0);
      // unreachable;
     }
     $215 = $279;
     $216 = $222;
     $217 = 0;
     $374 = $215;
     $375 = $216;
     $214 = $375;
     $376 = $214;
     ;HEAP32[$218>>2]=HEAP32[$376>>2]|0;
     ;HEAP8[$212>>0]=HEAP8[$218>>0]|0;HEAP8[$212+1>>0]=HEAP8[$218+1>>0]|0;HEAP8[$212+2>>0]=HEAP8[$218+2>>0]|0;HEAP8[$212+3>>0]=HEAP8[$218+3>>0]|0;
     $211 = $374;
     $377 = $211;
     ;HEAP32[$377>>2]=HEAP32[$212>>2]|0;
     $378 = ((($374)) + 4|0);
     $379 = $216;
     $380 = ((($379)) + 4|0);
     $213 = $380;
     $381 = $213;
     $382 = HEAP8[$381>>0]|0;
     $383 = $382&1;
     $384 = $383&1;
     HEAP8[$378>>0] = $384;
     __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($277);
     HEAP32[$281>>2] = 2;
     $197 = $280;
     $198 = 10639;
     $199 = $281;
     $385 = $197;
     $386 = $198;
     $196 = $386;
     $387 = $196;
     $193 = $385;
     $194 = $387;
     $388 = $193;
     $192 = $388;
     $389 = $192;
     $191 = $389;
     $390 = $191;
     $190 = $390;
     ;HEAP32[$390>>2]=0|0;HEAP32[$390+4>>2]=0|0;HEAP32[$390+8>>2]=0|0;
     $391 = $194;
     $392 = $194;
     __THREW__ = 0;
     $393 = (invoke_ii(359,($392|0))|0);
     $394 = __THREW__; __THREW__ = 0;
     $395 = $394&1;
     if ($395) {
      label = 40;
     } else {
      __THREW__ = 0;
      invoke_viii(360,($388|0),($391|0),($393|0));
      $396 = __THREW__; __THREW__ = 0;
      $397 = $396&1;
      if ($397) {
       label = 40;
      } else {
       $398 = ((($385)) + 12|0);
       $399 = $199;
       $195 = $399;
       $400 = $195;
       $401 = HEAP32[$400>>2]|0;
       HEAP32[$398>>2] = $401;
       $187 = $271;
       $188 = $280;
       $402 = $187;
       $403 = $188;
       $186 = $403;
       $404 = $186;
       $176 = $402;
       $177 = $404;
       $405 = $176;
       $406 = $177;
       $175 = $406;
       $407 = $175;
       $172 = $405;
       $173 = $407;
       $408 = $172;
       $409 = $173;
       $171 = $409;
       $410 = $171;
       ;HEAP8[$170>>0]=HEAP8[$174>>0]|0;
       $168 = $408;
       $169 = $410;
       $411 = $168;
       $412 = $169;
       $413 = $169;
       $167 = $413;
       $414 = $167;
       __THREW__ = 0;
       invoke_viiii(361,($189|0),($411|0),($412|0),($414|0));
       $415 = __THREW__; __THREW__ = 0;
       $416 = $415&1;
       if ($416) {
        $660 = ___cxa_find_matching_catch_2()|0;
        $661 = tempRet0;
        $274 = $660;
        $275 = $661;
        __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($280);
        __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
        $775 = $274;
        $776 = $275;
        ___resumeException($775|0);
        // unreachable;
       }
       $182 = $282;
       $183 = $189;
       $184 = 0;
       $417 = $182;
       $418 = $183;
       $181 = $418;
       $419 = $181;
       ;HEAP32[$185>>2]=HEAP32[$419>>2]|0;
       ;HEAP8[$179>>0]=HEAP8[$185>>0]|0;HEAP8[$179+1>>0]=HEAP8[$185+1>>0]|0;HEAP8[$179+2>>0]=HEAP8[$185+2>>0]|0;HEAP8[$179+3>>0]=HEAP8[$185+3>>0]|0;
       $178 = $417;
       $420 = $178;
       ;HEAP32[$420>>2]=HEAP32[$179>>2]|0;
       $421 = ((($417)) + 4|0);
       $422 = $183;
       $423 = ((($422)) + 4|0);
       $180 = $423;
       $424 = $180;
       $425 = HEAP8[$424>>0]|0;
       $426 = $425&1;
       $427 = $426&1;
       HEAP8[$421>>0] = $427;
       __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($280);
       HEAP32[$284>>2] = 3;
       $164 = $283;
       $165 = 10643;
       $166 = $284;
       $428 = $164;
       $429 = $165;
       $163 = $429;
       $430 = $163;
       $160 = $428;
       $161 = $430;
       $431 = $160;
       $159 = $431;
       $432 = $159;
       $158 = $432;
       $433 = $158;
       $157 = $433;
       ;HEAP32[$433>>2]=0|0;HEAP32[$433+4>>2]=0|0;HEAP32[$433+8>>2]=0|0;
       $434 = $161;
       $435 = $161;
       __THREW__ = 0;
       $436 = (invoke_ii(359,($435|0))|0);
       $437 = __THREW__; __THREW__ = 0;
       $438 = $437&1;
       if ($438) {
        label = 40;
       } else {
        __THREW__ = 0;
        invoke_viii(360,($431|0),($434|0),($436|0));
        $439 = __THREW__; __THREW__ = 0;
        $440 = $439&1;
        if ($440) {
         label = 40;
        } else {
         $441 = ((($428)) + 12|0);
         $442 = $166;
         $162 = $442;
         $443 = $162;
         $444 = HEAP32[$443>>2]|0;
         HEAP32[$441>>2] = $444;
         $154 = $271;
         $155 = $283;
         $445 = $154;
         $446 = $155;
         $153 = $446;
         $447 = $153;
         $143 = $445;
         $144 = $447;
         $448 = $143;
         $449 = $144;
         $142 = $449;
         $450 = $142;
         $139 = $448;
         $140 = $450;
         $451 = $139;
         $452 = $140;
         $138 = $452;
         $453 = $138;
         ;HEAP8[$137>>0]=HEAP8[$141>>0]|0;
         $135 = $451;
         $136 = $453;
         $454 = $135;
         $455 = $136;
         $456 = $136;
         $134 = $456;
         $457 = $134;
         __THREW__ = 0;
         invoke_viiii(361,($156|0),($454|0),($455|0),($457|0));
         $458 = __THREW__; __THREW__ = 0;
         $459 = $458&1;
         if ($459) {
          $662 = ___cxa_find_matching_catch_2()|0;
          $663 = tempRet0;
          $274 = $662;
          $275 = $663;
          __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($283);
          __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
          $775 = $274;
          $776 = $275;
          ___resumeException($775|0);
          // unreachable;
         }
         $149 = $285;
         $150 = $156;
         $151 = 0;
         $460 = $149;
         $461 = $150;
         $148 = $461;
         $462 = $148;
         ;HEAP32[$152>>2]=HEAP32[$462>>2]|0;
         ;HEAP8[$146>>0]=HEAP8[$152>>0]|0;HEAP8[$146+1>>0]=HEAP8[$152+1>>0]|0;HEAP8[$146+2>>0]=HEAP8[$152+2>>0]|0;HEAP8[$146+3>>0]=HEAP8[$152+3>>0]|0;
         $145 = $460;
         $463 = $145;
         ;HEAP32[$463>>2]=HEAP32[$146>>2]|0;
         $464 = ((($460)) + 4|0);
         $465 = $150;
         $466 = ((($465)) + 4|0);
         $147 = $466;
         $467 = $147;
         $468 = HEAP8[$467>>0]|0;
         $469 = $468&1;
         $470 = $469&1;
         HEAP8[$464>>0] = $470;
         __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($283);
         __THREW__ = 0;
         $471 = (invoke_iii(362,($271|0),($1|0))|0);
         $472 = __THREW__; __THREW__ = 0;
         $473 = $472&1;
         if ($473) {
          label = 40;
         } else {
          $474 = HEAP32[$471>>2]|0;
          $286 = $474;
          $129 = $287;
          $130 = $0;
          $131 = 24;
          $475 = $129;
          $476 = ((($475)) + 64|0);
          $128 = $476;
          $477 = $128;
          $127 = $477;
          $478 = $127;
          HEAP32[$478>>2] = (6420);
          HEAP32[$477>>2] = (6404);
          HEAP32[$475>>2] = (2148);
          $479 = ((($475)) + 64|0);
          HEAP32[$479>>2] = (2188);
          $480 = ((($475)) + 8|0);
          HEAP32[$480>>2] = (2168);
          $481 = ((($475)) + 12|0);
          $110 = $475;
          $482 = 2200;
          $111 = $482;
          $112 = $481;
          $483 = $110;
          $484 = $111;
          $485 = $112;
          $486 = ((($484)) + 4|0);
          $107 = $483;
          $108 = $486;
          $109 = $485;
          $487 = $107;
          $488 = $108;
          $489 = HEAP32[$488>>2]|0;
          HEAP32[$487>>2] = $489;
          $490 = ((($488)) + 4|0);
          $491 = HEAP32[$490>>2]|0;
          $492 = HEAP32[$487>>2]|0;
          $493 = ((($492)) + -12|0);
          $494 = HEAP32[$493>>2]|0;
          $495 = (($487) + ($494)|0);
          HEAP32[$495>>2] = $491;
          $496 = ((($487)) + 4|0);
          HEAP32[$496>>2] = 0;
          $497 = HEAP32[$487>>2]|0;
          $498 = ((($497)) + -12|0);
          $499 = HEAP32[$498>>2]|0;
          $500 = (($487) + ($499)|0);
          $501 = $109;
          $105 = $500;
          $106 = $501;
          $502 = $105;
          $503 = $106;
          __THREW__ = 0;
          invoke_vii(346,($502|0),($503|0));
          $504 = __THREW__; __THREW__ = 0;
          $505 = $504&1;
          if ($505) {
           $562 = ___cxa_find_matching_catch_2()|0;
           $563 = tempRet0;
           $132 = $562;
           $133 = $563;
          } else {
           $506 = ((($502)) + 72|0);
           HEAP32[$506>>2] = 0;
           $507 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $508 = ((($502)) + 76|0);
           HEAP32[$508>>2] = $507;
           $509 = ((($483)) + 8|0);
           $510 = ((($484)) + 12|0);
           $103 = $509;
           $104 = $510;
           $511 = $103;
           $512 = $104;
           $513 = HEAP32[$512>>2]|0;
           HEAP32[$511>>2] = $513;
           $514 = ((($512)) + 4|0);
           $515 = HEAP32[$514>>2]|0;
           $516 = HEAP32[$511>>2]|0;
           $517 = ((($516)) + -12|0);
           $518 = HEAP32[$517>>2]|0;
           $519 = (($511) + ($518)|0);
           HEAP32[$519>>2] = $515;
           $520 = HEAP32[$484>>2]|0;
           HEAP32[$483>>2] = $520;
           $521 = ((($484)) + 20|0);
           $522 = HEAP32[$521>>2]|0;
           $523 = HEAP32[$483>>2]|0;
           $524 = ((($523)) + -12|0);
           $525 = HEAP32[$524>>2]|0;
           $526 = (($483) + ($525)|0);
           HEAP32[$526>>2] = $522;
           $527 = ((($484)) + 24|0);
           $528 = HEAP32[$527>>2]|0;
           $529 = ((($483)) + 8|0);
           HEAP32[$529>>2] = $528;
           HEAP32[$475>>2] = (2148);
           $530 = ((($475)) + 64|0);
           HEAP32[$530>>2] = (2188);
           $531 = ((($475)) + 8|0);
           HEAP32[$531>>2] = (2168);
           $532 = ((($475)) + 12|0);
           $533 = $130;
           $534 = $131;
           $122 = $532;
           $123 = $533;
           $124 = $534;
           $535 = $122;
           __THREW__ = 0;
           invoke_vi(347,($535|0));
           $536 = __THREW__; __THREW__ = 0;
           $537 = $536&1;
           do {
            if ($537) {
             $564 = ___cxa_find_matching_catch_2()|0;
             $565 = tempRet0;
             $$sink1 = $565;$$sink2 = $564;
            } else {
             HEAP32[$535>>2] = (2244);
             $538 = ((($535)) + 32|0);
             $121 = $538;
             $539 = $121;
             $120 = $539;
             $540 = $120;
             $119 = $540;
             $541 = $119;
             $118 = $541;
             ;HEAP32[$541>>2]=0|0;HEAP32[$541+4>>2]=0|0;HEAP32[$541+8>>2]=0|0;
             $115 = $539;
             $542 = $115;
             $114 = $542;
             $543 = $114;
             $113 = $543;
             $544 = $113;
             $116 = $544;
             $117 = 0;
             while(1) {
              $545 = $117;
              $546 = ($545>>>0)<(3);
              if (!($546)) {
               break;
              }
              $547 = $116;
              $548 = $117;
              $549 = (($547) + ($548<<2)|0);
              HEAP32[$549>>2] = 0;
              $550 = $117;
              $551 = (($550) + 1)|0;
              $117 = $551;
             }
             $552 = ((($535)) + 44|0);
             HEAP32[$552>>2] = 0;
             $553 = ((($535)) + 48|0);
             $554 = $124;
             HEAP32[$553>>2] = $554;
             $555 = $123;
             __THREW__ = 0;
             invoke_vii(348,($535|0),($555|0));
             $556 = __THREW__; __THREW__ = 0;
             $557 = $556&1;
             if ($557) {
              $558 = ___cxa_find_matching_catch_2()|0;
              $559 = tempRet0;
              $125 = $558;
              $126 = $559;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($538);
              __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($535);
              $560 = $125;
              $561 = $126;
              $$sink1 = $561;$$sink2 = $560;
              break;
             }
             $102 = $288;
             $570 = $102;
             $101 = $570;
             $571 = $101;
             $100 = $571;
             HEAP32[$571>>2] = 0;
             $572 = ((($571)) + 4|0);
             HEAP32[$572>>2] = 0;
             $573 = ((($571)) + 8|0);
             $98 = $573;
             HEAP32[$99>>2] = 0;
             $574 = $98;
             $97 = $99;
             $575 = $97;
             $576 = HEAP32[$575>>2]|0;
             $95 = $574;
             HEAP32[$96>>2] = $576;
             $577 = $95;
             $94 = $577;
             $93 = $96;
             $578 = $93;
             $579 = HEAP32[$578>>2]|0;
             HEAP32[$577>>2] = $579;
             while(1) {
              $92 = $287;
              $580 = $92;
              $581 = ((($580)) + 12|0);
              $91 = $581;
              $582 = $91;
              $583 = ((($582)) + 12|0);
              $584 = HEAP32[$583>>2]|0;
              $585 = ((($582)) + 16|0);
              $586 = HEAP32[$585>>2]|0;
              $587 = ($584>>>0)<($586>>>0);
              if ($587) {
               $588 = ((($582)) + 16|0);
               $589 = HEAP32[$588>>2]|0;
               $590 = ((($582)) + 12|0);
               $591 = HEAP32[$590>>2]|0;
               $592 = $589;
               $593 = $591;
               $594 = (($592) - ($593))|0;
               $90 = $594;
              } else {
               $595 = HEAP32[$582>>2]|0;
               $596 = ((($595)) + 28|0);
               $597 = HEAP32[$596>>2]|0;
               __THREW__ = 0;
               $598 = (invoke_ii($597|0,($582|0))|0);
               $599 = __THREW__; __THREW__ = 0;
               $600 = $599&1;
               if ($600) {
                label = 46;
                break;
               }
               $90 = $598;
              }
              $601 = $90;
              $602 = ($601|0)!=(0);
              if (!($602)) {
               label = 48;
               break;
              }
              $89 = $289;
              $603 = $89;
              $88 = $603;
              $604 = $88;
              $87 = $604;
              $605 = $87;
              $86 = $605;
              ;HEAP32[$605>>2]=0|0;HEAP32[$605+4>>2]=0|0;HEAP32[$605+8>>2]=0|0;
              $83 = $603;
              $606 = $83;
              $82 = $606;
              $607 = $82;
              $81 = $607;
              $608 = $81;
              $84 = $608;
              $85 = 0;
              while(1) {
               $609 = $85;
               $610 = ($609>>>0)<(3);
               if (!($610)) {
                break;
               }
               $611 = $84;
               $612 = $85;
               $613 = (($611) + ($612<<2)|0);
               HEAP32[$613>>2] = 0;
               $614 = $85;
               $615 = (($614) + 1)|0;
               $85 = $615;
              }
              __THREW__ = 0;
              (invoke_iii(349,($287|0),($289|0))|0);
              $616 = __THREW__; __THREW__ = 0;
              $617 = $616&1;
              if ($617) {
               label = 47;
               break;
              }
              $78 = $288;
              $79 = $289;
              $618 = $78;
              $619 = ((($618)) + 4|0);
              $620 = HEAP32[$619>>2]|0;
              $77 = $618;
              $621 = $77;
              $622 = ((($621)) + 8|0);
              $76 = $622;
              $623 = $76;
              $75 = $623;
              $624 = $75;
              $625 = HEAP32[$624>>2]|0;
              $626 = ($620|0)!=($625|0);
              if ($626) {
               __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($80,$618,1);
               $74 = $618;
               $627 = $74;
               $628 = ((($627)) + 8|0);
               $73 = $628;
               $629 = $73;
               $72 = $629;
               $630 = $72;
               $631 = ((($618)) + 4|0);
               $632 = HEAP32[$631>>2]|0;
               $71 = $632;
               $633 = $71;
               $634 = $79;
               $67 = $630;
               $68 = $633;
               $69 = $634;
               $635 = $67;
               $636 = $68;
               $637 = $69;
               $66 = $637;
               $638 = $66;
               ;HEAP8[$65>>0]=HEAP8[$70>>0]|0;
               $62 = $635;
               $63 = $636;
               $64 = $638;
               $639 = $62;
               $640 = $63;
               $641 = $64;
               $61 = $641;
               $642 = $61;
               $58 = $639;
               $59 = $640;
               $60 = $642;
               $643 = $59;
               $644 = $60;
               $57 = $644;
               $645 = $57;
               __THREW__ = 0;
               invoke_vii(351,($643|0),($645|0));
               $646 = __THREW__; __THREW__ = 0;
               $647 = $646&1;
               if ($647) {
                label = 47;
                break;
               }
               __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($80);
               $648 = ((($618)) + 4|0);
               $649 = HEAP32[$648>>2]|0;
               $650 = ((($649)) + 12|0);
               HEAP32[$648>>2] = $650;
              } else {
               $651 = $79;
               __THREW__ = 0;
               invoke_vii(367,($618|0),($651|0));
               $652 = __THREW__; __THREW__ = 0;
               $653 = $652&1;
               if ($653) {
                label = 47;
                break;
               }
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($289);
             }
             L58: do {
              if ((label|0) == 47) {
               $666 = ___cxa_find_matching_catch_2()|0;
               $667 = tempRet0;
               $274 = $666;
               $275 = $667;
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($289);
              }
              else if ((label|0) == 48) {
               __THREW__ = 0;
               $668 = (invoke_i(350)|0);
               $669 = __THREW__; __THREW__ = 0;
               $670 = $669&1;
               if ($670) {
                label = 46;
                break;
               }
               __THREW__ = 0;
               invoke_vii(351,($291|0),($2|0));
               $671 = __THREW__; __THREW__ = 0;
               $672 = $671&1;
               if ($672) {
                label = 46;
                break;
               }
               __THREW__ = 0;
               invoke_vii(368,($292|0),($288|0));
               $673 = __THREW__; __THREW__ = 0;
               $674 = $673&1;
               do {
                if ($674) {
                 $718 = ___cxa_find_matching_catch_2()|0;
                 $719 = tempRet0;
                 $274 = $718;
                 $275 = $719;
                } else {
                 $675 = $286;
                 __THREW__ = 0;
                 invoke_viiiiii(369,($290|0),($668|0),($291|0),($292|0),($675|0),1);
                 $676 = __THREW__; __THREW__ = 0;
                 $677 = $676&1;
                 if ($677) {
                  $720 = ___cxa_find_matching_catch_2()|0;
                  $721 = tempRet0;
                  $274 = $720;
                  $275 = $721;
                  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($292);
                  break;
                 }
                 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($292);
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($291);
                 $293 = $290;
                 $678 = $293;
                 $56 = $678;
                 $679 = $56;
                 $680 = HEAP32[$679>>2]|0;
                 $53 = $679;
                 $54 = $680;
                 $681 = $54;
                 $50 = $52;
                 $51 = $681;
                 $682 = $50;
                 $683 = $51;
                 HEAP32[$682>>2] = $683;
                 $684 = HEAP32[$52>>2]|0;
                 HEAP32[$55>>2] = $684;
                 $685 = HEAP32[$55>>2]|0;
                 HEAP32[$294>>2] = $685;
                 $686 = $293;
                 $49 = $686;
                 $687 = $49;
                 $688 = ((($687)) + 4|0);
                 $689 = HEAP32[$688>>2]|0;
                 $46 = $687;
                 $47 = $689;
                 $690 = $47;
                 $43 = $45;
                 $44 = $690;
                 $691 = $43;
                 $692 = $44;
                 HEAP32[$691>>2] = $692;
                 $693 = HEAP32[$45>>2]|0;
                 HEAP32[$48>>2] = $693;
                 $694 = HEAP32[$48>>2]|0;
                 HEAP32[$295>>2] = $694;
                 while(1) {
                  $41 = $294;
                  $42 = $295;
                  $695 = $41;
                  $696 = $42;
                  $39 = $695;
                  $40 = $696;
                  $697 = $39;
                  $38 = $697;
                  $698 = $38;
                  $699 = HEAP32[$698>>2]|0;
                  $700 = $40;
                  $37 = $700;
                  $701 = $37;
                  $702 = HEAP32[$701>>2]|0;
                  $703 = ($699|0)==($702|0);
                  $704 = $703 ^ 1;
                  if (!($704)) {
                   label = 63;
                   break;
                  }
                  $36 = $294;
                  $705 = $36;
                  $706 = HEAP32[$705>>2]|0;
                  __THREW__ = 0;
                  invoke_vii(351,($296|0),($706|0));
                  $707 = __THREW__; __THREW__ = 0;
                  $708 = $707&1;
                  if ($708) {
                   label = 61;
                   break;
                  }
                  $709 = ((($287)) + 8|0);
                  __THREW__ = 0;
                  $710 = (invoke_iii(364,($709|0),($296|0))|0);
                  $711 = __THREW__; __THREW__ = 0;
                  $712 = $711&1;
                  if ($712) {
                   label = 62;
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(365,($710|0),(10651|0))|0);
                  $713 = __THREW__; __THREW__ = 0;
                  $714 = $713&1;
                  if ($714) {
                   label = 62;
                   break;
                  }
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($296);
                  $35 = $294;
                  $715 = $35;
                  $716 = HEAP32[$715>>2]|0;
                  $717 = ((($716)) + 12|0);
                  HEAP32[$715>>2] = $717;
                 }
                 do {
                  if ((label|0) == 62) {
                   $724 = ___cxa_find_matching_catch_2()|0;
                   $725 = tempRet0;
                   $274 = $724;
                   $275 = $725;
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($296);
                  }
                  else if ((label|0) == 63) {
                   $34 = $3;
                   $726 = $34;
                   $33 = $726;
                   $727 = $33;
                   $32 = $727;
                   $728 = $32;
                   $31 = $728;
                   $729 = $31;
                   $30 = $729;
                   $730 = $30;
                   $29 = $730;
                   $731 = $29;
                   $732 = ((($731)) + 11|0);
                   $733 = HEAP8[$732>>0]|0;
                   $734 = $733&255;
                   $735 = $734 & 128;
                   $736 = ($735|0)!=(0);
                   if ($736) {
                    $23 = $728;
                    $737 = $23;
                    $22 = $737;
                    $738 = $22;
                    $21 = $738;
                    $739 = $21;
                    $740 = HEAP32[$739>>2]|0;
                    $746 = $740;
                   } else {
                    $28 = $728;
                    $741 = $28;
                    $27 = $741;
                    $742 = $27;
                    $26 = $742;
                    $743 = $26;
                    $25 = $743;
                    $744 = $25;
                    $24 = $744;
                    $745 = $24;
                    $746 = $745;
                   }
                   $20 = $746;
                   $747 = $20;
                   $19 = $287;
                   $748 = $19;
                   $749 = ((($748)) + 12|0);
                   __THREW__ = 0;
                   invoke_vii(366,($297|0),($749|0));
                   $750 = __THREW__; __THREW__ = 0;
                   $751 = $750&1;
                   if ($751) {
                    label = 61;
                    break;
                   }
                   $18 = $297;
                   $752 = $18;
                   $17 = $752;
                   $753 = $17;
                   $16 = $753;
                   $754 = $16;
                   $15 = $754;
                   $755 = $15;
                   $14 = $755;
                   $756 = $14;
                   $13 = $756;
                   $757 = $13;
                   $758 = ((($757)) + 11|0);
                   $759 = HEAP8[$758>>0]|0;
                   $760 = $759&255;
                   $761 = $760 & 128;
                   $762 = ($761|0)!=(0);
                   if ($762) {
                    $7 = $754;
                    $763 = $7;
                    $6 = $763;
                    $764 = $6;
                    $5 = $764;
                    $765 = $5;
                    $766 = HEAP32[$765>>2]|0;
                    $772 = $766;
                    $4 = $772;
                    $773 = $4;
                    $774 = _emscripten_asm_const_iii(0, ($747|0), ($773|0))|0;
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($297);
                    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($290);
                    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($288);
                    __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($287);
                    __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
                    STACKTOP = sp;return;
                   } else {
                    $12 = $754;
                    $767 = $12;
                    $11 = $767;
                    $768 = $11;
                    $10 = $768;
                    $769 = $10;
                    $9 = $769;
                    $770 = $9;
                    $8 = $770;
                    $771 = $8;
                    $772 = $771;
                    $4 = $772;
                    $773 = $4;
                    $774 = _emscripten_asm_const_iii(0, ($747|0), ($773|0))|0;
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($297);
                    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($290);
                    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($288);
                    __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($287);
                    __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
                    STACKTOP = sp;return;
                   }
                  }
                 } while(0);
                 if ((label|0) == 61) {
                  $722 = ___cxa_find_matching_catch_2()|0;
                  $723 = tempRet0;
                  $274 = $722;
                  $275 = $723;
                 }
                 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($290);
                 break L58;
                }
               } while(0);
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($291);
              }
             } while(0);
             if ((label|0) == 46) {
              $664 = ___cxa_find_matching_catch_2()|0;
              $665 = tempRet0;
              $274 = $664;
              $275 = $665;
             }
             __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($288);
             __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($287);
             __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
             $775 = $274;
             $776 = $275;
             ___resumeException($775|0);
             // unreachable;
            }
           } while(0);
           $132 = $$sink2;
           $133 = $$sink1;
           $566 = 2200;
           __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($475,$566);
          }
          $567 = ((($475)) + 64|0);
          __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($567);
          $568 = $132;
          $569 = $133;
          $$sink3 = $569;$$sink4 = $568;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 40) {
  $654 = ___cxa_find_matching_catch_2()|0;
  $655 = tempRet0;
  $$sink3 = $655;$$sink4 = $654;
 }
 $274 = $$sink4;
 $275 = $$sink3;
 __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($271);
 $775 = $274;
 $776 = $275;
 ___resumeException($775|0);
 // unreachable;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 84|0;
 $8 = sp + 16|0;
 $11 = sp + 72|0;
 $12 = sp + 111|0;
 $13 = sp + 8|0;
 $17 = sp + 110|0;
 $19 = sp;
 $21 = sp + 109|0;
 $27 = sp + 108|0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26;
 $24 = $32;
 $33 = $24;
 $34 = ((($33)) + 8|0);
 $23 = $34;
 $35 = $23;
 $22 = $35;
 $36 = $22;
 $20 = $36;
 $37 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $37;
 $15 = $31;
 $16 = $27;
 $38 = $15;
 $14 = $38;
 HEAP32[$38>>2] = 0;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($38)) + 8|0);
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $10 = $40;
 HEAP32[$11>>2] = 0;
 $41 = $10;
 $9 = $11;
 $42 = $9;
 $43 = HEAP32[$42>>2]|0;
 $3 = $13;
 ;HEAP8[$8>>0]=HEAP8[$12>>0]|0;
 $6 = $41;
 HEAP32[$7>>2] = $43;
 $44 = $6;
 $5 = $8;
 $4 = $7;
 $45 = $4;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = $26;
 $2 = $47;
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 12)&-1;
 $28 = $55;
 $56 = $28;
 $57 = ($56>>>0)>(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $28;
 __THREW__ = 0;
 invoke_vii(370,($31|0),($58|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 }
 $61 = $26;
 $62 = HEAP32[$61>>2]|0;
 $63 = $26;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $28;
 __THREW__ = 0;
 invoke_viiii(371,($31|0),($62|0),($65|0),($66|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(22088);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(10727,372);
 __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(10746,373);
 __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(10755,374);
 __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(10764,375);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 376;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_EJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 377;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIvJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_S7_EJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 378;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_SA_EE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_SA_EE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($5)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = ((($5)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($4)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($4)) + 12|0);
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
 $17 = ((($5)) + 4|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($4,$17);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + -8|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + -8|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = (2244);
 $3 = ((($2)) + 32|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $8 = sp + 64|0;
 $10 = sp + 56|0;
 $30 = sp + 48|0;
 $46 = sp + 40|0;
 $49 = sp + 32|0;
 $52 = sp + 24|0;
 $67 = sp + 16|0;
 $70 = sp + 8|0;
 $73 = sp;
 $69 = $1;
 $74 = $70;
 $75 = $74;
 HEAP32[$75>>2] = $2;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $3;
 $71 = $4;
 $72 = $5;
 $78 = $69;
 $79 = ((($78)) + 44|0);
 $80 = HEAP32[$79>>2]|0;
 $68 = $78;
 $81 = $68;
 $82 = ((($81)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)<($83>>>0);
 if ($84) {
  $6 = $78;
  $85 = $6;
  $86 = ((($85)) + 24|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($78)) + 44|0);
  HEAP32[$88>>2] = $87;
 }
 $89 = $72;
 $90 = $89 & 24;
 $91 = ($90|0)==(0);
 if ($91) {
  $7 = $0;
  $92 = $8;
  $93 = $92;
  HEAP32[$93>>2] = -1;
  $94 = (($92) + 4)|0;
  $95 = $94;
  HEAP32[$95>>2] = -1;
  $96 = $7;
  ;HEAP32[$96>>2]=0|0;HEAP32[$96+4>>2]=0|0;
  $97 = ((($96)) + 8|0);
  $98 = $8;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = $97;
  $105 = $104;
  HEAP32[$105>>2] = $100;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = $103;
  STACKTOP = sp;return;
 }
 $108 = $72;
 $109 = $108 & 24;
 $110 = ($109|0)==(24);
 $111 = $71;
 $112 = ($111|0)==(1);
 $or$cond = $110 & $112;
 if ($or$cond) {
  $9 = $0;
  $113 = $10;
  $114 = $113;
  HEAP32[$114>>2] = -1;
  $115 = (($113) + 4)|0;
  $116 = $115;
  HEAP32[$116>>2] = -1;
  $117 = $9;
  ;HEAP32[$117>>2]=0|0;HEAP32[$117+4>>2]=0|0;
  $118 = ((($117)) + 8|0);
  $119 = $10;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (($119) + 4)|0;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = $118;
  $126 = $125;
  HEAP32[$126>>2] = $121;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = $124;
  STACKTOP = sp;return;
 }
 $129 = $71;
 L12: do {
  switch ($129|0) {
  case 0:  {
   $130 = $73;
   $131 = $130;
   HEAP32[$131>>2] = 0;
   $132 = (($130) + 4)|0;
   $133 = $132;
   HEAP32[$133>>2] = 0;
   break;
  }
  case 1:  {
   $134 = $72;
   $135 = $134 & 8;
   $136 = ($135|0)!=(0);
   if ($136) {
    $11 = $78;
    $137 = $11;
    $138 = ((($137)) + 12|0);
    $139 = HEAP32[$138>>2]|0;
    $12 = $78;
    $140 = $12;
    $141 = ((($140)) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $139;
    $144 = $142;
    $145 = (($143) - ($144))|0;
    $146 = ($145|0)<(0);
    $147 = $146 << 31 >> 31;
    $148 = $73;
    $149 = $148;
    HEAP32[$149>>2] = $145;
    $150 = (($148) + 4)|0;
    $151 = $150;
    HEAP32[$151>>2] = $147;
    break L12;
   } else {
    $13 = $78;
    $152 = $13;
    $153 = ((($152)) + 24|0);
    $154 = HEAP32[$153>>2]|0;
    $14 = $78;
    $155 = $14;
    $156 = ((($155)) + 20|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $154;
    $159 = $157;
    $160 = (($158) - ($159))|0;
    $161 = ($160|0)<(0);
    $162 = $161 << 31 >> 31;
    $163 = $73;
    $164 = $163;
    HEAP32[$164>>2] = $160;
    $165 = (($163) + 4)|0;
    $166 = $165;
    HEAP32[$166>>2] = $162;
    break L12;
   }
   break;
  }
  case 2:  {
   $167 = ((($78)) + 44|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ((($78)) + 32|0);
   $28 = $169;
   $170 = $28;
   $27 = $170;
   $171 = $27;
   $26 = $171;
   $172 = $26;
   $25 = $172;
   $173 = $25;
   $24 = $173;
   $174 = $24;
   $175 = ((($174)) + 11|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $177 & 128;
   $179 = ($178|0)!=(0);
   if ($179) {
    $18 = $171;
    $180 = $18;
    $17 = $180;
    $181 = $17;
    $16 = $181;
    $182 = $16;
    $183 = HEAP32[$182>>2]|0;
    $189 = $183;
   } else {
    $23 = $171;
    $184 = $23;
    $22 = $184;
    $185 = $22;
    $21 = $185;
    $186 = $21;
    $20 = $186;
    $187 = $20;
    $19 = $187;
    $188 = $19;
    $189 = $188;
   }
   $15 = $189;
   $190 = $15;
   $191 = $168;
   $192 = $190;
   $193 = (($191) - ($192))|0;
   $194 = ($193|0)<(0);
   $195 = $194 << 31 >> 31;
   $196 = $73;
   $197 = $196;
   HEAP32[$197>>2] = $193;
   $198 = (($196) + 4)|0;
   $199 = $198;
   HEAP32[$199>>2] = $195;
   break;
  }
  default: {
   $29 = $0;
   $200 = $30;
   $201 = $200;
   HEAP32[$201>>2] = -1;
   $202 = (($200) + 4)|0;
   $203 = $202;
   HEAP32[$203>>2] = -1;
   $204 = $29;
   ;HEAP32[$204>>2]=0|0;HEAP32[$204+4>>2]=0|0;
   $205 = ((($204)) + 8|0);
   $206 = $30;
   $207 = $206;
   $208 = HEAP32[$207>>2]|0;
   $209 = (($206) + 4)|0;
   $210 = $209;
   $211 = HEAP32[$210>>2]|0;
   $212 = $205;
   $213 = $212;
   HEAP32[$213>>2] = $208;
   $214 = (($212) + 4)|0;
   $215 = $214;
   HEAP32[$215>>2] = $211;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $216 = $70;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = (($216) + 4)|0;
 $220 = $219;
 $221 = HEAP32[$220>>2]|0;
 $222 = $73;
 $223 = $222;
 $224 = HEAP32[$223>>2]|0;
 $225 = (($222) + 4)|0;
 $226 = $225;
 $227 = HEAP32[$226>>2]|0;
 $228 = (_i64Add(($224|0),($227|0),($218|0),($221|0))|0);
 $229 = tempRet0;
 $230 = $73;
 $231 = $230;
 HEAP32[$231>>2] = $228;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = $229;
 $234 = $73;
 $235 = $234;
 $236 = HEAP32[$235>>2]|0;
 $237 = (($234) + 4)|0;
 $238 = $237;
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)<(0);
 if (!($240)) {
  $241 = ((($78)) + 44|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($78)) + 32|0);
  $44 = $243;
  $244 = $44;
  $43 = $244;
  $245 = $43;
  $42 = $245;
  $246 = $42;
  $41 = $246;
  $247 = $41;
  $40 = $247;
  $248 = $40;
  $249 = ((($248)) + 11|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $250&255;
  $252 = $251 & 128;
  $253 = ($252|0)!=(0);
  if ($253) {
   $34 = $245;
   $254 = $34;
   $33 = $254;
   $255 = $33;
   $32 = $255;
   $256 = $32;
   $257 = HEAP32[$256>>2]|0;
   $263 = $257;
  } else {
   $39 = $245;
   $258 = $39;
   $38 = $258;
   $259 = $38;
   $37 = $259;
   $260 = $37;
   $36 = $260;
   $261 = $36;
   $35 = $261;
   $262 = $35;
   $263 = $262;
  }
  $31 = $263;
  $264 = $31;
  $265 = $242;
  $266 = $264;
  $267 = (($265) - ($266))|0;
  $268 = ($267|0)<(0);
  $269 = $268 << 31 >> 31;
  $270 = $73;
  $271 = $270;
  $272 = HEAP32[$271>>2]|0;
  $273 = (($270) + 4)|0;
  $274 = $273;
  $275 = HEAP32[$274>>2]|0;
  $276 = ($269|0)<($275|0);
  $277 = ($267>>>0)<($272>>>0);
  $278 = ($269|0)==($275|0);
  $279 = $278 & $277;
  $280 = $276 | $279;
  if (!($280)) {
   $297 = $73;
   $298 = $297;
   $299 = HEAP32[$298>>2]|0;
   $300 = (($297) + 4)|0;
   $301 = $300;
   $302 = HEAP32[$301>>2]|0;
   $303 = ($299|0)!=(0);
   $304 = ($302|0)!=(0);
   $305 = $303 | $304;
   if ($305) {
    $306 = $72;
    $307 = $306 & 8;
    $308 = ($307|0)!=(0);
    if ($308) {
     $47 = $78;
     $309 = $47;
     $310 = ((($309)) + 12|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ($311|0)==(0|0);
     if ($312) {
      $48 = $0;
      $313 = $49;
      $314 = $313;
      HEAP32[$314>>2] = -1;
      $315 = (($313) + 4)|0;
      $316 = $315;
      HEAP32[$316>>2] = -1;
      $317 = $48;
      ;HEAP32[$317>>2]=0|0;HEAP32[$317+4>>2]=0|0;
      $318 = ((($317)) + 8|0);
      $319 = $49;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      $322 = (($319) + 4)|0;
      $323 = $322;
      $324 = HEAP32[$323>>2]|0;
      $325 = $318;
      $326 = $325;
      HEAP32[$326>>2] = $321;
      $327 = (($325) + 4)|0;
      $328 = $327;
      HEAP32[$328>>2] = $324;
      STACKTOP = sp;return;
     }
    }
    $329 = $72;
    $330 = $329 & 16;
    $331 = ($330|0)!=(0);
    if ($331) {
     $50 = $78;
     $332 = $50;
     $333 = ((($332)) + 24|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ($334|0)==(0|0);
     if ($335) {
      $51 = $0;
      $336 = $52;
      $337 = $336;
      HEAP32[$337>>2] = -1;
      $338 = (($336) + 4)|0;
      $339 = $338;
      HEAP32[$339>>2] = -1;
      $340 = $51;
      ;HEAP32[$340>>2]=0|0;HEAP32[$340+4>>2]=0|0;
      $341 = ((($340)) + 8|0);
      $342 = $52;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = (($342) + 4)|0;
      $346 = $345;
      $347 = HEAP32[$346>>2]|0;
      $348 = $341;
      $349 = $348;
      HEAP32[$349>>2] = $344;
      $350 = (($348) + 4)|0;
      $351 = $350;
      HEAP32[$351>>2] = $347;
      STACKTOP = sp;return;
     }
    }
   }
   $352 = $72;
   $353 = $352 & 8;
   $354 = ($353|0)!=(0);
   if ($354) {
    $53 = $78;
    $355 = $53;
    $356 = ((($355)) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $54 = $78;
    $358 = $54;
    $359 = ((($358)) + 8|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = $73;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($361) + 4)|0;
    $365 = $364;
    $366 = HEAP32[$365>>2]|0;
    $367 = (($360) + ($363)|0);
    $368 = ((($78)) + 44|0);
    $369 = HEAP32[$368>>2]|0;
    $55 = $78;
    $56 = $357;
    $57 = $367;
    $58 = $369;
    $370 = $55;
    $371 = $56;
    $372 = ((($370)) + 8|0);
    HEAP32[$372>>2] = $371;
    $373 = $57;
    $374 = ((($370)) + 12|0);
    HEAP32[$374>>2] = $373;
    $375 = $58;
    $376 = ((($370)) + 16|0);
    HEAP32[$376>>2] = $375;
   }
   $377 = $72;
   $378 = $377 & 16;
   $379 = ($378|0)!=(0);
   if ($379) {
    $59 = $78;
    $380 = $59;
    $381 = ((($380)) + 20|0);
    $382 = HEAP32[$381>>2]|0;
    $60 = $78;
    $383 = $60;
    $384 = ((($383)) + 28|0);
    $385 = HEAP32[$384>>2]|0;
    $61 = $78;
    $62 = $382;
    $63 = $385;
    $386 = $61;
    $387 = $62;
    $388 = ((($386)) + 24|0);
    HEAP32[$388>>2] = $387;
    $389 = ((($386)) + 20|0);
    HEAP32[$389>>2] = $387;
    $390 = $63;
    $391 = ((($386)) + 28|0);
    HEAP32[$391>>2] = $390;
    $392 = $73;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $395 = (($392) + 4)|0;
    $396 = $395;
    $397 = HEAP32[$396>>2]|0;
    $64 = $78;
    $65 = $394;
    $398 = $64;
    $399 = $65;
    $400 = ((($398)) + 24|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = (($401) + ($399)|0);
    HEAP32[$400>>2] = $402;
   }
   $403 = $73;
   $404 = $403;
   $405 = HEAP32[$404>>2]|0;
   $406 = (($403) + 4)|0;
   $407 = $406;
   $408 = HEAP32[$407>>2]|0;
   $66 = $0;
   $409 = $67;
   $410 = $409;
   HEAP32[$410>>2] = $405;
   $411 = (($409) + 4)|0;
   $412 = $411;
   HEAP32[$412>>2] = $408;
   $413 = $66;
   ;HEAP32[$413>>2]=0|0;HEAP32[$413+4>>2]=0|0;
   $414 = ((($413)) + 8|0);
   $415 = $67;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = (($415) + 4)|0;
   $419 = $418;
   $420 = HEAP32[$419>>2]|0;
   $421 = $414;
   $422 = $421;
   HEAP32[$422>>2] = $417;
   $423 = (($421) + 4)|0;
   $424 = $423;
   HEAP32[$424>>2] = $420;
   STACKTOP = sp;return;
  }
 }
 $45 = $0;
 $281 = $46;
 $282 = $281;
 HEAP32[$282>>2] = -1;
 $283 = (($281) + 4)|0;
 $284 = $283;
 HEAP32[$284>>2] = -1;
 $285 = $45;
 ;HEAP32[$285>>2]=0|0;HEAP32[$285+4>>2]=0|0;
 $286 = ((($285)) + 8|0);
 $287 = $46;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = (($287) + 4)|0;
 $291 = $290;
 $292 = HEAP32[$291>>2]|0;
 $293 = $286;
 $294 = $293;
 HEAP32[$294>>2] = $289;
 $295 = (($293) + 4)|0;
 $296 = $295;
 HEAP32[$296>>2] = $292;
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $1;
 $6 = $3;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $2;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 FUNCTION_TABLE_viiiiii[$10 & 511]($0,$7,$15,$18,0,$19);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = $0;
 $15 = $14;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $12 = $15;
 $18 = $12;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)<($20>>>0);
 if ($21) {
  $11 = $15;
  $22 = $11;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($15)) + 44|0);
  HEAP32[$25>>2] = $24;
 }
 $26 = ((($15)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 8;
 $29 = ($28|0)!=(0);
 if ($29) {
  $10 = $15;
  $30 = $10;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($15)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32>>>0)<($34>>>0);
  if ($35) {
   $1 = $15;
   $36 = $1;
   $37 = ((($36)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $2 = $15;
   $39 = $2;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($15)) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $3 = $15;
   $4 = $38;
   $5 = $41;
   $6 = $43;
   $44 = $3;
   $45 = $4;
   $46 = ((($44)) + 8|0);
   HEAP32[$46>>2] = $45;
   $47 = $5;
   $48 = ((($44)) + 12|0);
   HEAP32[$48>>2] = $47;
   $49 = $6;
   $50 = ((($44)) + 16|0);
   HEAP32[$50>>2] = $49;
  }
  $7 = $15;
  $51 = $7;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $8 = $15;
  $54 = $8;
  $55 = ((($54)) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53>>>0)<($56>>>0);
  if ($57) {
   $9 = $15;
   $58 = $9;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP8[$60>>0]|0;
   $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
   $13 = $62;
   $64 = $13;
   STACKTOP = sp;return ($64|0);
  }
 }
 $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $13 = $63;
 $64 = $13;
 STACKTOP = sp;return ($64|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $21 = $0;
 $22 = $1;
 $23 = $21;
 $24 = ((($23)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $19 = $23;
 $26 = $19;
 $27 = ((($26)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($25>>>0)<($28>>>0);
 if ($29) {
  $18 = $23;
  $30 = $18;
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($23)) + 44|0);
  HEAP32[$33>>2] = $32;
 }
 $16 = $23;
 $34 = $16;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $9 = $23;
 $37 = $9;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36>>>0)<($39>>>0);
 do {
  if ($40) {
   $41 = $22;
   $42 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $43 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($41,$42)|0);
   if ($43) {
    $7 = $23;
    $44 = $7;
    $45 = ((($44)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $6 = $23;
    $47 = $6;
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + -1|0);
    $51 = ((($23)) + 44|0);
    $52 = HEAP32[$51>>2]|0;
    $2 = $23;
    $3 = $46;
    $4 = $50;
    $5 = $52;
    $53 = $2;
    $54 = $3;
    $55 = ((($53)) + 8|0);
    HEAP32[$55>>2] = $54;
    $56 = $4;
    $57 = ((($53)) + 12|0);
    HEAP32[$57>>2] = $56;
    $58 = $5;
    $59 = ((($53)) + 16|0);
    HEAP32[$59>>2] = $58;
    $60 = $22;
    $61 = (__ZNSt3__211char_traitsIcE7not_eofEi($60)|0);
    $20 = $61;
    $97 = $20;
    STACKTOP = sp;return ($97|0);
   }
   $62 = ((($23)) + 48|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 & 16;
   $65 = ($64|0)!=(0);
   if (!($65)) {
    $66 = $22;
    $67 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($66)|0);
    $8 = $23;
    $68 = $8;
    $69 = ((($68)) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + -1|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = (__ZNSt3__211char_traitsIcE2eqEcc($67,$72)|0);
    if (!($73)) {
     break;
    }
   }
   $10 = $23;
   $74 = $10;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $11 = $23;
   $77 = $11;
   $78 = ((($77)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($79)) + -1|0);
   $81 = ((($23)) + 44|0);
   $82 = HEAP32[$81>>2]|0;
   $12 = $23;
   $13 = $76;
   $14 = $80;
   $15 = $82;
   $83 = $12;
   $84 = $13;
   $85 = ((($83)) + 8|0);
   HEAP32[$85>>2] = $84;
   $86 = $14;
   $87 = ((($83)) + 12|0);
   HEAP32[$87>>2] = $86;
   $88 = $15;
   $89 = ((($83)) + 16|0);
   HEAP32[$89>>2] = $88;
   $90 = $22;
   $91 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($90)|0);
   $17 = $23;
   $92 = $17;
   $93 = ((($92)) + 12|0);
   $94 = HEAP32[$93>>2]|0;
   HEAP8[$94>>0] = $91;
   $95 = $22;
   $20 = $95;
   $97 = $20;
   STACKTOP = sp;return ($97|0);
  }
 } while(0);
 $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $20 = $96;
 $97 = $20;
 STACKTOP = sp;return ($97|0);
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $49 = sp;
 $52 = sp + 345|0;
 $88 = sp + 8|0;
 $80 = $0;
 $81 = $1;
 $90 = $80;
 $91 = $81;
 $92 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $93 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($91,$92)|0);
 if ($93) {
  $306 = $81;
  $307 = (__ZNSt3__211char_traitsIcE7not_eofEi($306)|0);
  $79 = $307;
  $308 = $79;
  STACKTOP = sp;return ($308|0);
 }
 $78 = $90;
 $94 = $78;
 $95 = ((($94)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $77 = $90;
 $97 = $77;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $96;
 $101 = $99;
 $102 = (($100) - ($101))|0;
 $82 = $102;
 $73 = $90;
 $103 = $73;
 $104 = ((($103)) + 24|0);
 $105 = HEAP32[$104>>2]|0;
 $72 = $90;
 $106 = $72;
 $107 = ((($106)) + 28|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($105|0)==($108|0);
 do {
  if ($109) {
   $110 = ((($90)) + 48|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 & 16;
   $113 = ($112|0)!=(0);
   if (!($113)) {
    $114 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $79 = $114;
    $308 = $79;
    STACKTOP = sp;return ($308|0);
   }
   $71 = $90;
   $115 = $71;
   $116 = ((($115)) + 24|0);
   $117 = HEAP32[$116>>2]|0;
   $42 = $90;
   $118 = $42;
   $119 = ((($118)) + 20|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $117;
   $122 = $120;
   $123 = (($121) - ($122))|0;
   $83 = $123;
   $124 = ((($90)) + 44|0);
   $125 = HEAP32[$124>>2]|0;
   $9 = $90;
   $126 = $9;
   $127 = ((($126)) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $125;
   $130 = $128;
   $131 = (($129) - ($130))|0;
   $86 = $131;
   $132 = ((($90)) + 32|0);
   __THREW__ = 0;
   invoke_vii(356,($132|0),0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if (!($134)) {
    $135 = ((($90)) + 32|0);
    $136 = ((($90)) + 32|0);
    $8 = $136;
    $137 = $8;
    $7 = $137;
    $138 = $7;
    $6 = $138;
    $139 = $6;
    $5 = $139;
    $140 = $5;
    $141 = ((($140)) + 11|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = $143 & 128;
    $145 = ($144|0)!=(0);
    if ($145) {
     $4 = $137;
     $146 = $4;
     $3 = $146;
     $147 = $3;
     $2 = $147;
     $148 = $2;
     $149 = ((($148)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $150 & 2147483647;
     $153 = $151;
    } else {
     $153 = 11;
    }
    $152 = (($153) - 1)|0;
    $10 = $135;
    $11 = $152;
    $154 = $10;
    $155 = $11;
    __THREW__ = 0;
    invoke_viii(379,($154|0),($155|0),0);
    $156 = __THREW__; __THREW__ = 0;
    $157 = $156&1;
    if (!($157)) {
     $158 = ((($90)) + 32|0);
     $25 = $158;
     $159 = $25;
     $24 = $159;
     $160 = $24;
     $23 = $160;
     $161 = $23;
     $22 = $161;
     $162 = $22;
     $21 = $162;
     $163 = $21;
     $164 = ((($163)) + 11|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = $166 & 128;
     $168 = ($167|0)!=(0);
     if ($168) {
      $15 = $160;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $13 = $170;
      $171 = $13;
      $172 = HEAP32[$171>>2]|0;
      $178 = $172;
     } else {
      $20 = $160;
      $173 = $20;
      $19 = $173;
      $174 = $19;
      $18 = $174;
      $175 = $18;
      $17 = $175;
      $176 = $17;
      $16 = $176;
      $177 = $16;
      $178 = $177;
     }
     $12 = $178;
     $179 = $12;
     $87 = $179;
     $180 = $87;
     $181 = $87;
     $182 = ((($90)) + 32|0);
     $35 = $182;
     $183 = $35;
     $34 = $183;
     $184 = $34;
     $33 = $184;
     $185 = $33;
     $32 = $185;
     $186 = $32;
     $187 = ((($186)) + 11|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = $189 & 128;
     $191 = ($190|0)!=(0);
     if ($191) {
      $28 = $183;
      $192 = $28;
      $27 = $192;
      $193 = $27;
      $26 = $193;
      $194 = $26;
      $195 = ((($194)) + 4|0);
      $196 = HEAP32[$195>>2]|0;
      $204 = $196;
     } else {
      $31 = $183;
      $197 = $31;
      $30 = $197;
      $198 = $30;
      $29 = $198;
      $199 = $29;
      $200 = ((($199)) + 11|0);
      $201 = HEAP8[$200>>0]|0;
      $202 = $201&255;
      $204 = $202;
     }
     $203 = (($181) + ($204)|0);
     $36 = $90;
     $37 = $180;
     $38 = $203;
     $205 = $36;
     $206 = $37;
     $207 = ((($205)) + 24|0);
     HEAP32[$207>>2] = $206;
     $208 = ((($205)) + 20|0);
     HEAP32[$208>>2] = $206;
     $209 = $38;
     $210 = ((($205)) + 28|0);
     HEAP32[$210>>2] = $209;
     $211 = $83;
     $39 = $90;
     $40 = $211;
     $212 = $39;
     $213 = $40;
     $214 = ((($212)) + 24|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = (($215) + ($213)|0);
     HEAP32[$214>>2] = $216;
     $41 = $90;
     $217 = $41;
     $218 = ((($217)) + 20|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $86;
     $221 = (($219) + ($220)|0);
     $222 = ((($90)) + 44|0);
     HEAP32[$222>>2] = $221;
     break;
    }
   }
   $223 = ___cxa_find_matching_catch_3(0|0)|0;
   $224 = tempRet0;
   $84 = $223;
   $85 = $224;
   $225 = $84;
   (___cxa_begin_catch(($225|0))|0);
   $226 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $79 = $226;
   ___cxa_end_catch();
   $308 = $79;
   STACKTOP = sp;return ($308|0);
  }
 } while(0);
 $43 = $90;
 $227 = $43;
 $228 = ((($227)) + 24|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = ((($229)) + 1|0);
 HEAP32[$88>>2] = $230;
 $231 = ((($90)) + 44|0);
 $50 = $88;
 $51 = $231;
 $232 = $50;
 $233 = $51;
 ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
 $47 = $232;
 $48 = $233;
 $234 = $47;
 $235 = $48;
 $44 = $49;
 $45 = $234;
 $46 = $235;
 $236 = $45;
 $237 = HEAP32[$236>>2]|0;
 $238 = $46;
 $239 = HEAP32[$238>>2]|0;
 $240 = ($237>>>0)<($239>>>0);
 $241 = $48;
 $242 = $47;
 $243 = $240 ? $241 : $242;
 $244 = HEAP32[$243>>2]|0;
 $245 = ((($90)) + 44|0);
 HEAP32[$245>>2] = $244;
 $246 = ((($90)) + 48|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $247 & 8;
 $249 = ($248|0)!=(0);
 if ($249) {
  $250 = ((($90)) + 32|0);
  $66 = $250;
  $251 = $66;
  $65 = $251;
  $252 = $65;
  $64 = $252;
  $253 = $64;
  $63 = $253;
  $254 = $63;
  $62 = $254;
  $255 = $62;
  $256 = ((($255)) + 11|0);
  $257 = HEAP8[$256>>0]|0;
  $258 = $257&255;
  $259 = $258 & 128;
  $260 = ($259|0)!=(0);
  if ($260) {
   $56 = $252;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $54 = $262;
   $263 = $54;
   $264 = HEAP32[$263>>2]|0;
   $270 = $264;
  } else {
   $61 = $252;
   $265 = $61;
   $60 = $265;
   $266 = $60;
   $59 = $266;
   $267 = $59;
   $58 = $267;
   $268 = $58;
   $57 = $268;
   $269 = $57;
   $270 = $269;
  }
  $53 = $270;
  $271 = $53;
  $89 = $271;
  $272 = $89;
  $273 = $89;
  $274 = $82;
  $275 = (($273) + ($274)|0);
  $276 = ((($90)) + 44|0);
  $277 = HEAP32[$276>>2]|0;
  $67 = $90;
  $68 = $272;
  $69 = $275;
  $70 = $277;
  $278 = $67;
  $279 = $68;
  $280 = ((($278)) + 8|0);
  HEAP32[$280>>2] = $279;
  $281 = $69;
  $282 = ((($278)) + 12|0);
  HEAP32[$282>>2] = $281;
  $283 = $70;
  $284 = ((($278)) + 16|0);
  HEAP32[$284>>2] = $283;
 }
 $285 = $81;
 $286 = $285&255;
 $75 = $90;
 $76 = $286;
 $287 = $75;
 $288 = ((($287)) + 24|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = ((($287)) + 28|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = ($289|0)==($291|0);
 if ($292) {
  $293 = HEAP32[$287>>2]|0;
  $294 = ((($293)) + 52|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = $76;
  $297 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($296)|0);
  $298 = (FUNCTION_TABLE_iii[$295 & 511]($287,$297)|0);
  $74 = $298;
 } else {
  $299 = $76;
  $300 = ((($287)) + 24|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ((($301)) + 1|0);
  HEAP32[$300>>2] = $302;
  HEAP8[$301>>0] = $299;
  $303 = $76;
  $304 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($303)|0);
  $74 = $304;
 }
 $305 = $74;
 $79 = $305;
 $308 = $79;
 STACKTOP = sp;return ($308|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($2,$3)|0);
 if ($4) {
  $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $6 = $5 ^ -1;
  $8 = $6;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = $1;
  $8 = $7;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNSt3__211char_traitsIcE2eqEcc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 << 24 >> 24;
 $6 = $3;
 $7 = $6 << 24 >> 24;
 $8 = ($5|0)==($7|0);
 STACKTOP = sp;return ($8|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_strlen($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $29 = $31;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while(1) {
  $37 = $28;
  $38 = ((($36)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)!=($39|0);
  if (!($40)) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = ((($41)) + 8|0);
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = ((($36)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -12|0);
  HEAP32[$45>>2] = $47;
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
  $53 = $16;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
 }
 $14 = $31;
 $54 = $14;
 $55 = ((($54)) + 8|0);
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = HEAP32[$31>>2]|0;
 $4 = $31;
 $59 = $4;
 $3 = $59;
 $60 = $3;
 $61 = ((($60)) + 8|0);
 $2 = $61;
 $62 = $2;
 $1 = $62;
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$59>>2]|0;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (($68|0) / 12)&-1;
 $9 = $57;
 $10 = $58;
 $11 = $69;
 $70 = $9;
 $71 = $10;
 $72 = $11;
 $6 = $70;
 $7 = $71;
 $8 = $72;
 $73 = $7;
 $5 = $73;
 $74 = $5;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $7;
 $6 = $8;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $4 = $11;
 $12 = $4;
 $3 = $12;
 $13 = $3;
 $2 = $13;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($8,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp;
 $7 = sp + 80|0;
 $20 = $0;
 $21 = $1;
 $23 = $20;
 $24 = $21;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $21;
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($23,$27);
 $28 = $21;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($23,$30);
 $12 = $23;
 $31 = $12;
 $32 = ((($31)) + 4|0);
 $11 = $32;
 $33 = $11;
 $10 = $33;
 $34 = $10;
 $22 = $34;
 $35 = $22;
 $36 = $21;
 $37 = ((($36)) + 16|0);
 $9 = $37;
 $38 = $9;
 $8 = $38;
 $39 = $8;
 $5 = $35;
 $6 = $39;
 $40 = $5;
 $41 = $6;
 ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
 $2 = $40;
 $3 = $41;
 $42 = $3;
 __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($42);
 $43 = $22;
 $44 = $21;
 $17 = $43;
 $18 = $44;
 $19 = 1;
 $45 = $17;
 $46 = $18;
 $47 = $19;
 $14 = $45;
 $15 = $46;
 $16 = $47;
 $48 = $15;
 $13 = $48;
 $49 = $13;
 __ZdlPv($49);
 STACKTOP = sp;return;
}
function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $134 = $0;
 $135 = $1;
 $137 = $134;
 $138 = $135;
 $139 = ((($137)) + 32|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($139,$138)|0);
 $140 = ((($137)) + 44|0);
 HEAP32[$140>>2] = 0;
 $141 = ((($137)) + 48|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $142 & 8;
 $144 = ($143|0)!=(0);
 if ($144) {
  $145 = ((($137)) + 32|0);
  $133 = $145;
  $146 = $133;
  $132 = $146;
  $147 = $132;
  $131 = $147;
  $148 = $131;
  $130 = $148;
  $149 = $130;
  $129 = $149;
  $150 = $129;
  $151 = ((($150)) + 11|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $153 & 128;
  $155 = ($154|0)!=(0);
  if ($155) {
   $123 = $147;
   $156 = $123;
   $122 = $156;
   $157 = $122;
   $121 = $157;
   $158 = $121;
   $159 = HEAP32[$158>>2]|0;
   $165 = $159;
  } else {
   $128 = $147;
   $160 = $128;
   $127 = $160;
   $161 = $127;
   $126 = $161;
   $162 = $126;
   $125 = $162;
   $163 = $125;
   $124 = $163;
   $164 = $124;
   $165 = $164;
  }
  $120 = $165;
  $166 = $120;
  $167 = ((($137)) + 32|0);
  $74 = $167;
  $168 = $74;
  $73 = $168;
  $169 = $73;
  $72 = $169;
  $170 = $72;
  $71 = $170;
  $171 = $71;
  $172 = ((($171)) + 11|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 128;
  $176 = ($175|0)!=(0);
  if ($176) {
   $67 = $168;
   $177 = $67;
   $66 = $177;
   $178 = $66;
   $65 = $178;
   $179 = $65;
   $180 = ((($179)) + 4|0);
   $181 = HEAP32[$180>>2]|0;
   $189 = $181;
  } else {
   $70 = $168;
   $182 = $70;
   $69 = $182;
   $183 = $69;
   $68 = $183;
   $184 = $68;
   $185 = ((($184)) + 11|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $189 = $187;
  }
  $188 = (($166) + ($189)|0);
  $190 = ((($137)) + 44|0);
  HEAP32[$190>>2] = $188;
  $191 = ((($137)) + 32|0);
  $15 = $191;
  $192 = $15;
  $14 = $192;
  $193 = $14;
  $13 = $193;
  $194 = $13;
  $12 = $194;
  $195 = $12;
  $11 = $195;
  $196 = $11;
  $197 = ((($196)) + 11|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $199 & 128;
  $201 = ($200|0)!=(0);
  if ($201) {
   $5 = $193;
   $202 = $5;
   $4 = $202;
   $203 = $4;
   $3 = $203;
   $204 = $3;
   $205 = HEAP32[$204>>2]|0;
   $211 = $205;
  } else {
   $10 = $193;
   $206 = $10;
   $9 = $206;
   $207 = $9;
   $8 = $207;
   $208 = $8;
   $7 = $208;
   $209 = $7;
   $6 = $209;
   $210 = $6;
   $211 = $210;
  }
  $2 = $211;
  $212 = $2;
  $213 = ((($137)) + 32|0);
  $29 = $213;
  $214 = $29;
  $28 = $214;
  $215 = $28;
  $27 = $215;
  $216 = $27;
  $26 = $216;
  $217 = $26;
  $25 = $217;
  $218 = $25;
  $219 = ((($218)) + 11|0);
  $220 = HEAP8[$219>>0]|0;
  $221 = $220&255;
  $222 = $221 & 128;
  $223 = ($222|0)!=(0);
  if ($223) {
   $19 = $215;
   $224 = $19;
   $18 = $224;
   $225 = $18;
   $17 = $225;
   $226 = $17;
   $227 = HEAP32[$226>>2]|0;
   $233 = $227;
  } else {
   $24 = $215;
   $228 = $24;
   $23 = $228;
   $229 = $23;
   $22 = $229;
   $230 = $22;
   $21 = $230;
   $231 = $21;
   $20 = $231;
   $232 = $20;
   $233 = $232;
  }
  $16 = $233;
  $234 = $16;
  $235 = ((($137)) + 44|0);
  $236 = HEAP32[$235>>2]|0;
  $30 = $137;
  $31 = $212;
  $32 = $234;
  $33 = $236;
  $237 = $30;
  $238 = $31;
  $239 = ((($237)) + 8|0);
  HEAP32[$239>>2] = $238;
  $240 = $32;
  $241 = ((($237)) + 12|0);
  HEAP32[$241>>2] = $240;
  $242 = $33;
  $243 = ((($237)) + 16|0);
  HEAP32[$243>>2] = $242;
 }
 $244 = ((($137)) + 48|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $245 & 16;
 $247 = ($246|0)!=(0);
 if (!($247)) {
  STACKTOP = sp;return;
 }
 $248 = ((($137)) + 32|0);
 $43 = $248;
 $249 = $43;
 $42 = $249;
 $250 = $42;
 $41 = $250;
 $251 = $41;
 $40 = $251;
 $252 = $40;
 $253 = ((($252)) + 11|0);
 $254 = HEAP8[$253>>0]|0;
 $255 = $254&255;
 $256 = $255 & 128;
 $257 = ($256|0)!=(0);
 if ($257) {
  $36 = $249;
  $258 = $36;
  $35 = $258;
  $259 = $35;
  $34 = $259;
  $260 = $34;
  $261 = ((($260)) + 4|0);
  $262 = HEAP32[$261>>2]|0;
  $269 = $262;
 } else {
  $39 = $249;
  $263 = $39;
  $38 = $263;
  $264 = $38;
  $37 = $264;
  $265 = $37;
  $266 = ((($265)) + 11|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = $268;
 }
 $136 = $269;
 $270 = ((($137)) + 32|0);
 $57 = $270;
 $271 = $57;
 $56 = $271;
 $272 = $56;
 $55 = $272;
 $273 = $55;
 $54 = $273;
 $274 = $54;
 $53 = $274;
 $275 = $53;
 $276 = ((($275)) + 11|0);
 $277 = HEAP8[$276>>0]|0;
 $278 = $277&255;
 $279 = $278 & 128;
 $280 = ($279|0)!=(0);
 if ($280) {
  $47 = $272;
  $281 = $47;
  $46 = $281;
  $282 = $46;
  $45 = $282;
  $283 = $45;
  $284 = HEAP32[$283>>2]|0;
  $290 = $284;
 } else {
  $52 = $272;
  $285 = $52;
  $51 = $285;
  $286 = $51;
  $50 = $286;
  $287 = $50;
  $49 = $287;
  $288 = $49;
  $48 = $288;
  $289 = $48;
  $290 = $289;
 }
 $44 = $290;
 $291 = $44;
 $292 = $136;
 $293 = (($291) + ($292)|0);
 $294 = ((($137)) + 44|0);
 HEAP32[$294>>2] = $293;
 $295 = ((($137)) + 32|0);
 $296 = ((($137)) + 32|0);
 $64 = $296;
 $297 = $64;
 $63 = $297;
 $298 = $63;
 $62 = $298;
 $299 = $62;
 $61 = $299;
 $300 = $61;
 $301 = ((($300)) + 11|0);
 $302 = HEAP8[$301>>0]|0;
 $303 = $302&255;
 $304 = $303 & 128;
 $305 = ($304|0)!=(0);
 if ($305) {
  $60 = $297;
  $306 = $60;
  $59 = $306;
  $307 = $59;
  $58 = $307;
  $308 = $58;
  $309 = ((($308)) + 8|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = $310 & 2147483647;
  $313 = $311;
 } else {
  $313 = 11;
 }
 $312 = (($313) - 1)|0;
 $75 = $295;
 $76 = $312;
 $314 = $75;
 $315 = $76;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($314,$315,0);
 $316 = ((($137)) + 32|0);
 $90 = $316;
 $317 = $90;
 $89 = $317;
 $318 = $89;
 $88 = $318;
 $319 = $88;
 $87 = $319;
 $320 = $87;
 $86 = $320;
 $321 = $86;
 $322 = ((($321)) + 11|0);
 $323 = HEAP8[$322>>0]|0;
 $324 = $323&255;
 $325 = $324 & 128;
 $326 = ($325|0)!=(0);
 if ($326) {
  $80 = $318;
  $327 = $80;
  $79 = $327;
  $328 = $79;
  $78 = $328;
  $329 = $78;
  $330 = HEAP32[$329>>2]|0;
  $336 = $330;
 } else {
  $85 = $318;
  $331 = $85;
  $84 = $331;
  $332 = $84;
  $83 = $332;
  $333 = $83;
  $82 = $333;
  $334 = $82;
  $81 = $334;
  $335 = $81;
  $336 = $335;
 }
 $77 = $336;
 $337 = $77;
 $338 = ((($137)) + 32|0);
 $104 = $338;
 $339 = $104;
 $103 = $339;
 $340 = $103;
 $102 = $340;
 $341 = $102;
 $101 = $341;
 $342 = $101;
 $100 = $342;
 $343 = $100;
 $344 = ((($343)) + 11|0);
 $345 = HEAP8[$344>>0]|0;
 $346 = $345&255;
 $347 = $346 & 128;
 $348 = ($347|0)!=(0);
 if ($348) {
  $94 = $340;
  $349 = $94;
  $93 = $349;
  $350 = $93;
  $92 = $350;
  $351 = $92;
  $352 = HEAP32[$351>>2]|0;
  $358 = $352;
 } else {
  $99 = $340;
  $353 = $99;
  $98 = $353;
  $354 = $98;
  $97 = $354;
  $355 = $97;
  $96 = $355;
  $356 = $96;
  $95 = $356;
  $357 = $95;
  $358 = $357;
 }
 $91 = $358;
 $359 = $91;
 $360 = ((($137)) + 32|0);
 $114 = $360;
 $361 = $114;
 $113 = $361;
 $362 = $113;
 $112 = $362;
 $363 = $112;
 $111 = $363;
 $364 = $111;
 $365 = ((($364)) + 11|0);
 $366 = HEAP8[$365>>0]|0;
 $367 = $366&255;
 $368 = $367 & 128;
 $369 = ($368|0)!=(0);
 if ($369) {
  $107 = $361;
  $370 = $107;
  $106 = $370;
  $371 = $106;
  $105 = $371;
  $372 = $105;
  $373 = ((($372)) + 4|0);
  $374 = HEAP32[$373>>2]|0;
  $382 = $374;
 } else {
  $110 = $361;
  $375 = $110;
  $109 = $375;
  $376 = $109;
  $108 = $376;
  $377 = $108;
  $378 = ((($377)) + 11|0);
  $379 = HEAP8[$378>>0]|0;
  $380 = $379&255;
  $382 = $380;
 }
 $381 = (($359) + ($382)|0);
 $115 = $137;
 $116 = $337;
 $117 = $381;
 $383 = $115;
 $384 = $116;
 $385 = ((($383)) + 24|0);
 HEAP32[$385>>2] = $384;
 $386 = ((($383)) + 20|0);
 HEAP32[$386>>2] = $384;
 $387 = $117;
 $388 = ((($383)) + 28|0);
 HEAP32[$388>>2] = $387;
 $389 = ((($137)) + 48|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = $390 & 3;
 $392 = ($391|0)!=(0);
 if (!($392)) {
  STACKTOP = sp;return;
 }
 $393 = $136;
 $118 = $137;
 $119 = $393;
 $394 = $118;
 $395 = $119;
 $396 = ((($394)) + 24|0);
 $397 = HEAP32[$396>>2]|0;
 $398 = (($397) + ($395)|0);
 HEAP32[$396>>2] = $398;
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP8[$4>>0]|0;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp + 48|0;
 $13 = sp + 8|0;
 $16 = sp + 36|0;
 $17 = sp + 93|0;
 $18 = sp;
 $25 = sp + 92|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $20 = $29;
 $19 = $29;
 $30 = $19;
 HEAP32[$30>>2] = 0;
 $31 = ((($26)) + 8|0);
 ;HEAP8[$18>>0]=HEAP8[$25>>0]|0;
 $15 = $31;
 HEAP32[$16>>2] = 0;
 $32 = $15;
 $14 = $16;
 $33 = $14;
 $34 = HEAP32[$33>>2]|0;
 $8 = $18;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $11 = $32;
 HEAP32[$12>>2] = $34;
 $35 = $11;
 $10 = $13;
 $9 = $12;
 $36 = $9;
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $6 = $26;
 $38 = $6;
 $39 = ((($38)) + 4|0);
 $5 = $39;
 $40 = $5;
 $4 = $40;
 $41 = $4;
 $3 = $41;
 $42 = $3;
 $2 = $42;
 $43 = $2;
 $7 = $26;
 $44 = $7;
 HEAP32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_S8_EEEEENSH_INS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $17 = sp + 8|0;
 $20 = sp + 330|0;
 $53 = sp;
 $56 = sp + 329|0;
 $78 = sp + 44|0;
 $81 = sp + 328|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $75 = $1;
 $76 = $2;
 $77 = $3;
 $86 = $75;
 $87 = $76;
 $88 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESL_RKT_($86,$78,$87)|0);
 $79 = $88;
 $89 = $79;
 $90 = HEAP32[$89>>2]|0;
 $80 = $90;
 HEAP8[$81>>0] = 0;
 $91 = $79;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 do {
  if ($93) {
   $94 = $77;
   $74 = $94;
   $95 = $74;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeIJNS_4pairIS7_S8_EEEEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINS5_ISM_EEEEEEDpOT_($82,$86,$95);
   $96 = HEAP32[$78>>2]|0;
   $97 = $79;
   $39 = $82;
   $98 = $39;
   $38 = $98;
   $99 = $38;
   $37 = $99;
   $100 = $37;
   $101 = HEAP32[$100>>2]|0;
   __THREW__ = 0;
   invoke_viiii(380,($86|0),($96|0),($97|0),($101|0));
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if (!($103)) {
    $35 = $82;
    $104 = $35;
    $34 = $104;
    $105 = $34;
    $33 = $105;
    $106 = $33;
    $107 = HEAP32[$106>>2]|0;
    $36 = $107;
    $32 = $104;
    $108 = $32;
    $31 = $108;
    $109 = $31;
    HEAP32[$109>>2] = 0;
    $110 = $36;
    $80 = $110;
    HEAP8[$81>>0] = 1;
    $30 = $82;
    $111 = $30;
    $27 = $111;
    $28 = 0;
    $112 = $27;
    $26 = $112;
    $113 = $26;
    $25 = $113;
    $114 = $25;
    $115 = HEAP32[$114>>2]|0;
    $29 = $115;
    $116 = $28;
    $7 = $112;
    $117 = $7;
    $6 = $117;
    $118 = $6;
    HEAP32[$118>>2] = $116;
    $119 = $29;
    $120 = ($119|0)!=(0|0);
    if (!($120)) {
     break;
    }
    $5 = $112;
    $121 = $5;
    $4 = $121;
    $122 = $4;
    $123 = ((($122)) + 4|0);
    $124 = $29;
    $23 = $123;
    $24 = $124;
    $125 = $23;
    $126 = ((($125)) + 4|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&1;
    if ($128) {
     $129 = HEAP32[$125>>2]|0;
     $130 = $24;
     $131 = ((($130)) + 16|0);
     $22 = $131;
     $132 = $22;
     $21 = $132;
     $133 = $21;
     $18 = $129;
     $19 = $133;
     $134 = $18;
     $135 = $19;
     ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
     $15 = $134;
     $16 = $135;
     $136 = $16;
     __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($136);
    }
    $137 = $24;
    $138 = ($137|0)!=(0|0);
    if (!($138)) {
     break;
    }
    $139 = HEAP32[$125>>2]|0;
    $140 = $24;
    $12 = $139;
    $13 = $140;
    $14 = 1;
    $141 = $12;
    $142 = $13;
    $143 = $14;
    $9 = $141;
    $10 = $142;
    $11 = $143;
    $144 = $10;
    $8 = $144;
    $145 = $8;
    __ZdlPv($145);
    break;
   }
   $146 = ___cxa_find_matching_catch_2()|0;
   $147 = tempRet0;
   $83 = $146;
   $84 = $147;
   $66 = $82;
   $148 = $66;
   $63 = $148;
   $64 = 0;
   $149 = $63;
   $62 = $149;
   $150 = $62;
   $61 = $150;
   $151 = $61;
   $152 = HEAP32[$151>>2]|0;
   $65 = $152;
   $153 = $64;
   $43 = $149;
   $154 = $43;
   $42 = $154;
   $155 = $42;
   HEAP32[$155>>2] = $153;
   $156 = $65;
   $157 = ($156|0)!=(0|0);
   if (!($157)) {
    $195 = $83;
    $196 = $84;
    ___resumeException($195|0);
    // unreachable;
   }
   $41 = $149;
   $158 = $41;
   $40 = $158;
   $159 = $40;
   $160 = ((($159)) + 4|0);
   $161 = $65;
   $59 = $160;
   $60 = $161;
   $162 = $59;
   $163 = ((($162)) + 4|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&1;
   if ($165) {
    $166 = HEAP32[$162>>2]|0;
    $167 = $60;
    $168 = ((($167)) + 16|0);
    $58 = $168;
    $169 = $58;
    $57 = $169;
    $170 = $57;
    $54 = $166;
    $55 = $170;
    $171 = $54;
    $172 = $55;
    ;HEAP8[$53>>0]=HEAP8[$56>>0]|0;
    $51 = $171;
    $52 = $172;
    $173 = $52;
    __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($173);
   }
   $174 = $60;
   $175 = ($174|0)!=(0|0);
   if (!($175)) {
    $195 = $83;
    $196 = $84;
    ___resumeException($195|0);
    // unreachable;
   }
   $176 = HEAP32[$162>>2]|0;
   $177 = $60;
   $48 = $176;
   $49 = $177;
   $50 = 1;
   $178 = $48;
   $179 = $49;
   $180 = $50;
   $45 = $178;
   $46 = $179;
   $47 = $180;
   $181 = $46;
   $44 = $181;
   $182 = $44;
   __ZdlPv($182);
   $195 = $83;
   $196 = $84;
   ___resumeException($195|0);
   // unreachable;
  }
 } while(0);
 $183 = $80;
 $67 = $85;
 $68 = $183;
 $184 = $67;
 $185 = $68;
 HEAP32[$184>>2] = $185;
 $71 = $0;
 $72 = $85;
 $73 = $81;
 $186 = $71;
 $187 = $72;
 $70 = $187;
 $188 = $70;
 ;HEAP32[$186>>2]=HEAP32[$188>>2]|0;
 $189 = ((($186)) + 4|0);
 $190 = $73;
 $69 = $190;
 $191 = $69;
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&1;
 $194 = $193&1;
 HEAP8[$189>>0] = $194;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESL_RKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $25 = sp + 8|0;
 $28 = sp + 653|0;
 $66 = sp + 404|0;
 $67 = sp + 400|0;
 $99 = sp;
 $102 = sp + 652|0;
 $140 = sp + 116|0;
 $141 = sp + 112|0;
 $163 = $0;
 $164 = $1;
 $165 = $2;
 $167 = $163;
 $161 = $167;
 $168 = $161;
 $160 = $168;
 $169 = $160;
 $170 = ((($169)) + 4|0);
 $159 = $170;
 $171 = $159;
 $158 = $171;
 $172 = $158;
 $157 = $172;
 $173 = $157;
 $156 = $173;
 $174 = $156;
 $175 = HEAP32[$174>>2]|0;
 $166 = $175;
 $176 = $166;
 $177 = ($176|0)!=(0|0);
 if (!($177)) {
  $155 = $167;
  $459 = $155;
  $460 = ((($459)) + 4|0);
  $154 = $460;
  $461 = $154;
  $153 = $461;
  $462 = $153;
  $152 = $462;
  $463 = $152;
  $151 = $463;
  $464 = $151;
  $465 = $164;
  HEAP32[$465>>2] = $464;
  $466 = $164;
  $467 = HEAP32[$466>>2]|0;
  $162 = $467;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 while(1) {
  $79 = $167;
  $178 = $79;
  $179 = ((($178)) + 8|0);
  $78 = $179;
  $180 = $78;
  $77 = $180;
  $181 = $77;
  $182 = $165;
  $183 = $166;
  $184 = ((($183)) + 16|0);
  $74 = $181;
  $75 = $182;
  $76 = $184;
  $185 = $74;
  $186 = $75;
  $187 = $76;
  $71 = $185;
  $72 = $186;
  $73 = $187;
  $188 = $72;
  $189 = $73;
  $69 = $188;
  $70 = $189;
  $190 = $69;
  $191 = $70;
  $64 = $190;
  $65 = $191;
  $192 = $64;
  $62 = $192;
  $193 = $62;
  $61 = $193;
  $194 = $61;
  $60 = $194;
  $195 = $60;
  $59 = $195;
  $196 = $59;
  $197 = ((($196)) + 11|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $199 & 128;
  $201 = ($200|0)!=(0);
  if ($201) {
   $55 = $193;
   $202 = $55;
   $54 = $202;
   $203 = $54;
   $53 = $203;
   $204 = $53;
   $205 = ((($204)) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $213 = $206;
  } else {
   $58 = $193;
   $207 = $58;
   $57 = $207;
   $208 = $57;
   $56 = $208;
   $209 = $56;
   $210 = ((($209)) + 11|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = $212;
  }
  HEAP32[$66>>2] = $213;
  $214 = $65;
  $52 = $214;
  $215 = $52;
  $51 = $215;
  $216 = $51;
  $50 = $216;
  $217 = $50;
  $49 = $217;
  $218 = $49;
  $219 = ((($218)) + 11|0);
  $220 = HEAP8[$219>>0]|0;
  $221 = $220&255;
  $222 = $221 & 128;
  $223 = ($222|0)!=(0);
  if ($223) {
   $45 = $215;
   $224 = $45;
   $44 = $224;
   $225 = $44;
   $43 = $225;
   $226 = $43;
   $227 = ((($226)) + 4|0);
   $228 = HEAP32[$227>>2]|0;
   $235 = $228;
  } else {
   $48 = $215;
   $229 = $48;
   $47 = $229;
   $230 = $47;
   $46 = $230;
   $231 = $46;
   $232 = ((($231)) + 11|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $234;
  }
  HEAP32[$67>>2] = $235;
  $42 = $192;
  $236 = $42;
  $41 = $236;
  $237 = $41;
  $40 = $237;
  $238 = $40;
  $39 = $238;
  $239 = $39;
  $38 = $239;
  $240 = $38;
  $241 = ((($240)) + 11|0);
  $242 = HEAP8[$241>>0]|0;
  $243 = $242&255;
  $244 = $243 & 128;
  $245 = ($244|0)!=(0);
  if ($245) {
   $32 = $237;
   $246 = $32;
   $31 = $246;
   $247 = $31;
   $30 = $247;
   $248 = $30;
   $249 = HEAP32[$248>>2]|0;
   $255 = $249;
  } else {
   $37 = $237;
   $250 = $37;
   $36 = $250;
   $251 = $36;
   $35 = $251;
   $252 = $35;
   $34 = $252;
   $253 = $34;
   $33 = $253;
   $254 = $33;
   $255 = $254;
  }
  $29 = $255;
  $256 = $29;
  $257 = $65;
  $19 = $257;
  $258 = $19;
  $18 = $258;
  $259 = $18;
  $17 = $259;
  $260 = $17;
  $16 = $260;
  $261 = $16;
  $15 = $261;
  $262 = $15;
  $263 = ((($262)) + 11|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 & 128;
  $267 = ($266|0)!=(0);
  if ($267) {
   $9 = $259;
   $268 = $9;
   $8 = $268;
   $269 = $8;
   $7 = $269;
   $270 = $7;
   $271 = HEAP32[$270>>2]|0;
   $277 = $271;
  } else {
   $14 = $259;
   $272 = $14;
   $13 = $272;
   $273 = $13;
   $12 = $273;
   $274 = $12;
   $11 = $274;
   $275 = $11;
   $10 = $275;
   $276 = $10;
   $277 = $276;
  }
  $6 = $277;
  $278 = $6;
  $26 = $66;
  $27 = $67;
  $279 = $26;
  $280 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $279;
  $24 = $280;
  $281 = $24;
  $282 = $23;
  $20 = $25;
  $21 = $281;
  $22 = $282;
  $283 = $21;
  $284 = HEAP32[$283>>2]|0;
  $285 = $22;
  $286 = HEAP32[$285>>2]|0;
  $287 = ($284>>>0)<($286>>>0);
  $288 = $24;
  $289 = $23;
  $290 = $287 ? $288 : $289;
  $291 = HEAP32[$290>>2]|0;
  __THREW__ = 0;
  $292 = (invoke_iiii(381,($256|0),($278|0),($291|0))|0);
  $293 = __THREW__; __THREW__ = 0;
  $294 = $293&1;
  if ($294) {
   label = 22;
   break;
  }
  $68 = $292;
  $295 = $68;
  $296 = ($295|0)!=(0);
  do {
   if ($296) {
    $297 = $68;
    $63 = $297;
   } else {
    $298 = HEAP32[$66>>2]|0;
    $299 = HEAP32[$67>>2]|0;
    $300 = ($298>>>0)<($299>>>0);
    if ($300) {
     $63 = -1;
     break;
    }
    $301 = HEAP32[$66>>2]|0;
    $302 = HEAP32[$67>>2]|0;
    $303 = ($301>>>0)>($302>>>0);
    if ($303) {
     $63 = 1;
     break;
    } else {
     $63 = 0;
     break;
    }
   }
  } while(0);
  $306 = $63;
  $307 = ($306|0)<(0);
  if ($307) {
   $308 = $166;
   $309 = HEAP32[$308>>2]|0;
   $310 = ($309|0)!=(0|0);
   $311 = $166;
   if (!($310)) {
    label = 26;
    break;
   }
   $312 = HEAP32[$311>>2]|0;
   $166 = $312;
   continue;
  }
  $5 = $167;
  $316 = $5;
  $317 = ((($316)) + 8|0);
  $4 = $317;
  $318 = $4;
  $3 = $318;
  $319 = $3;
  $320 = $166;
  $321 = ((($320)) + 16|0);
  $322 = $165;
  $148 = $319;
  $149 = $321;
  $150 = $322;
  $323 = $148;
  $324 = $149;
  $325 = $150;
  $145 = $323;
  $146 = $324;
  $147 = $325;
  $326 = $146;
  $327 = $147;
  $143 = $326;
  $144 = $327;
  $328 = $143;
  $329 = $144;
  $138 = $328;
  $139 = $329;
  $330 = $138;
  $136 = $330;
  $331 = $136;
  $135 = $331;
  $332 = $135;
  $134 = $332;
  $333 = $134;
  $133 = $333;
  $334 = $133;
  $335 = ((($334)) + 11|0);
  $336 = HEAP8[$335>>0]|0;
  $337 = $336&255;
  $338 = $337 & 128;
  $339 = ($338|0)!=(0);
  if ($339) {
   $129 = $331;
   $340 = $129;
   $128 = $340;
   $341 = $128;
   $127 = $341;
   $342 = $127;
   $343 = ((($342)) + 4|0);
   $344 = HEAP32[$343>>2]|0;
   $351 = $344;
  } else {
   $132 = $331;
   $345 = $132;
   $131 = $345;
   $346 = $131;
   $130 = $346;
   $347 = $130;
   $348 = ((($347)) + 11|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = $350;
  }
  HEAP32[$140>>2] = $351;
  $352 = $139;
  $126 = $352;
  $353 = $126;
  $125 = $353;
  $354 = $125;
  $124 = $354;
  $355 = $124;
  $123 = $355;
  $356 = $123;
  $357 = ((($356)) + 11|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = $358&255;
  $360 = $359 & 128;
  $361 = ($360|0)!=(0);
  if ($361) {
   $119 = $353;
   $362 = $119;
   $118 = $362;
   $363 = $118;
   $117 = $363;
   $364 = $117;
   $365 = ((($364)) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $373 = $366;
  } else {
   $122 = $353;
   $367 = $122;
   $121 = $367;
   $368 = $121;
   $120 = $368;
   $369 = $120;
   $370 = ((($369)) + 11|0);
   $371 = HEAP8[$370>>0]|0;
   $372 = $371&255;
   $373 = $372;
  }
  HEAP32[$141>>2] = $373;
  $116 = $330;
  $374 = $116;
  $115 = $374;
  $375 = $115;
  $114 = $375;
  $376 = $114;
  $113 = $376;
  $377 = $113;
  $112 = $377;
  $378 = $112;
  $379 = ((($378)) + 11|0);
  $380 = HEAP8[$379>>0]|0;
  $381 = $380&255;
  $382 = $381 & 128;
  $383 = ($382|0)!=(0);
  if ($383) {
   $106 = $375;
   $384 = $106;
   $105 = $384;
   $385 = $105;
   $104 = $385;
   $386 = $104;
   $387 = HEAP32[$386>>2]|0;
   $393 = $387;
  } else {
   $111 = $375;
   $388 = $111;
   $110 = $388;
   $389 = $110;
   $109 = $389;
   $390 = $109;
   $108 = $390;
   $391 = $108;
   $107 = $391;
   $392 = $107;
   $393 = $392;
  }
  $103 = $393;
  $394 = $103;
  $395 = $139;
  $93 = $395;
  $396 = $93;
  $92 = $396;
  $397 = $92;
  $91 = $397;
  $398 = $91;
  $90 = $398;
  $399 = $90;
  $89 = $399;
  $400 = $89;
  $401 = ((($400)) + 11|0);
  $402 = HEAP8[$401>>0]|0;
  $403 = $402&255;
  $404 = $403 & 128;
  $405 = ($404|0)!=(0);
  if ($405) {
   $83 = $397;
   $406 = $83;
   $82 = $406;
   $407 = $82;
   $81 = $407;
   $408 = $81;
   $409 = HEAP32[$408>>2]|0;
   $415 = $409;
  } else {
   $88 = $397;
   $410 = $88;
   $87 = $410;
   $411 = $87;
   $86 = $411;
   $412 = $86;
   $85 = $412;
   $413 = $85;
   $84 = $413;
   $414 = $84;
   $415 = $414;
  }
  $80 = $415;
  $416 = $80;
  $100 = $140;
  $101 = $141;
  $417 = $100;
  $418 = $101;
  ;HEAP8[$99>>0]=HEAP8[$102>>0]|0;
  $97 = $417;
  $98 = $418;
  $419 = $98;
  $420 = $97;
  $94 = $99;
  $95 = $419;
  $96 = $420;
  $421 = $95;
  $422 = HEAP32[$421>>2]|0;
  $423 = $96;
  $424 = HEAP32[$423>>2]|0;
  $425 = ($422>>>0)<($424>>>0);
  $426 = $98;
  $427 = $97;
  $428 = $425 ? $426 : $427;
  $429 = HEAP32[$428>>2]|0;
  __THREW__ = 0;
  $430 = (invoke_iiii(381,($394|0),($416|0),($429|0))|0);
  $431 = __THREW__; __THREW__ = 0;
  $432 = $431&1;
  if ($432) {
   label = 47;
   break;
  }
  $142 = $430;
  $433 = $142;
  $434 = ($433|0)!=(0);
  do {
   if ($434) {
    $435 = $142;
    $137 = $435;
   } else {
    $436 = HEAP32[$140>>2]|0;
    $437 = HEAP32[$141>>2]|0;
    $438 = ($436>>>0)<($437>>>0);
    if ($438) {
     $137 = -1;
     break;
    }
    $439 = HEAP32[$140>>2]|0;
    $440 = HEAP32[$141>>2]|0;
    $441 = ($439>>>0)>($440>>>0);
    if ($441) {
     $137 = 1;
     break;
    } else {
     $137 = 0;
     break;
    }
   }
  } while(0);
  $444 = $137;
  $445 = ($444|0)<(0);
  $446 = $166;
  if (!($445)) {
   label = 52;
   break;
  }
  $447 = ((($446)) + 4|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = ($448|0)!=(0|0);
  $450 = $166;
  if (!($449)) {
   label = 51;
   break;
  }
  $451 = ((($450)) + 4|0);
  $452 = HEAP32[$451>>2]|0;
  $166 = $452;
 }
 if ((label|0) == 22) {
  $304 = ___cxa_find_matching_catch_3(0|0)|0;
  $305 = tempRet0;
  ___clang_call_terminate($304);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $313 = $164;
  HEAP32[$313>>2] = $311;
  $314 = $164;
  $315 = HEAP32[$314>>2]|0;
  $162 = $315;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 47) {
  $442 = ___cxa_find_matching_catch_3(0|0)|0;
  $443 = tempRet0;
  ___clang_call_terminate($442);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $453 = $164;
  HEAP32[$453>>2] = $450;
  $454 = $164;
  $455 = HEAP32[$454>>2]|0;
  $456 = ((($455)) + 4|0);
  $162 = $456;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 52) {
  $457 = $164;
  HEAP32[$457>>2] = $446;
  $458 = $164;
  $162 = $458;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeIJNS_4pairIS7_S8_EEEEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINS5_ISM_EEEEEEDpOT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $27 = sp + 24|0;
 $32 = sp + 403|0;
 $43 = sp + 244|0;
 $44 = sp + 16|0;
 $47 = sp + 232|0;
 $48 = sp + 224|0;
 $49 = sp + 8|0;
 $54 = sp + 200|0;
 $78 = sp;
 $81 = sp + 401|0;
 $98 = sp + 400|0;
 $99 = sp + 32|0;
 $95 = $1;
 $96 = $2;
 $100 = $95;
 $94 = $100;
 $101 = $94;
 $102 = ((($101)) + 4|0);
 $93 = $102;
 $103 = $93;
 $92 = $103;
 $104 = $92;
 $97 = $104;
 $$expand_i1_val = 0;
 HEAP8[$98>>0] = $$expand_i1_val;
 $105 = $97;
 $63 = $105;
 $64 = 1;
 $106 = $63;
 $107 = $64;
 $60 = $106;
 $61 = $107;
 $62 = 0;
 $108 = $60;
 $109 = $61;
 $59 = $108;
 $110 = ($109>>>0)>(134217727);
 if ($110) {
  $111 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($111);
  ___cxa_throw(($111|0),(1888|0),(327|0));
  // unreachable;
 }
 $112 = $61;
 $113 = $112<<5;
 $58 = $113;
 $114 = $58;
 $115 = (__Znwj($114)|0);
 $116 = $97;
 $55 = $99;
 $56 = $116;
 $57 = 0;
 $117 = $55;
 $118 = $56;
 HEAP32[$117>>2] = $118;
 $119 = ((($117)) + 4|0);
 $120 = $57;
 $121 = $120&1;
 $122 = $121&1;
 HEAP8[$119>>0] = $122;
 $51 = $0;
 $52 = $115;
 $53 = $99;
 $123 = $51;
 $124 = $52;
 $125 = $53;
 $50 = $125;
 $126 = $50;
 ;HEAP32[$54>>2]=HEAP32[$126>>2]|0;HEAP32[$54+4>>2]=HEAP32[$126+4>>2]|0;
 ;HEAP8[$49>>0]=HEAP8[$54>>0]|0;HEAP8[$49+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$54+7>>0]|0;
 $46 = $123;
 HEAP32[$47>>2] = $124;
 $127 = $46;
 $45 = $47;
 $128 = $45;
 $129 = HEAP32[$128>>2]|0;
 $39 = $49;
 $130 = $39;
 ;HEAP32[$48>>2]=HEAP32[$130>>2]|0;HEAP32[$48+4>>2]=HEAP32[$130+4>>2]|0;
 ;HEAP8[$44>>0]=HEAP8[$48>>0]|0;HEAP8[$44+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$48+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$48+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$48+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$48+6>>0]|0;HEAP8[$44+7>>0]=HEAP8[$48+7>>0]|0;
 $42 = $127;
 HEAP32[$43>>2] = $129;
 $131 = $42;
 $41 = $43;
 $132 = $41;
 $133 = HEAP32[$132>>2]|0;
 HEAP32[$131>>2] = $133;
 $134 = ((($131)) + 4|0);
 $40 = $44;
 $135 = $40;
 ;HEAP32[$134>>2]=HEAP32[$135>>2]|0;HEAP32[$134+4>>2]=HEAP32[$135+4>>2]|0;
 $136 = $97;
 $38 = $0;
 $137 = $38;
 $37 = $137;
 $138 = $37;
 $36 = $138;
 $139 = $36;
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($140)) + 16|0);
 $35 = $141;
 $142 = $35;
 $34 = $142;
 $143 = $34;
 $144 = $96;
 $33 = $144;
 $145 = $33;
 $29 = $136;
 $30 = $143;
 $31 = $145;
 $146 = $29;
 $147 = $30;
 $148 = $31;
 $28 = $148;
 $149 = $28;
 ;HEAP8[$27>>0]=HEAP8[$32>>0]|0;
 $24 = $146;
 $25 = $147;
 $26 = $149;
 $150 = $24;
 $151 = $25;
 $152 = $26;
 $23 = $152;
 $153 = $23;
 $20 = $150;
 $21 = $151;
 $22 = $153;
 $154 = $21;
 $155 = $22;
 $19 = $155;
 $156 = $19;
 $16 = $154;
 $17 = $156;
 $18 = 0;
 $157 = $16;
 $158 = $17;
 $15 = $158;
 $159 = $15;
 $12 = $157;
 $13 = $159;
 $160 = $12;
 $161 = $13;
 $11 = $161;
 $162 = $11;
 ;HEAP32[$160>>2]=HEAP32[$162>>2]|0;HEAP32[$160+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$160+8>>2]=HEAP32[$162+8>>2]|0;
 $163 = $13;
 $8 = $163;
 $164 = $8;
 $7 = $164;
 $165 = $7;
 $6 = $165;
 $166 = $6;
 $9 = $166;
 $10 = 0;
 while(1) {
  $167 = $10;
  $168 = ($167>>>0)<(3);
  if (!($168)) {
   break;
  }
  $169 = $9;
  $170 = $10;
  $171 = (($169) + ($170<<2)|0);
  HEAP32[$171>>2] = 0;
  $172 = $10;
  $173 = (($172) + 1)|0;
  $10 = $173;
 }
 $174 = ((($157)) + 12|0);
 $175 = $17;
 $176 = ((($175)) + 12|0);
 $14 = $176;
 $177 = $14;
 $178 = HEAP32[$177>>2]|0;
 HEAP32[$174>>2] = $178;
 $5 = $0;
 $179 = $5;
 $4 = $179;
 $180 = $4;
 $3 = $180;
 $181 = $3;
 $182 = ((($181)) + 4|0);
 $183 = ((($182)) + 4|0);
 HEAP8[$183>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$98>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$98>>0]|0;
 $184 = $$pre_trunc&1;
 if ($184) {
  STACKTOP = sp;return;
 }
 $91 = $0;
 $185 = $91;
 $88 = $185;
 $89 = 0;
 $186 = $88;
 $87 = $186;
 $187 = $87;
 $86 = $187;
 $188 = $86;
 $189 = HEAP32[$188>>2]|0;
 $90 = $189;
 $190 = $89;
 $68 = $186;
 $191 = $68;
 $67 = $191;
 $192 = $67;
 HEAP32[$192>>2] = $190;
 $193 = $90;
 $194 = ($193|0)!=(0|0);
 if (!($194)) {
  STACKTOP = sp;return;
 }
 $66 = $186;
 $195 = $66;
 $65 = $195;
 $196 = $65;
 $197 = ((($196)) + 4|0);
 $198 = $90;
 $84 = $197;
 $85 = $198;
 $199 = $84;
 $200 = ((($199)) + 4|0);
 $201 = HEAP8[$200>>0]|0;
 $202 = $201&1;
 if ($202) {
  $203 = HEAP32[$199>>2]|0;
  $204 = $85;
  $205 = ((($204)) + 16|0);
  $83 = $205;
  $206 = $83;
  $82 = $206;
  $207 = $82;
  $79 = $203;
  $80 = $207;
  $208 = $79;
  $209 = $80;
  ;HEAP8[$78>>0]=HEAP8[$81>>0]|0;
  $76 = $208;
  $77 = $209;
  $210 = $77;
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($210);
 }
 $211 = $85;
 $212 = ($211|0)!=(0|0);
 if (!($212)) {
  STACKTOP = sp;return;
 }
 $213 = HEAP32[$199>>2]|0;
 $214 = $85;
 $73 = $213;
 $74 = $214;
 $75 = 1;
 $215 = $73;
 $216 = $74;
 $217 = $75;
 $70 = $215;
 $71 = $216;
 $72 = $217;
 $218 = $71;
 $69 = $218;
 $219 = $69;
 __ZdlPv($219);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $15;
 $20 = $18;
 HEAP32[$20>>2] = 0;
 $21 = $18;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = $16;
 $24 = $18;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $18;
 $27 = $17;
 HEAP32[$27>>2] = $26;
 $14 = $19;
 $28 = $14;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $10 = $19;
  $32 = $10;
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $4 = $19;
  $35 = $4;
  HEAP32[$35>>2] = $34;
 }
 $9 = $19;
 $36 = $9;
 $37 = ((($36)) + 4|0);
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $6;
 $5 = $40;
 $41 = $5;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = HEAP32[$43>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($42,$44);
 $13 = $19;
 $45 = $13;
 $46 = ((($45)) + 8|0);
 $12 = $46;
 $47 = $12;
 $11 = $47;
 $48 = $11;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ($6|0)==(0);
 if ($7) {
  $12 = 0;
 } else {
  $8 = $3;
  $9 = $4;
  $10 = $5;
  $11 = (_memcmp($8,$9,$10)|0);
  $12 = $11;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $9 = $6;
 $10 = $5;
 $11 = ($9|0)==($10|0);
 $12 = $6;
 $13 = ((($12)) + 12|0);
 $14 = $11&1;
 HEAP8[$13>>0] = $14;
 while(1) {
  $15 = $6;
  $16 = $5;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   label = 17;
   break;
  }
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&1;
  $24 = $23 ^ 1;
  if (!($24)) {
   label = 17;
   break;
  }
  $25 = $6;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $4 = $27;
  $28 = $4;
  $29 = $4;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($28|0)==($32|0);
  $34 = $6;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  if ($33) {
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $7 = $40;
   $41 = $7;
   $42 = ($41|0)!=(0|0);
   if (!($42)) {
    label = 8;
    break;
   }
   $43 = $7;
   $44 = ((($43)) + 12|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&1;
   if ($46) {
    label = 8;
    break;
   }
   $47 = $6;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $6 = $49;
   $50 = $6;
   $51 = ((($50)) + 12|0);
   HEAP8[$51>>0] = 1;
   $52 = $6;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $6 = $54;
   $55 = $6;
   $56 = $5;
   $57 = ($55|0)==($56|0);
   $58 = $6;
   $59 = ((($58)) + 12|0);
   $60 = $57&1;
   HEAP8[$59>>0] = $60;
   $61 = $7;
   $62 = ((($61)) + 12|0);
   HEAP8[$62>>0] = 1;
   continue;
  } else {
   $85 = HEAP32[$38>>2]|0;
   $8 = $85;
   $86 = $8;
   $87 = ($86|0)!=(0|0);
   if (!($87)) {
    label = 14;
    break;
   }
   $88 = $8;
   $89 = ((($88)) + 12|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&1;
   if ($91) {
    label = 14;
    break;
   }
   $92 = $6;
   $93 = ((($92)) + 8|0);
   $94 = HEAP32[$93>>2]|0;
   $6 = $94;
   $95 = $6;
   $96 = ((($95)) + 12|0);
   HEAP8[$96>>0] = 1;
   $97 = $6;
   $98 = ((($97)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $6 = $99;
   $100 = $6;
   $101 = $5;
   $102 = ($100|0)==($101|0);
   $103 = $6;
   $104 = ((($103)) + 12|0);
   $105 = $102&1;
   HEAP8[$104>>0] = $105;
   $106 = $8;
   $107 = ((($106)) + 12|0);
   HEAP8[$107>>0] = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $63 = $6;
  $3 = $63;
  $64 = $3;
  $65 = $3;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = ($64|0)==($68|0);
  if (!($69)) {
   $70 = $6;
   $71 = ((($70)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $6 = $72;
   $73 = $6;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($73);
  }
  $74 = $6;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $6 = $76;
  $77 = $6;
  $78 = ((($77)) + 12|0);
  HEAP8[$78>>0] = 1;
  $79 = $6;
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $6 = $81;
  $82 = $6;
  $83 = ((($82)) + 12|0);
  HEAP8[$83>>0] = 0;
  $84 = $6;
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($84);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $108 = $6;
  $2 = $108;
  $109 = $2;
  $110 = $2;
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = HEAP32[$112>>2]|0;
  $114 = ($109|0)==($113|0);
  if ($114) {
   $115 = $6;
   $116 = ((($115)) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   $6 = $117;
   $118 = $6;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($118);
  }
  $119 = $6;
  $120 = ((($119)) + 8|0);
  $121 = HEAP32[$120>>2]|0;
  $6 = $121;
  $122 = $6;
  $123 = ((($122)) + 12|0);
  HEAP8[$123>>0] = 1;
  $124 = $6;
  $125 = ((($124)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $6 = $126;
  $127 = $6;
  $128 = ((($127)) + 12|0);
  HEAP8[$128>>0] = 0;
  $129 = $6;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($129);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = $2;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $15;
 }
 $20 = $2;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $22;
 $25 = $2;
 $1 = $25;
 $26 = $1;
 $27 = $1;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($26|0)==($30|0);
 $32 = $3;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 4|0);
 $$sink = $31 ? $35 : $36;
 HEAP32[$$sink>>2] = $32;
 $37 = $2;
 $38 = $3;
 HEAP32[$38>>2] = $37;
 $39 = $3;
 $40 = $2;
 $41 = ((($40)) + 8|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  $14 = $2;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 8|0);
  HEAP32[$16>>2] = $13;
 }
 $17 = $2;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $1 = $22;
 $23 = $1;
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = ($23|0)==($27|0);
 $29 = $3;
 $30 = $2;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 4|0);
 $$sink = $28 ? $32 : $33;
 HEAP32[$$sink>>2] = $29;
 $34 = $2;
 $35 = $3;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = $34;
 $37 = $3;
 $38 = $2;
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = $37;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSK_IJEEEEEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $28 = sp + 8|0;
 $31 = sp + 346|0;
 $57 = sp;
 $60 = sp + 345|0;
 $84 = sp + 44|0;
 $87 = sp + 344|0;
 $88 = sp + 24|0;
 $91 = sp + 12|0;
 $79 = $1;
 $80 = $2;
 $81 = $3;
 $82 = $4;
 $83 = $5;
 $92 = $79;
 $93 = $80;
 $94 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESL_RKT_($92,$84,$93)|0);
 $85 = $94;
 $95 = $85;
 $96 = HEAP32[$95>>2]|0;
 $86 = $96;
 HEAP8[$87>>0] = 0;
 $97 = $85;
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0|0);
 do {
  if ($99) {
   $100 = $81;
   $78 = $100;
   $101 = $78;
   $102 = $82;
   $43 = $102;
   $103 = $43;
   $104 = $83;
   $42 = $104;
   $105 = $42;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSK_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINS5_ISS_EEEEEEDpOT_($88,$92,$101,$103,$105);
   $106 = HEAP32[$84>>2]|0;
   $107 = $85;
   $14 = $88;
   $108 = $14;
   $13 = $108;
   $109 = $13;
   $12 = $109;
   $110 = $12;
   $111 = HEAP32[$110>>2]|0;
   __THREW__ = 0;
   invoke_viiii(380,($92|0),($106|0),($107|0),($111|0));
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if (!($113)) {
    $10 = $88;
    $114 = $10;
    $9 = $114;
    $115 = $9;
    $8 = $115;
    $116 = $8;
    $117 = HEAP32[$116>>2]|0;
    $11 = $117;
    $7 = $114;
    $118 = $7;
    $6 = $118;
    $119 = $6;
    HEAP32[$119>>2] = 0;
    $120 = $11;
    $86 = $120;
    HEAP8[$87>>0] = 1;
    $41 = $88;
    $121 = $41;
    $38 = $121;
    $39 = 0;
    $122 = $38;
    $37 = $122;
    $123 = $37;
    $36 = $123;
    $124 = $36;
    $125 = HEAP32[$124>>2]|0;
    $40 = $125;
    $126 = $39;
    $18 = $122;
    $127 = $18;
    $17 = $127;
    $128 = $17;
    HEAP32[$128>>2] = $126;
    $129 = $40;
    $130 = ($129|0)!=(0|0);
    if (!($130)) {
     break;
    }
    $16 = $122;
    $131 = $16;
    $15 = $131;
    $132 = $15;
    $133 = ((($132)) + 4|0);
    $134 = $40;
    $34 = $133;
    $35 = $134;
    $135 = $34;
    $136 = ((($135)) + 4|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&1;
    if ($138) {
     $139 = HEAP32[$135>>2]|0;
     $140 = $35;
     $141 = ((($140)) + 16|0);
     $33 = $141;
     $142 = $33;
     $32 = $142;
     $143 = $32;
     $29 = $139;
     $30 = $143;
     $144 = $29;
     $145 = $30;
     ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
     $26 = $144;
     $27 = $145;
     $146 = $27;
     __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($146);
    }
    $147 = $35;
    $148 = ($147|0)!=(0|0);
    if (!($148)) {
     break;
    }
    $149 = HEAP32[$135>>2]|0;
    $150 = $35;
    $23 = $149;
    $24 = $150;
    $25 = 1;
    $151 = $23;
    $152 = $24;
    $153 = $25;
    $20 = $151;
    $21 = $152;
    $22 = $153;
    $154 = $21;
    $19 = $154;
    $155 = $19;
    __ZdlPv($155);
    break;
   }
   $156 = ___cxa_find_matching_catch_2()|0;
   $157 = tempRet0;
   $89 = $156;
   $90 = $157;
   $70 = $88;
   $158 = $70;
   $67 = $158;
   $68 = 0;
   $159 = $67;
   $66 = $159;
   $160 = $66;
   $65 = $160;
   $161 = $65;
   $162 = HEAP32[$161>>2]|0;
   $69 = $162;
   $163 = $68;
   $47 = $159;
   $164 = $47;
   $46 = $164;
   $165 = $46;
   HEAP32[$165>>2] = $163;
   $166 = $69;
   $167 = ($166|0)!=(0|0);
   if (!($167)) {
    $205 = $89;
    $206 = $90;
    ___resumeException($205|0);
    // unreachable;
   }
   $45 = $159;
   $168 = $45;
   $44 = $168;
   $169 = $44;
   $170 = ((($169)) + 4|0);
   $171 = $69;
   $63 = $170;
   $64 = $171;
   $172 = $63;
   $173 = ((($172)) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&1;
   if ($175) {
    $176 = HEAP32[$172>>2]|0;
    $177 = $64;
    $178 = ((($177)) + 16|0);
    $62 = $178;
    $179 = $62;
    $61 = $179;
    $180 = $61;
    $58 = $176;
    $59 = $180;
    $181 = $58;
    $182 = $59;
    ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
    $55 = $181;
    $56 = $182;
    $183 = $56;
    __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($183);
   }
   $184 = $64;
   $185 = ($184|0)!=(0|0);
   if (!($185)) {
    $205 = $89;
    $206 = $90;
    ___resumeException($205|0);
    // unreachable;
   }
   $186 = HEAP32[$172>>2]|0;
   $187 = $64;
   $52 = $186;
   $53 = $187;
   $54 = 1;
   $188 = $52;
   $189 = $53;
   $190 = $54;
   $49 = $188;
   $50 = $189;
   $51 = $190;
   $191 = $50;
   $48 = $191;
   $192 = $48;
   __ZdlPv($192);
   $205 = $89;
   $206 = $90;
   ___resumeException($205|0);
   // unreachable;
  }
 } while(0);
 $193 = $86;
 $71 = $91;
 $72 = $193;
 $194 = $71;
 $195 = $72;
 HEAP32[$194>>2] = $195;
 $75 = $0;
 $76 = $91;
 $77 = $87;
 $196 = $75;
 $197 = $76;
 $74 = $197;
 $198 = $74;
 ;HEAP32[$196>>2]=HEAP32[$198>>2]|0;
 $199 = ((($196)) + 4|0);
 $200 = $77;
 $73 = $200;
 $201 = $73;
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 $204 = $203&1;
 HEAP8[$199>>0] = $204;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSK_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINS5_ISS_EEEEEEDpOT_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $17 = sp + 80|0;
 $18 = sp + 72|0;
 $19 = sp + 64|0;
 $21 = sp + 617|0;
 $22 = sp + 616|0;
 $23 = sp + 615|0;
 $24 = sp + 56|0;
 $25 = sp + 48|0;
 $26 = sp + 40|0;
 $33 = sp + 614|0;
 $34 = sp + 528|0;
 $35 = sp + 613|0;
 $42 = sp + 32|0;
 $49 = sp + 612|0;
 $68 = sp + 24|0;
 $71 = sp + 611|0;
 $92 = sp + 316|0;
 $93 = sp + 16|0;
 $96 = sp + 304|0;
 $97 = sp + 296|0;
 $98 = sp + 8|0;
 $103 = sp + 272|0;
 $127 = sp;
 $130 = sp + 609|0;
 $149 = sp + 608|0;
 $150 = sp + 96|0;
 $144 = $1;
 $145 = $2;
 $146 = $3;
 $147 = $4;
 $153 = $144;
 $143 = $153;
 $154 = $143;
 $155 = ((($154)) + 4|0);
 $142 = $155;
 $156 = $142;
 $141 = $156;
 $157 = $141;
 $148 = $157;
 $$expand_i1_val = 0;
 HEAP8[$149>>0] = $$expand_i1_val;
 $158 = $148;
 $112 = $158;
 $113 = 1;
 $159 = $112;
 $160 = $113;
 $109 = $159;
 $110 = $160;
 $111 = 0;
 $161 = $109;
 $162 = $110;
 $108 = $161;
 $163 = ($162>>>0)>(134217727);
 if ($163) {
  $164 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($164);
  ___cxa_throw(($164|0),(1888|0),(327|0));
  // unreachable;
 }
 $165 = $110;
 $166 = $165<<5;
 $107 = $166;
 $167 = $107;
 $168 = (__Znwj($167)|0);
 $169 = $148;
 $104 = $150;
 $105 = $169;
 $106 = 0;
 $170 = $104;
 $171 = $105;
 HEAP32[$170>>2] = $171;
 $172 = ((($170)) + 4|0);
 $173 = $106;
 $174 = $173&1;
 $175 = $174&1;
 HEAP8[$172>>0] = $175;
 $100 = $0;
 $101 = $168;
 $102 = $150;
 $176 = $100;
 $177 = $101;
 $178 = $102;
 $99 = $178;
 $179 = $99;
 ;HEAP32[$103>>2]=HEAP32[$179>>2]|0;HEAP32[$103+4>>2]=HEAP32[$179+4>>2]|0;
 ;HEAP8[$98>>0]=HEAP8[$103>>0]|0;HEAP8[$98+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[$103+3>>0]|0;HEAP8[$98+4>>0]=HEAP8[$103+4>>0]|0;HEAP8[$98+5>>0]=HEAP8[$103+5>>0]|0;HEAP8[$98+6>>0]=HEAP8[$103+6>>0]|0;HEAP8[$98+7>>0]=HEAP8[$103+7>>0]|0;
 $95 = $176;
 HEAP32[$96>>2] = $177;
 $180 = $95;
 $94 = $96;
 $181 = $94;
 $182 = HEAP32[$181>>2]|0;
 $88 = $98;
 $183 = $88;
 ;HEAP32[$97>>2]=HEAP32[$183>>2]|0;HEAP32[$97+4>>2]=HEAP32[$183+4>>2]|0;
 ;HEAP8[$93>>0]=HEAP8[$97>>0]|0;HEAP8[$93+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[$97+3>>0]|0;HEAP8[$93+4>>0]=HEAP8[$97+4>>0]|0;HEAP8[$93+5>>0]=HEAP8[$97+5>>0]|0;HEAP8[$93+6>>0]=HEAP8[$97+6>>0]|0;HEAP8[$93+7>>0]=HEAP8[$97+7>>0]|0;
 $91 = $180;
 HEAP32[$92>>2] = $182;
 $184 = $91;
 $90 = $92;
 $185 = $90;
 $186 = HEAP32[$185>>2]|0;
 HEAP32[$184>>2] = $186;
 $187 = ((($184)) + 4|0);
 $89 = $93;
 $188 = $89;
 ;HEAP32[$187>>2]=HEAP32[$188>>2]|0;HEAP32[$187+4>>2]=HEAP32[$188+4>>2]|0;
 $189 = $148;
 $87 = $0;
 $190 = $87;
 $86 = $190;
 $191 = $86;
 $85 = $191;
 $192 = $85;
 $193 = HEAP32[$192>>2]|0;
 $194 = ((($193)) + 16|0);
 $84 = $194;
 $195 = $84;
 $83 = $195;
 $196 = $83;
 $197 = $145;
 $82 = $197;
 $198 = $82;
 $199 = $146;
 $54 = $199;
 $200 = $54;
 $201 = $147;
 $53 = $201;
 $202 = $53;
 $44 = $189;
 $45 = $196;
 $46 = $198;
 $47 = $200;
 $48 = $202;
 $203 = $44;
 $204 = $45;
 $205 = $46;
 $43 = $205;
 $206 = $43;
 $207 = $47;
 $6 = $207;
 $208 = $6;
 $209 = $48;
 $5 = $209;
 $210 = $5;
 ;HEAP8[$42>>0]=HEAP8[$49>>0]|0;
 $37 = $203;
 $38 = $204;
 $39 = $206;
 $40 = $208;
 $41 = $210;
 $211 = $37;
 $212 = $38;
 $213 = $39;
 $36 = $213;
 $214 = $36;
 $215 = $40;
 $8 = $215;
 $216 = $8;
 $217 = $41;
 $7 = $217;
 $218 = $7;
 $28 = $211;
 $29 = $212;
 $30 = $214;
 $31 = $216;
 $32 = $218;
 $219 = $29;
 $220 = $30;
 $27 = $220;
 $221 = $31;
 $10 = $221;
 $222 = $10;
 ;HEAP32[$34>>2]=HEAP32[$222>>2]|0;
 $223 = $32;
 $9 = $223;
 ;HEAP8[$24>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$25>>0]=HEAP8[$34>>0]|0;HEAP8[$25+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$34+3>>0]|0;
 ;HEAP8[$26>>0]=HEAP8[$33>>0]|0;
 $20 = $219;
 $224 = $20;
 ;HEAP8[$17>>0]=HEAP8[$23>>0]|0;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $14 = $224;
 $15 = $25;
 $16 = $24;
 $225 = $14;
 $226 = $15;
 $13 = $226;
 $227 = $13;
 $12 = $227;
 $228 = $12;
 $229 = HEAP32[$228>>2]|0;
 $11 = $229;
 $230 = $11;
 __THREW__ = 0;
 invoke_vii(351,($225|0),($230|0));
 $231 = __THREW__; __THREW__ = 0;
 $232 = $231&1;
 if ($232) {
  $240 = ___cxa_find_matching_catch_2()|0;
  $241 = tempRet0;
  $151 = $240;
  $152 = $241;
  $81 = $0;
  $242 = $81;
  $78 = $242;
  $79 = 0;
  $243 = $78;
  $77 = $243;
  $244 = $77;
  $76 = $244;
  $245 = $76;
  $246 = HEAP32[$245>>2]|0;
  $80 = $246;
  $247 = $79;
  $58 = $243;
  $248 = $58;
  $57 = $248;
  $249 = $57;
  HEAP32[$249>>2] = $247;
  $250 = $80;
  $251 = ($250|0)!=(0|0);
  if (!($251)) {
   $312 = $151;
   $313 = $152;
   ___resumeException($312|0);
   // unreachable;
  }
  $56 = $243;
  $252 = $56;
  $55 = $252;
  $253 = $55;
  $254 = ((($253)) + 4|0);
  $255 = $80;
  $74 = $254;
  $75 = $255;
  $256 = $74;
  $257 = ((($256)) + 4|0);
  $258 = HEAP8[$257>>0]|0;
  $259 = $258&1;
  if ($259) {
   $260 = HEAP32[$256>>2]|0;
   $261 = $75;
   $262 = ((($261)) + 16|0);
   $73 = $262;
   $263 = $73;
   $72 = $263;
   $264 = $72;
   $69 = $260;
   $70 = $264;
   $265 = $69;
   $266 = $70;
   ;HEAP8[$68>>0]=HEAP8[$71>>0]|0;
   $66 = $265;
   $67 = $266;
   $267 = $67;
   __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($267);
  }
  $268 = $75;
  $269 = ($268|0)!=(0|0);
  if (!($269)) {
   $312 = $151;
   $313 = $152;
   ___resumeException($312|0);
   // unreachable;
  }
  $270 = HEAP32[$256>>2]|0;
  $271 = $75;
  $63 = $270;
  $64 = $271;
  $65 = 1;
  $272 = $63;
  $273 = $64;
  $274 = $65;
  $60 = $272;
  $61 = $273;
  $62 = $274;
  $275 = $61;
  $59 = $275;
  $276 = $59;
  __ZdlPv($276);
  $312 = $151;
  $313 = $152;
  ___resumeException($312|0);
  // unreachable;
 }
 $233 = ((($225)) + 12|0);
 HEAP32[$233>>2] = 0;
 $52 = $0;
 $234 = $52;
 $51 = $234;
 $235 = $51;
 $50 = $235;
 $236 = $50;
 $237 = ((($236)) + 4|0);
 $238 = ((($237)) + 4|0);
 HEAP8[$238>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$149>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$149>>0]|0;
 $239 = $$pre_trunc&1;
 if ($239) {
  STACKTOP = sp;return;
 }
 $140 = $0;
 $277 = $140;
 $137 = $277;
 $138 = 0;
 $278 = $137;
 $136 = $278;
 $279 = $136;
 $135 = $279;
 $280 = $135;
 $281 = HEAP32[$280>>2]|0;
 $139 = $281;
 $282 = $138;
 $117 = $278;
 $283 = $117;
 $116 = $283;
 $284 = $116;
 HEAP32[$284>>2] = $282;
 $285 = $139;
 $286 = ($285|0)!=(0|0);
 if (!($286)) {
  STACKTOP = sp;return;
 }
 $115 = $278;
 $287 = $115;
 $114 = $287;
 $288 = $114;
 $289 = ((($288)) + 4|0);
 $290 = $139;
 $133 = $289;
 $134 = $290;
 $291 = $133;
 $292 = ((($291)) + 4|0);
 $293 = HEAP8[$292>>0]|0;
 $294 = $293&1;
 if ($294) {
  $295 = HEAP32[$291>>2]|0;
  $296 = $134;
  $297 = ((($296)) + 16|0);
  $132 = $297;
  $298 = $132;
  $131 = $298;
  $299 = $131;
  $128 = $295;
  $129 = $299;
  $300 = $128;
  $301 = $129;
  ;HEAP8[$127>>0]=HEAP8[$130>>0]|0;
  $125 = $300;
  $126 = $301;
  $302 = $126;
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeED2Ev($302);
 }
 $303 = $134;
 $304 = ($303|0)!=(0|0);
 if (!($304)) {
  STACKTOP = sp;return;
 }
 $305 = HEAP32[$291>>2]|0;
 $306 = $134;
 $122 = $305;
 $123 = $306;
 $124 = 1;
 $307 = $122;
 $308 = $123;
 $309 = $124;
 $119 = $307;
 $120 = $308;
 $121 = $309;
 $310 = $120;
 $118 = $310;
 $311 = $118;
 __ZdlPv($311);
 STACKTOP = sp;return;
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$sink1 = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 108|0;
 $8 = sp + 92|0;
 $26 = sp + 16|0;
 $29 = sp + 4|0;
 $30 = sp;
 $23 = $0;
 $24 = $1;
 $25 = $2;
 $31 = $23;
 __THREW__ = 0;
 invoke_vii(382,($26|0),($31|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 L1: do {
  if ($33) {
   $127 = ___cxa_find_matching_catch_3(0|0)|0;
   $128 = tempRet0;
   $27 = $127;
   $28 = $128;
  } else {
   $22 = $26;
   $34 = $22;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&1;
   do {
    if ($36) {
     $37 = $23;
     $20 = $30;
     $21 = $37;
     $38 = $20;
     $39 = $21;
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + -12|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($39) + ($42)|0);
     $19 = $43;
     $44 = $19;
     $18 = $44;
     $45 = $18;
     $46 = ((($45)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     HEAP32[$38>>2] = $47;
     $48 = $24;
     $49 = $23;
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + -12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($49) + ($52)|0);
     $13 = $53;
     $54 = $13;
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 176;
     $58 = ($57|0)==(32);
     $59 = $24;
     $60 = $25;
     $61 = (($59) + ($60)|0);
     $62 = $24;
     $63 = $58 ? $61 : $62;
     $64 = $24;
     $65 = $25;
     $66 = (($64) + ($65)|0);
     $67 = $23;
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $72 = $23;
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + -12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($72) + ($75)|0);
     $11 = $76;
     $77 = $11;
     $78 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $79 = ((($77)) + 76|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($78,$80)|0);
     do {
      if ($81) {
       $6 = $77;
       $7 = 32;
       $82 = $6;
       __THREW__ = 0;
       invoke_vii(353,($8|0),($82|0));
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       if ($84) {
        label = 13;
       } else {
        $5 = $8;
        $85 = $5;
        __THREW__ = 0;
        $86 = (invoke_iii(354,($85|0),(20160|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if (!($88)) {
         $89 = $7;
         $3 = $86;
         $4 = $89;
         $90 = $3;
         $91 = HEAP32[$90>>2]|0;
         $92 = ((($91)) + 28|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = $4;
         __THREW__ = 0;
         $95 = (invoke_iii($93|0,($90|0),($94|0))|0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if (!($97)) {
          __ZNSt3__26localeD2Ev($8);
          $102 = $95 << 24 >> 24;
          $103 = ((($77)) + 76|0);
          HEAP32[$103>>2] = $102;
          label = 9;
          break;
         }
        }
        $98 = ___cxa_find_matching_catch_3(0|0)|0;
        $99 = tempRet0;
        $9 = $98;
        $10 = $99;
        __ZNSt3__26localeD2Ev($8);
        $100 = $9;
        $101 = $10;
        $$sink1 = $101;$$sink2 = $100;
       }
      } else {
       label = 9;
      }
     } while(0);
     if ((label|0) == 9) {
      $104 = ((($77)) + 76|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = $105&255;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$30>>2]|0;
      $107 = (invoke_iiiiiii(383,($$byval_copy|0),($48|0),($63|0),($66|0),($71|0),($106|0))|0);
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       label = 13;
      } else {
       HEAP32[$29>>2] = $107;
       $12 = $29;
       $110 = $12;
       $111 = HEAP32[$110>>2]|0;
       $112 = ($111|0)==(0|0);
       if (!($112)) {
        break;
       }
       $113 = $23;
       $114 = HEAP32[$113>>2]|0;
       $115 = ((($114)) + -12|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($113) + ($116)|0);
       $16 = $117;
       $17 = 5;
       $118 = $16;
       $119 = $17;
       $14 = $118;
       $15 = $119;
       $120 = $14;
       $121 = ((($120)) + 16|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = $15;
       $124 = $122 | $123;
       __THREW__ = 0;
       invoke_vii(357,($120|0),($124|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if ($126) {
        label = 13;
       } else {
        break;
       }
      }
     }
     if ((label|0) == 13) {
      $129 = ___cxa_find_matching_catch_3(0|0)|0;
      $130 = tempRet0;
      $$sink1 = $130;$$sink2 = $129;
     }
     $27 = $$sink2;
     $28 = $$sink1;
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($26);
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($26);
   $139 = $23;
   STACKTOP = sp;return ($139|0);
  }
 } while(0);
 $131 = $27;
 (___cxa_begin_catch(($131|0))|0);
 $132 = $23;
 $133 = HEAP32[$132>>2]|0;
 $134 = ((($133)) + -12|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($132) + ($135)|0);
 __THREW__ = 0;
 invoke_vi(355,($136|0));
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 if (!($138)) {
  ___cxa_end_catch();
  $139 = $23;
  STACKTOP = sp;return ($139|0);
 }
 $140 = ___cxa_find_matching_catch_2()|0;
 $141 = tempRet0;
 $27 = $140;
 $28 = $141;
 __THREW__ = 0;
 invoke_v(358);
 $142 = __THREW__; __THREW__ = 0;
 $143 = $142&1;
 if ($143) {
  $146 = ___cxa_find_matching_catch_3(0|0)|0;
  $147 = tempRet0;
  ___clang_call_terminate($146);
  // unreachable;
 } else {
  $144 = $27;
  $145 = $28;
  ___resumeException($144|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $39 = sp + 52|0;
 $48 = sp + 12|0;
 $40 = $1;
 $41 = $2;
 $42 = $3;
 $43 = $4;
 $44 = $5;
 $52 = HEAP32[$0>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  ;HEAP32[$39>>2]=HEAP32[$0>>2]|0;
  $161 = HEAP32[$39>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $54 = $42;
 $55 = $40;
 $56 = $54;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $45 = $58;
 $59 = $43;
 $38 = $59;
 $60 = $38;
 $61 = ((($60)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $46 = $62;
 $63 = $46;
 $64 = $45;
 $65 = ($63|0)>($64|0);
 if ($65) {
  $66 = $45;
  $67 = $46;
  $68 = (($67) - ($66))|0;
  $46 = $68;
 } else {
  $46 = 0;
 }
 $69 = $41;
 $70 = $40;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $47 = $73;
 $74 = $47;
 $75 = ($74|0)>(0);
 if ($75) {
  $76 = HEAP32[$0>>2]|0;
  $77 = $40;
  $78 = $47;
  $29 = $76;
  $30 = $77;
  $31 = $78;
  $79 = $29;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 48|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $30;
  $84 = $31;
  $85 = (FUNCTION_TABLE_iiii[$82 & 1023]($79,$83,$84)|0);
  $86 = $47;
  $87 = ($85|0)!=($86|0);
  if ($87) {
   HEAP32[$0>>2] = 0;
   ;HEAP32[$39>>2]=HEAP32[$0>>2]|0;
   $161 = HEAP32[$39>>2]|0;
   STACKTOP = sp;return ($161|0);
  }
 }
 $88 = $46;
 $89 = ($88|0)>(0);
 if ($89) {
  $90 = $46;
  $91 = $44;
  $26 = $48;
  $27 = $90;
  $28 = $91;
  $92 = $26;
  $25 = $92;
  $93 = $25;
  $24 = $93;
  $94 = $24;
  $23 = $94;
  ;HEAP32[$94>>2]=0|0;HEAP32[$94+4>>2]=0|0;HEAP32[$94+8>>2]=0|0;
  $95 = $27;
  $96 = $28;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($92,$95,$96);
  $97 = HEAP32[$0>>2]|0;
  $22 = $48;
  $98 = $22;
  $21 = $98;
  $99 = $21;
  $20 = $99;
  $100 = $20;
  $19 = $100;
  $101 = $19;
  $18 = $101;
  $102 = $18;
  $103 = ((($102)) + 11|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $105 & 128;
  $107 = ($106|0)!=(0);
  if ($107) {
   $12 = $99;
   $108 = $12;
   $11 = $108;
   $109 = $11;
   $10 = $109;
   $110 = $10;
   $111 = HEAP32[$110>>2]|0;
   $117 = $111;
  } else {
   $17 = $99;
   $112 = $17;
   $16 = $112;
   $113 = $16;
   $15 = $113;
   $114 = $15;
   $14 = $114;
   $115 = $14;
   $13 = $115;
   $116 = $13;
   $117 = $116;
  }
  $9 = $117;
  $118 = $9;
  $119 = $46;
  $6 = $97;
  $7 = $118;
  $8 = $119;
  $120 = $6;
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($121)) + 48|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $7;
  $125 = $8;
  __THREW__ = 0;
  $126 = (invoke_iiii($123|0,($120|0),($124|0),($125|0))|0);
  $127 = __THREW__; __THREW__ = 0;
  $128 = $127&1;
  if ($128) {
   $131 = ___cxa_find_matching_catch_2()|0;
   $132 = tempRet0;
   $49 = $131;
   $50 = $132;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($48);
   $133 = $49;
   $134 = $50;
   ___resumeException($133|0);
   // unreachable;
  }
  $129 = $46;
  $130 = ($126|0)!=($129|0);
  if ($130) {
   HEAP32[$0>>2] = 0;
   ;HEAP32[$39>>2]=HEAP32[$0>>2]|0;
   $51 = 1;
  } else {
   $51 = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($48);
  $135 = $51;
  $switch = ($135>>>0)<(1);
  if (!($switch)) {
   $161 = HEAP32[$39>>2]|0;
   STACKTOP = sp;return ($161|0);
  }
 }
 $136 = $42;
 $137 = $41;
 $138 = $136;
 $139 = $137;
 $140 = (($138) - ($139))|0;
 $47 = $140;
 $141 = $47;
 $142 = ($141|0)>(0);
 if ($142) {
  $143 = HEAP32[$0>>2]|0;
  $144 = $41;
  $145 = $47;
  $32 = $143;
  $33 = $144;
  $34 = $145;
  $146 = $32;
  $147 = HEAP32[$146>>2]|0;
  $148 = ((($147)) + 48|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $33;
  $151 = $34;
  $152 = (FUNCTION_TABLE_iiii[$149 & 1023]($146,$150,$151)|0);
  $153 = $47;
  $154 = ($152|0)!=($153|0);
  if ($154) {
   HEAP32[$0>>2] = 0;
   ;HEAP32[$39>>2]=HEAP32[$0>>2]|0;
   $161 = HEAP32[$39>>2]|0;
   STACKTOP = sp;return ($161|0);
  }
 }
 $155 = $43;
 $35 = $155;
 $36 = 0;
 $156 = $35;
 $157 = ((($156)) + 12|0);
 $158 = HEAP32[$157>>2]|0;
 $37 = $158;
 $159 = $36;
 $160 = ((($156)) + 12|0);
 HEAP32[$160>>2] = $159;
 ;HEAP32[$39>>2]=HEAP32[$0>>2]|0;
 $161 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($161|0);
}
function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $9 = sp + 40|0;
 $12 = sp + 232|0;
 $13 = sp + 32|0;
 $18 = sp + 231|0;
 $28 = sp + 24|0;
 $31 = sp + 230|0;
 $32 = sp + 16|0;
 $37 = sp + 229|0;
 $49 = sp + 8|0;
 $52 = sp + 228|0;
 $53 = sp;
 $56 = sp + 227|0;
 $59 = sp + 226|0;
 $60 = sp + 225|0;
 $61 = sp + 224|0;
 $58 = $1;
 $62 = $58;
 $63 = ((($62)) + 48|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 16;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = ((($62)) + 44|0);
  $68 = HEAP32[$67>>2]|0;
  $57 = $62;
  $69 = $57;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($68>>>0)<($71>>>0);
  if ($72) {
   $25 = $62;
   $73 = $25;
   $74 = ((($73)) + 24|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($62)) + 44|0);
   HEAP32[$76>>2] = $75;
  }
  $6 = $62;
  $77 = $6;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($62)) + 44|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($62)) + 32|0);
  $5 = $82;
  $83 = $5;
  $4 = $83;
  $84 = $4;
  $3 = $84;
  $85 = $3;
  $2 = $85;
  $14 = $0;
  $15 = $79;
  $16 = $81;
  $17 = $59;
  $86 = $14;
  ;HEAP8[$13>>0]=HEAP8[$18>>0]|0;
  $11 = $86;
  $87 = $11;
  $10 = $13;
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
  $8 = $87;
  $88 = $8;
  $7 = $9;
  ;HEAP32[$88>>2]=0|0;HEAP32[$88+4>>2]=0|0;HEAP32[$88+8>>2]=0|0;
  $89 = $15;
  $90 = $16;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($86,$89,$90);
  STACKTOP = sp;return;
 }
 $91 = ((($62)) + 48|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $92 & 8;
 $94 = ($93|0)!=(0);
 if ($94) {
  $19 = $62;
  $95 = $19;
  $96 = ((($95)) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $20 = $62;
  $98 = $20;
  $99 = ((($98)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($62)) + 32|0);
  $24 = $101;
  $102 = $24;
  $23 = $102;
  $103 = $23;
  $22 = $103;
  $104 = $22;
  $21 = $104;
  $33 = $0;
  $34 = $97;
  $35 = $100;
  $36 = $60;
  $105 = $33;
  ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
  $30 = $105;
  $106 = $30;
  $29 = $32;
  ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
  $27 = $106;
  $107 = $27;
  $26 = $28;
  ;HEAP32[$107>>2]=0|0;HEAP32[$107+4>>2]=0|0;HEAP32[$107+8>>2]=0|0;
  $108 = $34;
  $109 = $35;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($105,$108,$109);
  STACKTOP = sp;return;
 }
 $110 = ((($62)) + 32|0);
 $41 = $110;
 $111 = $41;
 $40 = $111;
 $112 = $40;
 $39 = $112;
 $113 = $39;
 $38 = $113;
 $54 = $0;
 $55 = $61;
 $114 = $54;
 ;HEAP8[$53>>0]=HEAP8[$56>>0]|0;
 $51 = $114;
 $115 = $51;
 $50 = $53;
 ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
 $48 = $115;
 $116 = $48;
 $47 = $49;
 ;HEAP32[$116>>2]=0|0;HEAP32[$116+4>>2]=0|0;HEAP32[$116+8>>2]=0|0;
 $44 = $114;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $42 = $118;
 $119 = $42;
 $45 = $119;
 $46 = 0;
 while(1) {
  $120 = $46;
  $121 = ($120>>>0)<(3);
  if (!($121)) {
   break;
  }
  $122 = $45;
  $123 = $46;
  $124 = (($122) + ($123<<2)|0);
  HEAP32[$124>>2] = 0;
  $125 = $46;
  $126 = (($125) + 1)|0;
  $46 = $126;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $38 = sp + 8|0;
 $40 = sp + 218|0;
 $48 = sp;
 $51 = sp + 217|0;
 $58 = sp + 216|0;
 $52 = $0;
 $53 = $1;
 $54 = $2;
 $59 = $52;
 $60 = $53;
 $61 = $54;
 $49 = $60;
 $50 = $61;
 $62 = $49;
 $63 = $50;
 ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
 $46 = $62;
 $47 = $63;
 $64 = $47;
 $65 = $46;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $55 = $68;
 $69 = $55;
 $44 = $59;
 $70 = $44;
 $43 = $70;
 $71 = $43;
 $42 = $71;
 $72 = $42;
 $41 = $72;
 $73 = $41;
 $39 = $73;
 $74 = $39;
 ;HEAP8[$38>>0]=HEAP8[$40>>0]|0;
 $37 = $74;
 $75 = $37;
 $36 = $75;
 $45 = -1;
 $76 = $45;
 $77 = (($76) - 16)|0;
 $78 = ($69>>>0)>($77>>>0);
 if ($78) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($59);
 }
 $79 = $55;
 $80 = ($79>>>0)<(11);
 $81 = $55;
 if ($80) {
  $34 = $59;
  $35 = $81;
  $82 = $34;
  $83 = $35;
  $84 = $83&255;
  $33 = $82;
  $85 = $33;
  $32 = $85;
  $86 = $32;
  $87 = ((($86)) + 11|0);
  HEAP8[$87>>0] = $84;
  $12 = $59;
  $88 = $12;
  $11 = $88;
  $89 = $11;
  $10 = $89;
  $90 = $10;
  $9 = $90;
  $91 = $9;
  $8 = $91;
  $92 = $8;
  $56 = $92;
 } else {
  $4 = $81;
  $93 = $4;
  $94 = ($93>>>0)<(11);
  if ($94) {
   $101 = 11;
  } else {
   $95 = $4;
   $96 = (($95) + 1)|0;
   $3 = $96;
   $97 = $3;
   $98 = (($97) + 15)|0;
   $99 = $98 & -16;
   $101 = $99;
  }
  $100 = (($101) - 1)|0;
  $57 = $100;
  $7 = $59;
  $102 = $7;
  $6 = $102;
  $103 = $6;
  $5 = $103;
  $104 = $5;
  $105 = $57;
  $106 = (($105) + 1)|0;
  $18 = $104;
  $19 = $106;
  $107 = $18;
  $108 = $19;
  $15 = $107;
  $16 = $108;
  $17 = 0;
  $109 = $15;
  $14 = $109;
  $110 = $16;
  $13 = $110;
  $111 = $13;
  $112 = (__Znwj($111)|0);
  $56 = $112;
  $113 = $56;
  $22 = $59;
  $23 = $113;
  $114 = $22;
  $115 = $23;
  $21 = $114;
  $116 = $21;
  $20 = $116;
  $117 = $20;
  HEAP32[$117>>2] = $115;
  $118 = $57;
  $119 = (($118) + 1)|0;
  $26 = $59;
  $27 = $119;
  $120 = $26;
  $121 = $27;
  $122 = -2147483648 | $121;
  $25 = $120;
  $123 = $25;
  $24 = $123;
  $124 = $24;
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $122;
  $126 = $55;
  $30 = $59;
  $31 = $126;
  $127 = $30;
  $128 = $31;
  $29 = $127;
  $129 = $29;
  $28 = $129;
  $130 = $28;
  $131 = ((($130)) + 4|0);
  HEAP32[$131>>2] = $128;
 }
 while(1) {
  $132 = $53;
  $133 = $54;
  $134 = ($132|0)!=($133|0);
  $135 = $56;
  if (!($134)) {
   break;
  }
  $136 = $53;
  __ZNSt3__211char_traitsIcE6assignERcRKc($135,$136);
  $137 = $53;
  $138 = ((($137)) + 1|0);
  $53 = $138;
  $139 = $56;
  $140 = ((($139)) + 1|0);
  $56 = $140;
 }
 HEAP8[$58>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($135,$58);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = ((($50)) + 8|0);
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 12)&-1;
 $62 = (($61) + 1)|0;
 $34 = $49;
 HEAP32[$35>>2] = $62;
 $63 = $34;
 $64 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($63)|0);
 $36 = $64;
 $65 = HEAP32[$35>>2]|0;
 $66 = $36;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = ((($70)) + 8|0);
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 12)&-1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85<<1;
  HEAP32[$38>>2] = $86;
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = HEAP32[$91>>2]|0;
  $93 = $21;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 12)&-1;
 $109 = $45;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($46,$100,$108,$109);
 $110 = $45;
 $111 = ((($46)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 __THREW__ = 0;
 invoke_vii(351,($124|0),($126|0));
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 if ($128) {
  $134 = ___cxa_find_matching_catch_2()|0;
  $135 = tempRet0;
  $47 = $134;
  $48 = $135;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  $136 = $47;
  $137 = $48;
  ___resumeException($136|0);
  // unreachable;
 }
 $129 = ((($46)) + 8|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ((($130)) + 12|0);
 HEAP32[$129>>2] = $131;
 __THREW__ = 0;
 invoke_vii(384,($49|0),($46|0));
 $132 = __THREW__; __THREW__ = 0;
 $133 = $132&1;
 if ($133) {
  $134 = ___cxa_find_matching_catch_2()|0;
  $135 = tempRet0;
  $47 = $134;
  $48 = $135;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  $136 = $47;
  $137 = $48;
  ___resumeException($136|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0);
 $33 = $30;
 $24 = $32;
 HEAP32[$25>>2] = 0;
 $26 = $33;
 $34 = $24;
 $23 = $25;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = $26;
 $17 = $37;
 $38 = $17;
 $20 = $34;
 HEAP32[$21>>2] = $36;
 $22 = $38;
 $39 = $20;
 $19 = $21;
 $40 = $19;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($39)) + 4|0);
 $43 = $22;
 $18 = $43;
 $44 = $18;
 HEAP32[$42>>2] = $44;
 $45 = $28;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $6 = $31;
   $47 = $6;
   $48 = ((($47)) + 12|0);
   $5 = $48;
   $49 = $5;
   $4 = $49;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   $12 = $52;
   $13 = $53;
   $54 = $12;
   $55 = $13;
   $9 = $54;
   $10 = $55;
   $11 = 0;
   $56 = $9;
   $57 = $10;
   $8 = $56;
   $58 = ($57>>>0)>(357913941);
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($59);
    ___cxa_throw(($59|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $60 = $10;
    $61 = ($60*12)|0;
    $7 = $61;
    $62 = $7;
    $63 = (__Znwj($62)|0);
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64;
 $65 = HEAP32[$31>>2]|0;
 $66 = $29;
 $67 = (($65) + (($66*12)|0)|0);
 $68 = ((($31)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($31)) + 4|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$31>>2]|0;
 $71 = $28;
 $72 = (($70) + (($71*12)|0)|0);
 $16 = $31;
 $73 = $16;
 $74 = ((($73)) + 12|0);
 $15 = $74;
 $75 = $15;
 $14 = $75;
 $76 = $14;
 HEAP32[$76>>2] = $72;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 212|0;
 $13 = sp + 188|0;
 $25 = sp + 140|0;
 $45 = sp;
 $50 = sp + 236|0;
 $60 = $0;
 $61 = $1;
 $62 = $60;
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($62);
 $59 = $62;
 $63 = $59;
 $64 = ((($63)) + 8|0);
 $58 = $64;
 $65 = $58;
 $57 = $65;
 $66 = $57;
 $67 = HEAP32[$62>>2]|0;
 $68 = ((($62)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $61;
 $71 = ((($70)) + 4|0);
 $52 = $66;
 $53 = $67;
 $54 = $69;
 $55 = $71;
 while(1) {
  $72 = $54;
  $73 = $53;
  $74 = ($72|0)!=($73|0);
  if (!($74)) {
   break;
  }
  $75 = $52;
  $76 = $55;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + -12|0);
  $51 = $78;
  $79 = $51;
  $80 = $54;
  $81 = ((($80)) + -12|0);
  $54 = $81;
  $28 = $81;
  $82 = $28;
  $27 = $82;
  $83 = $27;
  $47 = $75;
  $48 = $79;
  $49 = $83;
  $84 = $47;
  $85 = $48;
  $86 = $49;
  $46 = $86;
  $87 = $46;
  ;HEAP8[$45>>0]=HEAP8[$50>>0]|0;
  $42 = $84;
  $43 = $85;
  $44 = $87;
  $88 = $42;
  $89 = $43;
  $90 = $44;
  $41 = $90;
  $91 = $41;
  $38 = $88;
  $39 = $89;
  $40 = $91;
  $92 = $39;
  $93 = $40;
  $37 = $93;
  $94 = $37;
  $35 = $92;
  $36 = $94;
  $95 = $35;
  $96 = $36;
  $34 = $96;
  $97 = $34;
  ;HEAP32[$95>>2]=HEAP32[$97>>2]|0;HEAP32[$95+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$97+8>>2]|0;
  $98 = $36;
  $31 = $98;
  $99 = $31;
  $30 = $99;
  $100 = $30;
  $29 = $100;
  $101 = $29;
  $32 = $101;
  $33 = 0;
  while(1) {
   $102 = $33;
   $103 = ($102>>>0)<(3);
   if (!($103)) {
    break;
   }
   $104 = $32;
   $105 = $33;
   $106 = (($104) + ($105<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = $33;
   $108 = (($107) + 1)|0;
   $33 = $108;
  }
  $109 = $55;
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + -12|0);
  HEAP32[$109>>2] = $111;
 }
 $112 = $61;
 $113 = ((($112)) + 4|0);
 $5 = $62;
 $6 = $113;
 $114 = $5;
 $4 = $114;
 $115 = $4;
 $116 = HEAP32[$115>>2]|0;
 HEAP32[$7>>2] = $116;
 $117 = $6;
 $2 = $117;
 $118 = $2;
 $119 = HEAP32[$118>>2]|0;
 $120 = $5;
 HEAP32[$120>>2] = $119;
 $3 = $7;
 $121 = $3;
 $122 = HEAP32[$121>>2]|0;
 $123 = $6;
 HEAP32[$123>>2] = $122;
 $124 = ((($62)) + 4|0);
 $125 = $61;
 $126 = ((($125)) + 8|0);
 $11 = $124;
 $12 = $126;
 $127 = $11;
 $10 = $127;
 $128 = $10;
 $129 = HEAP32[$128>>2]|0;
 HEAP32[$13>>2] = $129;
 $130 = $12;
 $8 = $130;
 $131 = $8;
 $132 = HEAP32[$131>>2]|0;
 $133 = $11;
 HEAP32[$133>>2] = $132;
 $9 = $13;
 $134 = $9;
 $135 = HEAP32[$134>>2]|0;
 $136 = $12;
 HEAP32[$136>>2] = $135;
 $16 = $62;
 $137 = $16;
 $138 = ((($137)) + 8|0);
 $15 = $138;
 $139 = $15;
 $14 = $139;
 $140 = $14;
 $141 = $61;
 $19 = $141;
 $142 = $19;
 $143 = ((($142)) + 12|0);
 $18 = $143;
 $144 = $18;
 $17 = $144;
 $145 = $17;
 $23 = $140;
 $24 = $145;
 $146 = $23;
 $22 = $146;
 $147 = $22;
 $148 = HEAP32[$147>>2]|0;
 HEAP32[$25>>2] = $148;
 $149 = $24;
 $20 = $149;
 $150 = $20;
 $151 = HEAP32[$150>>2]|0;
 $152 = $23;
 HEAP32[$152>>2] = $151;
 $21 = $25;
 $153 = $21;
 $154 = HEAP32[$153>>2]|0;
 $155 = $24;
 HEAP32[$155>>2] = $154;
 $156 = $61;
 $157 = ((($156)) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $61;
 HEAP32[$159>>2] = $158;
 $26 = $62;
 $160 = $26;
 $161 = ((($160)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = HEAP32[$160>>2]|0;
 $164 = $162;
 $165 = $163;
 $166 = (($164) - ($165))|0;
 $167 = (($166|0) / 12)&-1;
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($62,$167);
 $56 = $62;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -12|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
  $60 = $16;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($60);
 }
 $61 = HEAP32[$35>>2]|0;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $63 = $14;
 $64 = ((($63)) + 12|0);
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$35>>2]|0;
 $11 = $35;
 $70 = $11;
 $10 = $70;
 $71 = $10;
 $72 = ((($71)) + 12|0);
 $9 = $72;
 $73 = $9;
 $8 = $73;
 $74 = $8;
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$70>>2]|0;
 $77 = $75;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $80 = (($79|0) / 12)&-1;
 $5 = $68;
 $6 = $69;
 $7 = $80;
 $81 = $5;
 $82 = $6;
 $83 = $7;
 $2 = $81;
 $3 = $82;
 $4 = $83;
 $84 = $3;
 $1 = $84;
 $85 = $1;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 357913941;
 $28 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $28;
 $7 = $19;
 $8 = $20;
 $29 = $7;
 $30 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $29;
 $5 = $30;
 $31 = $5;
 $32 = $4;
 $1 = $6;
 $2 = $31;
 $3 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34>>>0)<($36>>>0);
 $38 = $5;
 $39 = $4;
 $40 = $37 ? $38 : $39;
 $41 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $23 = HEAP32[$22>>2]|0;
 $18 = $23;
 $24 = $18;
 $17 = $21;
 $25 = $17;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $16;
 $5 = $21;
 $28 = $5;
 $4 = $28;
 $29 = $4;
 $3 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $2 = $31;
 $32 = $2;
 $1 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$29>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 12)&-1;
 $40 = (($27) + (($39*12)|0)|0);
 $7 = $21;
 $41 = $7;
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $8 = $21;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 $10 = $21;
 $53 = $10;
 $54 = HEAP32[$53>>2]|0;
 $9 = $54;
 $55 = $9;
 $15 = $21;
 $56 = $15;
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = ((($58)) + 8|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $68 = (($55) + (($67*12)|0)|0);
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($21,$24,$40,$52,$68);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $25 = $18;
 $17 = $22;
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $16 = $27;
 $28 = $16;
 $6 = $22;
 $29 = $6;
 $5 = $29;
 $30 = $5;
 $4 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 $3 = $32;
 $33 = $3;
 $2 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$30>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 12)&-1;
 $41 = (($28) + (($40*12)|0)|0);
 $8 = $22;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $7 = $43;
 $44 = $7;
 $13 = $22;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = ((($47)) + 8|0);
 $10 = $48;
 $49 = $10;
 $9 = $49;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$46>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = (($44) + (($56*12)|0)|0);
 $15 = $22;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $14 = $59;
 $60 = $14;
 $61 = $21;
 $62 = (($60) + (($61*12)|0)|0);
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($22,$25,$41,$57,$62);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16;
 $19 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($17)|0);
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17);
 }
 $14 = $17;
 $21 = $14;
 $22 = ((($21)) + 8|0);
 $13 = $22;
 $23 = $13;
 $12 = $23;
 $24 = $12;
 $25 = $16;
 $10 = $24;
 $11 = $25;
 $26 = $10;
 $27 = $11;
 $7 = $26;
 $8 = $27;
 $9 = 0;
 $28 = $7;
 $29 = $8;
 $6 = $28;
 $30 = ($29>>>0)>(357913941);
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($31);
  ___cxa_throw(($31|0),(1888|0),(327|0));
  // unreachable;
 } else {
  $32 = $8;
  $33 = ($32*12)|0;
  $5 = $33;
  $34 = $5;
  $35 = (__Znwj($34)|0);
  $36 = ((($17)) + 4|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$17>>2] = $35;
  $37 = HEAP32[$17>>2]|0;
  $38 = $16;
  $39 = (($37) + (($38*12)|0)|0);
  $4 = $17;
  $40 = $4;
  $41 = ((($40)) + 8|0);
  $3 = $41;
  $42 = $3;
  $2 = $42;
  $43 = $2;
  HEAP32[$43>>2] = $39;
  __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($17,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = sp;
 $17 = sp + 105|0;
 $31 = sp + 104|0;
 $26 = $0;
 $27 = $1;
 $28 = $2;
 $29 = $3;
 $32 = $26;
 $25 = $32;
 $33 = $25;
 $34 = ((($33)) + 8|0);
 $24 = $34;
 $35 = $24;
 $23 = $35;
 $36 = $23;
 $30 = $36;
 $37 = $29;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($31,$32,$37);
 $38 = $30;
 $39 = $27;
 $40 = $28;
 $41 = ((($32)) + 4|0);
 $19 = $38;
 $20 = $39;
 $21 = $40;
 $22 = $41;
 while(1) {
  $42 = $20;
  $43 = $21;
  $44 = ($42|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $45 = $19;
  $46 = $22;
  $47 = HEAP32[$46>>2]|0;
  $18 = $47;
  $48 = $18;
  $49 = $20;
  $14 = $45;
  $15 = $48;
  $16 = $49;
  $50 = $14;
  $51 = $15;
  $52 = $16;
  $13 = $52;
  $53 = $13;
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
  $9 = $50;
  $10 = $51;
  $11 = $53;
  $54 = $9;
  $55 = $10;
  $56 = $11;
  $8 = $56;
  $57 = $8;
  $5 = $54;
  $6 = $55;
  $7 = $57;
  $58 = $6;
  $59 = $7;
  $4 = $59;
  $60 = $4;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($58,$60);
  $61 = $20;
  $62 = ((($61)) + 12|0);
  $20 = $62;
  $63 = $22;
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 12|0);
  HEAP32[$63>>2] = $65;
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($31);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvS8_EPNS0_11BindingTypeIS8_EUt_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$8);
 __THREW__ = 0;
 invoke_vi($7|0,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $5 = $11;
  $6 = $12;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $13 = $5;
  $14 = $6;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $1;
 $9 = $8;
 $10 = ((($9)) + 4|0);
 $11 = $8;
 $12 = HEAP32[$11>>2]|0;
 $5 = $0;
 $6 = $10;
 $7 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $3 = $14;
 $15 = $3;
 $2 = $15;
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $16 = $6;
 $17 = $7;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($13,$16,$17);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2300|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11013|0);
}
function __ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFvS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 32|0;
 $9 = sp + 20|0;
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = $5;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($8,$14);
 $15 = $6;
 __THREW__ = 0;
 invoke_vii(385,($9|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $10 = $23;
  $11 = $24;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $29 = $10;
  $30 = $11;
  ___resumeException($29|0);
  // unreachable;
 }
 $18 = $7;
 __THREW__ = 0;
 invoke_vii(385,($12|0),($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if ($20) {
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   $10 = $25;
   $11 = $26;
  } else {
   __THREW__ = 0;
   invoke_viii($13|0,($8|0),($9|0),($12|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    $27 = ___cxa_find_matching_catch_2()|0;
    $28 = tempRet0;
    $10 = $27;
    $11 = $28;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 $29 = $10;
 $30 = $11;
 ___resumeException($29|0);
 // unreachable;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2308|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11017|0);
}
function __ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_S8_EE6invokeEPFvS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_SF_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 44|0;
 $11 = sp + 32|0;
 $14 = sp + 12|0;
 $15 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $5;
 $17 = $6;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($10,$17);
 $18 = $7;
 __THREW__ = 0;
 invoke_vii(385,($11|0),($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  $12 = $29;
  $13 = $30;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $37 = $12;
  $38 = $13;
  ___resumeException($37|0);
  // unreachable;
 }
 $21 = $8;
 __THREW__ = 0;
 invoke_vii(385,($14|0),($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  $12 = $31;
  $13 = $32;
 } else {
  $24 = $9;
  __THREW__ = 0;
  invoke_vii(385,($15|0),($24|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  do {
   if ($26) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    $12 = $33;
    $13 = $34;
   } else {
    __THREW__ = 0;
    invoke_viiii($16|0,($10|0),($11|0),($14|0),($15|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $35 = ___cxa_find_matching_catch_2()|0;
     $36 = tempRet0;
     $12 = $35;
     $13 = $36;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
     break;
    } else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 $37 = $12;
 $38 = $13;
 ___resumeException($37|0);
 // unreachable;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_SA_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_SA_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_S9_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_S9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2324|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11023|0);
}
function __GLOBAL__sub_I_quickhit_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __ZN7Encoder6sharedEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP8[18832]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return (19504|0);
 }
 $4 = (___cxa_guard_acquire(18832)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return (19504|0);
 }
 __THREW__ = 0;
 invoke_vi(386,(19504|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  $0 = $8;
  $1 = $9;
  $10 = $0;
  $11 = $1;
  ___resumeException($10|0);
  // unreachable;
 }
 (___cxa_atexit((387|0),(19504|0),(___dso_handle|0))|0);
 STACKTOP = sp;return (19504|0);
}
function __ZN7EncoderC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $4 = sp + 57|0;
 $5 = sp + 56|0;
 $9 = sp + 32|0;
 $12 = sp + 20|0;
 $16 = $0;
 $17 = $16;
 $15 = $17;
 $18 = $15;
 $14 = $18;
 $19 = $14;
 $13 = $19;
 HEAP32[$19>>2] = 0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($19)) + 8|0);
 $11 = $21;
 HEAP32[$12>>2] = 0;
 $22 = $11;
 $10 = $12;
 $23 = $10;
 $24 = HEAP32[$23>>2]|0;
 $8 = $22;
 HEAP32[$9>>2] = $24;
 $25 = $8;
 $7 = $25;
 $6 = $9;
 $26 = $6;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 $28 = ((($17)) + 12|0);
 $3 = $28;
 $29 = $3;
 ;HEAP8[$2>>0]=HEAP8[$5>>0]|0;
 $1 = $4;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEEC2ERKSF_($29,$4);
 STACKTOP = sp;return;
}
function __ZN7EncoderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($3);
 __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $29 = $31;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while(1) {
  $37 = $28;
  $38 = ((($36)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)!=($39|0);
  if (!($40)) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = ((($41)) + 8|0);
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = ((($36)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -12|0);
  HEAP32[$45>>2] = $47;
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
  $53 = $16;
  __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($53);
 }
 $14 = $31;
 $54 = $14;
 $55 = ((($54)) + 8|0);
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = HEAP32[$31>>2]|0;
 $4 = $31;
 $59 = $4;
 $3 = $59;
 $60 = $3;
 $61 = ((($60)) + 8|0);
 $2 = $61;
 $62 = $2;
 $1 = $62;
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$59>>2]|0;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (($68|0) / 12)&-1;
 $9 = $57;
 $10 = $58;
 $11 = $69;
 $70 = $9;
 $71 = $10;
 $72 = $11;
 $6 = $70;
 $7 = $71;
 $8 = $72;
 $73 = $7;
 $5 = $73;
 $74 = $5;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $29 = $31;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while(1) {
  $37 = $28;
  $38 = ((($36)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)!=($39|0);
  if (!($40)) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = ((($41)) + 8|0);
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = ((($36)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -8|0);
  HEAP32[$45>>2] = $47;
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
  $53 = $16;
  __ZNSt3__210shared_ptrI5LevelED2Ev($53);
 }
 $14 = $31;
 $54 = $14;
 $55 = ((($54)) + 8|0);
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = HEAP32[$31>>2]|0;
 $4 = $31;
 $59 = $4;
 $3 = $59;
 $60 = $3;
 $61 = ((($60)) + 8|0);
 $2 = $61;
 $62 = $2;
 $1 = $62;
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$59>>2]|0;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (($68|0) / 8)&-1;
 $9 = $57;
 $10 = $58;
 $11 = $69;
 $70 = $9;
 $71 = $10;
 $72 = $11;
 $6 = $70;
 $7 = $71;
 $8 = $72;
 $73 = $7;
 $5 = $73;
 $74 = $5;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $7;
 $6 = $8;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $4 = $11;
 $12 = $4;
 $3 = $12;
 $13 = $3;
 $2 = $13;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($8,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp;
 $7 = sp + 80|0;
 $20 = $0;
 $21 = $1;
 $23 = $20;
 $24 = $21;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $21;
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($23,$27);
 $28 = $21;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($23,$30);
 $12 = $23;
 $31 = $12;
 $32 = ((($31)) + 4|0);
 $11 = $32;
 $33 = $11;
 $10 = $33;
 $34 = $10;
 $22 = $34;
 $35 = $22;
 $36 = $21;
 $37 = ((($36)) + 16|0);
 $9 = $37;
 $38 = $9;
 $8 = $38;
 $39 = $8;
 $5 = $35;
 $6 = $39;
 $40 = $5;
 $41 = $6;
 ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
 $2 = $40;
 $3 = $41;
 $42 = $3;
 __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($42);
 $43 = $22;
 $44 = $21;
 $17 = $43;
 $18 = $44;
 $19 = 1;
 $45 = $17;
 $46 = $18;
 $47 = $19;
 $14 = $45;
 $15 = $46;
 $16 = $47;
 $48 = $15;
 $13 = $48;
 $49 = $13;
 __ZdlPv($49);
 STACKTOP = sp;return;
}
function __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 __ZNSt3__210shared_ptrI5LevelED2Ev($3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEEC2ERKSF_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp + 48|0;
 $13 = sp + 8|0;
 $16 = sp + 36|0;
 $17 = sp + 93|0;
 $18 = sp;
 $25 = sp + 92|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $20 = $29;
 $19 = $29;
 $30 = $19;
 HEAP32[$30>>2] = 0;
 $31 = ((($26)) + 8|0);
 ;HEAP8[$18>>0]=HEAP8[$25>>0]|0;
 $15 = $31;
 HEAP32[$16>>2] = 0;
 $32 = $15;
 $14 = $16;
 $33 = $14;
 $34 = HEAP32[$33>>2]|0;
 $8 = $18;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $11 = $32;
 HEAP32[$12>>2] = $34;
 $35 = $11;
 $10 = $13;
 $9 = $12;
 $36 = $9;
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $6 = $26;
 $38 = $6;
 $39 = ((($38)) + 4|0);
 $5 = $39;
 $40 = $5;
 $4 = $40;
 $41 = $4;
 $3 = $41;
 $42 = $3;
 $2 = $42;
 $43 = $2;
 $7 = $26;
 $44 = $7;
 HEAP32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function __ZN7Encoder12insert_cacheENSt3__210shared_ptrI5LevelEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $10 = sp + 364|0;
 $11 = sp + 24|0;
 $14 = sp + 352|0;
 $15 = sp + 405|0;
 $16 = sp + 16|0;
 $20 = sp + 404|0;
 $44 = sp + 8|0;
 $49 = sp + 403|0;
 $60 = sp + 402|0;
 $64 = sp + 176|0;
 $67 = sp + 164|0;
 $82 = sp;
 $87 = sp + 401|0;
 $97 = sp + 400|0;
 $100 = sp + 36|0;
 $99 = $0;
 $103 = $99;
 $98 = $103;
 $104 = $98;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 $111 = (($110|0) / 12)&-1;
 $71 = $1;
 $112 = $71;
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$113>>2]|0;
 $115 = ($111>>>0)<=($114>>>0);
 if ($115) {
  $70 = $100;
  $116 = $70;
  $69 = $116;
  $117 = $69;
  $68 = $117;
  HEAP32[$117>>2] = 0;
  $118 = ((($117)) + 4|0);
  HEAP32[$118>>2] = 0;
  $119 = ((($117)) + 8|0);
  $66 = $119;
  HEAP32[$67>>2] = 0;
  $120 = $66;
  $65 = $67;
  $121 = $65;
  $122 = HEAP32[$121>>2]|0;
  $63 = $120;
  HEAP32[$64>>2] = $122;
  $123 = $63;
  $62 = $123;
  $61 = $64;
  $124 = $61;
  $125 = HEAP32[$124>>2]|0;
  HEAP32[$123>>2] = $125;
  $58 = $103;
  $59 = $100;
  $126 = $58;
  $127 = ((($126)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $57 = $126;
  $129 = $57;
  $130 = ((($129)) + 8|0);
  $56 = $130;
  $131 = $56;
  $55 = $131;
  $132 = $55;
  $133 = HEAP32[$132>>2]|0;
  $134 = ($128>>>0)<($133>>>0);
  if ($134) {
   __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($60,$126,1);
   $54 = $126;
   $135 = $54;
   $136 = ((($135)) + 8|0);
   $53 = $136;
   $137 = $53;
   $52 = $137;
   $138 = $52;
   $139 = ((($126)) + 4|0);
   $140 = HEAP32[$139>>2]|0;
   $50 = $140;
   $141 = $50;
   $142 = $59;
   $5 = $142;
   $143 = $5;
   $46 = $138;
   $47 = $141;
   $48 = $143;
   $144 = $46;
   $145 = $47;
   $146 = $48;
   $45 = $146;
   $147 = $45;
   ;HEAP8[$44>>0]=HEAP8[$49>>0]|0;
   $41 = $144;
   $42 = $145;
   $43 = $147;
   $148 = $41;
   $149 = $42;
   $150 = $43;
   $40 = $150;
   $151 = $40;
   $37 = $148;
   $38 = $149;
   $39 = $151;
   $152 = $38;
   $153 = $39;
   $36 = $153;
   $154 = $36;
   $34 = $152;
   $35 = $154;
   $155 = $34;
   $156 = $35;
   $33 = $156;
   $157 = $33;
   $158 = ((($157)) + 8|0);
   $32 = $158;
   $159 = $32;
   $31 = $159;
   $160 = $31;
   $30 = $160;
   $161 = $30;
   $18 = $155;
   $19 = $161;
   $162 = $18;
   $17 = $162;
   HEAP32[$162>>2] = 0;
   $163 = ((($162)) + 4|0);
   HEAP32[$163>>2] = 0;
   $164 = ((($162)) + 8|0);
   ;HEAP8[$16>>0]=HEAP8[$20>>0]|0;
   $13 = $164;
   HEAP32[$14>>2] = 0;
   $165 = $13;
   $12 = $14;
   $166 = $12;
   $167 = HEAP32[$166>>2]|0;
   $6 = $16;
   ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
   $9 = $165;
   HEAP32[$10>>2] = $167;
   $168 = $9;
   $8 = $11;
   $7 = $10;
   $169 = $7;
   $170 = HEAP32[$169>>2]|0;
   HEAP32[$168>>2] = $170;
   $171 = $35;
   $172 = HEAP32[$171>>2]|0;
   HEAP32[$155>>2] = $172;
   $173 = $35;
   $174 = ((($173)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($155)) + 4|0);
   HEAP32[$176>>2] = $175;
   $177 = $35;
   $23 = $177;
   $178 = $23;
   $179 = ((($178)) + 8|0);
   $22 = $179;
   $180 = $22;
   $21 = $180;
   $181 = $21;
   $182 = HEAP32[$181>>2]|0;
   $26 = $155;
   $183 = $26;
   $184 = ((($183)) + 8|0);
   $25 = $184;
   $185 = $25;
   $24 = $185;
   $186 = $24;
   HEAP32[$186>>2] = $182;
   $187 = $35;
   $29 = $187;
   $188 = $29;
   $189 = ((($188)) + 8|0);
   $28 = $189;
   $190 = $28;
   $27 = $190;
   $191 = $27;
   HEAP32[$191>>2] = 0;
   $192 = $35;
   $193 = ((($192)) + 4|0);
   HEAP32[$193>>2] = 0;
   $194 = $35;
   HEAP32[$194>>2] = 0;
   __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($60);
   $195 = ((($126)) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($196)) + 12|0);
   HEAP32[$195>>2] = $197;
  } else {
   $198 = $59;
   $51 = $198;
   $199 = $51;
   __THREW__ = 0;
   invoke_vii(388,($126|0),($199|0));
   $200 = __THREW__; __THREW__ = 0;
   $201 = $200&1;
   if ($201) {
    $202 = ___cxa_find_matching_catch_2()|0;
    $203 = tempRet0;
    $101 = $202;
    $102 = $203;
    __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($100);
    $204 = $101;
    $205 = $102;
    ___resumeException($204|0);
    // unreachable;
   }
  }
  __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($100);
 }
 $4 = $1;
 $206 = $4;
 $207 = HEAP32[$206>>2]|0;
 $208 = HEAP32[$207>>2]|0;
 $2 = $103;
 $3 = $208;
 $209 = $2;
 $210 = HEAP32[$209>>2]|0;
 $211 = $3;
 $212 = (($210) + (($211*12)|0)|0);
 $95 = $212;
 $96 = $1;
 $213 = $95;
 $214 = ((($213)) + 4|0);
 $215 = HEAP32[$214>>2]|0;
 $94 = $213;
 $216 = $94;
 $217 = ((($216)) + 8|0);
 $93 = $217;
 $218 = $93;
 $92 = $218;
 $219 = $92;
 $220 = HEAP32[$219>>2]|0;
 $221 = ($215|0)!=($220|0);
 if (!($221)) {
  $256 = $96;
  __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($213,$256);
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($97,$213,1);
 $91 = $213;
 $222 = $91;
 $223 = ((($222)) + 8|0);
 $90 = $223;
 $224 = $90;
 $89 = $224;
 $225 = $89;
 $226 = ((($213)) + 4|0);
 $227 = HEAP32[$226>>2]|0;
 $88 = $227;
 $228 = $88;
 $229 = $96;
 $84 = $225;
 $85 = $228;
 $86 = $229;
 $230 = $84;
 $231 = $85;
 $232 = $86;
 $83 = $232;
 $233 = $83;
 ;HEAP8[$82>>0]=HEAP8[$87>>0]|0;
 $79 = $230;
 $80 = $231;
 $81 = $233;
 $234 = $79;
 $235 = $80;
 $236 = $81;
 $78 = $236;
 $237 = $78;
 $75 = $234;
 $76 = $235;
 $77 = $237;
 $238 = $76;
 $239 = $77;
 $74 = $239;
 $240 = $74;
 $72 = $238;
 $73 = $240;
 $241 = $72;
 $242 = $73;
 $243 = HEAP32[$242>>2]|0;
 HEAP32[$241>>2] = $243;
 $244 = ((($241)) + 4|0);
 $245 = $73;
 $246 = ((($245)) + 4|0);
 $247 = HEAP32[$246>>2]|0;
 HEAP32[$244>>2] = $247;
 $248 = ((($241)) + 4|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($249|0)!=(0|0);
 if ($250) {
  $251 = ((($241)) + 4|0);
  $252 = HEAP32[$251>>2]|0;
  __ZNSt3__219__shared_weak_count12__add_sharedEv($252);
 }
 __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($97);
 $253 = ((($213)) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + 8|0);
 HEAP32[$253>>2] = $255;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 300|0;
 $7 = sp + 24|0;
 $10 = sp + 288|0;
 $11 = sp + 323|0;
 $12 = sp + 16|0;
 $16 = sp + 322|0;
 $40 = sp + 8|0;
 $45 = sp + 321|0;
 $54 = sp;
 $57 = sp + 320|0;
 $65 = sp + 96|0;
 $68 = sp + 84|0;
 $76 = sp + 36|0;
 $73 = $0;
 $74 = $1;
 $79 = $73;
 $72 = $79;
 $80 = $72;
 $81 = ((($80)) + 8|0);
 $71 = $81;
 $82 = $71;
 $70 = $82;
 $83 = $70;
 $75 = $83;
 $69 = $79;
 $84 = $69;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 12)&-1;
 $92 = (($91) + 1)|0;
 $64 = $79;
 HEAP32[$65>>2] = $92;
 $93 = $64;
 $94 = (__ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($93)|0);
 $66 = $94;
 $95 = HEAP32[$65>>2]|0;
 $96 = $66;
 $97 = ($95>>>0)>($96>>>0);
 if ($97) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($93);
 }
 $62 = $93;
 $98 = $62;
 $61 = $98;
 $99 = $61;
 $60 = $99;
 $100 = $60;
 $101 = ((($100)) + 8|0);
 $59 = $101;
 $102 = $59;
 $58 = $102;
 $103 = $58;
 $104 = HEAP32[$103>>2]|0;
 $105 = HEAP32[$99>>2]|0;
 $106 = $104;
 $107 = $105;
 $108 = (($106) - ($107))|0;
 $109 = (($108|0) / 12)&-1;
 $67 = $109;
 $110 = $67;
 $111 = $66;
 $112 = (($111>>>0) / 2)&-1;
 $113 = ($110>>>0)>=($112>>>0);
 if ($113) {
  $114 = $66;
  $63 = $114;
 } else {
  $115 = $67;
  $116 = $115<<1;
  HEAP32[$68>>2] = $116;
  $55 = $68;
  $56 = $65;
  $117 = $55;
  $118 = $56;
  ;HEAP8[$54>>0]=HEAP8[$57>>0]|0;
  $52 = $117;
  $53 = $118;
  $119 = $52;
  $120 = $53;
  $49 = $54;
  $50 = $119;
  $51 = $120;
  $121 = $50;
  $122 = HEAP32[$121>>2]|0;
  $123 = $51;
  $124 = HEAP32[$123>>2]|0;
  $125 = ($122>>>0)<($124>>>0);
  $126 = $53;
  $127 = $52;
  $128 = $125 ? $126 : $127;
  $129 = HEAP32[$128>>2]|0;
  $63 = $129;
 }
 $130 = $63;
 $48 = $79;
 $131 = $48;
 $132 = ((($131)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = HEAP32[$131>>2]|0;
 $135 = $133;
 $136 = $134;
 $137 = (($135) - ($136))|0;
 $138 = (($137|0) / 12)&-1;
 $139 = $75;
 __ZNSt3__214__split_bufferINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($76,$130,$138,$139);
 $140 = $75;
 $141 = ((($76)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $47 = $142;
 $143 = $47;
 $144 = $74;
 $46 = $144;
 $145 = $46;
 $42 = $140;
 $43 = $143;
 $44 = $145;
 $146 = $42;
 $147 = $43;
 $148 = $44;
 $41 = $148;
 $149 = $41;
 ;HEAP8[$40>>0]=HEAP8[$45>>0]|0;
 $37 = $146;
 $38 = $147;
 $39 = $149;
 $150 = $37;
 $151 = $38;
 $152 = $39;
 $36 = $152;
 $153 = $36;
 $33 = $150;
 $34 = $151;
 $35 = $153;
 $154 = $34;
 $155 = $35;
 $32 = $155;
 $156 = $32;
 $30 = $154;
 $31 = $156;
 $157 = $30;
 $158 = $31;
 $29 = $158;
 $159 = $29;
 $160 = ((($159)) + 8|0);
 $28 = $160;
 $161 = $28;
 $27 = $161;
 $162 = $27;
 $26 = $162;
 $163 = $26;
 $14 = $157;
 $15 = $163;
 $164 = $14;
 $13 = $164;
 HEAP32[$164>>2] = 0;
 $165 = ((($164)) + 4|0);
 HEAP32[$165>>2] = 0;
 $166 = ((($164)) + 8|0);
 ;HEAP8[$12>>0]=HEAP8[$16>>0]|0;
 $9 = $166;
 HEAP32[$10>>2] = 0;
 $167 = $9;
 $8 = $10;
 $168 = $8;
 $169 = HEAP32[$168>>2]|0;
 $2 = $12;
 ;HEAP8[$7>>0]=HEAP8[$11>>0]|0;
 $5 = $167;
 HEAP32[$6>>2] = $169;
 $170 = $5;
 $4 = $7;
 $3 = $6;
 $171 = $3;
 $172 = HEAP32[$171>>2]|0;
 HEAP32[$170>>2] = $172;
 $173 = $31;
 $174 = HEAP32[$173>>2]|0;
 HEAP32[$157>>2] = $174;
 $175 = $31;
 $176 = ((($175)) + 4|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ((($157)) + 4|0);
 HEAP32[$178>>2] = $177;
 $179 = $31;
 $19 = $179;
 $180 = $19;
 $181 = ((($180)) + 8|0);
 $18 = $181;
 $182 = $18;
 $17 = $182;
 $183 = $17;
 $184 = HEAP32[$183>>2]|0;
 $22 = $157;
 $185 = $22;
 $186 = ((($185)) + 8|0);
 $21 = $186;
 $187 = $21;
 $20 = $187;
 $188 = $20;
 HEAP32[$188>>2] = $184;
 $189 = $31;
 $25 = $189;
 $190 = $25;
 $191 = ((($190)) + 8|0);
 $24 = $191;
 $192 = $24;
 $23 = $192;
 $193 = $23;
 HEAP32[$193>>2] = 0;
 $194 = $31;
 $195 = ((($194)) + 4|0);
 HEAP32[$195>>2] = 0;
 $196 = $31;
 HEAP32[$196>>2] = 0;
 $197 = ((($76)) + 8|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ((($198)) + 12|0);
 HEAP32[$197>>2] = $199;
 __THREW__ = 0;
 invoke_vii(389,($79|0),($76|0));
 $200 = __THREW__; __THREW__ = 0;
 $201 = $200&1;
 if ($201) {
  $202 = ___cxa_find_matching_catch_2()|0;
  $203 = tempRet0;
  $77 = $202;
  $78 = $203;
  __ZNSt3__214__split_bufferINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($76);
  $204 = $77;
  $205 = $78;
  ___resumeException($204|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($76);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $12 = sp + 8|0;
 $17 = sp + 209|0;
 $26 = sp;
 $29 = sp + 208|0;
 $37 = sp + 80|0;
 $40 = sp + 68|0;
 $48 = sp + 20|0;
 $45 = $0;
 $46 = $1;
 $51 = $45;
 $44 = $51;
 $52 = $44;
 $53 = ((($52)) + 8|0);
 $43 = $53;
 $54 = $43;
 $42 = $54;
 $55 = $42;
 $47 = $55;
 $41 = $51;
 $56 = $41;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$56>>2]|0;
 $60 = $58;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 8)&-1;
 $64 = (($63) + 1)|0;
 $36 = $51;
 HEAP32[$37>>2] = $64;
 $65 = $36;
 $66 = (__ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE8max_sizeEv($65)|0);
 $38 = $66;
 $67 = HEAP32[$37>>2]|0;
 $68 = $38;
 $69 = ($67>>>0)>($68>>>0);
 if ($69) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($65);
 }
 $34 = $65;
 $70 = $34;
 $33 = $70;
 $71 = $33;
 $32 = $71;
 $72 = $32;
 $73 = ((($72)) + 8|0);
 $31 = $73;
 $74 = $31;
 $30 = $74;
 $75 = $30;
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$71>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 8)&-1;
 $39 = $81;
 $82 = $39;
 $83 = $38;
 $84 = (($83>>>0) / 2)&-1;
 $85 = ($82>>>0)>=($84>>>0);
 if ($85) {
  $86 = $38;
  $35 = $86;
 } else {
  $87 = $39;
  $88 = $87<<1;
  HEAP32[$40>>2] = $88;
  $27 = $40;
  $28 = $37;
  $89 = $27;
  $90 = $28;
  ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
  $24 = $89;
  $25 = $90;
  $91 = $24;
  $92 = $25;
  $21 = $26;
  $22 = $91;
  $23 = $92;
  $93 = $22;
  $94 = HEAP32[$93>>2]|0;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $97 = ($94>>>0)<($96>>>0);
  $98 = $25;
  $99 = $24;
  $100 = $97 ? $98 : $99;
  $101 = HEAP32[$100>>2]|0;
  $35 = $101;
 }
 $102 = $35;
 $20 = $51;
 $103 = $20;
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = HEAP32[$103>>2]|0;
 $107 = $105;
 $108 = $106;
 $109 = (($107) - ($108))|0;
 $110 = (($109|0) / 8)&-1;
 $111 = $47;
 __ZNSt3__214__split_bufferINS_10shared_ptrI5LevelEERNS_9allocatorIS3_EEEC2EjjS6_($48,$102,$110,$111);
 $112 = $47;
 $113 = ((($48)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $19 = $114;
 $115 = $19;
 $116 = $46;
 $18 = $116;
 $117 = $18;
 $14 = $112;
 $15 = $115;
 $16 = $117;
 $118 = $14;
 $119 = $15;
 $120 = $16;
 $13 = $120;
 $121 = $13;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 $9 = $118;
 $10 = $119;
 $11 = $121;
 $122 = $9;
 $123 = $10;
 $124 = $11;
 $8 = $124;
 $125 = $8;
 $5 = $122;
 $6 = $123;
 $7 = $125;
 $126 = $6;
 $127 = $7;
 $4 = $127;
 $128 = $4;
 $2 = $126;
 $3 = $128;
 $129 = $2;
 $130 = $3;
 $131 = HEAP32[$130>>2]|0;
 HEAP32[$129>>2] = $131;
 $132 = ((($129)) + 4|0);
 $133 = $3;
 $134 = ((($133)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$132>>2] = $135;
 $136 = ((($129)) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = ((($129)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  __ZNSt3__219__shared_weak_count12__add_sharedEv($140);
 }
 $141 = ((($48)) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 8|0);
 HEAP32[$141>>2] = $143;
 __THREW__ = 0;
 invoke_vii(390,($51|0),($48|0));
 $144 = __THREW__; __THREW__ = 0;
 $145 = $144&1;
 if ($145) {
  $146 = ___cxa_find_matching_catch_2()|0;
  $147 = tempRet0;
  $49 = $146;
  $50 = $147;
  __ZNSt3__214__split_bufferINS_10shared_ptrI5LevelEERNS_9allocatorIS3_EEED2Ev($48);
  $148 = $49;
  $149 = $50;
  ___resumeException($148|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferINS_10shared_ptrI5LevelEERNS_9allocatorIS3_EEED2Ev($48);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 536870911;
 $28 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $28;
 $7 = $19;
 $8 = $20;
 $29 = $7;
 $30 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $29;
 $5 = $30;
 $31 = $5;
 $32 = $4;
 $1 = $6;
 $2 = $31;
 $3 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34>>>0)<($36>>>0);
 $38 = $5;
 $39 = $4;
 $40 = $37 ? $38 : $39;
 $41 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__214__split_bufferINS_10shared_ptrI5LevelEERNS_9allocatorIS3_EEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0);
 $33 = $30;
 $24 = $32;
 HEAP32[$25>>2] = 0;
 $26 = $33;
 $34 = $24;
 $23 = $25;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = $26;
 $17 = $37;
 $38 = $17;
 $20 = $34;
 HEAP32[$21>>2] = $36;
 $22 = $38;
 $39 = $20;
 $19 = $21;
 $40 = $19;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($39)) + 4|0);
 $43 = $22;
 $18 = $43;
 $44 = $18;
 HEAP32[$42>>2] = $44;
 $45 = $28;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $6 = $31;
   $47 = $6;
   $48 = ((($47)) + 12|0);
   $5 = $48;
   $49 = $5;
   $4 = $49;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   $12 = $52;
   $13 = $53;
   $54 = $12;
   $55 = $13;
   $9 = $54;
   $10 = $55;
   $11 = 0;
   $56 = $9;
   $57 = $10;
   $8 = $56;
   $58 = ($57>>>0)>(536870911);
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($59);
    ___cxa_throw(($59|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $60 = $10;
    $61 = $60<<3;
    $7 = $61;
    $62 = $7;
    $63 = (__Znwj($62)|0);
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64;
 $65 = HEAP32[$31>>2]|0;
 $66 = $29;
 $67 = (($65) + ($66<<3)|0);
 $68 = ((($31)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($31)) + 4|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$31>>2]|0;
 $71 = $28;
 $72 = (($70) + ($71<<3)|0);
 $16 = $31;
 $73 = $16;
 $74 = ((($73)) + 12|0);
 $15 = $74;
 $75 = $15;
 $14 = $75;
 $76 = $14;
 HEAP32[$76>>2] = $72;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $7 = sp + 188|0;
 $13 = sp + 164|0;
 $25 = sp + 116|0;
 $39 = sp;
 $44 = sp + 212|0;
 $54 = $0;
 $55 = $1;
 $56 = $54;
 __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE17__annotate_deleteEv($56);
 $53 = $56;
 $57 = $53;
 $58 = ((($57)) + 8|0);
 $52 = $58;
 $59 = $52;
 $51 = $59;
 $60 = $51;
 $61 = HEAP32[$56>>2]|0;
 $62 = ((($56)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $55;
 $65 = ((($64)) + 4|0);
 $46 = $60;
 $47 = $61;
 $48 = $63;
 $49 = $65;
 while(1) {
  $66 = $48;
  $67 = $47;
  $68 = ($66|0)!=($67|0);
  if (!($68)) {
   break;
  }
  $69 = $46;
  $70 = $49;
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + -8|0);
  $45 = $72;
  $73 = $45;
  $74 = $48;
  $75 = ((($74)) + -8|0);
  $48 = $75;
  $28 = $75;
  $76 = $28;
  $27 = $76;
  $77 = $27;
  $41 = $69;
  $42 = $73;
  $43 = $77;
  $78 = $41;
  $79 = $42;
  $80 = $43;
  $40 = $80;
  $81 = $40;
  ;HEAP8[$39>>0]=HEAP8[$44>>0]|0;
  $36 = $78;
  $37 = $79;
  $38 = $81;
  $82 = $36;
  $83 = $37;
  $84 = $38;
  $35 = $84;
  $85 = $35;
  $32 = $82;
  $33 = $83;
  $34 = $85;
  $86 = $33;
  $87 = $34;
  $31 = $87;
  $88 = $31;
  $29 = $86;
  $30 = $88;
  $89 = $29;
  $90 = $30;
  $91 = HEAP32[$90>>2]|0;
  HEAP32[$89>>2] = $91;
  $92 = ((($89)) + 4|0);
  $93 = $30;
  $94 = ((($93)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  HEAP32[$92>>2] = $95;
  $96 = $30;
  HEAP32[$96>>2] = 0;
  $97 = $30;
  $98 = ((($97)) + 4|0);
  HEAP32[$98>>2] = 0;
  $99 = $49;
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + -8|0);
  HEAP32[$99>>2] = $101;
 }
 $102 = $55;
 $103 = ((($102)) + 4|0);
 $5 = $56;
 $6 = $103;
 $104 = $5;
 $4 = $104;
 $105 = $4;
 $106 = HEAP32[$105>>2]|0;
 HEAP32[$7>>2] = $106;
 $107 = $6;
 $2 = $107;
 $108 = $2;
 $109 = HEAP32[$108>>2]|0;
 $110 = $5;
 HEAP32[$110>>2] = $109;
 $3 = $7;
 $111 = $3;
 $112 = HEAP32[$111>>2]|0;
 $113 = $6;
 HEAP32[$113>>2] = $112;
 $114 = ((($56)) + 4|0);
 $115 = $55;
 $116 = ((($115)) + 8|0);
 $11 = $114;
 $12 = $116;
 $117 = $11;
 $10 = $117;
 $118 = $10;
 $119 = HEAP32[$118>>2]|0;
 HEAP32[$13>>2] = $119;
 $120 = $12;
 $8 = $120;
 $121 = $8;
 $122 = HEAP32[$121>>2]|0;
 $123 = $11;
 HEAP32[$123>>2] = $122;
 $9 = $13;
 $124 = $9;
 $125 = HEAP32[$124>>2]|0;
 $126 = $12;
 HEAP32[$126>>2] = $125;
 $16 = $56;
 $127 = $16;
 $128 = ((($127)) + 8|0);
 $15 = $128;
 $129 = $15;
 $14 = $129;
 $130 = $14;
 $131 = $55;
 $19 = $131;
 $132 = $19;
 $133 = ((($132)) + 12|0);
 $18 = $133;
 $134 = $18;
 $17 = $134;
 $135 = $17;
 $23 = $130;
 $24 = $135;
 $136 = $23;
 $22 = $136;
 $137 = $22;
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$25>>2] = $138;
 $139 = $24;
 $20 = $139;
 $140 = $20;
 $141 = HEAP32[$140>>2]|0;
 $142 = $23;
 HEAP32[$142>>2] = $141;
 $21 = $25;
 $143 = $21;
 $144 = HEAP32[$143>>2]|0;
 $145 = $24;
 HEAP32[$145>>2] = $144;
 $146 = $55;
 $147 = ((($146)) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $55;
 HEAP32[$149>>2] = $148;
 $26 = $56;
 $150 = $26;
 $151 = ((($150)) + 4|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = HEAP32[$150>>2]|0;
 $154 = $152;
 $155 = $153;
 $156 = (($154) - ($155))|0;
 $157 = (($156|0) / 8)&-1;
 __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE14__annotate_newEj($56,$157);
 $50 = $56;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_10shared_ptrI5LevelEERNS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -8|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
  $60 = $16;
  __ZNSt3__210shared_ptrI5LevelED2Ev($60);
 }
 $61 = HEAP32[$35>>2]|0;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $63 = $14;
 $64 = ((($63)) + 12|0);
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$35>>2]|0;
 $11 = $35;
 $70 = $11;
 $10 = $70;
 $71 = $10;
 $72 = ((($71)) + 12|0);
 $9 = $72;
 $73 = $9;
 $8 = $73;
 $74 = $8;
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$70>>2]|0;
 $77 = $75;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $80 = (($79|0) / 8)&-1;
 $5 = $68;
 $6 = $69;
 $7 = $80;
 $81 = $5;
 $82 = $6;
 $83 = $7;
 $2 = $81;
 $3 = $82;
 $4 = $83;
 $84 = $3;
 $1 = $84;
 $85 = $1;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $23 = HEAP32[$22>>2]|0;
 $18 = $23;
 $24 = $18;
 $17 = $21;
 $25 = $17;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $16;
 $5 = $21;
 $28 = $5;
 $4 = $28;
 $29 = $4;
 $3 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $2 = $31;
 $32 = $2;
 $1 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$29>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 8)&-1;
 $40 = (($27) + ($39<<3)|0);
 $7 = $21;
 $41 = $7;
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $8 = $21;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 $10 = $21;
 $53 = $10;
 $54 = HEAP32[$53>>2]|0;
 $9 = $54;
 $55 = $9;
 $15 = $21;
 $56 = $15;
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = ((($58)) + 8|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $68 = (($55) + ($67<<3)|0);
 __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($21,$24,$40,$52,$68);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $25 = $18;
 $17 = $22;
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $16 = $27;
 $28 = $16;
 $6 = $22;
 $29 = $6;
 $5 = $29;
 $30 = $5;
 $4 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 $3 = $32;
 $33 = $3;
 $2 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$30>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 8)&-1;
 $41 = (($28) + ($40<<3)|0);
 $8 = $22;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $7 = $43;
 $44 = $7;
 $13 = $22;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = ((($47)) + 8|0);
 $10 = $48;
 $49 = $10;
 $9 = $49;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$46>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 8)&-1;
 $57 = (($44) + ($56<<3)|0);
 $15 = $22;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $14 = $59;
 $60 = $14;
 $61 = $21;
 $62 = (($60) + ($61<<3)|0);
 __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($22,$25,$41,$57,$62);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 357913941;
 $28 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $28;
 $7 = $19;
 $8 = $20;
 $29 = $7;
 $30 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $29;
 $5 = $30;
 $31 = $5;
 $32 = $4;
 $1 = $6;
 $2 = $31;
 $3 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34>>>0)<($36>>>0);
 $38 = $5;
 $39 = $4;
 $40 = $37 ? $38 : $39;
 $41 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__214__split_bufferINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0);
 $33 = $30;
 $24 = $32;
 HEAP32[$25>>2] = 0;
 $26 = $33;
 $34 = $24;
 $23 = $25;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = $26;
 $17 = $37;
 $38 = $17;
 $20 = $34;
 HEAP32[$21>>2] = $36;
 $22 = $38;
 $39 = $20;
 $19 = $21;
 $40 = $19;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($39)) + 4|0);
 $43 = $22;
 $18 = $43;
 $44 = $18;
 HEAP32[$42>>2] = $44;
 $45 = $28;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $6 = $31;
   $47 = $6;
   $48 = ((($47)) + 12|0);
   $5 = $48;
   $49 = $5;
   $4 = $49;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   $12 = $52;
   $13 = $53;
   $54 = $12;
   $55 = $13;
   $9 = $54;
   $10 = $55;
   $11 = 0;
   $56 = $9;
   $57 = $10;
   $8 = $56;
   $58 = ($57>>>0)>(357913941);
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($59);
    ___cxa_throw(($59|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $60 = $10;
    $61 = ($60*12)|0;
    $7 = $61;
    $62 = $7;
    $63 = (__Znwj($62)|0);
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64;
 $65 = HEAP32[$31>>2]|0;
 $66 = $29;
 $67 = (($65) + (($66*12)|0)|0);
 $68 = ((($31)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($31)) + 4|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$31>>2]|0;
 $71 = $28;
 $72 = (($70) + (($71*12)|0)|0);
 $16 = $31;
 $73 = $16;
 $74 = ((($73)) + 12|0);
 $15 = $74;
 $75 = $15;
 $14 = $75;
 $76 = $14;
 HEAP32[$76>>2] = $72;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $7 = sp + 300|0;
 $13 = sp + 276|0;
 $25 = sp + 228|0;
 $33 = sp + 196|0;
 $34 = sp + 16|0;
 $37 = sp + 184|0;
 $38 = sp + 326|0;
 $39 = sp + 8|0;
 $43 = sp + 325|0;
 $67 = sp;
 $72 = sp + 324|0;
 $82 = $0;
 $83 = $1;
 $84 = $82;
 __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($84);
 $81 = $84;
 $85 = $81;
 $86 = ((($85)) + 8|0);
 $80 = $86;
 $87 = $80;
 $79 = $87;
 $88 = $79;
 $89 = HEAP32[$84>>2]|0;
 $90 = ((($84)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $83;
 $93 = ((($92)) + 4|0);
 $74 = $88;
 $75 = $89;
 $76 = $91;
 $77 = $93;
 while(1) {
  $94 = $76;
  $95 = $75;
  $96 = ($94|0)!=($95|0);
  if (!($96)) {
   break;
  }
  $97 = $74;
  $98 = $77;
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($99)) + -12|0);
  $73 = $100;
  $101 = $73;
  $102 = $76;
  $103 = ((($102)) + -12|0);
  $76 = $103;
  $28 = $103;
  $104 = $28;
  $27 = $104;
  $105 = $27;
  $69 = $97;
  $70 = $101;
  $71 = $105;
  $106 = $69;
  $107 = $70;
  $108 = $71;
  $68 = $108;
  $109 = $68;
  ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
  $64 = $106;
  $65 = $107;
  $66 = $109;
  $110 = $64;
  $111 = $65;
  $112 = $66;
  $63 = $112;
  $113 = $63;
  $60 = $110;
  $61 = $111;
  $62 = $113;
  $114 = $61;
  $115 = $62;
  $59 = $115;
  $116 = $59;
  $57 = $114;
  $58 = $116;
  $117 = $57;
  $118 = $58;
  $56 = $118;
  $119 = $56;
  $120 = ((($119)) + 8|0);
  $55 = $120;
  $121 = $55;
  $54 = $121;
  $122 = $54;
  $53 = $122;
  $123 = $53;
  $41 = $117;
  $42 = $123;
  $124 = $41;
  $40 = $124;
  HEAP32[$124>>2] = 0;
  $125 = ((($124)) + 4|0);
  HEAP32[$125>>2] = 0;
  $126 = ((($124)) + 8|0);
  ;HEAP8[$39>>0]=HEAP8[$43>>0]|0;
  $36 = $126;
  HEAP32[$37>>2] = 0;
  $127 = $36;
  $35 = $37;
  $128 = $35;
  $129 = HEAP32[$128>>2]|0;
  $29 = $39;
  ;HEAP8[$34>>0]=HEAP8[$38>>0]|0;
  $32 = $127;
  HEAP32[$33>>2] = $129;
  $130 = $32;
  $31 = $34;
  $30 = $33;
  $131 = $30;
  $132 = HEAP32[$131>>2]|0;
  HEAP32[$130>>2] = $132;
  $133 = $58;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$117>>2] = $134;
  $135 = $58;
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ((($117)) + 4|0);
  HEAP32[$138>>2] = $137;
  $139 = $58;
  $46 = $139;
  $140 = $46;
  $141 = ((($140)) + 8|0);
  $45 = $141;
  $142 = $45;
  $44 = $142;
  $143 = $44;
  $144 = HEAP32[$143>>2]|0;
  $49 = $117;
  $145 = $49;
  $146 = ((($145)) + 8|0);
  $48 = $146;
  $147 = $48;
  $47 = $147;
  $148 = $47;
  HEAP32[$148>>2] = $144;
  $149 = $58;
  $52 = $149;
  $150 = $52;
  $151 = ((($150)) + 8|0);
  $51 = $151;
  $152 = $51;
  $50 = $152;
  $153 = $50;
  HEAP32[$153>>2] = 0;
  $154 = $58;
  $155 = ((($154)) + 4|0);
  HEAP32[$155>>2] = 0;
  $156 = $58;
  HEAP32[$156>>2] = 0;
  $157 = $77;
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($158)) + -12|0);
  HEAP32[$157>>2] = $159;
 }
 $160 = $83;
 $161 = ((($160)) + 4|0);
 $5 = $84;
 $6 = $161;
 $162 = $5;
 $4 = $162;
 $163 = $4;
 $164 = HEAP32[$163>>2]|0;
 HEAP32[$7>>2] = $164;
 $165 = $6;
 $2 = $165;
 $166 = $2;
 $167 = HEAP32[$166>>2]|0;
 $168 = $5;
 HEAP32[$168>>2] = $167;
 $3 = $7;
 $169 = $3;
 $170 = HEAP32[$169>>2]|0;
 $171 = $6;
 HEAP32[$171>>2] = $170;
 $172 = ((($84)) + 4|0);
 $173 = $83;
 $174 = ((($173)) + 8|0);
 $11 = $172;
 $12 = $174;
 $175 = $11;
 $10 = $175;
 $176 = $10;
 $177 = HEAP32[$176>>2]|0;
 HEAP32[$13>>2] = $177;
 $178 = $12;
 $8 = $178;
 $179 = $8;
 $180 = HEAP32[$179>>2]|0;
 $181 = $11;
 HEAP32[$181>>2] = $180;
 $9 = $13;
 $182 = $9;
 $183 = HEAP32[$182>>2]|0;
 $184 = $12;
 HEAP32[$184>>2] = $183;
 $16 = $84;
 $185 = $16;
 $186 = ((($185)) + 8|0);
 $15 = $186;
 $187 = $15;
 $14 = $187;
 $188 = $14;
 $189 = $83;
 $19 = $189;
 $190 = $19;
 $191 = ((($190)) + 12|0);
 $18 = $191;
 $192 = $18;
 $17 = $192;
 $193 = $17;
 $23 = $188;
 $24 = $193;
 $194 = $23;
 $22 = $194;
 $195 = $22;
 $196 = HEAP32[$195>>2]|0;
 HEAP32[$25>>2] = $196;
 $197 = $24;
 $20 = $197;
 $198 = $20;
 $199 = HEAP32[$198>>2]|0;
 $200 = $23;
 HEAP32[$200>>2] = $199;
 $21 = $25;
 $201 = $21;
 $202 = HEAP32[$201>>2]|0;
 $203 = $24;
 HEAP32[$203>>2] = $202;
 $204 = $83;
 $205 = ((($204)) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $83;
 HEAP32[$207>>2] = $206;
 $26 = $84;
 $208 = $26;
 $209 = ((($208)) + 4|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = HEAP32[$208>>2]|0;
 $212 = $210;
 $213 = $211;
 $214 = (($212) - ($213))|0;
 $215 = (($214|0) / 12)&-1;
 __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($84,$215);
 $78 = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_6vectorINS_10shared_ptrI5LevelEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -12|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
  $60 = $16;
  __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($60);
 }
 $61 = HEAP32[$35>>2]|0;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $63 = $14;
 $64 = ((($63)) + 12|0);
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$35>>2]|0;
 $11 = $35;
 $70 = $11;
 $10 = $70;
 $71 = $10;
 $72 = ((($71)) + 12|0);
 $9 = $72;
 $73 = $9;
 $8 = $73;
 $74 = $8;
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$70>>2]|0;
 $77 = $75;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $80 = (($79|0) / 12)&-1;
 $5 = $68;
 $6 = $69;
 $7 = $80;
 $81 = $5;
 $82 = $6;
 $83 = $7;
 $2 = $81;
 $3 = $82;
 $4 = $83;
 $84 = $3;
 $1 = $84;
 $85 = $1;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $23 = HEAP32[$22>>2]|0;
 $18 = $23;
 $24 = $18;
 $17 = $21;
 $25 = $17;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $16;
 $5 = $21;
 $28 = $5;
 $4 = $28;
 $29 = $4;
 $3 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $2 = $31;
 $32 = $2;
 $1 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$29>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 12)&-1;
 $40 = (($27) + (($39*12)|0)|0);
 $7 = $21;
 $41 = $7;
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $8 = $21;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 $10 = $21;
 $53 = $10;
 $54 = HEAP32[$53>>2]|0;
 $9 = $54;
 $55 = $9;
 $15 = $21;
 $56 = $15;
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = ((($58)) + 8|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $68 = (($55) + (($67*12)|0)|0);
 __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($21,$24,$40,$52,$68);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $25 = $18;
 $17 = $22;
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $16 = $27;
 $28 = $16;
 $6 = $22;
 $29 = $6;
 $5 = $29;
 $30 = $5;
 $4 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 $3 = $32;
 $33 = $3;
 $2 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$30>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 12)&-1;
 $41 = (($28) + (($40*12)|0)|0);
 $8 = $22;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $7 = $43;
 $44 = $7;
 $13 = $22;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = ((($47)) + 8|0);
 $10 = $48;
 $49 = $10;
 $9 = $49;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$46>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $57 = (($44) + (($56*12)|0)|0);
 $15 = $22;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $14 = $59;
 $60 = $14;
 $61 = $21;
 $62 = (($60) + (($61*12)|0)|0);
 __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($22,$25,$41,$57,$62);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $17 = sp + 384|0;
 $43 = sp;
 $46 = sp + 448|0;
 $84 = sp + 124|0;
 $85 = sp + 120|0;
 $102 = sp + 52|0;
 $110 = sp + 20|0;
 $113 = sp + 8|0;
 $114 = sp + 4|0;
 $111 = $0;
 $112 = $1;
 $115 = $111;
 $116 = $112;
 $109 = $115;
 $117 = $109;
 $108 = $117;
 $118 = $108;
 $119 = ((($118)) + 4|0);
 $107 = $119;
 $120 = $107;
 $106 = $120;
 $121 = $106;
 $105 = $121;
 $122 = $105;
 $104 = $122;
 $123 = $104;
 $124 = HEAP32[$123>>2]|0;
 $23 = $115;
 $125 = $23;
 $126 = ((($125)) + 4|0);
 $22 = $126;
 $127 = $22;
 $21 = $127;
 $128 = $21;
 $20 = $128;
 $129 = $20;
 $19 = $129;
 $130 = $19;
 $131 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE13__lower_boundIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_SN_SN_($115,$116,$124,$130)|0);
 HEAP32[$113>>2] = $131;
 $18 = $115;
 $132 = $18;
 $16 = $132;
 $133 = $16;
 $134 = ((($133)) + 4|0);
 $15 = $134;
 $135 = $15;
 $14 = $135;
 $136 = $14;
 $13 = $136;
 $137 = $13;
 $12 = $137;
 $138 = $12;
 $10 = $17;
 $11 = $138;
 $139 = $10;
 $140 = $11;
 HEAP32[$139>>2] = $140;
 $141 = HEAP32[$17>>2]|0;
 HEAP32[$114>>2] = $141;
 $4 = $113;
 $5 = $114;
 $142 = $4;
 $143 = $5;
 $2 = $142;
 $3 = $143;
 $144 = $2;
 $145 = HEAP32[$144>>2]|0;
 $146 = $3;
 $147 = HEAP32[$146>>2]|0;
 $148 = ($145|0)==($147|0);
 $149 = $148 ^ 1;
 if ($149) {
  $8 = $115;
  $150 = $8;
  $151 = ((($150)) + 8|0);
  $7 = $151;
  $152 = $7;
  $6 = $152;
  $153 = $6;
  $154 = $112;
  $9 = $113;
  $155 = $9;
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 16|0);
  $92 = $153;
  $93 = $154;
  $94 = $157;
  $158 = $92;
  $159 = $93;
  $160 = $94;
  $89 = $158;
  $90 = $159;
  $91 = $160;
  $161 = $90;
  $162 = $91;
  $87 = $161;
  $88 = $162;
  $163 = $87;
  $164 = $88;
  $82 = $163;
  $83 = $164;
  $165 = $82;
  $80 = $165;
  $166 = $80;
  $79 = $166;
  $167 = $79;
  $78 = $167;
  $168 = $78;
  $77 = $168;
  $169 = $77;
  $170 = ((($169)) + 11|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = $172 & 128;
  $174 = ($173|0)!=(0);
  if ($174) {
   $73 = $166;
   $175 = $73;
   $72 = $175;
   $176 = $72;
   $71 = $176;
   $177 = $71;
   $178 = ((($177)) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   $186 = $179;
  } else {
   $76 = $166;
   $180 = $76;
   $75 = $180;
   $181 = $75;
   $74 = $181;
   $182 = $74;
   $183 = ((($182)) + 11|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = $185;
  }
  HEAP32[$84>>2] = $186;
  $187 = $83;
  $70 = $187;
  $188 = $70;
  $69 = $188;
  $189 = $69;
  $68 = $189;
  $190 = $68;
  $67 = $190;
  $191 = $67;
  $192 = ((($191)) + 11|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193&255;
  $195 = $194 & 128;
  $196 = ($195|0)!=(0);
  if ($196) {
   $63 = $188;
   $197 = $63;
   $62 = $197;
   $198 = $62;
   $61 = $198;
   $199 = $61;
   $200 = ((($199)) + 4|0);
   $201 = HEAP32[$200>>2]|0;
   $208 = $201;
  } else {
   $66 = $188;
   $202 = $66;
   $65 = $202;
   $203 = $65;
   $64 = $203;
   $204 = $64;
   $205 = ((($204)) + 11|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&255;
   $208 = $207;
  }
  HEAP32[$85>>2] = $208;
  $60 = $165;
  $209 = $60;
  $59 = $209;
  $210 = $59;
  $58 = $210;
  $211 = $58;
  $57 = $211;
  $212 = $57;
  $56 = $212;
  $213 = $56;
  $214 = ((($213)) + 11|0);
  $215 = HEAP8[$214>>0]|0;
  $216 = $215&255;
  $217 = $216 & 128;
  $218 = ($217|0)!=(0);
  if ($218) {
   $50 = $210;
   $219 = $50;
   $49 = $219;
   $220 = $49;
   $48 = $220;
   $221 = $48;
   $222 = HEAP32[$221>>2]|0;
   $228 = $222;
  } else {
   $55 = $210;
   $223 = $55;
   $54 = $223;
   $224 = $54;
   $53 = $224;
   $225 = $53;
   $52 = $225;
   $226 = $52;
   $51 = $226;
   $227 = $51;
   $228 = $227;
  }
  $47 = $228;
  $229 = $47;
  $230 = $83;
  $37 = $230;
  $231 = $37;
  $36 = $231;
  $232 = $36;
  $35 = $232;
  $233 = $35;
  $34 = $233;
  $234 = $34;
  $33 = $234;
  $235 = $33;
  $236 = ((($235)) + 11|0);
  $237 = HEAP8[$236>>0]|0;
  $238 = $237&255;
  $239 = $238 & 128;
  $240 = ($239|0)!=(0);
  if ($240) {
   $27 = $232;
   $241 = $27;
   $26 = $241;
   $242 = $26;
   $25 = $242;
   $243 = $25;
   $244 = HEAP32[$243>>2]|0;
   $250 = $244;
  } else {
   $32 = $232;
   $245 = $32;
   $31 = $245;
   $246 = $31;
   $30 = $246;
   $247 = $30;
   $29 = $247;
   $248 = $29;
   $28 = $248;
   $249 = $28;
   $250 = $249;
  }
  $24 = $250;
  $251 = $24;
  $44 = $84;
  $45 = $85;
  $252 = $44;
  $253 = $45;
  ;HEAP8[$43>>0]=HEAP8[$46>>0]|0;
  $41 = $252;
  $42 = $253;
  $254 = $42;
  $255 = $41;
  $38 = $43;
  $39 = $254;
  $40 = $255;
  $256 = $39;
  $257 = HEAP32[$256>>2]|0;
  $258 = $40;
  $259 = HEAP32[$258>>2]|0;
  $260 = ($257>>>0)<($259>>>0);
  $261 = $42;
  $262 = $41;
  $263 = $260 ? $261 : $262;
  $264 = HEAP32[$263>>2]|0;
  __THREW__ = 0;
  $265 = (invoke_iiii(381,($229|0),($251|0),($264|0))|0);
  $266 = __THREW__; __THREW__ = 0;
  $267 = $266&1;
  if ($267) {
   $277 = ___cxa_find_matching_catch_3(0|0)|0;
   $278 = tempRet0;
   ___clang_call_terminate($277);
   // unreachable;
  }
  $86 = $265;
  $268 = $86;
  $269 = ($268|0)!=(0);
  do {
   if ($269) {
    $270 = $86;
    $81 = $270;
   } else {
    $271 = HEAP32[$84>>2]|0;
    $272 = HEAP32[$85>>2]|0;
    $273 = ($271>>>0)<($272>>>0);
    if ($273) {
     $81 = -1;
     break;
    }
    $274 = HEAP32[$84>>2]|0;
    $275 = HEAP32[$85>>2]|0;
    $276 = ($274>>>0)>($275>>>0);
    if ($276) {
     $81 = 1;
     break;
    } else {
     $81 = 0;
     break;
    }
   }
  } while(0);
  $279 = $81;
  $280 = ($279|0)<(0);
  $281 = $280 ^ 1;
  if ($281) {
   ;HEAP32[$110>>2]=HEAP32[$113>>2]|0;
   $292 = HEAP32[$110>>2]|0;
   STACKTOP = sp;return ($292|0);
  }
 }
 $103 = $115;
 $282 = $103;
 $101 = $282;
 $283 = $101;
 $284 = ((($283)) + 4|0);
 $100 = $284;
 $285 = $100;
 $99 = $285;
 $286 = $99;
 $98 = $286;
 $287 = $98;
 $97 = $287;
 $288 = $97;
 $95 = $102;
 $96 = $288;
 $289 = $95;
 $290 = $96;
 HEAP32[$289>>2] = $290;
 $291 = HEAP32[$102>>2]|0;
 HEAP32[$110>>2] = $291;
 $292 = HEAP32[$110>>2]|0;
 STACKTOP = sp;return ($292|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE13__lower_boundIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_SN_SN_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $23 = sp;
 $26 = sp + 320|0;
 $64 = sp + 84|0;
 $65 = sp + 80|0;
 $80 = sp + 20|0;
 $81 = $0;
 $82 = $1;
 $83 = $2;
 $84 = $3;
 $85 = $81;
 while(1) {
  $86 = $83;
  $87 = ($86|0)!=(0|0);
  if (!($87)) {
   label = 27;
   break;
  }
  $79 = $85;
  $88 = $79;
  $89 = ((($88)) + 8|0);
  $78 = $89;
  $90 = $78;
  $77 = $90;
  $91 = $77;
  $92 = $83;
  $93 = ((($92)) + 16|0);
  $94 = $82;
  $72 = $91;
  $73 = $93;
  $74 = $94;
  $95 = $72;
  $96 = $73;
  $97 = $74;
  $69 = $95;
  $70 = $96;
  $71 = $97;
  $98 = $70;
  $99 = $71;
  $67 = $98;
  $68 = $99;
  $100 = $67;
  $101 = $68;
  $62 = $100;
  $63 = $101;
  $102 = $62;
  $60 = $102;
  $103 = $60;
  $59 = $103;
  $104 = $59;
  $58 = $104;
  $105 = $58;
  $57 = $105;
  $106 = $57;
  $107 = ((($106)) + 11|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 & 128;
  $111 = ($110|0)!=(0);
  if ($111) {
   $53 = $103;
   $112 = $53;
   $52 = $112;
   $113 = $52;
   $51 = $113;
   $114 = $51;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $123 = $116;
  } else {
   $56 = $103;
   $117 = $56;
   $55 = $117;
   $118 = $55;
   $54 = $118;
   $119 = $54;
   $120 = ((($119)) + 11|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $122;
  }
  HEAP32[$64>>2] = $123;
  $124 = $63;
  $50 = $124;
  $125 = $50;
  $49 = $125;
  $126 = $49;
  $48 = $126;
  $127 = $48;
  $47 = $127;
  $128 = $47;
  $129 = ((($128)) + 11|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = $131 & 128;
  $133 = ($132|0)!=(0);
  if ($133) {
   $43 = $125;
   $134 = $43;
   $42 = $134;
   $135 = $42;
   $41 = $135;
   $136 = $41;
   $137 = ((($136)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $145 = $138;
  } else {
   $46 = $125;
   $139 = $46;
   $45 = $139;
   $140 = $45;
   $44 = $140;
   $141 = $44;
   $142 = ((($141)) + 11|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $144;
  }
  HEAP32[$65>>2] = $145;
  $40 = $102;
  $146 = $40;
  $39 = $146;
  $147 = $39;
  $38 = $147;
  $148 = $38;
  $37 = $148;
  $149 = $37;
  $36 = $149;
  $150 = $36;
  $151 = ((($150)) + 11|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $153 & 128;
  $155 = ($154|0)!=(0);
  if ($155) {
   $30 = $147;
   $156 = $30;
   $29 = $156;
   $157 = $29;
   $28 = $157;
   $158 = $28;
   $159 = HEAP32[$158>>2]|0;
   $165 = $159;
  } else {
   $35 = $147;
   $160 = $35;
   $34 = $160;
   $161 = $34;
   $33 = $161;
   $162 = $33;
   $32 = $162;
   $163 = $32;
   $31 = $163;
   $164 = $31;
   $165 = $164;
  }
  $27 = $165;
  $166 = $27;
  $167 = $63;
  $17 = $167;
  $168 = $17;
  $16 = $168;
  $169 = $16;
  $15 = $169;
  $170 = $15;
  $14 = $170;
  $171 = $14;
  $13 = $171;
  $172 = $13;
  $173 = ((($172)) + 11|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = $174&255;
  $176 = $175 & 128;
  $177 = ($176|0)!=(0);
  if ($177) {
   $7 = $169;
   $178 = $7;
   $6 = $178;
   $179 = $6;
   $5 = $179;
   $180 = $5;
   $181 = HEAP32[$180>>2]|0;
   $187 = $181;
  } else {
   $12 = $169;
   $182 = $12;
   $11 = $182;
   $183 = $11;
   $10 = $183;
   $184 = $10;
   $9 = $184;
   $185 = $9;
   $8 = $185;
   $186 = $8;
   $187 = $186;
  }
  $4 = $187;
  $188 = $4;
  $24 = $64;
  $25 = $65;
  $189 = $24;
  $190 = $25;
  ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
  $21 = $189;
  $22 = $190;
  $191 = $22;
  $192 = $21;
  $18 = $23;
  $19 = $191;
  $20 = $192;
  $193 = $19;
  $194 = HEAP32[$193>>2]|0;
  $195 = $20;
  $196 = HEAP32[$195>>2]|0;
  $197 = ($194>>>0)<($196>>>0);
  $198 = $22;
  $199 = $21;
  $200 = $197 ? $198 : $199;
  $201 = HEAP32[$200>>2]|0;
  __THREW__ = 0;
  $202 = (invoke_iiii(381,($166|0),($188|0),($201|0))|0);
  $203 = __THREW__; __THREW__ = 0;
  $204 = $203&1;
  if ($204) {
   label = 23;
   break;
  }
  $66 = $202;
  $205 = $66;
  $206 = ($205|0)!=(0);
  do {
   if ($206) {
    $207 = $66;
    $61 = $207;
   } else {
    $208 = HEAP32[$64>>2]|0;
    $209 = HEAP32[$65>>2]|0;
    $210 = ($208>>>0)<($209>>>0);
    if ($210) {
     $61 = -1;
     break;
    }
    $211 = HEAP32[$64>>2]|0;
    $212 = HEAP32[$65>>2]|0;
    $213 = ($211>>>0)>($212>>>0);
    if ($213) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $216 = $61;
  $217 = ($216|0)<(0);
  $218 = $83;
  if ($217) {
   $221 = ((($218)) + 4|0);
   $222 = HEAP32[$221>>2]|0;
   $83 = $222;
   continue;
  } else {
   $84 = $218;
   $219 = $83;
   $220 = HEAP32[$219>>2]|0;
   $83 = $220;
   continue;
  }
 }
 if ((label|0) == 23) {
  $214 = ___cxa_find_matching_catch_3(0|0)|0;
  $215 = tempRet0;
  ___clang_call_terminate($214);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $223 = $84;
  $75 = $80;
  $76 = $223;
  $224 = $75;
  $225 = $76;
  HEAP32[$224>>2] = $225;
  $226 = HEAP32[$80>>2]|0;
  STACKTOP = sp;return ($226|0);
 }
 return (0)|0;
}
function __ZN7Encoder9averagifyEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = (+_log10f($7));
 $9 = $6 * $8;
 STACKTOP = sp;return (+$9);
}
function __ZN7Encoder7listifyENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(736|0);
 $$byval_copy = sp + 720|0;
 $9 = sp + 696|0;
 $10 = sp + 32|0;
 $13 = sp + 684|0;
 $14 = sp + 734|0;
 $15 = sp + 24|0;
 $19 = sp + 733|0;
 $43 = sp + 16|0;
 $48 = sp + 732|0;
 $59 = sp + 731|0;
 $63 = sp + 508|0;
 $66 = sp + 496|0;
 $84 = sp + 8|0;
 $89 = sp + 730|0;
 $99 = sp + 729|0;
 $118 = sp;
 $123 = sp + 728|0;
 $133 = sp + 727|0;
 $158 = sp + 152|0;
 $174 = sp + 88|0;
 $179 = sp + 725|0;
 $180 = sp + 72|0;
 $182 = sp + 64|0;
 $183 = sp + 60|0;
 $185 = sp + 56|0;
 $188 = sp + 36|0;
 $177 = $1;
 $189 = $3&1;
 $178 = $189;
 $190 = $177;
 $$expand_i1_val = 0;
 HEAP8[$179>>0] = $$expand_i1_val;
 $191 = (__Znwj(32)|0);
 __ZN5LevelC2Ev($191);
 ;HEAP32[$180>>2]=0|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$180>>2]|0;
 __ZNSt3__210shared_ptrI5LevelEC2IS1_EEPT_NS_9enable_ifIXsr14is_convertibleIS5_PS1_EE5valueENS2_5__natEE4typeE($0,$191,$$byval_copy);
 $176 = $0;
 $192 = $176;
 $193 = HEAP32[$192>>2]|0;
 HEAP32[$193>>2] = 0;
 $181 = $2;
 $194 = $181;
 $175 = $194;
 $195 = $175;
 $173 = $195;
 $196 = $173;
 $172 = $196;
 $197 = $172;
 $171 = $197;
 $198 = $171;
 $170 = $198;
 $199 = $170;
 $200 = ((($199)) + 11|0);
 $201 = HEAP8[$200>>0]|0;
 $202 = $201&255;
 $203 = $202 & 128;
 $204 = ($203|0)!=(0);
 if ($204) {
  $164 = $196;
  $205 = $164;
  $163 = $205;
  $206 = $163;
  $162 = $206;
  $207 = $162;
  $208 = HEAP32[$207>>2]|0;
  $214 = $208;
 } else {
  $169 = $196;
  $209 = $169;
  $168 = $209;
  $210 = $168;
  $167 = $210;
  $211 = $167;
  $166 = $211;
  $212 = $166;
  $165 = $212;
  $213 = $165;
  $214 = $213;
 }
 $160 = $174;
 $161 = $214;
 $215 = $160;
 $216 = $161;
 HEAP32[$215>>2] = $216;
 $217 = HEAP32[$174>>2]|0;
 HEAP32[$182>>2] = $217;
 $218 = $181;
 $159 = $218;
 $219 = $159;
 $157 = $219;
 $220 = $157;
 $156 = $220;
 $221 = $156;
 $155 = $221;
 $222 = $155;
 $154 = $222;
 $223 = $154;
 $224 = ((($223)) + 11|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $226 & 128;
 $228 = ($227|0)!=(0);
 if ($228) {
  $148 = $220;
  $229 = $148;
  $147 = $229;
  $230 = $147;
  $146 = $230;
  $231 = $146;
  $232 = HEAP32[$231>>2]|0;
  $259 = $232;
 } else {
  $153 = $220;
  $233 = $153;
  $152 = $233;
  $234 = $152;
  $151 = $234;
  $235 = $151;
  $150 = $235;
  $236 = $150;
  $149 = $236;
  $237 = $149;
  $259 = $237;
 }
 $143 = $219;
 $238 = $143;
 $142 = $238;
 $239 = $142;
 $141 = $239;
 $240 = $141;
 $140 = $240;
 $241 = $140;
 $242 = ((($241)) + 11|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&255;
 $245 = $244 & 128;
 $246 = ($245|0)!=(0);
 if ($246) {
  $136 = $238;
  $247 = $136;
  $135 = $247;
  $248 = $135;
  $134 = $248;
  $249 = $134;
  $250 = ((($249)) + 4|0);
  $251 = HEAP32[$250>>2]|0;
  $260 = $251;
 } else {
  $139 = $238;
  $252 = $139;
  $138 = $252;
  $253 = $138;
  $137 = $253;
  $254 = $137;
  $255 = ((($254)) + 11|0);
  $256 = HEAP8[$255>>0]|0;
  $257 = $256&255;
  $260 = $257;
 }
 $258 = (($259) + ($260)|0);
 $144 = $158;
 $145 = $258;
 $261 = $144;
 $262 = $145;
 HEAP32[$261>>2] = $262;
 $263 = HEAP32[$158>>2]|0;
 HEAP32[$183>>2] = $263;
 while(1) {
  $106 = $182;
  $107 = $183;
  $264 = $106;
  $265 = $107;
  $104 = $264;
  $105 = $265;
  $266 = $104;
  $103 = $266;
  $267 = $103;
  $268 = HEAP32[$267>>2]|0;
  $269 = $105;
  $102 = $269;
  $270 = $102;
  $271 = HEAP32[$270>>2]|0;
  $272 = ($268|0)==($271|0);
  $273 = $272 ^ 1;
  if (!($273)) {
   label = 17;
   break;
  }
  $101 = $182;
  $274 = $101;
  $275 = HEAP32[$274>>2]|0;
  $276 = HEAP8[$275>>0]|0;
  $184 = $276;
  $277 = $184;
  $278 = (+($277<<24>>24));
  HEAPF32[$185>>2] = $278;
  $100 = $0;
  $279 = $100;
  $280 = HEAP32[$279>>2]|0;
  $281 = ((($280)) + 4|0);
  $97 = $281;
  $98 = $185;
  $282 = $97;
  $283 = ((($282)) + 4|0);
  $284 = HEAP32[$283>>2]|0;
  $96 = $282;
  $285 = $96;
  $286 = ((($285)) + 8|0);
  $95 = $286;
  $287 = $95;
  $94 = $287;
  $288 = $94;
  $289 = HEAP32[$288>>2]|0;
  $290 = ($284|0)!=($289|0);
  if ($290) {
   __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($99,$282,1);
   $93 = $282;
   $291 = $93;
   $292 = ((($291)) + 8|0);
   $92 = $292;
   $293 = $92;
   $91 = $293;
   $294 = $91;
   $295 = ((($282)) + 4|0);
   $296 = HEAP32[$295>>2]|0;
   $90 = $296;
   $297 = $90;
   $298 = $98;
   $86 = $294;
   $87 = $297;
   $88 = $298;
   $299 = $86;
   $300 = $87;
   $301 = $88;
   $85 = $301;
   $302 = $85;
   ;HEAP8[$84>>0]=HEAP8[$89>>0]|0;
   $81 = $299;
   $82 = $300;
   $83 = $302;
   $303 = $81;
   $304 = $82;
   $305 = $83;
   $80 = $305;
   $306 = $80;
   $77 = $303;
   $78 = $304;
   $79 = $306;
   $307 = $78;
   $308 = $79;
   $76 = $308;
   $309 = $76;
   $310 = +HEAPF32[$309>>2];
   HEAPF32[$307>>2] = $310;
   __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($99);
   $311 = ((($282)) + 4|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = ((($312)) + 4|0);
   HEAP32[$311>>2] = $313;
  } else {
   $314 = $98;
   __THREW__ = 0;
   invoke_vii(391,($282|0),($314|0));
   $315 = __THREW__; __THREW__ = 0;
   $316 = $315&1;
   if ($316) {
    break;
   }
  }
  $75 = $182;
  $317 = $75;
  $318 = HEAP32[$317>>2]|0;
  $319 = ((($318)) + 1|0);
  HEAP32[$317>>2] = $319;
 }
 L20: do {
  if ((label|0) == 17) {
   $322 = $178;
   $323 = $322&1;
   do {
    if ($323) {
     $74 = $190;
     $324 = $74;
     $325 = ((($324)) + 4|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = HEAP32[$324>>2]|0;
     $328 = $326;
     $329 = $327;
     $330 = (($328) - ($329))|0;
     $331 = (($330|0) / 12)&-1;
     $73 = $0;
     $332 = $73;
     $333 = HEAP32[$332>>2]|0;
     $334 = HEAP32[$333>>2]|0;
     $335 = ($331>>>0)<=($334>>>0);
     if ($335) {
      $69 = $188;
      $336 = $69;
      $68 = $336;
      $337 = $68;
      $67 = $337;
      HEAP32[$337>>2] = 0;
      $338 = ((($337)) + 4|0);
      HEAP32[$338>>2] = 0;
      $339 = ((($337)) + 8|0);
      $65 = $339;
      HEAP32[$66>>2] = 0;
      $340 = $65;
      $64 = $66;
      $341 = $64;
      $342 = HEAP32[$341>>2]|0;
      $62 = $340;
      HEAP32[$63>>2] = $342;
      $343 = $62;
      $61 = $343;
      $60 = $63;
      $344 = $60;
      $345 = HEAP32[$344>>2]|0;
      HEAP32[$343>>2] = $345;
      $57 = $190;
      $58 = $188;
      $346 = $57;
      $347 = ((($346)) + 4|0);
      $348 = HEAP32[$347>>2]|0;
      $56 = $346;
      $349 = $56;
      $350 = ((($349)) + 8|0);
      $55 = $350;
      $351 = $55;
      $54 = $351;
      $352 = $54;
      $353 = HEAP32[$352>>2]|0;
      $354 = ($348>>>0)<($353>>>0);
      if ($354) {
       __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($59,$346,1);
       $53 = $346;
       $355 = $53;
       $356 = ((($355)) + 8|0);
       $52 = $356;
       $357 = $52;
       $51 = $357;
       $358 = $51;
       $359 = ((($346)) + 4|0);
       $360 = HEAP32[$359>>2]|0;
       $49 = $360;
       $361 = $49;
       $362 = $58;
       $4 = $362;
       $363 = $4;
       $45 = $358;
       $46 = $361;
       $47 = $363;
       $364 = $45;
       $365 = $46;
       $366 = $47;
       $44 = $366;
       $367 = $44;
       ;HEAP8[$43>>0]=HEAP8[$48>>0]|0;
       $40 = $364;
       $41 = $365;
       $42 = $367;
       $368 = $40;
       $369 = $41;
       $370 = $42;
       $39 = $370;
       $371 = $39;
       $36 = $368;
       $37 = $369;
       $38 = $371;
       $372 = $37;
       $373 = $38;
       $35 = $373;
       $374 = $35;
       $33 = $372;
       $34 = $374;
       $375 = $33;
       $376 = $34;
       $32 = $376;
       $377 = $32;
       $378 = ((($377)) + 8|0);
       $31 = $378;
       $379 = $31;
       $30 = $379;
       $380 = $30;
       $29 = $380;
       $381 = $29;
       $17 = $375;
       $18 = $381;
       $382 = $17;
       $16 = $382;
       HEAP32[$382>>2] = 0;
       $383 = ((($382)) + 4|0);
       HEAP32[$383>>2] = 0;
       $384 = ((($382)) + 8|0);
       ;HEAP8[$15>>0]=HEAP8[$19>>0]|0;
       $12 = $384;
       HEAP32[$13>>2] = 0;
       $385 = $12;
       $11 = $13;
       $386 = $11;
       $387 = HEAP32[$386>>2]|0;
       $5 = $15;
       ;HEAP8[$10>>0]=HEAP8[$14>>0]|0;
       $8 = $385;
       HEAP32[$9>>2] = $387;
       $388 = $8;
       $7 = $10;
       $6 = $9;
       $389 = $6;
       $390 = HEAP32[$389>>2]|0;
       HEAP32[$388>>2] = $390;
       $391 = $34;
       $392 = HEAP32[$391>>2]|0;
       HEAP32[$375>>2] = $392;
       $393 = $34;
       $394 = ((($393)) + 4|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = ((($375)) + 4|0);
       HEAP32[$396>>2] = $395;
       $397 = $34;
       $22 = $397;
       $398 = $22;
       $399 = ((($398)) + 8|0);
       $21 = $399;
       $400 = $21;
       $20 = $400;
       $401 = $20;
       $402 = HEAP32[$401>>2]|0;
       $25 = $375;
       $403 = $25;
       $404 = ((($403)) + 8|0);
       $24 = $404;
       $405 = $24;
       $23 = $405;
       $406 = $23;
       HEAP32[$406>>2] = $402;
       $407 = $34;
       $28 = $407;
       $408 = $28;
       $409 = ((($408)) + 8|0);
       $27 = $409;
       $410 = $27;
       $26 = $410;
       $411 = $26;
       HEAP32[$411>>2] = 0;
       $412 = $34;
       $413 = ((($412)) + 4|0);
       HEAP32[$413>>2] = 0;
       $414 = $34;
       HEAP32[$414>>2] = 0;
       __ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($59);
       $415 = ((($346)) + 4|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ((($416)) + 12|0);
       HEAP32[$415>>2] = $417;
      } else {
       $418 = $58;
       $50 = $418;
       $419 = $50;
       __THREW__ = 0;
       invoke_vii(388,($346|0),($419|0));
       $420 = __THREW__; __THREW__ = 0;
       $421 = $420&1;
       if ($421) {
        $422 = ___cxa_find_matching_catch_2()|0;
        $423 = tempRet0;
        $186 = $422;
        $187 = $423;
        __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($188);
        __ZNSt3__210shared_ptrI5LevelED2Ev($0);
        $478 = $186;
        $479 = $187;
        ___resumeException($478|0);
        // unreachable;
       }
      }
      __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($188);
     }
     $70 = $0;
     $424 = $70;
     $425 = HEAP32[$424>>2]|0;
     $426 = HEAP32[$425>>2]|0;
     $71 = $190;
     $72 = $426;
     $427 = $71;
     $428 = HEAP32[$427>>2]|0;
     $429 = $72;
     $430 = (($428) + (($429*12)|0)|0);
     $131 = $430;
     $132 = $0;
     $431 = $131;
     $432 = ((($431)) + 4|0);
     $433 = HEAP32[$432>>2]|0;
     $130 = $431;
     $434 = $130;
     $435 = ((($434)) + 8|0);
     $129 = $435;
     $436 = $129;
     $128 = $436;
     $437 = $128;
     $438 = HEAP32[$437>>2]|0;
     $439 = ($433|0)!=($438|0);
     if (!($439)) {
      $474 = $132;
      __THREW__ = 0;
      invoke_vii(392,($431|0),($474|0));
      $475 = __THREW__; __THREW__ = 0;
      $476 = $475&1;
      if ($476) {
       break L20;
      } else {
       break;
      }
     }
     __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($133,$431,1);
     $127 = $431;
     $440 = $127;
     $441 = ((($440)) + 8|0);
     $126 = $441;
     $442 = $126;
     $125 = $442;
     $443 = $125;
     $444 = ((($431)) + 4|0);
     $445 = HEAP32[$444>>2]|0;
     $124 = $445;
     $446 = $124;
     $447 = $132;
     $120 = $443;
     $121 = $446;
     $122 = $447;
     $448 = $120;
     $449 = $121;
     $450 = $122;
     $119 = $450;
     $451 = $119;
     ;HEAP8[$118>>0]=HEAP8[$123>>0]|0;
     $115 = $448;
     $116 = $449;
     $117 = $451;
     $452 = $115;
     $453 = $116;
     $454 = $117;
     $114 = $454;
     $455 = $114;
     $111 = $452;
     $112 = $453;
     $113 = $455;
     $456 = $112;
     $457 = $113;
     $110 = $457;
     $458 = $110;
     $108 = $456;
     $109 = $458;
     $459 = $108;
     $460 = $109;
     $461 = HEAP32[$460>>2]|0;
     HEAP32[$459>>2] = $461;
     $462 = ((($459)) + 4|0);
     $463 = $109;
     $464 = ((($463)) + 4|0);
     $465 = HEAP32[$464>>2]|0;
     HEAP32[$462>>2] = $465;
     $466 = ((($459)) + 4|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = ($467|0)!=(0|0);
     if ($468) {
      $469 = ((($459)) + 4|0);
      $470 = HEAP32[$469>>2]|0;
      __ZNSt3__219__shared_weak_count12__add_sharedEv($470);
     }
     __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($133);
     $471 = ((($431)) + 4|0);
     $472 = HEAP32[$471>>2]|0;
     $473 = ((($472)) + 8|0);
     HEAP32[$471>>2] = $473;
    }
   } while(0);
   $$expand_i1_val2 = 1;
   HEAP8[$179>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$179>>0]|0;
   $477 = $$pre_trunc&1;
   if ($477) {
    STACKTOP = sp;return;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($0);
   STACKTOP = sp;return;
  }
 } while(0);
 $320 = ___cxa_find_matching_catch_2()|0;
 $321 = tempRet0;
 $186 = $320;
 $187 = $321;
 __ZNSt3__210shared_ptrI5LevelED2Ev($0);
 $478 = $186;
 $479 = $187;
 ___resumeException($478|0);
 // unreachable;
}
function __ZN5LevelC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 28|0;
 $9 = sp + 16|0;
 $13 = $0;
 $14 = $13;
 $15 = ((($14)) + 4|0);
 $12 = $15;
 $16 = $12;
 $11 = $16;
 $17 = $11;
 $10 = $17;
 HEAP32[$17>>2] = 0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($17)) + 8|0);
 $8 = $19;
 HEAP32[$9>>2] = 0;
 $20 = $8;
 $7 = $9;
 $21 = $7;
 $22 = HEAP32[$21>>2]|0;
 $5 = $20;
 HEAP32[$6>>2] = $22;
 $23 = $5;
 $4 = $23;
 $3 = $6;
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($14)) + 16|0);
 $1 = $26;
 $27 = $1;
 HEAP32[$27>>2] = 0;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($14)) + 24|0);
 $2 = $29;
 $30 = $2;
 HEAP32[$30>>2] = 0;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI5LevelEC2IS1_EEPT_NS_9enable_ifIXsr14is_convertibleIS5_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $28 = sp + 240|0;
 $29 = sp + 56|0;
 $32 = sp + 228|0;
 $33 = sp + 349|0;
 $34 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 32|0;
 $44 = sp + 196|0;
 $45 = sp + 348|0;
 $46 = sp + 24|0;
 $47 = sp + 16|0;
 $54 = sp + 168|0;
 $55 = sp + 347|0;
 $56 = sp + 346|0;
 $57 = sp + 8|0;
 $58 = sp;
 $74 = sp + 104|0;
 $77 = sp + 92|0;
 $80 = sp + 80|0;
 $83 = sp + 68|0;
 $86 = sp + 345|0;
 $87 = sp + 344|0;
 $81 = $0;
 $82 = $1;
 $88 = $81;
 $89 = $82;
 HEAP32[$88>>2] = $89;
 $90 = $82;
 $79 = $83;
 HEAP32[$80>>2] = $90;
 $91 = $79;
 $78 = $80;
 $92 = $78;
 $93 = HEAP32[$92>>2]|0;
 $76 = $91;
 HEAP32[$77>>2] = $93;
 $94 = $76;
 $75 = $77;
 $95 = $75;
 $96 = HEAP32[$95>>2]|0;
 $73 = $94;
 HEAP32[$74>>2] = $96;
 $97 = $73;
 $72 = $74;
 $98 = $72;
 $99 = HEAP32[$98>>2]|0;
 HEAP32[$97>>2] = $99;
 __THREW__ = 0;
 $100 = (invoke_ii(393,16)|0);
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $147 = ___cxa_find_matching_catch_2()|0;
  $148 = tempRet0;
  $84 = $147;
  $85 = $148;
  $71 = $83;
  $149 = $71;
  $68 = $149;
  $69 = 0;
  $150 = $68;
  $67 = $150;
  $151 = $67;
  $66 = $151;
  $152 = $66;
  $153 = HEAP32[$152>>2]|0;
  $70 = $153;
  $154 = $69;
  $63 = $150;
  $155 = $63;
  $62 = $155;
  $156 = $62;
  HEAP32[$156>>2] = $154;
  $157 = $70;
  $158 = ($157|0)!=(0|0);
  if (!($158)) {
   $164 = $84;
   $165 = $85;
   ___resumeException($164|0);
   // unreachable;
  }
  $61 = $150;
  $159 = $61;
  $60 = $159;
  $160 = $60;
  $161 = $70;
  $64 = $160;
  $65 = $161;
  $162 = $65;
  $163 = ($162|0)==(0|0);
  if ($163) {
   $164 = $84;
   $165 = $85;
   ___resumeException($164|0);
   // unreachable;
  }
  __ZN5LevelD2Ev($162);
  __ZdlPv($162);
  $164 = $84;
  $165 = $85;
  ___resumeException($164|0);
  // unreachable;
 } else {
  $103 = $82;
  $59 = $87;
  ;HEAP8[$57>>0]=HEAP8[$87>>0]|0;
  ;HEAP8[$58>>0]=HEAP8[$86>>0]|0;
  $52 = $100;
  $53 = $103;
  $104 = $52;
  $50 = $104;
  $51 = 0;
  $105 = $50;
  $106 = $51;
  $48 = $105;
  $49 = $106;
  $107 = $48;
  HEAP32[$107>>2] = (9540);
  $108 = ((($107)) + 4|0);
  $109 = $49;
  HEAP32[$108>>2] = $109;
  HEAP32[$105>>2] = (9560);
  $110 = ((($105)) + 8|0);
  $111 = $51;
  HEAP32[$110>>2] = $111;
  HEAP32[$104>>2] = (2352);
  $112 = ((($104)) + 12|0);
  $113 = $53;
  $23 = $58;
  ;HEAP8[$34>>0]=HEAP8[$55>>0]|0;
  $31 = $54;
  HEAP32[$32>>2] = $113;
  $114 = $31;
  $30 = $32;
  $115 = $30;
  $116 = HEAP32[$115>>2]|0;
  $24 = $34;
  ;HEAP8[$29>>0]=HEAP8[$33>>0]|0;
  $27 = $114;
  HEAP32[$28>>2] = $116;
  $117 = $27;
  $26 = $29;
  $25 = $28;
  $118 = $25;
  $119 = HEAP32[$118>>2]|0;
  HEAP32[$117>>2] = $119;
  $35 = $57;
  ;HEAP8[$46>>0]=HEAP8[$56>>0]|0;
  ;HEAP8[$47>>0]=HEAP8[$54>>0]|0;HEAP8[$47+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$54+3>>0]|0;
  $43 = $112;
  $120 = $43;
  $42 = $47;
  $121 = $42;
  ;HEAP32[$44>>2]=HEAP32[$121>>2]|0;
  $36 = $46;
  ;HEAP8[$40>>0]=HEAP8[$45>>0]|0;
  ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;HEAP8[$41+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$44+3>>0]|0;
  $39 = $120;
  $122 = $39;
  $38 = $40;
  $37 = $41;
  $123 = $37;
  ;HEAP32[$122>>2]=HEAP32[$123>>2]|0;
  $124 = ((($88)) + 4|0);
  HEAP32[$124>>2] = $100;
  $9 = $83;
  $125 = $9;
  $8 = $125;
  $126 = $8;
  $7 = $126;
  $127 = $7;
  $128 = HEAP32[$127>>2]|0;
  $10 = $128;
  $6 = $125;
  $129 = $6;
  $5 = $129;
  $130 = $5;
  HEAP32[$130>>2] = 0;
  $131 = $82;
  $3 = $88;
  $4 = $131;
  $22 = $83;
  $132 = $22;
  $19 = $132;
  $20 = 0;
  $133 = $19;
  $18 = $133;
  $134 = $18;
  $17 = $134;
  $135 = $17;
  $136 = HEAP32[$135>>2]|0;
  $21 = $136;
  $137 = $20;
  $14 = $133;
  $138 = $14;
  $13 = $138;
  $139 = $13;
  HEAP32[$139>>2] = $137;
  $140 = $21;
  $141 = ($140|0)!=(0|0);
  if (!($141)) {
   STACKTOP = sp;return;
  }
  $12 = $133;
  $142 = $12;
  $11 = $142;
  $143 = $11;
  $144 = $21;
  $15 = $143;
  $16 = $144;
  $145 = $16;
  $146 = ($145|0)==(0|0);
  if ($146) {
   STACKTOP = sp;return;
  }
  __ZN5LevelD2Ev($145);
  __ZdlPv($145);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = ((($50)) + 8|0);
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 4)&-1;
 $62 = (($61) + 1)|0;
 $34 = $49;
 HEAP32[$35>>2] = $62;
 $63 = $34;
 $64 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($63)|0);
 $36 = $64;
 $65 = HEAP32[$35>>2]|0;
 $66 = $36;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = ((($70)) + 8|0);
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85<<1;
  HEAP32[$38>>2] = $86;
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = HEAP32[$91>>2]|0;
  $93 = $21;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 4)&-1;
 $109 = $45;
 __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EjjS3_($46,$100,$108,$109);
 $110 = $45;
 $111 = ((($46)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 $127 = +HEAPF32[$126>>2];
 HEAPF32[$124>>2] = $127;
 $128 = ((($46)) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 4|0);
 HEAP32[$128>>2] = $130;
 __THREW__ = 0;
 invoke_vii(394,($49|0),($46|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $47 = $133;
  $48 = $134;
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($46);
  $135 = $47;
  $136 = $48;
  ___resumeException($135|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($46);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 1073741823;
 $28 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $28;
 $7 = $19;
 $8 = $20;
 $29 = $7;
 $30 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $29;
 $5 = $30;
 $31 = $5;
 $32 = $4;
 $1 = $6;
 $2 = $31;
 $3 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34>>>0)<($36>>>0);
 $38 = $5;
 $39 = $4;
 $40 = $37 ? $38 : $39;
 $41 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0);
 $33 = $30;
 $24 = $32;
 HEAP32[$25>>2] = 0;
 $26 = $33;
 $34 = $24;
 $23 = $25;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = $26;
 $17 = $37;
 $38 = $17;
 $20 = $34;
 HEAP32[$21>>2] = $36;
 $22 = $38;
 $39 = $20;
 $19 = $21;
 $40 = $19;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($39)) + 4|0);
 $43 = $22;
 $18 = $43;
 $44 = $18;
 HEAP32[$42>>2] = $44;
 $45 = $28;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $6 = $31;
   $47 = $6;
   $48 = ((($47)) + 12|0);
   $5 = $48;
   $49 = $5;
   $4 = $49;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   $12 = $52;
   $13 = $53;
   $54 = $12;
   $55 = $13;
   $9 = $54;
   $10 = $55;
   $11 = 0;
   $56 = $9;
   $57 = $10;
   $8 = $56;
   $58 = ($57>>>0)>(1073741823);
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($59);
    ___cxa_throw(($59|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $60 = $10;
    $61 = $60<<2;
    $7 = $61;
    $62 = $7;
    $63 = (__Znwj($62)|0);
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64;
 $65 = HEAP32[$31>>2]|0;
 $66 = $29;
 $67 = (($65) + ($66<<2)|0);
 $68 = ((($31)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($31)) + 4|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$31>>2]|0;
 $71 = $28;
 $72 = (($70) + ($71<<2)|0);
 $16 = $31;
 $73 = $16;
 $74 = ((($73)) + 12|0);
 $15 = $74;
 $75 = $15;
 $14 = $75;
 $76 = $14;
 HEAP32[$76>>2] = $72;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 120|0;
 $13 = sp + 96|0;
 $25 = sp + 48|0;
 $36 = $0;
 $37 = $1;
 $38 = $36;
 __ZNKSt3__26vectorIfNS_9allocatorIfEEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = ((($39)) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = ((($38)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = ((($46)) + 4|0);
 $27 = $42;
 $28 = $43;
 $29 = $45;
 $30 = $47;
 $48 = $29;
 $49 = $28;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 4)&-1;
 $31 = $53;
 $54 = $31;
 $55 = $30;
 $56 = HEAP32[$55>>2]|0;
 $57 = (0 - ($54))|0;
 $58 = (($56) + ($57<<2)|0);
 HEAP32[$55>>2] = $58;
 $59 = $31;
 $60 = ($59|0)>(0);
 if ($60) {
  $61 = $30;
  $62 = HEAP32[$61>>2]|0;
  $63 = $28;
  $64 = $31;
  $65 = $64<<2;
  _memcpy(($62|0),($63|0),($65|0))|0;
 }
 $66 = $37;
 $67 = ((($66)) + 4|0);
 $5 = $38;
 $6 = $67;
 $68 = $5;
 $4 = $68;
 $69 = $4;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$7>>2] = $70;
 $71 = $6;
 $2 = $71;
 $72 = $2;
 $73 = HEAP32[$72>>2]|0;
 $74 = $5;
 HEAP32[$74>>2] = $73;
 $3 = $7;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = $6;
 HEAP32[$77>>2] = $76;
 $78 = ((($38)) + 4|0);
 $79 = $37;
 $80 = ((($79)) + 8|0);
 $11 = $78;
 $12 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$13>>2] = $83;
 $84 = $12;
 $8 = $84;
 $85 = $8;
 $86 = HEAP32[$85>>2]|0;
 $87 = $11;
 HEAP32[$87>>2] = $86;
 $9 = $13;
 $88 = $9;
 $89 = HEAP32[$88>>2]|0;
 $90 = $12;
 HEAP32[$90>>2] = $89;
 $16 = $38;
 $91 = $16;
 $92 = ((($91)) + 8|0);
 $15 = $92;
 $93 = $15;
 $14 = $93;
 $94 = $14;
 $95 = $37;
 $19 = $95;
 $96 = $19;
 $97 = ((($96)) + 12|0);
 $18 = $97;
 $98 = $18;
 $17 = $98;
 $99 = $17;
 $23 = $94;
 $24 = $99;
 $100 = $23;
 $22 = $100;
 $101 = $22;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$25>>2] = $102;
 $103 = $24;
 $20 = $103;
 $104 = $20;
 $105 = HEAP32[$104>>2]|0;
 $106 = $23;
 HEAP32[$106>>2] = $105;
 $21 = $25;
 $107 = $21;
 $108 = HEAP32[$107>>2]|0;
 $109 = $24;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $26 = $38;
 $114 = $26;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 4)&-1;
 __ZNKSt3__26vectorIfNS_9allocatorIfEEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -4|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
 }
 $60 = HEAP32[$35>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $62 = $14;
 $63 = ((($62)) + 12|0);
 $13 = $63;
 $64 = $13;
 $12 = $64;
 $65 = $12;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$35>>2]|0;
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = ((($70)) + 12|0);
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9;
 $81 = $10;
 $82 = $11;
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7;
 $5 = $83;
 $84 = $5;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $23 = HEAP32[$22>>2]|0;
 $18 = $23;
 $24 = $18;
 $17 = $21;
 $25 = $17;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $16;
 $5 = $21;
 $28 = $5;
 $4 = $28;
 $29 = $4;
 $3 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $2 = $31;
 $32 = $2;
 $1 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$29>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 4)&-1;
 $40 = (($27) + ($39<<2)|0);
 $7 = $21;
 $41 = $7;
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $8 = $21;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 $10 = $21;
 $53 = $10;
 $54 = HEAP32[$53>>2]|0;
 $9 = $54;
 $55 = $9;
 $15 = $21;
 $56 = $15;
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = ((($58)) + 8|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $68 = (($55) + ($67<<2)|0);
 __ZNKSt3__26vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($21,$24,$40,$52,$68);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $25 = $18;
 $17 = $22;
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $16 = $27;
 $28 = $16;
 $6 = $22;
 $29 = $6;
 $5 = $29;
 $30 = $5;
 $4 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 $3 = $32;
 $33 = $3;
 $2 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$30>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = (($28) + ($40<<2)|0);
 $8 = $22;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $7 = $43;
 $44 = $7;
 $13 = $22;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = ((($47)) + 8|0);
 $10 = $48;
 $49 = $10;
 $9 = $49;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$46>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = (($44) + ($56<<2)|0);
 $15 = $22;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $14 = $59;
 $60 = $14;
 $61 = $21;
 $62 = (($60) + ($61<<2)|0);
 __ZNKSt3__26vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($22,$25,$41,$57,$62);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return;
}
function __ZN5LevelD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 __ZNSt3__210shared_ptrI5LevelED2Ev($3);
 $4 = ((($2)) + 16|0);
 __ZNSt3__210shared_ptrI5LevelED2Ev($4);
 $5 = ((($2)) + 4|0);
 __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $29 = $31;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while(1) {
  $37 = $28;
  $38 = ((($36)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)!=($39|0);
  if (!($40)) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = ((($41)) + 8|0);
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = ((($36)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -4|0);
  HEAP32[$45>>2] = $47;
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
 }
 $7 = $31;
 $53 = $7;
 $54 = ((($53)) + 8|0);
 $6 = $54;
 $55 = $6;
 $5 = $55;
 $56 = $5;
 $57 = HEAP32[$31>>2]|0;
 $4 = $31;
 $58 = $4;
 $3 = $58;
 $59 = $3;
 $60 = ((($59)) + 8|0);
 $2 = $60;
 $61 = $2;
 $1 = $61;
 $62 = $1;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 4)&-1;
 $12 = $56;
 $13 = $57;
 $14 = $68;
 $69 = $12;
 $70 = $13;
 $71 = $14;
 $9 = $69;
 $10 = $70;
 $11 = $71;
 $72 = $10;
 $8 = $72;
 $73 = $8;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__214__shared_countD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $15;
 $17 = ((($16)) + 12|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $6 = $19;
 $20 = $6;
 $5 = $20;
 $21 = $5;
 $22 = ((($16)) + 12|0);
 $4 = $22;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $1 = $25;
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $7 = $21;
 $8 = $27;
 $28 = $8;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  __ZN5LevelD2Ev($28);
  __ZdlPv($28);
 }
 $30 = ((($16)) + 12|0);
 $10 = $30;
 $31 = $10;
 $9 = $31;
 $32 = $9;
 $12 = $32;
 $33 = $12;
 $11 = $33;
 STACKTOP = sp;return;
}
function __ZNKSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $9;
 $12 = $10;
 $7 = $12;
 $8 = 288;
 $13 = $7;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==($18|0);
 if (!($19)) {
  $26 = 0;
  STACKTOP = sp;return ($26|0);
 }
 $20 = ((($11)) + 12|0);
 $3 = $20;
 $21 = $3;
 $2 = $21;
 $22 = $2;
 $5 = $22;
 $23 = $5;
 $4 = $23;
 $24 = $4;
 $6 = $24;
 $25 = $6;
 $26 = $25;
 STACKTOP = sp;return ($26|0);
}
function __ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = sp + 52|0;
 $13 = $0;
 $15 = $13;
 $16 = ((($15)) + 12|0);
 $12 = $16;
 $17 = $12;
 $11 = $17;
 $18 = $11;
 $5 = $14;
 $6 = $18;
 $19 = ((($15)) + 12|0);
 $2 = $19;
 $20 = $2;
 $1 = $20;
 $4 = $15;
 $21 = $4;
 $3 = $21;
 $22 = $3;
 $8 = $14;
 $9 = $22;
 $10 = 1;
 $23 = $9;
 $7 = $23;
 $24 = $7;
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function __ZN7Encoder8encodifyENSt3__210shared_ptrI5LevelEEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $$byval_copy = sp + 608|0;
 $19 = sp + 8|0;
 $24 = sp + 615|0;
 $35 = sp + 614|0;
 $45 = sp + 456|0;
 $51 = sp + 432|0;
 $58 = sp + 400|0;
 $68 = sp + 360|0;
 $74 = sp + 336|0;
 $81 = sp + 304|0;
 $98 = sp + 232|0;
 $104 = sp + 208|0;
 $111 = sp + 176|0;
 $118 = sp + 144|0;
 $124 = sp + 120|0;
 $131 = sp + 88|0;
 $137 = sp + 612|0;
 $138 = sp + 64|0;
 $139 = sp + 56|0;
 $144 = sp + 32|0;
 $145 = sp + 24|0;
 $135 = $1;
 $146 = $3&1;
 $136 = $146;
 $147 = $135;
 $$expand_i1_val = 0;
 HEAP8[$137>>0] = $$expand_i1_val;
 $148 = (__Znwj(32)|0);
 __ZN5LevelC2Ev($148);
 ;HEAP32[$138>>2]=0|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$138>>2]|0;
 __ZNSt3__210shared_ptrI5LevelEC2IS1_EEPT_NS_9enable_ifIXsr14is_convertibleIS5_PS1_EE5valueENS2_5__natEE4typeE($0,$148,$$byval_copy);
 $134 = $2;
 $149 = $134;
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($150)) + 4|0);
 $133 = $151;
 $152 = $133;
 $153 = ((($152)) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = HEAP32[$152>>2]|0;
 $156 = $154;
 $157 = $155;
 $158 = (($156) - ($157))|0;
 $159 = (($158|0) / 4)&-1;
 $160 = ($159|0)==(1);
 if ($160) {
  $132 = $2;
  $161 = $132;
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($162)) + 24|0);
  $129 = $163;
  $130 = $0;
  $164 = $129;
  $165 = $130;
  $127 = $131;
  $128 = $165;
  $166 = $127;
  $167 = $128;
  $168 = HEAP32[$167>>2]|0;
  HEAP32[$166>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $128;
  $171 = ((($170)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  HEAP32[$169>>2] = $172;
  $173 = ((($166)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($174|0)!=(0|0);
  if ($175) {
   $176 = ((($166)) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($177);
  }
  $125 = $131;
  $126 = $164;
  $178 = $125;
  $179 = $126;
  $122 = $178;
  $123 = $179;
  $180 = $122;
  $121 = $180;
  $181 = $121;
  $182 = HEAP32[$181>>2]|0;
  HEAP32[$124>>2] = $182;
  $183 = $123;
  $119 = $183;
  $184 = $119;
  $185 = HEAP32[$184>>2]|0;
  $186 = $122;
  HEAP32[$186>>2] = $185;
  $120 = $124;
  $187 = $120;
  $188 = HEAP32[$187>>2]|0;
  $189 = $123;
  HEAP32[$189>>2] = $188;
  $190 = ((($178)) + 4|0);
  $191 = $126;
  $192 = ((($191)) + 4|0);
  $116 = $190;
  $117 = $192;
  $193 = $116;
  $115 = $193;
  $194 = $115;
  $195 = HEAP32[$194>>2]|0;
  HEAP32[$118>>2] = $195;
  $196 = $117;
  $113 = $196;
  $197 = $113;
  $198 = HEAP32[$197>>2]|0;
  $199 = $116;
  HEAP32[$199>>2] = $198;
  $114 = $118;
  $200 = $114;
  $201 = HEAP32[$200>>2]|0;
  $202 = $117;
  HEAP32[$202>>2] = $201;
  __ZNSt3__210shared_ptrI5LevelED2Ev($131);
  $112 = $0;
  $203 = $112;
  $204 = HEAP32[$203>>2]|0;
  $205 = ((($204)) + 16|0);
  $109 = $205;
  $110 = $2;
  $206 = $109;
  $207 = $110;
  $107 = $111;
  $108 = $207;
  $208 = $107;
  $209 = $108;
  $210 = HEAP32[$209>>2]|0;
  HEAP32[$208>>2] = $210;
  $211 = ((($208)) + 4|0);
  $212 = $108;
  $213 = ((($212)) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  HEAP32[$211>>2] = $214;
  $215 = ((($208)) + 4|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ($216|0)!=(0|0);
  if ($217) {
   $218 = ((($208)) + 4|0);
   $219 = HEAP32[$218>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($219);
  }
  $105 = $111;
  $106 = $206;
  $220 = $105;
  $221 = $106;
  $102 = $220;
  $103 = $221;
  $222 = $102;
  $101 = $222;
  $223 = $101;
  $224 = HEAP32[$223>>2]|0;
  HEAP32[$104>>2] = $224;
  $225 = $103;
  $99 = $225;
  $226 = $99;
  $227 = HEAP32[$226>>2]|0;
  $228 = $102;
  HEAP32[$228>>2] = $227;
  $100 = $104;
  $229 = $100;
  $230 = HEAP32[$229>>2]|0;
  $231 = $103;
  HEAP32[$231>>2] = $230;
  $232 = ((($220)) + 4|0);
  $233 = $106;
  $234 = ((($233)) + 4|0);
  $96 = $232;
  $97 = $234;
  $235 = $96;
  $95 = $235;
  $236 = $95;
  $237 = HEAP32[$236>>2]|0;
  HEAP32[$98>>2] = $237;
  $238 = $97;
  $93 = $238;
  $239 = $93;
  $240 = HEAP32[$239>>2]|0;
  $241 = $96;
  HEAP32[$241>>2] = $240;
  $94 = $98;
  $242 = $94;
  $243 = HEAP32[$242>>2]|0;
  $244 = $97;
  HEAP32[$244>>2] = $243;
  __ZNSt3__210shared_ptrI5LevelED2Ev($111);
  $92 = $2;
  $245 = $92;
  $246 = HEAP32[$245>>2]|0;
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + 1)|0;
  $91 = $0;
  $249 = $91;
  $250 = HEAP32[$249>>2]|0;
  HEAP32[$250>>2] = $248;
  $251 = $136;
  $252 = $251&1;
  do {
   if ($252) {
    $89 = $139;
    $90 = $0;
    $253 = $89;
    $254 = $90;
    $255 = HEAP32[$254>>2]|0;
    HEAP32[$253>>2] = $255;
    $256 = ((($253)) + 4|0);
    $257 = $90;
    $258 = ((($257)) + 4|0);
    $259 = HEAP32[$258>>2]|0;
    HEAP32[$256>>2] = $259;
    $260 = ((($253)) + 4|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)!=(0|0);
    if ($262) {
     $263 = ((($253)) + 4|0);
     $264 = HEAP32[$263>>2]|0;
     __ZNSt3__219__shared_weak_count12__add_sharedEv($264);
    }
    __THREW__ = 0;
    invoke_vii(395,($147|0),($139|0));
    $265 = __THREW__; __THREW__ = 0;
    $266 = $265&1;
    if (!($266)) {
     __ZNSt3__210shared_ptrI5LevelED2Ev($139);
     break;
    }
    $267 = ___cxa_find_matching_catch_2()|0;
    $268 = tempRet0;
    $140 = $267;
    $141 = $268;
    __ZNSt3__210shared_ptrI5LevelED2Ev($139);
    __ZNSt3__210shared_ptrI5LevelED2Ev($0);
    $476 = $140;
    $477 = $141;
    ___resumeException($476|0);
    // unreachable;
   }
  } while(0);
  $$expand_i1_val2 = 1;
  HEAP8[$137>>0] = $$expand_i1_val2;
  $142 = 1;
 } else {
  $143 = 0;
  while(1) {
   $269 = $143;
   $270 = (+($269>>>0));
   $88 = $2;
   $271 = $88;
   $272 = HEAP32[$271>>2]|0;
   $273 = ((($272)) + 4|0);
   $87 = $273;
   $274 = $87;
   $275 = ((($274)) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = HEAP32[$274>>2]|0;
   $278 = $276;
   $279 = $277;
   $280 = (($278) - ($279))|0;
   $281 = (($280|0) / 4)&-1;
   $282 = (+($281>>>0));
   $84 = $2;
   $283 = $84;
   $284 = HEAP32[$283>>2]|0;
   $285 = HEAP32[$284>>2]|0;
   $61 = 2.0;
   $62 = $285;
   $286 = $61;
   $287 = $62;
   $288 = (+($287>>>0));
   $289 = (+Math_pow((+$286),(+$288)));
   $290 = $282 - $289;
   $291 = $270 < $290;
   if (!($291)) {
    break;
   }
   $60 = $0;
   $292 = $60;
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 4|0);
   $39 = $2;
   $295 = $39;
   $296 = HEAP32[$295>>2]|0;
   $297 = ((($296)) + 4|0);
   $298 = $143;
   $37 = $297;
   $38 = $298;
   $299 = $37;
   $300 = HEAP32[$299>>2]|0;
   $301 = $38;
   $302 = (($300) + ($301<<2)|0);
   $303 = +HEAPF32[$302>>2];
   $9 = $2;
   $304 = $9;
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($305)) + 4|0);
   $307 = $143;
   $308 = (+($307>>>0));
   $8 = $2;
   $309 = $8;
   $310 = HEAP32[$309>>2]|0;
   $311 = HEAP32[$310>>2]|0;
   $6 = 2.0;
   $7 = $311;
   $312 = $6;
   $313 = $7;
   $314 = (+($313>>>0));
   $315 = (+Math_pow((+$312),(+$314)));
   $316 = $308 + $315;
   $317 = (~~(($316))>>>0);
   $4 = $306;
   $5 = $317;
   $318 = $4;
   $319 = HEAP32[$318>>2]|0;
   $320 = $5;
   $321 = (($319) + ($320<<2)|0);
   $322 = +HEAPF32[$321>>2];
   __THREW__ = 0;
   $323 = (+invoke_didd(396,($147|0),(+$303),(+$322)));
   $324 = __THREW__; __THREW__ = 0;
   $325 = $324&1;
   if ($325) {
    label = 20;
    break;
   }
   HEAPF32[$144>>2] = $323;
   $33 = $294;
   $34 = $144;
   $326 = $33;
   $327 = ((($326)) + 4|0);
   $328 = HEAP32[$327>>2]|0;
   $32 = $326;
   $329 = $32;
   $330 = ((($329)) + 8|0);
   $31 = $330;
   $331 = $31;
   $30 = $331;
   $332 = $30;
   $333 = HEAP32[$332>>2]|0;
   $334 = ($328>>>0)<($333>>>0);
   if ($334) {
    __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($35,$326,1);
    $29 = $326;
    $335 = $29;
    $336 = ((($335)) + 8|0);
    $28 = $336;
    $337 = $28;
    $27 = $337;
    $338 = $27;
    $339 = ((($326)) + 4|0);
    $340 = HEAP32[$339>>2]|0;
    $25 = $340;
    $341 = $25;
    $342 = $34;
    $10 = $342;
    $343 = $10;
    $21 = $338;
    $22 = $341;
    $23 = $343;
    $344 = $21;
    $345 = $22;
    $346 = $23;
    $20 = $346;
    $347 = $20;
    ;HEAP8[$19>>0]=HEAP8[$24>>0]|0;
    $16 = $344;
    $17 = $345;
    $18 = $347;
    $348 = $16;
    $349 = $17;
    $350 = $18;
    $15 = $350;
    $351 = $15;
    $12 = $348;
    $13 = $349;
    $14 = $351;
    $352 = $13;
    $353 = $14;
    $11 = $353;
    $354 = $11;
    $355 = +HEAPF32[$354>>2];
    HEAPF32[$352>>2] = $355;
    __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($35);
    $356 = ((($326)) + 4|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ((($357)) + 4|0);
    HEAP32[$356>>2] = $358;
   } else {
    $359 = $34;
    $26 = $359;
    $360 = $26;
    __THREW__ = 0;
    invoke_vii(397,($326|0),($360|0));
    $361 = __THREW__; __THREW__ = 0;
    $362 = $361&1;
    if ($362) {
     label = 20;
     break;
    }
   }
   $363 = $143;
   $364 = (($363) + 1)|0;
   $143 = $364;
  }
  if ((label|0) == 20) {
   $365 = ___cxa_find_matching_catch_2()|0;
   $366 = tempRet0;
   $140 = $365;
   $141 = $366;
   __ZNSt3__210shared_ptrI5LevelED2Ev($0);
   $476 = $140;
   $477 = $141;
   ___resumeException($476|0);
   // unreachable;
  }
  $36 = $2;
  $367 = $36;
  $368 = HEAP32[$367>>2]|0;
  $369 = ((($368)) + 24|0);
  $56 = $369;
  $57 = $0;
  $370 = $56;
  $371 = $57;
  $54 = $58;
  $55 = $371;
  $372 = $54;
  $373 = $55;
  $374 = HEAP32[$373>>2]|0;
  HEAP32[$372>>2] = $374;
  $375 = ((($372)) + 4|0);
  $376 = $55;
  $377 = ((($376)) + 4|0);
  $378 = HEAP32[$377>>2]|0;
  HEAP32[$375>>2] = $378;
  $379 = ((($372)) + 4|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = ($380|0)!=(0|0);
  if ($381) {
   $382 = ((($372)) + 4|0);
   $383 = HEAP32[$382>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($383);
  }
  $52 = $58;
  $53 = $370;
  $384 = $52;
  $385 = $53;
  $49 = $384;
  $50 = $385;
  $386 = $49;
  $48 = $386;
  $387 = $48;
  $388 = HEAP32[$387>>2]|0;
  HEAP32[$51>>2] = $388;
  $389 = $50;
  $46 = $389;
  $390 = $46;
  $391 = HEAP32[$390>>2]|0;
  $392 = $49;
  HEAP32[$392>>2] = $391;
  $47 = $51;
  $393 = $47;
  $394 = HEAP32[$393>>2]|0;
  $395 = $50;
  HEAP32[$395>>2] = $394;
  $396 = ((($384)) + 4|0);
  $397 = $53;
  $398 = ((($397)) + 4|0);
  $43 = $396;
  $44 = $398;
  $399 = $43;
  $42 = $399;
  $400 = $42;
  $401 = HEAP32[$400>>2]|0;
  HEAP32[$45>>2] = $401;
  $402 = $44;
  $40 = $402;
  $403 = $40;
  $404 = HEAP32[$403>>2]|0;
  $405 = $43;
  HEAP32[$405>>2] = $404;
  $41 = $45;
  $406 = $41;
  $407 = HEAP32[$406>>2]|0;
  $408 = $44;
  HEAP32[$408>>2] = $407;
  __ZNSt3__210shared_ptrI5LevelED2Ev($58);
  $59 = $0;
  $409 = $59;
  $410 = HEAP32[$409>>2]|0;
  $411 = ((($410)) + 16|0);
  $79 = $411;
  $80 = $2;
  $412 = $79;
  $413 = $80;
  $77 = $81;
  $78 = $413;
  $414 = $77;
  $415 = $78;
  $416 = HEAP32[$415>>2]|0;
  HEAP32[$414>>2] = $416;
  $417 = ((($414)) + 4|0);
  $418 = $78;
  $419 = ((($418)) + 4|0);
  $420 = HEAP32[$419>>2]|0;
  HEAP32[$417>>2] = $420;
  $421 = ((($414)) + 4|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($422|0)!=(0|0);
  if ($423) {
   $424 = ((($414)) + 4|0);
   $425 = HEAP32[$424>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($425);
  }
  $75 = $81;
  $76 = $412;
  $426 = $75;
  $427 = $76;
  $72 = $426;
  $73 = $427;
  $428 = $72;
  $71 = $428;
  $429 = $71;
  $430 = HEAP32[$429>>2]|0;
  HEAP32[$74>>2] = $430;
  $431 = $73;
  $69 = $431;
  $432 = $69;
  $433 = HEAP32[$432>>2]|0;
  $434 = $72;
  HEAP32[$434>>2] = $433;
  $70 = $74;
  $435 = $70;
  $436 = HEAP32[$435>>2]|0;
  $437 = $73;
  HEAP32[$437>>2] = $436;
  $438 = ((($426)) + 4|0);
  $439 = $76;
  $440 = ((($439)) + 4|0);
  $66 = $438;
  $67 = $440;
  $441 = $66;
  $65 = $441;
  $442 = $65;
  $443 = HEAP32[$442>>2]|0;
  HEAP32[$68>>2] = $443;
  $444 = $67;
  $63 = $444;
  $445 = $63;
  $446 = HEAP32[$445>>2]|0;
  $447 = $66;
  HEAP32[$447>>2] = $446;
  $64 = $68;
  $448 = $64;
  $449 = HEAP32[$448>>2]|0;
  $450 = $67;
  HEAP32[$450>>2] = $449;
  __ZNSt3__210shared_ptrI5LevelED2Ev($81);
  $82 = $2;
  $451 = $82;
  $452 = HEAP32[$451>>2]|0;
  $453 = HEAP32[$452>>2]|0;
  $454 = (($453) + 1)|0;
  $83 = $0;
  $455 = $83;
  $456 = HEAP32[$455>>2]|0;
  HEAP32[$456>>2] = $454;
  $457 = $136;
  $458 = $457&1;
  do {
   if ($458) {
    $85 = $145;
    $86 = $0;
    $459 = $85;
    $460 = $86;
    $461 = HEAP32[$460>>2]|0;
    HEAP32[$459>>2] = $461;
    $462 = ((($459)) + 4|0);
    $463 = $86;
    $464 = ((($463)) + 4|0);
    $465 = HEAP32[$464>>2]|0;
    HEAP32[$462>>2] = $465;
    $466 = ((($459)) + 4|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = ($467|0)!=(0|0);
    if ($468) {
     $469 = ((($459)) + 4|0);
     $470 = HEAP32[$469>>2]|0;
     __ZNSt3__219__shared_weak_count12__add_sharedEv($470);
    }
    __THREW__ = 0;
    invoke_vii(395,($147|0),($145|0));
    $471 = __THREW__; __THREW__ = 0;
    $472 = $471&1;
    if (!($472)) {
     __ZNSt3__210shared_ptrI5LevelED2Ev($145);
     break;
    }
    $473 = ___cxa_find_matching_catch_2()|0;
    $474 = tempRet0;
    $140 = $473;
    $141 = $474;
    __ZNSt3__210shared_ptrI5LevelED2Ev($145);
    __ZNSt3__210shared_ptrI5LevelED2Ev($0);
    $476 = $140;
    $477 = $141;
    ___resumeException($476|0);
    // unreachable;
   }
  } while(0);
  $$expand_i1_val4 = 1;
  HEAP8[$137>>0] = $$expand_i1_val4;
  $142 = 1;
 }
 $$pre_trunc = HEAP8[$137>>0]|0;
 $475 = $$pre_trunc&1;
 if ($475) {
  STACKTOP = sp;return;
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = ((($50)) + 8|0);
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 4)&-1;
 $62 = (($61) + 1)|0;
 $34 = $49;
 HEAP32[$35>>2] = $62;
 $63 = $34;
 $64 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($63)|0);
 $36 = $64;
 $65 = HEAP32[$35>>2]|0;
 $66 = $36;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = ((($70)) + 8|0);
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85<<1;
  HEAP32[$38>>2] = $86;
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = HEAP32[$91>>2]|0;
  $93 = $21;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 4)&-1;
 $109 = $45;
 __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EjjS3_($46,$100,$108,$109);
 $110 = $45;
 $111 = ((($46)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 $127 = +HEAPF32[$126>>2];
 HEAPF32[$124>>2] = $127;
 $128 = ((($46)) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 4|0);
 HEAP32[$128>>2] = $130;
 __THREW__ = 0;
 invoke_vii(394,($49|0),($46|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $47 = $133;
  $48 = $134;
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($46);
  $135 = $47;
  $136 = $48;
  ___resumeException($135|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($46);
  STACKTOP = sp;return;
 }
}
function __ZN7Encoder17fetch_cache_levelEj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = $6;
 $3 = $7;
 $4 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = (($10) + (($11*12)|0)|0);
 __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEC2ERKS6_($0,$12);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 84|0;
 $8 = sp + 16|0;
 $11 = sp + 72|0;
 $12 = sp + 111|0;
 $13 = sp + 8|0;
 $17 = sp + 110|0;
 $19 = sp;
 $21 = sp + 109|0;
 $27 = sp + 108|0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26;
 $24 = $32;
 $33 = $24;
 $34 = ((($33)) + 8|0);
 $23 = $34;
 $35 = $23;
 $22 = $35;
 $36 = $22;
 $20 = $36;
 $37 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $37;
 $15 = $31;
 $16 = $27;
 $38 = $15;
 $14 = $38;
 HEAP32[$38>>2] = 0;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($38)) + 8|0);
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $10 = $40;
 HEAP32[$11>>2] = 0;
 $41 = $10;
 $9 = $11;
 $42 = $9;
 $43 = HEAP32[$42>>2]|0;
 $3 = $13;
 ;HEAP8[$8>>0]=HEAP8[$12>>0]|0;
 $6 = $41;
 HEAP32[$7>>2] = $43;
 $44 = $6;
 $5 = $8;
 $4 = $7;
 $45 = $4;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = $26;
 $2 = $47;
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $28 = $55;
 $56 = $28;
 $57 = ($56>>>0)>(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $28;
 __THREW__ = 0;
 invoke_vii(398,($31|0),($58|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 }
 $61 = $26;
 $62 = HEAP32[$61>>2]|0;
 $63 = $26;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $28;
 __THREW__ = 0;
 invoke_viiii(399,($31|0),($62|0),($65|0),($66|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16;
 $19 = (__ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE8max_sizeEv($17)|0);
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17);
 }
 $14 = $17;
 $21 = $14;
 $22 = ((($21)) + 8|0);
 $13 = $22;
 $23 = $13;
 $12 = $23;
 $24 = $12;
 $25 = $16;
 $10 = $24;
 $11 = $25;
 $26 = $10;
 $27 = $11;
 $7 = $26;
 $8 = $27;
 $9 = 0;
 $28 = $7;
 $29 = $8;
 $6 = $28;
 $30 = ($29>>>0)>(536870911);
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($31);
  ___cxa_throw(($31|0),(1888|0),(327|0));
  // unreachable;
 } else {
  $32 = $8;
  $33 = $32<<3;
  $5 = $33;
  $34 = $5;
  $35 = (__Znwj($34)|0);
  $36 = ((($17)) + 4|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$17>>2] = $35;
  $37 = HEAP32[$17>>2]|0;
  $38 = $16;
  $39 = (($37) + ($38<<3)|0);
  $4 = $17;
  $40 = $4;
  $41 = ((($40)) + 8|0);
  $3 = $41;
  $42 = $3;
  $2 = $42;
  $43 = $2;
  HEAP32[$43>>2] = $39;
  __ZNKSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE14__annotate_newEj($17,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $14 = sp;
 $19 = sp + 113|0;
 $33 = sp + 112|0;
 $28 = $0;
 $29 = $1;
 $30 = $2;
 $31 = $3;
 $34 = $28;
 $27 = $34;
 $35 = $27;
 $36 = ((($35)) + 8|0);
 $26 = $36;
 $37 = $26;
 $25 = $37;
 $38 = $25;
 $32 = $38;
 $39 = $31;
 __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($33,$34,$39);
 $40 = $32;
 $41 = $29;
 $42 = $30;
 $43 = ((($34)) + 4|0);
 $21 = $40;
 $22 = $41;
 $23 = $42;
 $24 = $43;
 while(1) {
  $44 = $22;
  $45 = $23;
  $46 = ($44|0)!=($45|0);
  if (!($46)) {
   break;
  }
  $47 = $21;
  $48 = $24;
  $49 = HEAP32[$48>>2]|0;
  $20 = $49;
  $50 = $20;
  $51 = $22;
  $16 = $47;
  $17 = $50;
  $18 = $51;
  $52 = $16;
  $53 = $17;
  $54 = $18;
  $15 = $54;
  $55 = $15;
  ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
  $11 = $52;
  $12 = $53;
  $13 = $55;
  $56 = $11;
  $57 = $12;
  $58 = $13;
  $10 = $58;
  $59 = $10;
  $7 = $56;
  $8 = $57;
  $9 = $59;
  $60 = $8;
  $61 = $9;
  $6 = $61;
  $62 = $6;
  $4 = $60;
  $5 = $62;
  $63 = $4;
  $64 = $5;
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$63>>2] = $65;
  $66 = ((($63)) + 4|0);
  $67 = $5;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$66>>2] = $69;
  $70 = ((($63)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0|0);
  if ($72) {
   $73 = ((($63)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($74);
  }
  $75 = $22;
  $76 = ((($75)) + 8|0);
  $22 = $76;
  $77 = $24;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 8|0);
  HEAP32[$77>>2] = $79;
 }
 __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($33);
 STACKTOP = sp;return;
}
function __ZN7Encoder6encodeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $7 = sp + 24|0;
 $11 = sp + 509|0;
 $16 = sp + 16|0;
 $22 = sp + 444|0;
 $26 = sp + 424|0;
 $40 = sp + 364|0;
 $46 = sp + 340|0;
 $54 = sp + 304|0;
 $67 = sp + 8|0;
 $75 = sp + 220|0;
 $77 = sp + 212|0;
 $79 = sp + 204|0;
 $81 = sp;
 $82 = sp + 196|0;
 $85 = sp + 184|0;
 $103 = sp + 116|0;
 $104 = sp + 112|0;
 $105 = sp + 104|0;
 $106 = sp + 88|0;
 $109 = sp + 72|0;
 $110 = sp + 64|0;
 $111 = sp + 40|0;
 $112 = sp + 32|0;
 $101 = $1;
 $113 = $3&1;
 $102 = $113;
 $114 = $101;
 $100 = $2;
 $115 = $100;
 $99 = $115;
 $116 = $99;
 $98 = $116;
 $117 = $98;
 $97 = $117;
 $118 = $97;
 $96 = $118;
 $119 = $96;
 $120 = ((($119)) + 11|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $122 & 128;
 $124 = ($123|0)!=(0);
 if ($124) {
  $92 = $116;
  $125 = $92;
  $91 = $125;
  $126 = $91;
  $90 = $126;
  $127 = $90;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $137 = $129;
 } else {
  $95 = $116;
  $130 = $95;
  $94 = $130;
  $131 = $94;
  $93 = $131;
  $132 = $93;
  $133 = ((($132)) + 11|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $137 = $135;
 }
 $136 = ($137>>>0)<(2);
 if ($136) {
  $86 = $0;
  $87 = 0;
  $138 = $86;
  HEAP32[$138>>2] = 0;
  $139 = ((($138)) + 4|0);
  HEAP32[$139>>2] = 0;
  STACKTOP = sp;return;
 }
 $140 = ((($114)) + 12|0);
 $83 = $140;
 $84 = $2;
 $141 = $83;
 $142 = $84;
 $143 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE4findIS7_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEERKT_($141,$142)|0);
 HEAP32[$85>>2] = $143;
 ;HEAP8[$81>>0]=HEAP8[$85>>0]|0;HEAP8[$81+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$85+3>>0]|0;
 $80 = $82;
 $144 = $80;
 ;HEAP32[$144>>2]=HEAP32[$81>>2]|0;
 $145 = HEAP32[$82>>2]|0;
 HEAP32[$103>>2] = $145;
 $146 = ((($114)) + 12|0);
 $78 = $146;
 $147 = $78;
 $76 = $147;
 $148 = $76;
 $74 = $148;
 $149 = $74;
 $150 = ((($149)) + 4|0);
 $73 = $150;
 $151 = $73;
 $72 = $151;
 $152 = $72;
 $71 = $152;
 $153 = $71;
 $70 = $153;
 $154 = $70;
 $68 = $75;
 $69 = $154;
 $155 = $68;
 $156 = $69;
 HEAP32[$155>>2] = $156;
 $157 = HEAP32[$75>>2]|0;
 HEAP32[$79>>2] = $157;
 ;HEAP8[$67>>0]=HEAP8[$79>>0]|0;HEAP8[$67+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$79+3>>0]|0;
 $66 = $77;
 $158 = $66;
 ;HEAP32[$158>>2]=HEAP32[$67>>2]|0;
 $159 = HEAP32[$77>>2]|0;
 HEAP32[$104>>2] = $159;
 $64 = $103;
 $65 = $104;
 $160 = $64;
 $161 = $65;
 $62 = $160;
 $63 = $161;
 $162 = $62;
 $163 = HEAP32[$162>>2]|0;
 $164 = $63;
 $165 = HEAP32[$164>>2]|0;
 $166 = ($163|0)==($165|0);
 if (!($166)) {
  $312 = ((($114)) + 12|0);
  $313 = (__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_($312,$2)|0);
  $88 = $0;
  $89 = $313;
  $314 = $88;
  $315 = $89;
  $316 = HEAP32[$315>>2]|0;
  HEAP32[$314>>2] = $316;
  $317 = ((($314)) + 4|0);
  $318 = $89;
  $319 = ((($318)) + 4|0);
  $320 = HEAP32[$319>>2]|0;
  HEAP32[$317>>2] = $320;
  $321 = ((($314)) + 4|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = ($322|0)!=(0|0);
  if (!($323)) {
   STACKTOP = sp;return;
  }
  $324 = ((($314)) + 4|0);
  $325 = HEAP32[$324>>2]|0;
  __ZNSt3__219__shared_weak_count12__add_sharedEv($325);
  STACKTOP = sp;return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($106,$2);
 $167 = $102;
 $168 = $167&1;
 __THREW__ = 0;
 invoke_viiii(400,($105|0),($114|0),($106|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $237 = ___cxa_find_matching_catch_2()|0;
  $238 = tempRet0;
  $107 = $237;
  $108 = $238;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($106);
  $326 = $107;
  $327 = $108;
  ___resumeException($326|0);
  // unreachable;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($106);
 while(1) {
  $61 = $105;
  $171 = $61;
  $172 = HEAP32[$171>>2]|0;
  $173 = ((($172)) + 4|0);
  $58 = $173;
  $174 = $58;
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = HEAP32[$174>>2]|0;
  $178 = $176;
  $179 = $177;
  $180 = (($178) - ($179))|0;
  $181 = (($180|0) / 4)&-1;
  $182 = ($181>>>0)>(0);
  if (!($182)) {
   label = 16;
   break;
  }
  $55 = $110;
  $56 = $105;
  $183 = $55;
  $184 = $56;
  $185 = HEAP32[$184>>2]|0;
  HEAP32[$183>>2] = $185;
  $186 = ((($183)) + 4|0);
  $187 = $56;
  $188 = ((($187)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  HEAP32[$186>>2] = $189;
  $190 = ((($183)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($191|0)!=(0|0);
  if ($192) {
   $193 = ((($183)) + 4|0);
   $194 = HEAP32[$193>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($194);
  }
  $195 = $102;
  $196 = $195&1;
  __THREW__ = 0;
  invoke_viiii(401,($109|0),($114|0),($110|0),($196|0));
  $197 = __THREW__; __THREW__ = 0;
  $198 = $197&1;
  if ($198) {
   label = 15;
   break;
  }
  $52 = $105;
  $53 = $109;
  $199 = $52;
  $200 = $53;
  $51 = $200;
  $201 = $51;
  $49 = $54;
  $50 = $201;
  $202 = $49;
  $203 = $50;
  $204 = HEAP32[$203>>2]|0;
  HEAP32[$202>>2] = $204;
  $205 = ((($202)) + 4|0);
  $206 = $50;
  $207 = ((($206)) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  HEAP32[$205>>2] = $208;
  $209 = $50;
  HEAP32[$209>>2] = 0;
  $210 = $50;
  $211 = ((($210)) + 4|0);
  HEAP32[$211>>2] = 0;
  $47 = $54;
  $48 = $199;
  $212 = $47;
  $213 = $48;
  $44 = $212;
  $45 = $213;
  $214 = $44;
  $43 = $214;
  $215 = $43;
  $216 = HEAP32[$215>>2]|0;
  HEAP32[$46>>2] = $216;
  $217 = $45;
  $41 = $217;
  $218 = $41;
  $219 = HEAP32[$218>>2]|0;
  $220 = $44;
  HEAP32[$220>>2] = $219;
  $42 = $46;
  $221 = $42;
  $222 = HEAP32[$221>>2]|0;
  $223 = $45;
  HEAP32[$223>>2] = $222;
  $224 = ((($212)) + 4|0);
  $225 = $48;
  $226 = ((($225)) + 4|0);
  $38 = $224;
  $39 = $226;
  $227 = $38;
  $37 = $227;
  $228 = $37;
  $229 = HEAP32[$228>>2]|0;
  HEAP32[$40>>2] = $229;
  $230 = $39;
  $35 = $230;
  $231 = $35;
  $232 = HEAP32[$231>>2]|0;
  $233 = $38;
  HEAP32[$233>>2] = $232;
  $36 = $40;
  $234 = $36;
  $235 = HEAP32[$234>>2]|0;
  $236 = $39;
  HEAP32[$236>>2] = $235;
  __ZNSt3__210shared_ptrI5LevelED2Ev($54);
  __ZNSt3__210shared_ptrI5LevelED2Ev($109);
  __ZNSt3__210shared_ptrI5LevelED2Ev($110);
 }
 L27: do {
  if ((label|0) == 15) {
   $239 = ___cxa_find_matching_catch_2()|0;
   $240 = tempRet0;
   $107 = $239;
   $108 = $240;
   __ZNSt3__210shared_ptrI5LevelED2Ev($110);
  }
  else if ((label|0) == 16) {
   $241 = $102;
   $242 = $241&1;
   do {
    if ($242) {
     $243 = ((($114)) + 12|0);
     $34 = $105;
     $244 = $34;
     $245 = HEAP32[$244>>2]|0;
     $246 = ((($245)) + 16|0);
     $31 = $111;
     $32 = $2;
     $33 = $246;
     $247 = $31;
     $248 = $32;
     $30 = $248;
     $249 = $30;
     __THREW__ = 0;
     invoke_vii(351,($247|0),($249|0));
     $250 = __THREW__; __THREW__ = 0;
     $251 = $250&1;
     if ($251) {
      $293 = ___cxa_find_matching_catch_2()|0;
      $294 = tempRet0;
      $107 = $293;
      $108 = $294;
      break L27;
     }
     $252 = ((($247)) + 12|0);
     $253 = $33;
     $27 = $253;
     $254 = $27;
     $28 = $252;
     $29 = $254;
     $255 = $28;
     $256 = $29;
     $257 = HEAP32[$256>>2]|0;
     HEAP32[$255>>2] = $257;
     $258 = ((($255)) + 4|0);
     $259 = $29;
     $260 = ((($259)) + 4|0);
     $261 = HEAP32[$260>>2]|0;
     HEAP32[$258>>2] = $261;
     $262 = ((($255)) + 4|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = ($263|0)!=(0|0);
     if ($264) {
      $265 = ((($255)) + 4|0);
      $266 = HEAP32[$265>>2]|0;
      __ZNSt3__219__shared_weak_count12__add_sharedEv($266);
     }
     $24 = $243;
     $25 = $111;
     $267 = $24;
     $268 = $25;
     $23 = $268;
     $269 = $23;
     $13 = $267;
     $14 = $269;
     $270 = $13;
     $271 = $14;
     $12 = $271;
     $272 = $12;
     $9 = $270;
     $10 = $272;
     $273 = $9;
     $274 = $10;
     $8 = $274;
     $275 = $8;
     ;HEAP8[$7>>0]=HEAP8[$11>>0]|0;
     $5 = $273;
     $6 = $275;
     $276 = $5;
     $277 = $6;
     $278 = $6;
     $4 = $278;
     $279 = $4;
     __THREW__ = 0;
     invoke_viiii(402,($26|0),($276|0),($277|0),($279|0));
     $280 = __THREW__; __THREW__ = 0;
     $281 = $280&1;
     if ($281) {
      $295 = ___cxa_find_matching_catch_2()|0;
      $296 = tempRet0;
      $107 = $295;
      $108 = $296;
      __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($111);
      break L27;
     } else {
      $19 = $112;
      $20 = $26;
      $21 = 0;
      $282 = $19;
      $283 = $20;
      $18 = $283;
      $284 = $18;
      ;HEAP32[$22>>2]=HEAP32[$284>>2]|0;
      ;HEAP8[$16>>0]=HEAP8[$22>>0]|0;HEAP8[$16+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$22+3>>0]|0;
      $15 = $282;
      $285 = $15;
      ;HEAP32[$285>>2]=HEAP32[$16>>2]|0;
      $286 = ((($282)) + 4|0);
      $287 = $20;
      $288 = ((($287)) + 4|0);
      $17 = $288;
      $289 = $17;
      $290 = HEAP8[$289>>0]|0;
      $291 = $290&1;
      $292 = $291&1;
      HEAP8[$286>>0] = $292;
      __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($111);
      break;
     }
    }
   } while(0);
   $57 = $105;
   $297 = $57;
   $298 = HEAP32[$297>>2]|0;
   $299 = ((($298)) + 16|0);
   $59 = $0;
   $60 = $299;
   $300 = $59;
   $301 = $60;
   $302 = HEAP32[$301>>2]|0;
   HEAP32[$300>>2] = $302;
   $303 = ((($300)) + 4|0);
   $304 = $60;
   $305 = ((($304)) + 4|0);
   $306 = HEAP32[$305>>2]|0;
   HEAP32[$303>>2] = $306;
   $307 = ((($300)) + 4|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = ($308|0)!=(0|0);
   if ($309) {
    $310 = ((($300)) + 4|0);
    $311 = HEAP32[$310>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($311);
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($105);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__210shared_ptrI5LevelED2Ev($105);
 $326 = $107;
 $327 = $108;
 ___resumeException($326|0);
 // unreachable;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_SA_EEEEENSJ_INS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $17 = sp + 8|0;
 $20 = sp + 330|0;
 $53 = sp;
 $56 = sp + 329|0;
 $78 = sp + 44|0;
 $81 = sp + 328|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $75 = $1;
 $76 = $2;
 $77 = $3;
 $86 = $75;
 $87 = $76;
 $88 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESN_RKT_($86,$78,$87)|0);
 $79 = $88;
 $89 = $79;
 $90 = HEAP32[$89>>2]|0;
 $80 = $90;
 HEAP8[$81>>0] = 0;
 $91 = $79;
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 do {
  if ($93) {
   $94 = $77;
   $74 = $94;
   $95 = $74;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJNS_4pairIS7_SA_EEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_ISO_EEEEEEDpOT_($82,$86,$95);
   $96 = HEAP32[$78>>2]|0;
   $97 = $79;
   $39 = $82;
   $98 = $39;
   $38 = $98;
   $99 = $38;
   $37 = $99;
   $100 = $37;
   $101 = HEAP32[$100>>2]|0;
   __THREW__ = 0;
   invoke_viiii(403,($86|0),($96|0),($97|0),($101|0));
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if (!($103)) {
    $35 = $82;
    $104 = $35;
    $34 = $104;
    $105 = $34;
    $33 = $105;
    $106 = $33;
    $107 = HEAP32[$106>>2]|0;
    $36 = $107;
    $32 = $104;
    $108 = $32;
    $31 = $108;
    $109 = $31;
    HEAP32[$109>>2] = 0;
    $110 = $36;
    $80 = $110;
    HEAP8[$81>>0] = 1;
    $30 = $82;
    $111 = $30;
    $27 = $111;
    $28 = 0;
    $112 = $27;
    $26 = $112;
    $113 = $26;
    $25 = $113;
    $114 = $25;
    $115 = HEAP32[$114>>2]|0;
    $29 = $115;
    $116 = $28;
    $7 = $112;
    $117 = $7;
    $6 = $117;
    $118 = $6;
    HEAP32[$118>>2] = $116;
    $119 = $29;
    $120 = ($119|0)!=(0|0);
    if (!($120)) {
     break;
    }
    $5 = $112;
    $121 = $5;
    $4 = $121;
    $122 = $4;
    $123 = ((($122)) + 4|0);
    $124 = $29;
    $23 = $123;
    $24 = $124;
    $125 = $23;
    $126 = ((($125)) + 4|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&1;
    if ($128) {
     $129 = HEAP32[$125>>2]|0;
     $130 = $24;
     $131 = ((($130)) + 16|0);
     $22 = $131;
     $132 = $22;
     $21 = $132;
     $133 = $21;
     $18 = $129;
     $19 = $133;
     $134 = $18;
     $135 = $19;
     ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
     $15 = $134;
     $16 = $135;
     $136 = $16;
     __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($136);
    }
    $137 = $24;
    $138 = ($137|0)!=(0|0);
    if (!($138)) {
     break;
    }
    $139 = HEAP32[$125>>2]|0;
    $140 = $24;
    $12 = $139;
    $13 = $140;
    $14 = 1;
    $141 = $12;
    $142 = $13;
    $143 = $14;
    $9 = $141;
    $10 = $142;
    $11 = $143;
    $144 = $10;
    $8 = $144;
    $145 = $8;
    __ZdlPv($145);
    break;
   }
   $146 = ___cxa_find_matching_catch_2()|0;
   $147 = tempRet0;
   $83 = $146;
   $84 = $147;
   $66 = $82;
   $148 = $66;
   $63 = $148;
   $64 = 0;
   $149 = $63;
   $62 = $149;
   $150 = $62;
   $61 = $150;
   $151 = $61;
   $152 = HEAP32[$151>>2]|0;
   $65 = $152;
   $153 = $64;
   $43 = $149;
   $154 = $43;
   $42 = $154;
   $155 = $42;
   HEAP32[$155>>2] = $153;
   $156 = $65;
   $157 = ($156|0)!=(0|0);
   if (!($157)) {
    $195 = $83;
    $196 = $84;
    ___resumeException($195|0);
    // unreachable;
   }
   $41 = $149;
   $158 = $41;
   $40 = $158;
   $159 = $40;
   $160 = ((($159)) + 4|0);
   $161 = $65;
   $59 = $160;
   $60 = $161;
   $162 = $59;
   $163 = ((($162)) + 4|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&1;
   if ($165) {
    $166 = HEAP32[$162>>2]|0;
    $167 = $60;
    $168 = ((($167)) + 16|0);
    $58 = $168;
    $169 = $58;
    $57 = $169;
    $170 = $57;
    $54 = $166;
    $55 = $170;
    $171 = $54;
    $172 = $55;
    ;HEAP8[$53>>0]=HEAP8[$56>>0]|0;
    $51 = $171;
    $52 = $172;
    $173 = $52;
    __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($173);
   }
   $174 = $60;
   $175 = ($174|0)!=(0|0);
   if (!($175)) {
    $195 = $83;
    $196 = $84;
    ___resumeException($195|0);
    // unreachable;
   }
   $176 = HEAP32[$162>>2]|0;
   $177 = $60;
   $48 = $176;
   $49 = $177;
   $50 = 1;
   $178 = $48;
   $179 = $49;
   $180 = $50;
   $45 = $178;
   $46 = $179;
   $47 = $180;
   $181 = $46;
   $44 = $181;
   $182 = $44;
   __ZdlPv($182);
   $195 = $83;
   $196 = $84;
   ___resumeException($195|0);
   // unreachable;
  }
 } while(0);
 $183 = $80;
 $67 = $85;
 $68 = $183;
 $184 = $67;
 $185 = $68;
 HEAP32[$184>>2] = $185;
 $71 = $0;
 $72 = $85;
 $73 = $81;
 $186 = $71;
 $187 = $72;
 $70 = $187;
 $188 = $70;
 ;HEAP32[$186>>2]=HEAP32[$188>>2]|0;
 $189 = ((($186)) + 4|0);
 $190 = $73;
 $69 = $190;
 $191 = $69;
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&1;
 $194 = $193&1;
 HEAP8[$189>>0] = $194;
 STACKTOP = sp;return;
}
function __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 __ZNSt3__210shared_ptrI5LevelED2Ev($3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEENS_4lessIS6_EENS4_INS_4pairIKS6_S9_EEEEEixERSD_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 113|0;
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $19 = sp + 112|0;
 $20 = sp + 111|0;
 $21 = sp + 110|0;
 $22 = sp + 109|0;
 $24 = sp + 52|0;
 $28 = sp + 32|0;
 $29 = sp + 28|0;
 $30 = sp + 108|0;
 $26 = $0;
 $27 = $1;
 $31 = $26;
 $32 = $27;
 $33 = $27;
 $25 = $33;
 $34 = $25;
 $23 = $34;
 $35 = $23;
 $17 = $24;
 $18 = $35;
 $36 = $17;
 $37 = $18;
 ;HEAP8[$13>>0]=HEAP8[$22>>0]|0;
 ;HEAP8[$14>>0]=HEAP8[$21>>0]|0;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$16>>0]=HEAP8[$19>>0]|0;
 $11 = $36;
 $12 = $37;
 $38 = $11;
 $39 = $12;
 $10 = $39;
 $40 = $10;
 $8 = $38;
 $9 = $40;
 $41 = $8;
 $42 = $9;
 $7 = $42;
 $43 = $7;
 HEAP32[$41>>2] = $43;
 $44 = HEAP32[$24>>2]|0;
 HEAP32[$29>>2] = $44;
 $2 = $3;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_($28,$31,$32,22090,$29,$30);
 $6 = $28;
 $45 = $6;
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 16|0);
 $5 = $47;
 $48 = $5;
 $4 = $48;
 $49 = $4;
 $50 = ((($49)) + 12|0);
 STACKTOP = sp;return ($50|0);
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_4pairINS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $28 = sp + 8|0;
 $31 = sp + 346|0;
 $57 = sp;
 $60 = sp + 345|0;
 $84 = sp + 44|0;
 $87 = sp + 344|0;
 $88 = sp + 24|0;
 $91 = sp + 12|0;
 $79 = $1;
 $80 = $2;
 $81 = $3;
 $82 = $4;
 $83 = $5;
 $92 = $79;
 $93 = $80;
 $94 = (__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESN_RKT_($92,$84,$93)|0);
 $85 = $94;
 $95 = $85;
 $96 = HEAP32[$95>>2]|0;
 $86 = $96;
 HEAP8[$87>>0] = 0;
 $97 = $85;
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0|0);
 do {
  if ($99) {
   $100 = $81;
   $78 = $100;
   $101 = $78;
   $102 = $82;
   $43 = $102;
   $103 = $43;
   $104 = $83;
   $42 = $104;
   $105 = $42;
   __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_ISU_EEEEEEDpOT_($88,$92,$101,$103,$105);
   $106 = HEAP32[$84>>2]|0;
   $107 = $85;
   $14 = $88;
   $108 = $14;
   $13 = $108;
   $109 = $13;
   $12 = $109;
   $110 = $12;
   $111 = HEAP32[$110>>2]|0;
   __THREW__ = 0;
   invoke_viiii(403,($92|0),($106|0),($107|0),($111|0));
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if (!($113)) {
    $10 = $88;
    $114 = $10;
    $9 = $114;
    $115 = $9;
    $8 = $115;
    $116 = $8;
    $117 = HEAP32[$116>>2]|0;
    $11 = $117;
    $7 = $114;
    $118 = $7;
    $6 = $118;
    $119 = $6;
    HEAP32[$119>>2] = 0;
    $120 = $11;
    $86 = $120;
    HEAP8[$87>>0] = 1;
    $41 = $88;
    $121 = $41;
    $38 = $121;
    $39 = 0;
    $122 = $38;
    $37 = $122;
    $123 = $37;
    $36 = $123;
    $124 = $36;
    $125 = HEAP32[$124>>2]|0;
    $40 = $125;
    $126 = $39;
    $18 = $122;
    $127 = $18;
    $17 = $127;
    $128 = $17;
    HEAP32[$128>>2] = $126;
    $129 = $40;
    $130 = ($129|0)!=(0|0);
    if (!($130)) {
     break;
    }
    $16 = $122;
    $131 = $16;
    $15 = $131;
    $132 = $15;
    $133 = ((($132)) + 4|0);
    $134 = $40;
    $34 = $133;
    $35 = $134;
    $135 = $34;
    $136 = ((($135)) + 4|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&1;
    if ($138) {
     $139 = HEAP32[$135>>2]|0;
     $140 = $35;
     $141 = ((($140)) + 16|0);
     $33 = $141;
     $142 = $33;
     $32 = $142;
     $143 = $32;
     $29 = $139;
     $30 = $143;
     $144 = $29;
     $145 = $30;
     ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
     $26 = $144;
     $27 = $145;
     $146 = $27;
     __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($146);
    }
    $147 = $35;
    $148 = ($147|0)!=(0|0);
    if (!($148)) {
     break;
    }
    $149 = HEAP32[$135>>2]|0;
    $150 = $35;
    $23 = $149;
    $24 = $150;
    $25 = 1;
    $151 = $23;
    $152 = $24;
    $153 = $25;
    $20 = $151;
    $21 = $152;
    $22 = $153;
    $154 = $21;
    $19 = $154;
    $155 = $19;
    __ZdlPv($155);
    break;
   }
   $156 = ___cxa_find_matching_catch_2()|0;
   $157 = tempRet0;
   $89 = $156;
   $90 = $157;
   $70 = $88;
   $158 = $70;
   $67 = $158;
   $68 = 0;
   $159 = $67;
   $66 = $159;
   $160 = $66;
   $65 = $160;
   $161 = $65;
   $162 = HEAP32[$161>>2]|0;
   $69 = $162;
   $163 = $68;
   $47 = $159;
   $164 = $47;
   $46 = $164;
   $165 = $46;
   HEAP32[$165>>2] = $163;
   $166 = $69;
   $167 = ($166|0)!=(0|0);
   if (!($167)) {
    $205 = $89;
    $206 = $90;
    ___resumeException($205|0);
    // unreachable;
   }
   $45 = $159;
   $168 = $45;
   $44 = $168;
   $169 = $44;
   $170 = ((($169)) + 4|0);
   $171 = $69;
   $63 = $170;
   $64 = $171;
   $172 = $63;
   $173 = ((($172)) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&1;
   if ($175) {
    $176 = HEAP32[$172>>2]|0;
    $177 = $64;
    $178 = ((($177)) + 16|0);
    $62 = $178;
    $179 = $62;
    $61 = $179;
    $180 = $61;
    $58 = $176;
    $59 = $180;
    $181 = $58;
    $182 = $59;
    ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
    $55 = $181;
    $56 = $182;
    $183 = $56;
    __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($183);
   }
   $184 = $64;
   $185 = ($184|0)!=(0|0);
   if (!($185)) {
    $205 = $89;
    $206 = $90;
    ___resumeException($205|0);
    // unreachable;
   }
   $186 = HEAP32[$172>>2]|0;
   $187 = $64;
   $52 = $186;
   $53 = $187;
   $54 = 1;
   $188 = $52;
   $189 = $53;
   $190 = $54;
   $49 = $188;
   $50 = $189;
   $51 = $190;
   $191 = $50;
   $48 = $191;
   $192 = $48;
   __ZdlPv($192);
   $205 = $89;
   $206 = $90;
   ___resumeException($205|0);
   // unreachable;
  }
 } while(0);
 $193 = $86;
 $71 = $91;
 $72 = $193;
 $194 = $71;
 $195 = $72;
 HEAP32[$194>>2] = $195;
 $75 = $0;
 $76 = $91;
 $77 = $87;
 $196 = $75;
 $197 = $76;
 $74 = $197;
 $198 = $74;
 ;HEAP32[$196>>2]=HEAP32[$198>>2]|0;
 $199 = ((($196)) + 4|0);
 $200 = $77;
 $73 = $200;
 $201 = $73;
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&1;
 $204 = $203&1;
 HEAP8[$199>>0] = $204;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEESN_RKT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $25 = sp + 8|0;
 $28 = sp + 653|0;
 $66 = sp + 404|0;
 $67 = sp + 400|0;
 $99 = sp;
 $102 = sp + 652|0;
 $140 = sp + 116|0;
 $141 = sp + 112|0;
 $163 = $0;
 $164 = $1;
 $165 = $2;
 $167 = $163;
 $161 = $167;
 $168 = $161;
 $160 = $168;
 $169 = $160;
 $170 = ((($169)) + 4|0);
 $159 = $170;
 $171 = $159;
 $158 = $171;
 $172 = $158;
 $157 = $172;
 $173 = $157;
 $156 = $173;
 $174 = $156;
 $175 = HEAP32[$174>>2]|0;
 $166 = $175;
 $176 = $166;
 $177 = ($176|0)!=(0|0);
 if (!($177)) {
  $155 = $167;
  $459 = $155;
  $460 = ((($459)) + 4|0);
  $154 = $460;
  $461 = $154;
  $153 = $461;
  $462 = $153;
  $152 = $462;
  $463 = $152;
  $151 = $463;
  $464 = $151;
  $465 = $164;
  HEAP32[$465>>2] = $464;
  $466 = $164;
  $467 = HEAP32[$466>>2]|0;
  $162 = $467;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 while(1) {
  $79 = $167;
  $178 = $79;
  $179 = ((($178)) + 8|0);
  $78 = $179;
  $180 = $78;
  $77 = $180;
  $181 = $77;
  $182 = $165;
  $183 = $166;
  $184 = ((($183)) + 16|0);
  $74 = $181;
  $75 = $182;
  $76 = $184;
  $185 = $74;
  $186 = $75;
  $187 = $76;
  $71 = $185;
  $72 = $186;
  $73 = $187;
  $188 = $72;
  $189 = $73;
  $69 = $188;
  $70 = $189;
  $190 = $69;
  $191 = $70;
  $64 = $190;
  $65 = $191;
  $192 = $64;
  $62 = $192;
  $193 = $62;
  $61 = $193;
  $194 = $61;
  $60 = $194;
  $195 = $60;
  $59 = $195;
  $196 = $59;
  $197 = ((($196)) + 11|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $199 & 128;
  $201 = ($200|0)!=(0);
  if ($201) {
   $55 = $193;
   $202 = $55;
   $54 = $202;
   $203 = $54;
   $53 = $203;
   $204 = $53;
   $205 = ((($204)) + 4|0);
   $206 = HEAP32[$205>>2]|0;
   $213 = $206;
  } else {
   $58 = $193;
   $207 = $58;
   $57 = $207;
   $208 = $57;
   $56 = $208;
   $209 = $56;
   $210 = ((($209)) + 11|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = $212;
  }
  HEAP32[$66>>2] = $213;
  $214 = $65;
  $52 = $214;
  $215 = $52;
  $51 = $215;
  $216 = $51;
  $50 = $216;
  $217 = $50;
  $49 = $217;
  $218 = $49;
  $219 = ((($218)) + 11|0);
  $220 = HEAP8[$219>>0]|0;
  $221 = $220&255;
  $222 = $221 & 128;
  $223 = ($222|0)!=(0);
  if ($223) {
   $45 = $215;
   $224 = $45;
   $44 = $224;
   $225 = $44;
   $43 = $225;
   $226 = $43;
   $227 = ((($226)) + 4|0);
   $228 = HEAP32[$227>>2]|0;
   $235 = $228;
  } else {
   $48 = $215;
   $229 = $48;
   $47 = $229;
   $230 = $47;
   $46 = $230;
   $231 = $46;
   $232 = ((($231)) + 11|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $234;
  }
  HEAP32[$67>>2] = $235;
  $42 = $192;
  $236 = $42;
  $41 = $236;
  $237 = $41;
  $40 = $237;
  $238 = $40;
  $39 = $238;
  $239 = $39;
  $38 = $239;
  $240 = $38;
  $241 = ((($240)) + 11|0);
  $242 = HEAP8[$241>>0]|0;
  $243 = $242&255;
  $244 = $243 & 128;
  $245 = ($244|0)!=(0);
  if ($245) {
   $32 = $237;
   $246 = $32;
   $31 = $246;
   $247 = $31;
   $30 = $247;
   $248 = $30;
   $249 = HEAP32[$248>>2]|0;
   $255 = $249;
  } else {
   $37 = $237;
   $250 = $37;
   $36 = $250;
   $251 = $36;
   $35 = $251;
   $252 = $35;
   $34 = $252;
   $253 = $34;
   $33 = $253;
   $254 = $33;
   $255 = $254;
  }
  $29 = $255;
  $256 = $29;
  $257 = $65;
  $19 = $257;
  $258 = $19;
  $18 = $258;
  $259 = $18;
  $17 = $259;
  $260 = $17;
  $16 = $260;
  $261 = $16;
  $15 = $261;
  $262 = $15;
  $263 = ((($262)) + 11|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 & 128;
  $267 = ($266|0)!=(0);
  if ($267) {
   $9 = $259;
   $268 = $9;
   $8 = $268;
   $269 = $8;
   $7 = $269;
   $270 = $7;
   $271 = HEAP32[$270>>2]|0;
   $277 = $271;
  } else {
   $14 = $259;
   $272 = $14;
   $13 = $272;
   $273 = $13;
   $12 = $273;
   $274 = $12;
   $11 = $274;
   $275 = $11;
   $10 = $275;
   $276 = $10;
   $277 = $276;
  }
  $6 = $277;
  $278 = $6;
  $26 = $66;
  $27 = $67;
  $279 = $26;
  $280 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $279;
  $24 = $280;
  $281 = $24;
  $282 = $23;
  $20 = $25;
  $21 = $281;
  $22 = $282;
  $283 = $21;
  $284 = HEAP32[$283>>2]|0;
  $285 = $22;
  $286 = HEAP32[$285>>2]|0;
  $287 = ($284>>>0)<($286>>>0);
  $288 = $24;
  $289 = $23;
  $290 = $287 ? $288 : $289;
  $291 = HEAP32[$290>>2]|0;
  __THREW__ = 0;
  $292 = (invoke_iiii(381,($256|0),($278|0),($291|0))|0);
  $293 = __THREW__; __THREW__ = 0;
  $294 = $293&1;
  if ($294) {
   label = 22;
   break;
  }
  $68 = $292;
  $295 = $68;
  $296 = ($295|0)!=(0);
  do {
   if ($296) {
    $297 = $68;
    $63 = $297;
   } else {
    $298 = HEAP32[$66>>2]|0;
    $299 = HEAP32[$67>>2]|0;
    $300 = ($298>>>0)<($299>>>0);
    if ($300) {
     $63 = -1;
     break;
    }
    $301 = HEAP32[$66>>2]|0;
    $302 = HEAP32[$67>>2]|0;
    $303 = ($301>>>0)>($302>>>0);
    if ($303) {
     $63 = 1;
     break;
    } else {
     $63 = 0;
     break;
    }
   }
  } while(0);
  $306 = $63;
  $307 = ($306|0)<(0);
  if ($307) {
   $308 = $166;
   $309 = HEAP32[$308>>2]|0;
   $310 = ($309|0)!=(0|0);
   $311 = $166;
   if (!($310)) {
    label = 26;
    break;
   }
   $312 = HEAP32[$311>>2]|0;
   $166 = $312;
   continue;
  }
  $5 = $167;
  $316 = $5;
  $317 = ((($316)) + 8|0);
  $4 = $317;
  $318 = $4;
  $3 = $318;
  $319 = $3;
  $320 = $166;
  $321 = ((($320)) + 16|0);
  $322 = $165;
  $148 = $319;
  $149 = $321;
  $150 = $322;
  $323 = $148;
  $324 = $149;
  $325 = $150;
  $145 = $323;
  $146 = $324;
  $147 = $325;
  $326 = $146;
  $327 = $147;
  $143 = $326;
  $144 = $327;
  $328 = $143;
  $329 = $144;
  $138 = $328;
  $139 = $329;
  $330 = $138;
  $136 = $330;
  $331 = $136;
  $135 = $331;
  $332 = $135;
  $134 = $332;
  $333 = $134;
  $133 = $333;
  $334 = $133;
  $335 = ((($334)) + 11|0);
  $336 = HEAP8[$335>>0]|0;
  $337 = $336&255;
  $338 = $337 & 128;
  $339 = ($338|0)!=(0);
  if ($339) {
   $129 = $331;
   $340 = $129;
   $128 = $340;
   $341 = $128;
   $127 = $341;
   $342 = $127;
   $343 = ((($342)) + 4|0);
   $344 = HEAP32[$343>>2]|0;
   $351 = $344;
  } else {
   $132 = $331;
   $345 = $132;
   $131 = $345;
   $346 = $131;
   $130 = $346;
   $347 = $130;
   $348 = ((($347)) + 11|0);
   $349 = HEAP8[$348>>0]|0;
   $350 = $349&255;
   $351 = $350;
  }
  HEAP32[$140>>2] = $351;
  $352 = $139;
  $126 = $352;
  $353 = $126;
  $125 = $353;
  $354 = $125;
  $124 = $354;
  $355 = $124;
  $123 = $355;
  $356 = $123;
  $357 = ((($356)) + 11|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = $358&255;
  $360 = $359 & 128;
  $361 = ($360|0)!=(0);
  if ($361) {
   $119 = $353;
   $362 = $119;
   $118 = $362;
   $363 = $118;
   $117 = $363;
   $364 = $117;
   $365 = ((($364)) + 4|0);
   $366 = HEAP32[$365>>2]|0;
   $373 = $366;
  } else {
   $122 = $353;
   $367 = $122;
   $121 = $367;
   $368 = $121;
   $120 = $368;
   $369 = $120;
   $370 = ((($369)) + 11|0);
   $371 = HEAP8[$370>>0]|0;
   $372 = $371&255;
   $373 = $372;
  }
  HEAP32[$141>>2] = $373;
  $116 = $330;
  $374 = $116;
  $115 = $374;
  $375 = $115;
  $114 = $375;
  $376 = $114;
  $113 = $376;
  $377 = $113;
  $112 = $377;
  $378 = $112;
  $379 = ((($378)) + 11|0);
  $380 = HEAP8[$379>>0]|0;
  $381 = $380&255;
  $382 = $381 & 128;
  $383 = ($382|0)!=(0);
  if ($383) {
   $106 = $375;
   $384 = $106;
   $105 = $384;
   $385 = $105;
   $104 = $385;
   $386 = $104;
   $387 = HEAP32[$386>>2]|0;
   $393 = $387;
  } else {
   $111 = $375;
   $388 = $111;
   $110 = $388;
   $389 = $110;
   $109 = $389;
   $390 = $109;
   $108 = $390;
   $391 = $108;
   $107 = $391;
   $392 = $107;
   $393 = $392;
  }
  $103 = $393;
  $394 = $103;
  $395 = $139;
  $93 = $395;
  $396 = $93;
  $92 = $396;
  $397 = $92;
  $91 = $397;
  $398 = $91;
  $90 = $398;
  $399 = $90;
  $89 = $399;
  $400 = $89;
  $401 = ((($400)) + 11|0);
  $402 = HEAP8[$401>>0]|0;
  $403 = $402&255;
  $404 = $403 & 128;
  $405 = ($404|0)!=(0);
  if ($405) {
   $83 = $397;
   $406 = $83;
   $82 = $406;
   $407 = $82;
   $81 = $407;
   $408 = $81;
   $409 = HEAP32[$408>>2]|0;
   $415 = $409;
  } else {
   $88 = $397;
   $410 = $88;
   $87 = $410;
   $411 = $87;
   $86 = $411;
   $412 = $86;
   $85 = $412;
   $413 = $85;
   $84 = $413;
   $414 = $84;
   $415 = $414;
  }
  $80 = $415;
  $416 = $80;
  $100 = $140;
  $101 = $141;
  $417 = $100;
  $418 = $101;
  ;HEAP8[$99>>0]=HEAP8[$102>>0]|0;
  $97 = $417;
  $98 = $418;
  $419 = $98;
  $420 = $97;
  $94 = $99;
  $95 = $419;
  $96 = $420;
  $421 = $95;
  $422 = HEAP32[$421>>2]|0;
  $423 = $96;
  $424 = HEAP32[$423>>2]|0;
  $425 = ($422>>>0)<($424>>>0);
  $426 = $98;
  $427 = $97;
  $428 = $425 ? $426 : $427;
  $429 = HEAP32[$428>>2]|0;
  __THREW__ = 0;
  $430 = (invoke_iiii(381,($394|0),($416|0),($429|0))|0);
  $431 = __THREW__; __THREW__ = 0;
  $432 = $431&1;
  if ($432) {
   label = 47;
   break;
  }
  $142 = $430;
  $433 = $142;
  $434 = ($433|0)!=(0);
  do {
   if ($434) {
    $435 = $142;
    $137 = $435;
   } else {
    $436 = HEAP32[$140>>2]|0;
    $437 = HEAP32[$141>>2]|0;
    $438 = ($436>>>0)<($437>>>0);
    if ($438) {
     $137 = -1;
     break;
    }
    $439 = HEAP32[$140>>2]|0;
    $440 = HEAP32[$141>>2]|0;
    $441 = ($439>>>0)>($440>>>0);
    if ($441) {
     $137 = 1;
     break;
    } else {
     $137 = 0;
     break;
    }
   }
  } while(0);
  $444 = $137;
  $445 = ($444|0)<(0);
  $446 = $166;
  if (!($445)) {
   label = 52;
   break;
  }
  $447 = ((($446)) + 4|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = ($448|0)!=(0|0);
  $450 = $166;
  if (!($449)) {
   label = 51;
   break;
  }
  $451 = ((($450)) + 4|0);
  $452 = HEAP32[$451>>2]|0;
  $166 = $452;
 }
 if ((label|0) == 22) {
  $304 = ___cxa_find_matching_catch_3(0|0)|0;
  $305 = tempRet0;
  ___clang_call_terminate($304);
  // unreachable;
 }
 else if ((label|0) == 26) {
  $313 = $164;
  HEAP32[$313>>2] = $311;
  $314 = $164;
  $315 = HEAP32[$314>>2]|0;
  $162 = $315;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 47) {
  $442 = ___cxa_find_matching_catch_3(0|0)|0;
  $443 = tempRet0;
  ___clang_call_terminate($442);
  // unreachable;
 }
 else if ((label|0) == 51) {
  $453 = $164;
  HEAP32[$453>>2] = $450;
  $454 = $164;
  $455 = HEAP32[$454>>2]|0;
  $456 = ((($455)) + 4|0);
  $162 = $456;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 else if ((label|0) == 52) {
  $457 = $164;
  HEAP32[$457>>2] = $446;
  $458 = $164;
  $162 = $458;
  $468 = $162;
  STACKTOP = sp;return ($468|0);
 }
 return (0)|0;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSM_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_ISU_EEEEEEDpOT_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $18 = sp + 80|0;
 $19 = sp + 72|0;
 $20 = sp + 64|0;
 $22 = sp + 621|0;
 $23 = sp + 620|0;
 $24 = sp + 619|0;
 $25 = sp + 56|0;
 $26 = sp + 48|0;
 $27 = sp + 40|0;
 $34 = sp + 618|0;
 $35 = sp + 528|0;
 $36 = sp + 617|0;
 $43 = sp + 32|0;
 $50 = sp + 616|0;
 $69 = sp + 24|0;
 $72 = sp + 615|0;
 $93 = sp + 316|0;
 $94 = sp + 16|0;
 $97 = sp + 304|0;
 $98 = sp + 296|0;
 $99 = sp + 8|0;
 $104 = sp + 272|0;
 $128 = sp;
 $131 = sp + 613|0;
 $150 = sp + 612|0;
 $151 = sp + 96|0;
 $145 = $1;
 $146 = $2;
 $147 = $3;
 $148 = $4;
 $154 = $145;
 $144 = $154;
 $155 = $144;
 $156 = ((($155)) + 4|0);
 $143 = $156;
 $157 = $143;
 $142 = $157;
 $158 = $142;
 $149 = $158;
 $$expand_i1_val = 0;
 HEAP8[$150>>0] = $$expand_i1_val;
 $159 = $149;
 $113 = $159;
 $114 = 1;
 $160 = $113;
 $161 = $114;
 $110 = $160;
 $111 = $161;
 $112 = 0;
 $162 = $110;
 $163 = $111;
 $109 = $162;
 $164 = ($163>>>0)>(119304647);
 if ($164) {
  $165 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($165);
  ___cxa_throw(($165|0),(1888|0),(327|0));
  // unreachable;
 }
 $166 = $111;
 $167 = ($166*36)|0;
 $108 = $167;
 $168 = $108;
 $169 = (__Znwj($168)|0);
 $170 = $149;
 $105 = $151;
 $106 = $170;
 $107 = 0;
 $171 = $105;
 $172 = $106;
 HEAP32[$171>>2] = $172;
 $173 = ((($171)) + 4|0);
 $174 = $107;
 $175 = $174&1;
 $176 = $175&1;
 HEAP8[$173>>0] = $176;
 $101 = $0;
 $102 = $169;
 $103 = $151;
 $177 = $101;
 $178 = $102;
 $179 = $103;
 $100 = $179;
 $180 = $100;
 ;HEAP32[$104>>2]=HEAP32[$180>>2]|0;HEAP32[$104+4>>2]=HEAP32[$180+4>>2]|0;
 ;HEAP8[$99>>0]=HEAP8[$104>>0]|0;HEAP8[$99+1>>0]=HEAP8[$104+1>>0]|0;HEAP8[$99+2>>0]=HEAP8[$104+2>>0]|0;HEAP8[$99+3>>0]=HEAP8[$104+3>>0]|0;HEAP8[$99+4>>0]=HEAP8[$104+4>>0]|0;HEAP8[$99+5>>0]=HEAP8[$104+5>>0]|0;HEAP8[$99+6>>0]=HEAP8[$104+6>>0]|0;HEAP8[$99+7>>0]=HEAP8[$104+7>>0]|0;
 $96 = $177;
 HEAP32[$97>>2] = $178;
 $181 = $96;
 $95 = $97;
 $182 = $95;
 $183 = HEAP32[$182>>2]|0;
 $89 = $99;
 $184 = $89;
 ;HEAP32[$98>>2]=HEAP32[$184>>2]|0;HEAP32[$98+4>>2]=HEAP32[$184+4>>2]|0;
 ;HEAP8[$94>>0]=HEAP8[$98>>0]|0;HEAP8[$94+1>>0]=HEAP8[$98+1>>0]|0;HEAP8[$94+2>>0]=HEAP8[$98+2>>0]|0;HEAP8[$94+3>>0]=HEAP8[$98+3>>0]|0;HEAP8[$94+4>>0]=HEAP8[$98+4>>0]|0;HEAP8[$94+5>>0]=HEAP8[$98+5>>0]|0;HEAP8[$94+6>>0]=HEAP8[$98+6>>0]|0;HEAP8[$94+7>>0]=HEAP8[$98+7>>0]|0;
 $92 = $181;
 HEAP32[$93>>2] = $183;
 $185 = $92;
 $91 = $93;
 $186 = $91;
 $187 = HEAP32[$186>>2]|0;
 HEAP32[$185>>2] = $187;
 $188 = ((($185)) + 4|0);
 $90 = $94;
 $189 = $90;
 ;HEAP32[$188>>2]=HEAP32[$189>>2]|0;HEAP32[$188+4>>2]=HEAP32[$189+4>>2]|0;
 $190 = $149;
 $88 = $0;
 $191 = $88;
 $87 = $191;
 $192 = $87;
 $86 = $192;
 $193 = $86;
 $194 = HEAP32[$193>>2]|0;
 $195 = ((($194)) + 16|0);
 $85 = $195;
 $196 = $85;
 $84 = $196;
 $197 = $84;
 $198 = $146;
 $83 = $198;
 $199 = $83;
 $200 = $147;
 $55 = $200;
 $201 = $55;
 $202 = $148;
 $54 = $202;
 $203 = $54;
 $45 = $190;
 $46 = $197;
 $47 = $199;
 $48 = $201;
 $49 = $203;
 $204 = $45;
 $205 = $46;
 $206 = $47;
 $44 = $206;
 $207 = $44;
 $208 = $48;
 $6 = $208;
 $209 = $6;
 $210 = $49;
 $5 = $210;
 $211 = $5;
 ;HEAP8[$43>>0]=HEAP8[$50>>0]|0;
 $38 = $204;
 $39 = $205;
 $40 = $207;
 $41 = $209;
 $42 = $211;
 $212 = $38;
 $213 = $39;
 $214 = $40;
 $37 = $214;
 $215 = $37;
 $216 = $41;
 $8 = $216;
 $217 = $8;
 $218 = $42;
 $7 = $218;
 $219 = $7;
 $29 = $212;
 $30 = $213;
 $31 = $215;
 $32 = $217;
 $33 = $219;
 $220 = $30;
 $221 = $31;
 $28 = $221;
 $222 = $32;
 $10 = $222;
 $223 = $10;
 ;HEAP32[$35>>2]=HEAP32[$223>>2]|0;
 $224 = $33;
 $9 = $224;
 ;HEAP8[$25>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 ;HEAP8[$27>>0]=HEAP8[$34>>0]|0;
 $21 = $220;
 $225 = $21;
 ;HEAP8[$18>>0]=HEAP8[$24>>0]|0;
 ;HEAP8[$19>>0]=HEAP8[$23>>0]|0;
 ;HEAP8[$20>>0]=HEAP8[$22>>0]|0;
 $15 = $225;
 $16 = $26;
 $17 = $25;
 $226 = $15;
 $227 = $16;
 $14 = $227;
 $228 = $14;
 $13 = $228;
 $229 = $13;
 $230 = HEAP32[$229>>2]|0;
 $11 = $230;
 $231 = $11;
 __THREW__ = 0;
 invoke_vii(351,($226|0),($231|0));
 $232 = __THREW__; __THREW__ = 0;
 $233 = $232&1;
 if ($233) {
  $243 = ___cxa_find_matching_catch_2()|0;
  $244 = tempRet0;
  $152 = $243;
  $153 = $244;
  $82 = $0;
  $245 = $82;
  $79 = $245;
  $80 = 0;
  $246 = $79;
  $78 = $246;
  $247 = $78;
  $77 = $247;
  $248 = $77;
  $249 = HEAP32[$248>>2]|0;
  $81 = $249;
  $250 = $80;
  $59 = $246;
  $251 = $59;
  $58 = $251;
  $252 = $58;
  HEAP32[$252>>2] = $250;
  $253 = $81;
  $254 = ($253|0)!=(0|0);
  if (!($254)) {
   $315 = $152;
   $316 = $153;
   ___resumeException($315|0);
   // unreachable;
  }
  $57 = $246;
  $255 = $57;
  $56 = $255;
  $256 = $56;
  $257 = ((($256)) + 4|0);
  $258 = $81;
  $75 = $257;
  $76 = $258;
  $259 = $75;
  $260 = ((($259)) + 4|0);
  $261 = HEAP8[$260>>0]|0;
  $262 = $261&1;
  if ($262) {
   $263 = HEAP32[$259>>2]|0;
   $264 = $76;
   $265 = ((($264)) + 16|0);
   $74 = $265;
   $266 = $74;
   $73 = $266;
   $267 = $73;
   $70 = $263;
   $71 = $267;
   $268 = $70;
   $269 = $71;
   ;HEAP8[$69>>0]=HEAP8[$72>>0]|0;
   $67 = $268;
   $68 = $269;
   $270 = $68;
   __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($270);
  }
  $271 = $76;
  $272 = ($271|0)!=(0|0);
  if (!($272)) {
   $315 = $152;
   $316 = $153;
   ___resumeException($315|0);
   // unreachable;
  }
  $273 = HEAP32[$259>>2]|0;
  $274 = $76;
  $64 = $273;
  $65 = $274;
  $66 = 1;
  $275 = $64;
  $276 = $65;
  $277 = $66;
  $61 = $275;
  $62 = $276;
  $63 = $277;
  $278 = $62;
  $60 = $278;
  $279 = $60;
  __ZdlPv($279);
  $315 = $152;
  $316 = $153;
  ___resumeException($315|0);
  // unreachable;
 }
 $234 = ((($226)) + 12|0);
 $12 = $234;
 $235 = $12;
 HEAP32[$235>>2] = 0;
 $236 = ((($235)) + 4|0);
 HEAP32[$236>>2] = 0;
 $53 = $0;
 $237 = $53;
 $52 = $237;
 $238 = $52;
 $51 = $238;
 $239 = $51;
 $240 = ((($239)) + 4|0);
 $241 = ((($240)) + 4|0);
 HEAP8[$241>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$150>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$150>>0]|0;
 $242 = $$pre_trunc&1;
 if ($242) {
  STACKTOP = sp;return;
 }
 $141 = $0;
 $280 = $141;
 $138 = $280;
 $139 = 0;
 $281 = $138;
 $137 = $281;
 $282 = $137;
 $136 = $282;
 $283 = $136;
 $284 = HEAP32[$283>>2]|0;
 $140 = $284;
 $285 = $139;
 $118 = $281;
 $286 = $118;
 $117 = $286;
 $287 = $117;
 HEAP32[$287>>2] = $285;
 $288 = $140;
 $289 = ($288|0)!=(0|0);
 if (!($289)) {
  STACKTOP = sp;return;
 }
 $116 = $281;
 $290 = $116;
 $115 = $290;
 $291 = $115;
 $292 = ((($291)) + 4|0);
 $293 = $140;
 $134 = $292;
 $135 = $293;
 $294 = $134;
 $295 = ((($294)) + 4|0);
 $296 = HEAP8[$295>>0]|0;
 $297 = $296&1;
 if ($297) {
  $298 = HEAP32[$294>>2]|0;
  $299 = $135;
  $300 = ((($299)) + 16|0);
  $133 = $300;
  $301 = $133;
  $132 = $301;
  $302 = $132;
  $129 = $298;
  $130 = $302;
  $303 = $129;
  $304 = $130;
  ;HEAP8[$128>>0]=HEAP8[$131>>0]|0;
  $126 = $303;
  $127 = $304;
  $305 = $127;
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($305);
 }
 $306 = $135;
 $307 = ($306|0)!=(0|0);
 if (!($307)) {
  STACKTOP = sp;return;
 }
 $308 = HEAP32[$294>>2]|0;
 $309 = $135;
 $123 = $308;
 $124 = $309;
 $125 = 1;
 $310 = $123;
 $311 = $124;
 $312 = $125;
 $120 = $310;
 $121 = $311;
 $122 = $312;
 $313 = $121;
 $119 = $313;
 $314 = $119;
 __ZdlPv($314);
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSL_SL_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $15;
 $20 = $18;
 HEAP32[$20>>2] = 0;
 $21 = $18;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = $16;
 $24 = $18;
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $18;
 $27 = $17;
 HEAP32[$27>>2] = $26;
 $14 = $19;
 $28 = $14;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $10 = $19;
  $32 = $10;
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $4 = $19;
  $35 = $4;
  HEAP32[$35>>2] = $34;
 }
 $9 = $19;
 $36 = $9;
 $37 = ((($36)) + 4|0);
 $8 = $37;
 $38 = $8;
 $7 = $38;
 $39 = $7;
 $6 = $39;
 $40 = $6;
 $5 = $40;
 $41 = $5;
 $42 = HEAP32[$41>>2]|0;
 $43 = $17;
 $44 = HEAP32[$43>>2]|0;
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($42,$44);
 $13 = $19;
 $45 = $13;
 $46 = ((($45)) + 8|0);
 $12 = $46;
 $47 = $12;
 $11 = $47;
 $48 = $11;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return;
}
function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__construct_nodeIJNS_4pairIS7_SA_EEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINS5_ISO_EEEEEEDpOT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $29 = sp + 24|0;
 $34 = sp + 411|0;
 $45 = sp + 244|0;
 $46 = sp + 16|0;
 $49 = sp + 232|0;
 $50 = sp + 224|0;
 $51 = sp + 8|0;
 $56 = sp + 200|0;
 $80 = sp;
 $83 = sp + 409|0;
 $100 = sp + 408|0;
 $101 = sp + 32|0;
 $97 = $1;
 $98 = $2;
 $102 = $97;
 $96 = $102;
 $103 = $96;
 $104 = ((($103)) + 4|0);
 $95 = $104;
 $105 = $95;
 $94 = $105;
 $106 = $94;
 $99 = $106;
 $$expand_i1_val = 0;
 HEAP8[$100>>0] = $$expand_i1_val;
 $107 = $99;
 $65 = $107;
 $66 = 1;
 $108 = $65;
 $109 = $66;
 $62 = $108;
 $63 = $109;
 $64 = 0;
 $110 = $62;
 $111 = $63;
 $61 = $110;
 $112 = ($111>>>0)>(119304647);
 if ($112) {
  $113 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($113);
  ___cxa_throw(($113|0),(1888|0),(327|0));
  // unreachable;
 }
 $114 = $63;
 $115 = ($114*36)|0;
 $60 = $115;
 $116 = $60;
 $117 = (__Znwj($116)|0);
 $118 = $99;
 $57 = $101;
 $58 = $118;
 $59 = 0;
 $119 = $57;
 $120 = $58;
 HEAP32[$119>>2] = $120;
 $121 = ((($119)) + 4|0);
 $122 = $59;
 $123 = $122&1;
 $124 = $123&1;
 HEAP8[$121>>0] = $124;
 $53 = $0;
 $54 = $117;
 $55 = $101;
 $125 = $53;
 $126 = $54;
 $127 = $55;
 $52 = $127;
 $128 = $52;
 ;HEAP32[$56>>2]=HEAP32[$128>>2]|0;HEAP32[$56+4>>2]=HEAP32[$128+4>>2]|0;
 ;HEAP8[$51>>0]=HEAP8[$56>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$51+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$51+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$51+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$51+7>>0]=HEAP8[$56+7>>0]|0;
 $48 = $125;
 HEAP32[$49>>2] = $126;
 $129 = $48;
 $47 = $49;
 $130 = $47;
 $131 = HEAP32[$130>>2]|0;
 $41 = $51;
 $132 = $41;
 ;HEAP32[$50>>2]=HEAP32[$132>>2]|0;HEAP32[$50+4>>2]=HEAP32[$132+4>>2]|0;
 ;HEAP8[$46>>0]=HEAP8[$50>>0]|0;HEAP8[$46+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$50+3>>0]|0;HEAP8[$46+4>>0]=HEAP8[$50+4>>0]|0;HEAP8[$46+5>>0]=HEAP8[$50+5>>0]|0;HEAP8[$46+6>>0]=HEAP8[$50+6>>0]|0;HEAP8[$46+7>>0]=HEAP8[$50+7>>0]|0;
 $44 = $129;
 HEAP32[$45>>2] = $131;
 $133 = $44;
 $43 = $45;
 $134 = $43;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $42 = $46;
 $137 = $42;
 ;HEAP32[$136>>2]=HEAP32[$137>>2]|0;HEAP32[$136+4>>2]=HEAP32[$137+4>>2]|0;
 $138 = $99;
 $40 = $0;
 $139 = $40;
 $39 = $139;
 $140 = $39;
 $38 = $140;
 $141 = $38;
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($142)) + 16|0);
 $37 = $143;
 $144 = $37;
 $36 = $144;
 $145 = $36;
 $146 = $98;
 $35 = $146;
 $147 = $35;
 $31 = $138;
 $32 = $145;
 $33 = $147;
 $148 = $31;
 $149 = $32;
 $150 = $33;
 $30 = $150;
 $151 = $30;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 $26 = $148;
 $27 = $149;
 $28 = $151;
 $152 = $26;
 $153 = $27;
 $154 = $28;
 $25 = $154;
 $155 = $25;
 $22 = $152;
 $23 = $153;
 $24 = $155;
 $156 = $23;
 $157 = $24;
 $21 = $157;
 $158 = $21;
 $18 = $156;
 $19 = $158;
 $20 = 0;
 $159 = $18;
 $160 = $19;
 $17 = $160;
 $161 = $17;
 $12 = $159;
 $13 = $161;
 $162 = $12;
 $163 = $13;
 $11 = $163;
 $164 = $11;
 ;HEAP32[$162>>2]=HEAP32[$164>>2]|0;HEAP32[$162+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$162+8>>2]=HEAP32[$164+8>>2]|0;
 $165 = $13;
 $8 = $165;
 $166 = $8;
 $7 = $166;
 $167 = $7;
 $6 = $167;
 $168 = $6;
 $9 = $168;
 $10 = 0;
 while(1) {
  $169 = $10;
  $170 = ($169>>>0)<(3);
  if (!($170)) {
   break;
  }
  $171 = $9;
  $172 = $10;
  $173 = (($171) + ($172<<2)|0);
  HEAP32[$173>>2] = 0;
  $174 = $10;
  $175 = (($174) + 1)|0;
  $10 = $175;
 }
 $176 = ((($159)) + 12|0);
 $177 = $19;
 $178 = ((($177)) + 12|0);
 $14 = $178;
 $179 = $14;
 $15 = $176;
 $16 = $179;
 $180 = $15;
 $181 = $16;
 $182 = HEAP32[$181>>2]|0;
 HEAP32[$180>>2] = $182;
 $183 = ((($180)) + 4|0);
 $184 = $16;
 $185 = ((($184)) + 4|0);
 $186 = HEAP32[$185>>2]|0;
 HEAP32[$183>>2] = $186;
 $187 = $16;
 HEAP32[$187>>2] = 0;
 $188 = $16;
 $189 = ((($188)) + 4|0);
 HEAP32[$189>>2] = 0;
 $5 = $0;
 $190 = $5;
 $4 = $190;
 $191 = $4;
 $3 = $191;
 $192 = $3;
 $193 = ((($192)) + 4|0);
 $194 = ((($193)) + 4|0);
 HEAP8[$194>>0] = 1;
 $$expand_i1_val2 = 1;
 HEAP8[$100>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$100>>0]|0;
 $195 = $$pre_trunc&1;
 if ($195) {
  STACKTOP = sp;return;
 }
 $93 = $0;
 $196 = $93;
 $90 = $196;
 $91 = 0;
 $197 = $90;
 $89 = $197;
 $198 = $89;
 $88 = $198;
 $199 = $88;
 $200 = HEAP32[$199>>2]|0;
 $92 = $200;
 $201 = $91;
 $70 = $197;
 $202 = $70;
 $69 = $202;
 $203 = $69;
 HEAP32[$203>>2] = $201;
 $204 = $92;
 $205 = ($204|0)!=(0|0);
 if (!($205)) {
  STACKTOP = sp;return;
 }
 $68 = $197;
 $206 = $68;
 $67 = $206;
 $207 = $67;
 $208 = ((($207)) + 4|0);
 $209 = $92;
 $86 = $208;
 $87 = $209;
 $210 = $86;
 $211 = ((($210)) + 4|0);
 $212 = HEAP8[$211>>0]|0;
 $213 = $212&1;
 if ($213) {
  $214 = HEAP32[$210>>2]|0;
  $215 = $87;
  $216 = ((($215)) + 16|0);
  $85 = $216;
  $217 = $85;
  $84 = $217;
  $218 = $84;
  $81 = $214;
  $82 = $218;
  $219 = $81;
  $220 = $82;
  ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
  $78 = $219;
  $79 = $220;
  $221 = $79;
  __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEED2Ev($221);
 }
 $222 = $87;
 $223 = ($222|0)!=(0|0);
 if (!($223)) {
  STACKTOP = sp;return;
 }
 $224 = HEAP32[$210>>2]|0;
 $225 = $87;
 $75 = $224;
 $76 = $225;
 $77 = 1;
 $226 = $75;
 $227 = $76;
 $228 = $77;
 $72 = $226;
 $73 = $227;
 $74 = $228;
 $229 = $73;
 $71 = $229;
 $230 = $71;
 __ZdlPv($230);
 STACKTOP = sp;return;
}
function __ZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangeb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(736|0);
 $22 = sp + 40|0;
 $27 = sp + 721|0;
 $38 = sp + 720|0;
 $49 = sp + 548|0;
 $52 = sp + 536|0;
 $56 = sp + 520|0;
 $59 = sp + 508|0;
 $67 = sp + 32|0;
 $68 = sp + 24|0;
 $69 = sp + 16|0;
 $74 = sp + 460|0;
 $75 = sp + 8|0;
 $78 = sp + 448|0;
 $79 = sp + 719|0;
 $80 = sp;
 $84 = sp + 718|0;
 $108 = sp + 340|0;
 $111 = sp + 328|0;
 $115 = sp + 312|0;
 $118 = sp + 300|0;
 $124 = sp + 276|0;
 $127 = sp + 264|0;
 $134 = sp + 236|0;
 $137 = sp + 224|0;
 $155 = sp + 156|0;
 $156 = sp + 144|0;
 $157 = sp + 136|0;
 $158 = sp + 120|0;
 $161 = sp + 100|0;
 $163 = sp + 92|0;
 $164 = sp + 88|0;
 $165 = sp + 80|0;
 $166 = sp + 72|0;
 $167 = sp + 64|0;
 $168 = sp + 52|0;
 $169 = sp + 48|0;
 $170 = sp + 44|0;
 $171 = sp + 716|0;
 $152 = $1;
 $153 = $3;
 $172 = $4&1;
 $154 = $172;
 $173 = $152;
 $151 = $2;
 $174 = $151;
 $150 = $174;
 $175 = $150;
 $149 = $175;
 $176 = $149;
 $148 = $176;
 $177 = $148;
 $147 = $177;
 $178 = $147;
 $179 = ((($178)) + 11|0);
 $180 = HEAP8[$179>>0]|0;
 $181 = $180&255;
 $182 = $181 & 128;
 $183 = ($182|0)!=(0);
 if ($183) {
  $143 = $175;
  $184 = $143;
  $142 = $184;
  $185 = $142;
  $141 = $185;
  $186 = $141;
  $187 = ((($186)) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $196 = $188;
 } else {
  $146 = $175;
  $189 = $146;
  $145 = $189;
  $190 = $145;
  $144 = $190;
  $191 = $144;
  $192 = ((($191)) + 11|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193&255;
  $196 = $194;
 }
 $195 = ($196>>>0)<(2);
 if ($195) {
  $140 = $0;
  $197 = $140;
  $139 = $197;
  $198 = $139;
  $138 = $198;
  HEAP32[$198>>2] = 0;
  $199 = ((($198)) + 4|0);
  HEAP32[$199>>2] = 0;
  $200 = ((($198)) + 8|0);
  $136 = $200;
  HEAP32[$137>>2] = 0;
  $201 = $136;
  $135 = $137;
  $202 = $135;
  $203 = HEAP32[$202>>2]|0;
  $133 = $201;
  HEAP32[$134>>2] = $203;
  $204 = $133;
  $132 = $204;
  $131 = $134;
  $205 = $131;
  $206 = HEAP32[$205>>2]|0;
  HEAP32[$204>>2] = $206;
  STACKTOP = sp;return;
 }
 $207 = $153;
 HEAP32[$155>>2] = $207;
 $130 = $156;
 $208 = $130;
 $129 = $208;
 $209 = $129;
 $128 = $209;
 HEAP32[$209>>2] = 0;
 $210 = ((($209)) + 4|0);
 HEAP32[$210>>2] = 0;
 $211 = ((($209)) + 8|0);
 $126 = $211;
 HEAP32[$127>>2] = 0;
 $212 = $126;
 $125 = $127;
 $213 = $125;
 $214 = HEAP32[$213>>2]|0;
 $123 = $212;
 HEAP32[$124>>2] = $214;
 $215 = $123;
 $122 = $215;
 $121 = $124;
 $216 = $121;
 $217 = HEAP32[$216>>2]|0;
 HEAP32[$215>>2] = $217;
 __THREW__ = 0;
 invoke_vii(351,($158|0),($2|0));
 $218 = __THREW__; __THREW__ = 0;
 $219 = $218&1;
 if ($219) {
  $349 = ___cxa_find_matching_catch_2()|0;
  $350 = tempRet0;
  $159 = $349;
  $160 = $350;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($156);
  $432 = $159;
  $433 = $160;
  ___resumeException($432|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viiii(345,($157|0),($173|0),($158|0),0);
 $220 = __THREW__; __THREW__ = 0;
 $221 = $220&1;
 if ($221) {
  $351 = ___cxa_find_matching_catch_2()|0;
  $352 = tempRet0;
  $159 = $351;
  $160 = $352;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($158);
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($156);
  $432 = $159;
  $433 = $160;
  ___resumeException($432|0);
  // unreachable;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($158);
 $120 = $157;
 $222 = $120;
 $223 = HEAP32[$222>>2]|0;
 $224 = HEAP32[$223>>2]|0;
 __THREW__ = 0;
 invoke_viii(404,($161|0),($173|0),($224|0));
 $225 = __THREW__; __THREW__ = 0;
 $226 = $225&1;
 if ($226) {
  $353 = ___cxa_find_matching_catch_2()|0;
  $354 = tempRet0;
  $159 = $353;
  $160 = $354;
 } else {
  $162 = $161;
  $227 = $162;
  $119 = $227;
  $228 = $119;
  $229 = HEAP32[$228>>2]|0;
  $116 = $228;
  $117 = $229;
  $230 = $117;
  $113 = $115;
  $114 = $230;
  $231 = $113;
  $232 = $114;
  HEAP32[$231>>2] = $232;
  $233 = HEAP32[$115>>2]|0;
  HEAP32[$118>>2] = $233;
  $234 = HEAP32[$118>>2]|0;
  HEAP32[$163>>2] = $234;
  $235 = $162;
  $112 = $235;
  $236 = $112;
  $237 = ((($236)) + 4|0);
  $238 = HEAP32[$237>>2]|0;
  $109 = $236;
  $110 = $238;
  $239 = $110;
  $106 = $108;
  $107 = $239;
  $240 = $106;
  $241 = $107;
  HEAP32[$240>>2] = $241;
  $242 = HEAP32[$108>>2]|0;
  HEAP32[$111>>2] = $242;
  $243 = HEAP32[$111>>2]|0;
  HEAP32[$164>>2] = $243;
  while(1) {
   $104 = $163;
   $105 = $164;
   $244 = $104;
   $245 = $105;
   $102 = $244;
   $103 = $245;
   $246 = $102;
   $101 = $246;
   $247 = $101;
   $248 = HEAP32[$247>>2]|0;
   $249 = $103;
   $100 = $249;
   $250 = $100;
   $251 = HEAP32[$250>>2]|0;
   $252 = ($248|0)==($251|0);
   $253 = $252 ^ 1;
   if (!($253)) {
    label = 35;
    break;
   }
   $61 = $163;
   $254 = $61;
   $255 = HEAP32[$254>>2]|0;
   $45 = $165;
   $46 = $255;
   $256 = $45;
   $257 = $46;
   $258 = HEAP32[$257>>2]|0;
   HEAP32[$256>>2] = $258;
   $259 = ((($256)) + 4|0);
   $260 = $46;
   $261 = ((($260)) + 4|0);
   $262 = HEAP32[$261>>2]|0;
   HEAP32[$259>>2] = $262;
   $263 = ((($256)) + 4|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = ($264|0)!=(0|0);
   if ($265) {
    $266 = ((($256)) + 4|0);
    $267 = HEAP32[$266>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($267);
   }
   $43 = $166;
   $44 = $165;
   $268 = $43;
   $269 = $44;
   $270 = HEAP32[$269>>2]|0;
   HEAP32[$268>>2] = $270;
   $271 = ((($268)) + 4|0);
   $272 = $44;
   $273 = ((($272)) + 4|0);
   $274 = HEAP32[$273>>2]|0;
   HEAP32[$271>>2] = $274;
   $275 = ((($268)) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = ($276|0)!=(0|0);
   if ($277) {
    $278 = ((($268)) + 4|0);
    $279 = HEAP32[$278>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($279);
   }
   $41 = $167;
   $42 = $157;
   $280 = $41;
   $281 = $42;
   $282 = HEAP32[$281>>2]|0;
   HEAP32[$280>>2] = $282;
   $283 = ((($280)) + 4|0);
   $284 = $42;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   HEAP32[$283>>2] = $286;
   $287 = ((($280)) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = ($288|0)!=(0|0);
   if ($289) {
    $290 = ((($280)) + 4|0);
    $291 = HEAP32[$290>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($291);
   }
   __THREW__ = 0;
   $292 = (invoke_iiii(405,($155|0),($166|0),($167|0))|0);
   $293 = __THREW__; __THREW__ = 0;
   $294 = $293&1;
   if ($294) {
    label = 30;
    break;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($167);
   __ZNSt3__210shared_ptrI5LevelED2Ev($166);
   if ($292) {
    $40 = $165;
    $295 = $40;
    $296 = HEAP32[$295>>2]|0;
    __THREW__ = 0;
    invoke_vii(406,($168|0),($296|0));
    $297 = __THREW__; __THREW__ = 0;
    $298 = $297&1;
    if ($298) {
     label = 31;
     break;
    }
    $36 = $156;
    $37 = $168;
    $299 = $36;
    $300 = ((($299)) + 4|0);
    $301 = HEAP32[$300>>2]|0;
    $35 = $299;
    $302 = $35;
    $303 = ((($302)) + 8|0);
    $34 = $303;
    $304 = $34;
    $33 = $304;
    $305 = $33;
    $306 = HEAP32[$305>>2]|0;
    $307 = ($301>>>0)<($306>>>0);
    if ($307) {
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($38,$299,1);
     $32 = $299;
     $308 = $32;
     $309 = ((($308)) + 8|0);
     $31 = $309;
     $310 = $31;
     $30 = $310;
     $311 = $30;
     $312 = ((($299)) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $28 = $313;
     $314 = $28;
     $315 = $37;
     $5 = $315;
     $316 = $5;
     $24 = $311;
     $25 = $314;
     $26 = $316;
     $317 = $24;
     $318 = $25;
     $319 = $26;
     $23 = $319;
     $320 = $23;
     ;HEAP8[$22>>0]=HEAP8[$27>>0]|0;
     $19 = $317;
     $20 = $318;
     $21 = $320;
     $321 = $19;
     $322 = $20;
     $323 = $21;
     $18 = $323;
     $324 = $18;
     $15 = $321;
     $16 = $322;
     $17 = $324;
     $325 = $16;
     $326 = $17;
     $14 = $326;
     $327 = $14;
     $12 = $325;
     $13 = $327;
     $328 = $12;
     $329 = $13;
     $11 = $329;
     $330 = $11;
     ;HEAP32[$328>>2]=HEAP32[$330>>2]|0;HEAP32[$328+4>>2]=HEAP32[$330+4>>2]|0;HEAP32[$328+8>>2]=HEAP32[$330+8>>2]|0;
     $331 = $13;
     $8 = $331;
     $332 = $8;
     $7 = $332;
     $333 = $7;
     $6 = $333;
     $334 = $6;
     $9 = $334;
     $10 = 0;
     while(1) {
      $335 = $10;
      $336 = ($335>>>0)<(3);
      if (!($336)) {
       break;
      }
      $337 = $9;
      $338 = $10;
      $339 = (($337) + ($338<<2)|0);
      HEAP32[$339>>2] = 0;
      $340 = $10;
      $341 = (($340) + 1)|0;
      $10 = $341;
     }
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($38);
     $342 = ((($299)) + 4|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = ((($343)) + 12|0);
     HEAP32[$342>>2] = $344;
    } else {
     $345 = $37;
     $29 = $345;
     $346 = $29;
     __THREW__ = 0;
     invoke_vii(407,($299|0),($346|0));
     $347 = __THREW__; __THREW__ = 0;
     $348 = $347&1;
     if ($348) {
      label = 32;
      break;
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($168);
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($165);
   $39 = $163;
   $361 = $39;
   $362 = HEAP32[$361>>2]|0;
   $363 = ((($362)) + 8|0);
   HEAP32[$361>>2] = $363;
  }
  do {
   if ((label|0) == 30) {
    $355 = ___cxa_find_matching_catch_2()|0;
    $356 = tempRet0;
    $159 = $355;
    $160 = $356;
    __ZNSt3__210shared_ptrI5LevelED2Ev($167);
    __ZNSt3__210shared_ptrI5LevelED2Ev($166);
    label = 34;
   }
   else if ((label|0) == 31) {
    $357 = ___cxa_find_matching_catch_2()|0;
    $358 = tempRet0;
    $159 = $357;
    $160 = $358;
    label = 34;
   }
   else if ((label|0) == 32) {
    $359 = ___cxa_find_matching_catch_2()|0;
    $360 = tempRet0;
    $159 = $359;
    $160 = $360;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($168);
    label = 34;
   }
   else if ((label|0) == 35) {
    $364 = $154;
    $365 = $364&1;
    if ($365) {
     $53 = $156;
     $366 = $53;
     $367 = HEAP32[$366>>2]|0;
     $50 = $366;
     $51 = $367;
     $368 = $51;
     $47 = $49;
     $48 = $368;
     $369 = $47;
     $370 = $48;
     HEAP32[$369>>2] = $370;
     $371 = HEAP32[$49>>2]|0;
     HEAP32[$52>>2] = $371;
     $372 = HEAP32[$52>>2]|0;
     HEAP32[$169>>2] = $372;
     $60 = $156;
     $373 = $60;
     $374 = ((($373)) + 4|0);
     $375 = HEAP32[$374>>2]|0;
     $57 = $373;
     $58 = $375;
     $376 = $58;
     $54 = $56;
     $55 = $376;
     $377 = $54;
     $378 = $55;
     HEAP32[$377>>2] = $378;
     $379 = HEAP32[$56>>2]|0;
     HEAP32[$59>>2] = $379;
     $380 = HEAP32[$59>>2]|0;
     HEAP32[$170>>2] = $380;
     ;HEAP8[$67>>0]=HEAP8[$171>>0]|0;
     ;HEAP8[$68>>0]=HEAP8[$170>>0]|0;HEAP8[$68+1>>0]=HEAP8[$170+1>>0]|0;HEAP8[$68+2>>0]=HEAP8[$170+2>>0]|0;HEAP8[$68+3>>0]=HEAP8[$170+3>>0]|0;
     ;HEAP8[$69>>0]=HEAP8[$169>>0]|0;HEAP8[$69+1>>0]=HEAP8[$169+1>>0]|0;HEAP8[$69+2>>0]=HEAP8[$169+2>>0]|0;HEAP8[$69+3>>0]=HEAP8[$169+3>>0]|0;
     $66 = $69;
     $381 = $66;
     $382 = HEAP32[$381>>2]|0;
     $62 = $68;
     $383 = $62;
     $384 = HEAP32[$383>>2]|0;
     $63 = $382;
     $64 = $384;
     $65 = $67;
     $385 = $63;
     $386 = $64;
     $387 = $65;
     __THREW__ = 0;
     invoke_viii(408,($385|0),($386|0),($387|0));
     $388 = __THREW__; __THREW__ = 0;
     $389 = $388&1;
     if ($389) {
      $390 = ___cxa_find_matching_catch_2()|0;
      $391 = tempRet0;
      $159 = $390;
      $160 = $391;
      break;
     }
    }
    $98 = $0;
    $99 = $156;
    $392 = $98;
    $393 = $99;
    $97 = $393;
    $394 = $97;
    $395 = ((($394)) + 8|0);
    $96 = $395;
    $396 = $96;
    $95 = $396;
    $397 = $95;
    $94 = $397;
    $398 = $94;
    $82 = $392;
    $83 = $398;
    $399 = $82;
    $81 = $399;
    HEAP32[$399>>2] = 0;
    $400 = ((($399)) + 4|0);
    HEAP32[$400>>2] = 0;
    $401 = ((($399)) + 8|0);
    ;HEAP8[$80>>0]=HEAP8[$84>>0]|0;
    $77 = $401;
    HEAP32[$78>>2] = 0;
    $402 = $77;
    $76 = $78;
    $403 = $76;
    $404 = HEAP32[$403>>2]|0;
    $70 = $80;
    ;HEAP8[$75>>0]=HEAP8[$79>>0]|0;
    $73 = $402;
    HEAP32[$74>>2] = $404;
    $405 = $73;
    $72 = $75;
    $71 = $74;
    $406 = $71;
    $407 = HEAP32[$406>>2]|0;
    HEAP32[$405>>2] = $407;
    $408 = $99;
    $409 = HEAP32[$408>>2]|0;
    HEAP32[$392>>2] = $409;
    $410 = $99;
    $411 = ((($410)) + 4|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ((($392)) + 4|0);
    HEAP32[$413>>2] = $412;
    $414 = $99;
    $87 = $414;
    $415 = $87;
    $416 = ((($415)) + 8|0);
    $86 = $416;
    $417 = $86;
    $85 = $417;
    $418 = $85;
    $419 = HEAP32[$418>>2]|0;
    $90 = $392;
    $420 = $90;
    $421 = ((($420)) + 8|0);
    $89 = $421;
    $422 = $89;
    $88 = $422;
    $423 = $88;
    HEAP32[$423>>2] = $419;
    $424 = $99;
    $93 = $424;
    $425 = $93;
    $426 = ((($425)) + 8|0);
    $92 = $426;
    $427 = $92;
    $91 = $427;
    $428 = $91;
    HEAP32[$428>>2] = 0;
    $429 = $99;
    $430 = ((($429)) + 4|0);
    HEAP32[$430>>2] = 0;
    $431 = $99;
    HEAP32[$431>>2] = 0;
    __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($161);
    __ZNSt3__210shared_ptrI5LevelED2Ev($157);
    __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($156);
    STACKTOP = sp;return;
   }
  } while(0);
  if ((label|0) == 34) {
   __ZNSt3__210shared_ptrI5LevelED2Ev($165);
  }
  __ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEED2Ev($161);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($157);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($156);
 $432 = $159;
 $433 = $160;
 ___resumeException($432|0);
 // unreachable;
}
function __ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__0clENS0_10shared_ptrI5LevelEESB_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 140|0;
 $21 = sp + 64|0;
 $22 = sp + 56|0;
 $25 = sp + 40|0;
 $26 = sp + 32|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 $29 = sp + 8|0;
 $30 = sp;
 $20 = $0;
 $31 = $20;
 $32 = HEAP32[$31>>2]|0;
 switch ($32|0) {
 case 0:  {
  $17 = $21;
  $18 = $1;
  $33 = $17;
  $34 = $18;
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$33>>2] = $35;
  $36 = ((($33)) + 4|0);
  $37 = $18;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$36>>2] = $39;
  $40 = ((($33)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = ((($33)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($44);
  }
  $15 = $22;
  $16 = $2;
  $45 = $15;
  $46 = $16;
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$45>>2] = $47;
  $48 = ((($45)) + 4|0);
  $49 = $16;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$48>>2] = $51;
  $52 = ((($45)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = ((($45)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($56);
  }
  __THREW__ = 0;
  $57 = (invoke_iii(409,($21|0),($22|0))|0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch_2()|0;
   $61 = tempRet0;
   $23 = $60;
   $24 = $61;
   __ZNSt3__210shared_ptrI5LevelED2Ev($22);
   __ZNSt3__210shared_ptrI5LevelED2Ev($21);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val = $57&1;
   HEAP8[$19>>0] = $$expand_i1_val;
   __ZNSt3__210shared_ptrI5LevelED2Ev($22);
   __ZNSt3__210shared_ptrI5LevelED2Ev($21);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 1:  {
  $13 = $25;
  $14 = $1;
  $62 = $13;
  $63 = $14;
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$62>>2] = $64;
  $65 = ((($62)) + 4|0);
  $66 = $14;
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$65>>2] = $68;
  $69 = ((($62)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = ((($62)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($73);
  }
  $11 = $26;
  $12 = $2;
  $74 = $11;
  $75 = $12;
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$74>>2] = $76;
  $77 = ((($74)) + 4|0);
  $78 = $12;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$77>>2] = $80;
  $81 = ((($74)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = ((($74)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($85);
  }
  __THREW__ = 0;
  $86 = (invoke_iii(410,($25|0),($26|0))|0);
  $87 = __THREW__; __THREW__ = 0;
  $88 = $87&1;
  if ($88) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $23 = $89;
   $24 = $90;
   __ZNSt3__210shared_ptrI5LevelED2Ev($26);
   __ZNSt3__210shared_ptrI5LevelED2Ev($25);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val2 = $86&1;
   HEAP8[$19>>0] = $$expand_i1_val2;
   __ZNSt3__210shared_ptrI5LevelED2Ev($26);
   __ZNSt3__210shared_ptrI5LevelED2Ev($25);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 2:  {
  $9 = $27;
  $10 = $1;
  $91 = $9;
  $92 = $10;
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$91>>2] = $93;
  $94 = ((($91)) + 4|0);
  $95 = $10;
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$94>>2] = $97;
  $98 = ((($91)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)!=(0|0);
  if ($100) {
   $101 = ((($91)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($102);
  }
  $7 = $28;
  $8 = $2;
  $103 = $7;
  $104 = $8;
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$103>>2] = $105;
  $106 = ((($103)) + 4|0);
  $107 = $8;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$106>>2] = $109;
  $110 = ((($103)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0|0);
  if ($112) {
   $113 = ((($103)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($114);
  }
  __THREW__ = 0;
  $115 = (invoke_iii(411,($27|0),($28|0))|0);
  $116 = __THREW__; __THREW__ = 0;
  $117 = $116&1;
  if ($117) {
   $118 = ___cxa_find_matching_catch_2()|0;
   $119 = tempRet0;
   $23 = $118;
   $24 = $119;
   __ZNSt3__210shared_ptrI5LevelED2Ev($28);
   __ZNSt3__210shared_ptrI5LevelED2Ev($27);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val4 = $115&1;
   HEAP8[$19>>0] = $$expand_i1_val4;
   __ZNSt3__210shared_ptrI5LevelED2Ev($28);
   __ZNSt3__210shared_ptrI5LevelED2Ev($27);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 3:  {
  $5 = $29;
  $6 = $1;
  $120 = $5;
  $121 = $6;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$120>>2] = $122;
  $123 = ((($120)) + 4|0);
  $124 = $6;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  HEAP32[$123>>2] = $126;
  $127 = ((($120)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($128|0)!=(0|0);
  if ($129) {
   $130 = ((($120)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($131);
  }
  $3 = $30;
  $4 = $2;
  $132 = $3;
  $133 = $4;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $4;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  $139 = ((($132)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)!=(0|0);
  if ($141) {
   $142 = ((($132)) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($143);
  }
  __THREW__ = 0;
  $144 = (invoke_iii(412,($29|0),($30|0))|0);
  $145 = __THREW__; __THREW__ = 0;
  $146 = $145&1;
  if ($146) {
   $147 = ___cxa_find_matching_catch_2()|0;
   $148 = tempRet0;
   $23 = $147;
   $24 = $148;
   __ZNSt3__210shared_ptrI5LevelED2Ev($30);
   __ZNSt3__210shared_ptrI5LevelED2Ev($29);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val6 = $144&1;
   HEAP8[$19>>0] = $$expand_i1_val6;
   __ZNSt3__210shared_ptrI5LevelED2Ev($30);
   __ZNSt3__210shared_ptrI5LevelED2Ev($29);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 default: {
  _llvm_trap();
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $18 = sp + 8|0;
 $23 = sp + 233|0;
 $32 = sp;
 $35 = sp + 232|0;
 $43 = sp + 80|0;
 $46 = sp + 68|0;
 $54 = sp + 20|0;
 $51 = $0;
 $52 = $1;
 $57 = $51;
 $50 = $57;
 $58 = $50;
 $59 = ((($58)) + 8|0);
 $49 = $59;
 $60 = $49;
 $48 = $60;
 $61 = $48;
 $53 = $61;
 $47 = $57;
 $62 = $47;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP32[$62>>2]|0;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (($68|0) / 12)&-1;
 $70 = (($69) + 1)|0;
 $42 = $57;
 HEAP32[$43>>2] = $70;
 $71 = $42;
 $72 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($71)|0);
 $44 = $72;
 $73 = HEAP32[$43>>2]|0;
 $74 = $44;
 $75 = ($73>>>0)>($74>>>0);
 if ($75) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($71);
 }
 $40 = $71;
 $76 = $40;
 $39 = $76;
 $77 = $39;
 $38 = $77;
 $78 = $38;
 $79 = ((($78)) + 8|0);
 $37 = $79;
 $80 = $37;
 $36 = $80;
 $81 = $36;
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$77>>2]|0;
 $84 = $82;
 $85 = $83;
 $86 = (($84) - ($85))|0;
 $87 = (($86|0) / 12)&-1;
 $45 = $87;
 $88 = $45;
 $89 = $44;
 $90 = (($89>>>0) / 2)&-1;
 $91 = ($88>>>0)>=($90>>>0);
 if ($91) {
  $92 = $44;
  $41 = $92;
 } else {
  $93 = $45;
  $94 = $93<<1;
  HEAP32[$46>>2] = $94;
  $33 = $46;
  $34 = $43;
  $95 = $33;
  $96 = $34;
  ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
  $30 = $95;
  $31 = $96;
  $97 = $30;
  $98 = $31;
  $27 = $32;
  $28 = $97;
  $29 = $98;
  $99 = $28;
  $100 = HEAP32[$99>>2]|0;
  $101 = $29;
  $102 = HEAP32[$101>>2]|0;
  $103 = ($100>>>0)<($102>>>0);
  $104 = $31;
  $105 = $30;
  $106 = $103 ? $104 : $105;
  $107 = HEAP32[$106>>2]|0;
  $41 = $107;
 }
 $108 = $41;
 $26 = $57;
 $109 = $26;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = HEAP32[$109>>2]|0;
 $113 = $111;
 $114 = $112;
 $115 = (($113) - ($114))|0;
 $116 = (($115|0) / 12)&-1;
 $117 = $53;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($54,$108,$116,$117);
 $118 = $53;
 $119 = ((($54)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $25 = $120;
 $121 = $25;
 $122 = $52;
 $24 = $122;
 $123 = $24;
 $20 = $118;
 $21 = $121;
 $22 = $123;
 $124 = $20;
 $125 = $21;
 $126 = $22;
 $19 = $126;
 $127 = $19;
 ;HEAP8[$18>>0]=HEAP8[$23>>0]|0;
 $15 = $124;
 $16 = $125;
 $17 = $127;
 $128 = $15;
 $129 = $16;
 $130 = $17;
 $14 = $130;
 $131 = $14;
 $11 = $128;
 $12 = $129;
 $13 = $131;
 $132 = $12;
 $133 = $13;
 $10 = $133;
 $134 = $10;
 $8 = $132;
 $9 = $134;
 $135 = $8;
 $136 = $9;
 $7 = $136;
 $137 = $7;
 ;HEAP32[$135>>2]=HEAP32[$137>>2]|0;HEAP32[$135+4>>2]=HEAP32[$137+4>>2]|0;HEAP32[$135+8>>2]=HEAP32[$137+8>>2]|0;
 $138 = $9;
 $4 = $138;
 $139 = $4;
 $3 = $139;
 $140 = $3;
 $2 = $140;
 $141 = $2;
 $5 = $141;
 $6 = 0;
 while(1) {
  $142 = $6;
  $143 = ($142>>>0)<(3);
  if (!($143)) {
   break;
  }
  $144 = $5;
  $145 = $6;
  $146 = (($144) + ($145<<2)|0);
  HEAP32[$146>>2] = 0;
  $147 = $6;
  $148 = (($147) + 1)|0;
  $6 = $148;
 }
 $149 = ((($54)) + 8|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($150)) + 12|0);
 HEAP32[$149>>2] = $151;
 __THREW__ = 0;
 invoke_vii(384,($57|0),($54|0));
 $152 = __THREW__; __THREW__ = 0;
 $153 = $152&1;
 if ($153) {
  $154 = ___cxa_find_matching_catch_2()|0;
  $155 = tempRet0;
  $55 = $154;
  $56 = $155;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($54);
  $156 = $55;
  $157 = $56;
  ___resumeException($156|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($54);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(720|0);
 $10 = sp + 672|0;
 $19 = sp + 40|0;
 $22 = sp + 718|0;
 $36 = sp + 568|0;
 $45 = sp + 32|0;
 $48 = sp + 717|0;
 $62 = sp + 464|0;
 $71 = sp + 24|0;
 $74 = sp + 716|0;
 $88 = sp + 360|0;
 $97 = sp + 16|0;
 $100 = sp + 715|0;
 $114 = sp + 256|0;
 $123 = sp + 8|0;
 $126 = sp + 714|0;
 $140 = sp + 152|0;
 $149 = sp;
 $152 = sp + 713|0;
 $159 = $0;
 $160 = $1;
 $161 = $2;
 $162 = 6;
 L1: while(1) {
  L3: while(1) {
   $171 = $160;
   $172 = $159;
   $173 = $171;
   $174 = $172;
   $175 = (($173) - ($174))|0;
   $176 = (($175|0) / 12)&-1;
   $163 = $176;
   $177 = $163;
   switch ($177|0) {
   case 2:  {
    label = 4;
    break L1;
    break;
   }
   case 3:  {
    label = 6;
    break L1;
    break;
   }
   case 4:  {
    label = 7;
    break L1;
    break;
   }
   case 5:  {
    label = 8;
    break L1;
    break;
   }
   case 1: case 0:  {
    label = 52;
    break L1;
    break;
   }
   default: {
   }
   }
   $233 = $163;
   $234 = ($233|0)<=(6);
   $235 = $159;
   if ($234) {
    label = 10;
    break L1;
   }
   $164 = $235;
   $238 = $160;
   $165 = $238;
   $239 = $165;
   $240 = ((($239)) + -12|0);
   $165 = $240;
   $241 = $163;
   $242 = ($241|0)>=(1000);
   $243 = $163;
   $244 = (($243|0) / 2)&-1;
   $167 = $244;
   $245 = $167;
   $246 = $164;
   $247 = (($246) + (($245*12)|0)|0);
   $164 = $247;
   if ($242) {
    $248 = $167;
    $249 = (($248|0) / 2)&-1;
    $167 = $249;
    $250 = $159;
    $251 = $159;
    $252 = $167;
    $253 = (($251) + (($252*12)|0)|0);
    $254 = $164;
    $255 = $164;
    $256 = $167;
    $257 = (($255) + (($256*12)|0)|0);
    $258 = $165;
    $259 = $161;
    $260 = (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_SC_T_($250,$253,$254,$257,$258,$259)|0);
    $166 = $260;
   } else {
    $261 = $159;
    $262 = $164;
    $263 = $165;
    $264 = $161;
    $265 = (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($261,$262,$263,$264)|0);
    $166 = $265;
   }
   $266 = $159;
   $168 = $266;
   $267 = $165;
   $169 = $267;
   $268 = $161;
   $269 = $168;
   $270 = $164;
   $271 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($268,$269,$270)|0);
   if ($271) {
    break;
   }
   while(1) {
    $272 = $168;
    $273 = $169;
    $274 = ((($273)) + -12|0);
    $169 = $274;
    $275 = ($272|0)==($274|0);
    if ($275) {
     break;
    }
    $370 = $161;
    $371 = $169;
    $372 = $164;
    $373 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($370,$371,$372)|0);
    if ($373) {
     label = 30;
     break L3;
    }
   }
   $276 = $168;
   $277 = ((($276)) + 12|0);
   $168 = $277;
   $278 = $160;
   $169 = $278;
   $279 = $161;
   $280 = $159;
   $281 = $169;
   $282 = ((($281)) + -12|0);
   $169 = $282;
   $283 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($279,$280,$282)|0);
   if (!($283)) {
    while(1) {
     $284 = $168;
     $285 = $169;
     $286 = ($284|0)==($285|0);
     if ($286) {
      label = 52;
      break L1;
     }
     $287 = $161;
     $288 = $159;
     $289 = $168;
     $290 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($287,$288,$289)|0);
     $291 = $168;
     if ($290) {
      break;
     }
     $321 = ((($291)) + 12|0);
     $168 = $321;
    }
    $292 = $169;
    $131 = $291;
    $132 = $292;
    $293 = $131;
    $294 = $132;
    $129 = $293;
    $130 = $294;
    $295 = $129;
    $128 = $295;
    $296 = $128;
    $127 = $296;
    $297 = $127;
    $298 = $130;
    $108 = $298;
    $299 = $108;
    $107 = $299;
    $300 = $107;
    $112 = $297;
    $113 = $300;
    $301 = $112;
    $111 = $301;
    $302 = $111;
    ;HEAP32[$114>>2]=HEAP32[$302>>2]|0;HEAP32[$114+4>>2]=HEAP32[$302+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$302+8>>2]|0;
    $303 = $113;
    $109 = $303;
    $304 = $109;
    $305 = $112;
    ;HEAP32[$305>>2]=HEAP32[$304>>2]|0;HEAP32[$305+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$305+8>>2]=HEAP32[$304+8>>2]|0;
    $110 = $114;
    $306 = $110;
    $307 = $113;
    ;HEAP32[$307>>2]=HEAP32[$306>>2]|0;HEAP32[$307+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$307+8>>2]=HEAP32[$306+8>>2]|0;
    $117 = $295;
    $308 = $117;
    $116 = $308;
    $309 = $116;
    $115 = $309;
    $310 = $115;
    $311 = $130;
    $120 = $311;
    $312 = $120;
    $119 = $312;
    $313 = $119;
    $118 = $313;
    $314 = $118;
    $124 = $310;
    $125 = $314;
    $315 = $124;
    $316 = $125;
    ;HEAP8[$123>>0]=HEAP8[$126>>0]|0;
    $121 = $315;
    $122 = $316;
    $317 = $166;
    $318 = (($317) + 1)|0;
    $166 = $318;
    $319 = $168;
    $320 = ((($319)) + 12|0);
    $168 = $320;
   }
   $322 = $168;
   $323 = $169;
   $324 = ($322|0)==($323|0);
   if ($324) {
    label = 52;
    break L1;
   }
   while(1) {
    while(1) {
     $325 = $161;
     $326 = $159;
     $327 = $168;
     $328 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($325,$326,$327)|0);
     $329 = $328 ^ 1;
     if (!($329)) {
      break;
     }
     $330 = $168;
     $331 = ((($330)) + 12|0);
     $168 = $331;
    }
    while(1) {
     $332 = $161;
     $333 = $159;
     $334 = $169;
     $335 = ((($334)) + -12|0);
     $169 = $335;
     $336 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($332,$333,$335)|0);
     if (!($336)) {
      break;
     }
    }
    $337 = $168;
    $338 = $169;
    $339 = ($337>>>0)>=($338>>>0);
    $340 = $168;
    if ($339) {
     break;
    }
    $341 = $169;
    $105 = $340;
    $106 = $341;
    $342 = $105;
    $343 = $106;
    $103 = $342;
    $104 = $343;
    $344 = $103;
    $102 = $344;
    $345 = $102;
    $101 = $345;
    $346 = $101;
    $347 = $104;
    $82 = $347;
    $348 = $82;
    $81 = $348;
    $349 = $81;
    $86 = $346;
    $87 = $349;
    $350 = $86;
    $85 = $350;
    $351 = $85;
    ;HEAP32[$88>>2]=HEAP32[$351>>2]|0;HEAP32[$88+4>>2]=HEAP32[$351+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$351+8>>2]|0;
    $352 = $87;
    $83 = $352;
    $353 = $83;
    $354 = $86;
    ;HEAP32[$354>>2]=HEAP32[$353>>2]|0;HEAP32[$354+4>>2]=HEAP32[$353+4>>2]|0;HEAP32[$354+8>>2]=HEAP32[$353+8>>2]|0;
    $84 = $88;
    $355 = $84;
    $356 = $87;
    ;HEAP32[$356>>2]=HEAP32[$355>>2]|0;HEAP32[$356+4>>2]=HEAP32[$355+4>>2]|0;HEAP32[$356+8>>2]=HEAP32[$355+8>>2]|0;
    $91 = $344;
    $357 = $91;
    $90 = $357;
    $358 = $90;
    $89 = $358;
    $359 = $89;
    $360 = $104;
    $94 = $360;
    $361 = $94;
    $93 = $361;
    $362 = $93;
    $92 = $362;
    $363 = $92;
    $98 = $359;
    $99 = $363;
    $364 = $98;
    $365 = $99;
    ;HEAP8[$97>>0]=HEAP8[$100>>0]|0;
    $95 = $364;
    $96 = $365;
    $366 = $166;
    $367 = (($366) + 1)|0;
    $166 = $367;
    $368 = $168;
    $369 = ((($368)) + 12|0);
    $168 = $369;
   }
   $159 = $340;
  }
  if ((label|0) == 30) {
   label = 0;
   $374 = $168;
   $375 = $169;
   $79 = $374;
   $80 = $375;
   $376 = $79;
   $377 = $80;
   $77 = $376;
   $78 = $377;
   $378 = $77;
   $76 = $378;
   $379 = $76;
   $75 = $379;
   $380 = $75;
   $381 = $78;
   $56 = $381;
   $382 = $56;
   $55 = $382;
   $383 = $55;
   $60 = $380;
   $61 = $383;
   $384 = $60;
   $59 = $384;
   $385 = $59;
   ;HEAP32[$62>>2]=HEAP32[$385>>2]|0;HEAP32[$62+4>>2]=HEAP32[$385+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$385+8>>2]|0;
   $386 = $61;
   $57 = $386;
   $387 = $57;
   $388 = $60;
   ;HEAP32[$388>>2]=HEAP32[$387>>2]|0;HEAP32[$388+4>>2]=HEAP32[$387+4>>2]|0;HEAP32[$388+8>>2]=HEAP32[$387+8>>2]|0;
   $58 = $62;
   $389 = $58;
   $390 = $61;
   ;HEAP32[$390>>2]=HEAP32[$389>>2]|0;HEAP32[$390+4>>2]=HEAP32[$389+4>>2]|0;HEAP32[$390+8>>2]=HEAP32[$389+8>>2]|0;
   $65 = $378;
   $391 = $65;
   $64 = $391;
   $392 = $64;
   $63 = $392;
   $393 = $63;
   $394 = $78;
   $68 = $394;
   $395 = $68;
   $67 = $395;
   $396 = $67;
   $66 = $396;
   $397 = $66;
   $72 = $393;
   $73 = $397;
   $398 = $72;
   $399 = $73;
   ;HEAP8[$71>>0]=HEAP8[$74>>0]|0;
   $69 = $398;
   $70 = $399;
   $400 = $166;
   $401 = (($400) + 1)|0;
   $166 = $401;
  }
  $402 = $168;
  $403 = ((($402)) + 12|0);
  $168 = $403;
  $404 = $168;
  $405 = $169;
  $406 = ($404>>>0)<($405>>>0);
  L35: do {
   if ($406) {
    while(1) {
     while(1) {
      $407 = $161;
      $408 = $168;
      $409 = $164;
      $410 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($407,$408,$409)|0);
      if (!($410)) {
       break;
      }
      $411 = $168;
      $412 = ((($411)) + 12|0);
      $168 = $412;
     }
     while(1) {
      $413 = $161;
      $414 = $169;
      $415 = ((($414)) + -12|0);
      $169 = $415;
      $416 = $164;
      $417 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($413,$415,$416)|0);
      $418 = $417 ^ 1;
      if (!($418)) {
       break;
      }
     }
     $419 = $168;
     $420 = $169;
     $421 = ($419>>>0)>($420>>>0);
     if ($421) {
      break L35;
     }
     $422 = $168;
     $423 = $169;
     $53 = $422;
     $54 = $423;
     $424 = $53;
     $425 = $54;
     $51 = $424;
     $52 = $425;
     $426 = $51;
     $50 = $426;
     $427 = $50;
     $49 = $427;
     $428 = $49;
     $429 = $52;
     $30 = $429;
     $430 = $30;
     $29 = $430;
     $431 = $29;
     $34 = $428;
     $35 = $431;
     $432 = $34;
     $33 = $432;
     $433 = $33;
     ;HEAP32[$36>>2]=HEAP32[$433>>2]|0;HEAP32[$36+4>>2]=HEAP32[$433+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$433+8>>2]|0;
     $434 = $35;
     $31 = $434;
     $435 = $31;
     $436 = $34;
     ;HEAP32[$436>>2]=HEAP32[$435>>2]|0;HEAP32[$436+4>>2]=HEAP32[$435+4>>2]|0;HEAP32[$436+8>>2]=HEAP32[$435+8>>2]|0;
     $32 = $36;
     $437 = $32;
     $438 = $35;
     ;HEAP32[$438>>2]=HEAP32[$437>>2]|0;HEAP32[$438+4>>2]=HEAP32[$437+4>>2]|0;HEAP32[$438+8>>2]=HEAP32[$437+8>>2]|0;
     $39 = $426;
     $439 = $39;
     $38 = $439;
     $440 = $38;
     $37 = $440;
     $441 = $37;
     $442 = $52;
     $42 = $442;
     $443 = $42;
     $41 = $443;
     $444 = $41;
     $40 = $444;
     $445 = $40;
     $46 = $441;
     $47 = $445;
     $446 = $46;
     $447 = $47;
     ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;
     $43 = $446;
     $44 = $447;
     $448 = $166;
     $449 = (($448) + 1)|0;
     $166 = $449;
     $450 = $164;
     $451 = $168;
     $452 = ($450|0)==($451|0);
     if ($452) {
      $453 = $169;
      $164 = $453;
     }
     $454 = $168;
     $455 = ((($454)) + 12|0);
     $168 = $455;
    }
   }
  } while(0);
  $456 = $168;
  $457 = $164;
  $458 = ($456|0)!=($457|0);
  if ($458) {
   $459 = $161;
   $460 = $164;
   $461 = $168;
   $462 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($459,$460,$461)|0);
   if ($462) {
    $463 = $168;
    $464 = $164;
    $27 = $463;
    $28 = $464;
    $465 = $27;
    $466 = $28;
    $25 = $465;
    $26 = $466;
    $467 = $25;
    $24 = $467;
    $468 = $24;
    $23 = $468;
    $469 = $23;
    $470 = $26;
    $4 = $470;
    $471 = $4;
    $3 = $471;
    $472 = $3;
    $8 = $469;
    $9 = $472;
    $473 = $8;
    $7 = $473;
    $474 = $7;
    ;HEAP32[$10>>2]=HEAP32[$474>>2]|0;HEAP32[$10+4>>2]=HEAP32[$474+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$474+8>>2]|0;
    $475 = $9;
    $5 = $475;
    $476 = $5;
    $477 = $8;
    ;HEAP32[$477>>2]=HEAP32[$476>>2]|0;HEAP32[$477+4>>2]=HEAP32[$476+4>>2]|0;HEAP32[$477+8>>2]=HEAP32[$476+8>>2]|0;
    $6 = $10;
    $478 = $6;
    $479 = $9;
    ;HEAP32[$479>>2]=HEAP32[$478>>2]|0;HEAP32[$479+4>>2]=HEAP32[$478+4>>2]|0;HEAP32[$479+8>>2]=HEAP32[$478+8>>2]|0;
    $13 = $467;
    $480 = $13;
    $12 = $480;
    $481 = $12;
    $11 = $481;
    $482 = $11;
    $483 = $26;
    $16 = $483;
    $484 = $16;
    $15 = $484;
    $485 = $15;
    $14 = $485;
    $486 = $14;
    $20 = $482;
    $21 = $486;
    $487 = $20;
    $488 = $21;
    ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
    $17 = $487;
    $18 = $488;
    $489 = $166;
    $490 = (($489) + 1)|0;
    $166 = $490;
   }
  }
  $491 = $166;
  $492 = ($491|0)==(0);
  do {
   if ($492) {
    $493 = $159;
    $494 = $168;
    $495 = $161;
    $496 = (__ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEbT0_SC_T_($493,$494,$495)|0);
    $497 = $496&1;
    $170 = $497;
    $498 = $168;
    $499 = ((($498)) + 12|0);
    $500 = $160;
    $501 = $161;
    $502 = (__ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEbT0_SC_T_($499,$500,$501)|0);
    $503 = $170;
    $504 = $503&1;
    if ($502) {
     if ($504) {
      label = 52;
      break L1;
     }
     $505 = $168;
     $160 = $505;
     continue L1;
    } else {
     if (!($504)) {
      break;
     }
     $506 = $168;
     $507 = ((($506)) + 12|0);
     $168 = $507;
     $159 = $507;
     continue L1;
    }
   }
  } while(0);
  $508 = $168;
  $509 = $159;
  $510 = $508;
  $511 = $509;
  $512 = (($510) - ($511))|0;
  $513 = (($512|0) / 12)&-1;
  $514 = $160;
  $515 = $168;
  $516 = $514;
  $517 = $515;
  $518 = (($516) - ($517))|0;
  $519 = (($518|0) / 12)&-1;
  $520 = ($513|0)<($519|0);
  if ($520) {
   $521 = $159;
   $522 = $168;
   $523 = $161;
   __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_($521,$522,$523);
   $524 = $168;
   $525 = ((($524)) + 12|0);
   $168 = $525;
   $159 = $525;
   continue;
  } else {
   $526 = $168;
   $527 = ((($526)) + 12|0);
   $528 = $160;
   $529 = $161;
   __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_($527,$528,$529);
   $530 = $168;
   $160 = $530;
   continue;
  }
 }
 if ((label|0) == 4) {
  $178 = $161;
  $179 = $160;
  $180 = ((($179)) + -12|0);
  $160 = $180;
  $181 = $159;
  $182 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($178,$180,$181)|0);
  if (!($182)) {
   STACKTOP = sp;return;
  }
  $183 = $159;
  $184 = $160;
  $157 = $183;
  $158 = $184;
  $185 = $157;
  $186 = $158;
  $155 = $185;
  $156 = $186;
  $187 = $155;
  $154 = $187;
  $188 = $154;
  $153 = $188;
  $189 = $153;
  $190 = $156;
  $134 = $190;
  $191 = $134;
  $133 = $191;
  $192 = $133;
  $138 = $189;
  $139 = $192;
  $193 = $138;
  $137 = $193;
  $194 = $137;
  ;HEAP32[$140>>2]=HEAP32[$194>>2]|0;HEAP32[$140+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$140+8>>2]=HEAP32[$194+8>>2]|0;
  $195 = $139;
  $135 = $195;
  $196 = $135;
  $197 = $138;
  ;HEAP32[$197>>2]=HEAP32[$196>>2]|0;HEAP32[$197+4>>2]=HEAP32[$196+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$196+8>>2]|0;
  $136 = $140;
  $198 = $136;
  $199 = $139;
  ;HEAP32[$199>>2]=HEAP32[$198>>2]|0;HEAP32[$199+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$199+8>>2]=HEAP32[$198+8>>2]|0;
  $143 = $187;
  $200 = $143;
  $142 = $200;
  $201 = $142;
  $141 = $201;
  $202 = $141;
  $203 = $156;
  $146 = $203;
  $204 = $146;
  $145 = $204;
  $205 = $145;
  $144 = $205;
  $206 = $144;
  $150 = $202;
  $151 = $206;
  $207 = $150;
  $208 = $151;
  ;HEAP8[$149>>0]=HEAP8[$152>>0]|0;
  $147 = $207;
  $148 = $208;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $209 = $159;
  $210 = $159;
  $211 = ((($210)) + 12|0);
  $212 = $160;
  $213 = ((($212)) + -12|0);
  $160 = $213;
  $214 = $161;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($209,$211,$213,$214)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $215 = $159;
  $216 = $159;
  $217 = ((($216)) + 12|0);
  $218 = $159;
  $219 = ((($218)) + 24|0);
  $220 = $160;
  $221 = ((($220)) + -12|0);
  $160 = $221;
  $222 = $161;
  (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_T_($215,$217,$219,$221,$222)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $223 = $159;
  $224 = $159;
  $225 = ((($224)) + 12|0);
  $226 = $159;
  $227 = ((($226)) + 24|0);
  $228 = $159;
  $229 = ((($228)) + 36|0);
  $230 = $160;
  $231 = ((($230)) + -12|0);
  $160 = $231;
  $232 = $161;
  (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_SC_T_($223,$225,$227,$229,$231,$232)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $236 = $160;
  $237 = $161;
  __ZNSt3__218__insertion_sort_3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_($235,$236,$237);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 52) {
  STACKTOP = sp;return;
 }
}
function __ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $23 = $0;
 $24 = $1;
 $25 = $2;
 $26 = $24;
 $22 = $26;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $20 = $28;
 $29 = $20;
 $19 = $29;
 $30 = $19;
 $31 = ((($30)) + 11|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 128;
 $35 = ($34|0)!=(0);
 if ($35) {
  $15 = $27;
  $36 = $15;
  $14 = $36;
  $37 = $14;
  $13 = $37;
  $38 = $13;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $69 = $40;
 } else {
  $18 = $27;
  $41 = $18;
  $17 = $41;
  $42 = $17;
  $16 = $42;
  $43 = $16;
  $44 = ((($43)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $69 = $46;
 }
 $47 = $25;
 $12 = $47;
 $48 = $12;
 $11 = $48;
 $49 = $11;
 $10 = $49;
 $50 = $10;
 $9 = $50;
 $51 = $9;
 $52 = ((($51)) + 11|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 & 128;
 $56 = ($55|0)!=(0);
 if ($56) {
  $5 = $48;
  $57 = $5;
  $4 = $57;
  $58 = $4;
  $3 = $58;
  $59 = $3;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $70 = $61;
  $68 = ($69>>>0)<($70>>>0);
  STACKTOP = sp;return ($68|0);
 } else {
  $8 = $48;
  $62 = $8;
  $7 = $62;
  $63 = $7;
  $6 = $63;
  $64 = $6;
  $65 = ((($64)) + 11|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $70 = $67;
  $68 = ($69>>>0)<($70>>>0);
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $11 = sp + 540|0;
 $20 = sp + 32|0;
 $23 = sp + 584|0;
 $37 = sp + 436|0;
 $46 = sp + 24|0;
 $49 = sp + 583|0;
 $63 = sp + 332|0;
 $72 = sp + 16|0;
 $75 = sp + 582|0;
 $89 = sp + 228|0;
 $98 = sp + 8|0;
 $101 = sp + 581|0;
 $115 = sp + 124|0;
 $124 = sp;
 $127 = sp + 580|0;
 $135 = $0;
 $136 = $1;
 $137 = $2;
 $138 = $3;
 $139 = 0;
 $140 = $138;
 $141 = $136;
 $142 = $135;
 $143 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($140,$141,$142)|0);
 $144 = $138;
 $145 = $137;
 $146 = $136;
 $147 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($144,$145,$146)|0);
 if ($143) {
  $206 = $135;
  if ($147) {
   $207 = $137;
   $28 = $206;
   $29 = $207;
   $208 = $28;
   $209 = $29;
   $26 = $208;
   $27 = $209;
   $210 = $26;
   $25 = $210;
   $211 = $25;
   $24 = $211;
   $212 = $24;
   $213 = $27;
   $5 = $213;
   $214 = $5;
   $4 = $214;
   $215 = $4;
   $9 = $212;
   $10 = $215;
   $216 = $9;
   $8 = $216;
   $217 = $8;
   ;HEAP32[$11>>2]=HEAP32[$217>>2]|0;HEAP32[$11+4>>2]=HEAP32[$217+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$217+8>>2]|0;
   $218 = $10;
   $6 = $218;
   $219 = $6;
   $220 = $9;
   ;HEAP32[$220>>2]=HEAP32[$219>>2]|0;HEAP32[$220+4>>2]=HEAP32[$219+4>>2]|0;HEAP32[$220+8>>2]=HEAP32[$219+8>>2]|0;
   $7 = $11;
   $221 = $7;
   $222 = $10;
   ;HEAP32[$222>>2]=HEAP32[$221>>2]|0;HEAP32[$222+4>>2]=HEAP32[$221+4>>2]|0;HEAP32[$222+8>>2]=HEAP32[$221+8>>2]|0;
   $14 = $210;
   $223 = $14;
   $13 = $223;
   $224 = $13;
   $12 = $224;
   $225 = $12;
   $226 = $27;
   $17 = $226;
   $227 = $17;
   $16 = $227;
   $228 = $16;
   $15 = $228;
   $229 = $15;
   $21 = $225;
   $22 = $229;
   $230 = $21;
   $231 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $230;
   $19 = $231;
   $139 = 1;
   $232 = $139;
   $134 = $232;
   $289 = $134;
   STACKTOP = sp;return ($289|0);
  }
  $233 = $136;
  $54 = $206;
  $55 = $233;
  $234 = $54;
  $235 = $55;
  $52 = $234;
  $53 = $235;
  $236 = $52;
  $51 = $236;
  $237 = $51;
  $50 = $237;
  $238 = $50;
  $239 = $53;
  $31 = $239;
  $240 = $31;
  $30 = $240;
  $241 = $30;
  $35 = $238;
  $36 = $241;
  $242 = $35;
  $34 = $242;
  $243 = $34;
  ;HEAP32[$37>>2]=HEAP32[$243>>2]|0;HEAP32[$37+4>>2]=HEAP32[$243+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$243+8>>2]|0;
  $244 = $36;
  $32 = $244;
  $245 = $32;
  $246 = $35;
  ;HEAP32[$246>>2]=HEAP32[$245>>2]|0;HEAP32[$246+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$246+8>>2]=HEAP32[$245+8>>2]|0;
  $33 = $37;
  $247 = $33;
  $248 = $36;
  ;HEAP32[$248>>2]=HEAP32[$247>>2]|0;HEAP32[$248+4>>2]=HEAP32[$247+4>>2]|0;HEAP32[$248+8>>2]=HEAP32[$247+8>>2]|0;
  $40 = $236;
  $249 = $40;
  $39 = $249;
  $250 = $39;
  $38 = $250;
  $251 = $38;
  $252 = $53;
  $43 = $252;
  $253 = $43;
  $42 = $253;
  $254 = $42;
  $41 = $254;
  $255 = $41;
  $47 = $251;
  $48 = $255;
  $256 = $47;
  $257 = $48;
  ;HEAP8[$46>>0]=HEAP8[$49>>0]|0;
  $44 = $256;
  $45 = $257;
  $139 = 1;
  $258 = $138;
  $259 = $137;
  $260 = $136;
  $261 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($258,$259,$260)|0);
  if ($261) {
   $262 = $136;
   $263 = $137;
   $106 = $262;
   $107 = $263;
   $264 = $106;
   $265 = $107;
   $104 = $264;
   $105 = $265;
   $266 = $104;
   $103 = $266;
   $267 = $103;
   $102 = $267;
   $268 = $102;
   $269 = $105;
   $83 = $269;
   $270 = $83;
   $82 = $270;
   $271 = $82;
   $87 = $268;
   $88 = $271;
   $272 = $87;
   $86 = $272;
   $273 = $86;
   ;HEAP32[$89>>2]=HEAP32[$273>>2]|0;HEAP32[$89+4>>2]=HEAP32[$273+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$273+8>>2]|0;
   $274 = $88;
   $84 = $274;
   $275 = $84;
   $276 = $87;
   ;HEAP32[$276>>2]=HEAP32[$275>>2]|0;HEAP32[$276+4>>2]=HEAP32[$275+4>>2]|0;HEAP32[$276+8>>2]=HEAP32[$275+8>>2]|0;
   $85 = $89;
   $277 = $85;
   $278 = $88;
   ;HEAP32[$278>>2]=HEAP32[$277>>2]|0;HEAP32[$278+4>>2]=HEAP32[$277+4>>2]|0;HEAP32[$278+8>>2]=HEAP32[$277+8>>2]|0;
   $92 = $266;
   $279 = $92;
   $91 = $279;
   $280 = $91;
   $90 = $280;
   $281 = $90;
   $282 = $105;
   $95 = $282;
   $283 = $95;
   $94 = $283;
   $284 = $94;
   $93 = $284;
   $285 = $93;
   $99 = $281;
   $100 = $285;
   $286 = $99;
   $287 = $100;
   ;HEAP8[$98>>0]=HEAP8[$101>>0]|0;
   $96 = $286;
   $97 = $287;
   $139 = 2;
  }
  $288 = $139;
  $134 = $288;
  $289 = $134;
  STACKTOP = sp;return ($289|0);
 } else {
  if (!($147)) {
   $148 = $139;
   $134 = $148;
   $289 = $134;
   STACKTOP = sp;return ($289|0);
  }
  $149 = $136;
  $150 = $137;
  $132 = $149;
  $133 = $150;
  $151 = $132;
  $152 = $133;
  $130 = $151;
  $131 = $152;
  $153 = $130;
  $129 = $153;
  $154 = $129;
  $128 = $154;
  $155 = $128;
  $156 = $131;
  $109 = $156;
  $157 = $109;
  $108 = $157;
  $158 = $108;
  $113 = $155;
  $114 = $158;
  $159 = $113;
  $112 = $159;
  $160 = $112;
  ;HEAP32[$115>>2]=HEAP32[$160>>2]|0;HEAP32[$115+4>>2]=HEAP32[$160+4>>2]|0;HEAP32[$115+8>>2]=HEAP32[$160+8>>2]|0;
  $161 = $114;
  $110 = $161;
  $162 = $110;
  $163 = $113;
  ;HEAP32[$163>>2]=HEAP32[$162>>2]|0;HEAP32[$163+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$163+8>>2]=HEAP32[$162+8>>2]|0;
  $111 = $115;
  $164 = $111;
  $165 = $114;
  ;HEAP32[$165>>2]=HEAP32[$164>>2]|0;HEAP32[$165+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$165+8>>2]=HEAP32[$164+8>>2]|0;
  $118 = $153;
  $166 = $118;
  $117 = $166;
  $167 = $117;
  $116 = $167;
  $168 = $116;
  $169 = $131;
  $121 = $169;
  $170 = $121;
  $120 = $170;
  $171 = $120;
  $119 = $171;
  $172 = $119;
  $125 = $168;
  $126 = $172;
  $173 = $125;
  $174 = $126;
  ;HEAP8[$124>>0]=HEAP8[$127>>0]|0;
  $122 = $173;
  $123 = $174;
  $139 = 1;
  $175 = $138;
  $176 = $136;
  $177 = $135;
  $178 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($175,$176,$177)|0);
  if ($178) {
   $179 = $135;
   $180 = $136;
   $80 = $179;
   $81 = $180;
   $181 = $80;
   $182 = $81;
   $78 = $181;
   $79 = $182;
   $183 = $78;
   $77 = $183;
   $184 = $77;
   $76 = $184;
   $185 = $76;
   $186 = $79;
   $57 = $186;
   $187 = $57;
   $56 = $187;
   $188 = $56;
   $61 = $185;
   $62 = $188;
   $189 = $61;
   $60 = $189;
   $190 = $60;
   ;HEAP32[$63>>2]=HEAP32[$190>>2]|0;HEAP32[$63+4>>2]=HEAP32[$190+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$190+8>>2]|0;
   $191 = $62;
   $58 = $191;
   $192 = $58;
   $193 = $61;
   ;HEAP32[$193>>2]=HEAP32[$192>>2]|0;HEAP32[$193+4>>2]=HEAP32[$192+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$192+8>>2]|0;
   $59 = $63;
   $194 = $59;
   $195 = $62;
   ;HEAP32[$195>>2]=HEAP32[$194>>2]|0;HEAP32[$195+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$195+8>>2]=HEAP32[$194+8>>2]|0;
   $66 = $183;
   $196 = $66;
   $65 = $196;
   $197 = $65;
   $64 = $197;
   $198 = $64;
   $199 = $79;
   $69 = $199;
   $200 = $69;
   $68 = $200;
   $201 = $68;
   $67 = $201;
   $202 = $67;
   $73 = $198;
   $74 = $202;
   $203 = $73;
   $204 = $74;
   ;HEAP8[$72>>0]=HEAP8[$75>>0]|0;
   $70 = $203;
   $71 = $204;
   $139 = 2;
  }
  $205 = $139;
  $134 = $205;
  $289 = $134;
  STACKTOP = sp;return ($289|0);
 }
 return (0)|0;
}
function __ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_T_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $12 = sp + 316|0;
 $21 = sp + 16|0;
 $24 = sp + 358|0;
 $38 = sp + 212|0;
 $47 = sp + 8|0;
 $50 = sp + 357|0;
 $64 = sp + 108|0;
 $73 = sp;
 $76 = sp + 356|0;
 $83 = $0;
 $84 = $1;
 $85 = $2;
 $86 = $3;
 $87 = $4;
 $89 = $83;
 $90 = $84;
 $91 = $85;
 $92 = $87;
 $93 = (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($89,$90,$91,$92)|0);
 $88 = $93;
 $94 = $87;
 $95 = $86;
 $96 = $85;
 $97 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($94,$95,$96)|0);
 if (!($97)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $98 = $85;
 $99 = $86;
 $81 = $98;
 $82 = $99;
 $100 = $81;
 $101 = $82;
 $79 = $100;
 $80 = $101;
 $102 = $79;
 $78 = $102;
 $103 = $78;
 $77 = $103;
 $104 = $77;
 $105 = $80;
 $58 = $105;
 $106 = $58;
 $57 = $106;
 $107 = $57;
 $62 = $104;
 $63 = $107;
 $108 = $62;
 $61 = $108;
 $109 = $61;
 ;HEAP32[$64>>2]=HEAP32[$109>>2]|0;HEAP32[$64+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$109+8>>2]|0;
 $110 = $63;
 $59 = $110;
 $111 = $59;
 $112 = $62;
 ;HEAP32[$112>>2]=HEAP32[$111>>2]|0;HEAP32[$112+4>>2]=HEAP32[$111+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$111+8>>2]|0;
 $60 = $64;
 $113 = $60;
 $114 = $63;
 ;HEAP32[$114>>2]=HEAP32[$113>>2]|0;HEAP32[$114+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$113+8>>2]|0;
 $67 = $102;
 $115 = $67;
 $66 = $115;
 $116 = $66;
 $65 = $116;
 $117 = $65;
 $118 = $80;
 $70 = $118;
 $119 = $70;
 $69 = $119;
 $120 = $69;
 $68 = $120;
 $121 = $68;
 $74 = $117;
 $75 = $121;
 $122 = $74;
 $123 = $75;
 ;HEAP8[$73>>0]=HEAP8[$76>>0]|0;
 $71 = $122;
 $72 = $123;
 $124 = $88;
 $125 = (($124) + 1)|0;
 $88 = $125;
 $126 = $87;
 $127 = $85;
 $128 = $84;
 $129 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($126,$127,$128)|0);
 if (!($129)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $130 = $84;
 $131 = $85;
 $29 = $130;
 $30 = $131;
 $132 = $29;
 $133 = $30;
 $27 = $132;
 $28 = $133;
 $134 = $27;
 $26 = $134;
 $135 = $26;
 $25 = $135;
 $136 = $25;
 $137 = $28;
 $6 = $137;
 $138 = $6;
 $5 = $138;
 $139 = $5;
 $10 = $136;
 $11 = $139;
 $140 = $10;
 $9 = $140;
 $141 = $9;
 ;HEAP32[$12>>2]=HEAP32[$141>>2]|0;HEAP32[$12+4>>2]=HEAP32[$141+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$141+8>>2]|0;
 $142 = $11;
 $7 = $142;
 $143 = $7;
 $144 = $10;
 ;HEAP32[$144>>2]=HEAP32[$143>>2]|0;HEAP32[$144+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$144+8>>2]=HEAP32[$143+8>>2]|0;
 $8 = $12;
 $145 = $8;
 $146 = $11;
 ;HEAP32[$146>>2]=HEAP32[$145>>2]|0;HEAP32[$146+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$146+8>>2]=HEAP32[$145+8>>2]|0;
 $15 = $134;
 $147 = $15;
 $14 = $147;
 $148 = $14;
 $13 = $148;
 $149 = $13;
 $150 = $28;
 $18 = $150;
 $151 = $18;
 $17 = $151;
 $152 = $17;
 $16 = $152;
 $153 = $16;
 $22 = $149;
 $23 = $153;
 $154 = $22;
 $155 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $154;
 $20 = $155;
 $156 = $88;
 $157 = (($156) + 1)|0;
 $88 = $157;
 $158 = $87;
 $159 = $84;
 $160 = $83;
 $161 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($158,$159,$160)|0);
 if (!($161)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $162 = $83;
 $163 = $84;
 $55 = $162;
 $56 = $163;
 $164 = $55;
 $165 = $56;
 $53 = $164;
 $54 = $165;
 $166 = $53;
 $52 = $166;
 $167 = $52;
 $51 = $167;
 $168 = $51;
 $169 = $54;
 $32 = $169;
 $170 = $32;
 $31 = $170;
 $171 = $31;
 $36 = $168;
 $37 = $171;
 $172 = $36;
 $35 = $172;
 $173 = $35;
 ;HEAP32[$38>>2]=HEAP32[$173>>2]|0;HEAP32[$38+4>>2]=HEAP32[$173+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$173+8>>2]|0;
 $174 = $37;
 $33 = $174;
 $175 = $33;
 $176 = $36;
 ;HEAP32[$176>>2]=HEAP32[$175>>2]|0;HEAP32[$176+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$176+8>>2]=HEAP32[$175+8>>2]|0;
 $34 = $38;
 $177 = $34;
 $178 = $37;
 ;HEAP32[$178>>2]=HEAP32[$177>>2]|0;HEAP32[$178+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$178+8>>2]=HEAP32[$177+8>>2]|0;
 $41 = $166;
 $179 = $41;
 $40 = $179;
 $180 = $40;
 $39 = $180;
 $181 = $39;
 $182 = $54;
 $44 = $182;
 $183 = $44;
 $43 = $183;
 $184 = $43;
 $42 = $184;
 $185 = $42;
 $48 = $181;
 $49 = $185;
 $186 = $48;
 $187 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $186;
 $46 = $187;
 $188 = $88;
 $189 = (($188) + 1)|0;
 $88 = $189;
 $190 = $88;
 STACKTOP = sp;return ($190|0);
}
function __ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_SC_T_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $13 = sp + 432|0;
 $22 = sp + 24|0;
 $25 = sp + 475|0;
 $39 = sp + 328|0;
 $48 = sp + 16|0;
 $51 = sp + 474|0;
 $65 = sp + 224|0;
 $74 = sp + 8|0;
 $77 = sp + 473|0;
 $91 = sp + 120|0;
 $100 = sp;
 $103 = sp + 472|0;
 $110 = $0;
 $111 = $1;
 $112 = $2;
 $113 = $3;
 $114 = $4;
 $115 = $5;
 $117 = $110;
 $118 = $111;
 $119 = $112;
 $120 = $113;
 $121 = $115;
 $122 = (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_T_($117,$118,$119,$120,$121)|0);
 $116 = $122;
 $123 = $115;
 $124 = $114;
 $125 = $113;
 $126 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($123,$124,$125)|0);
 if (!($126)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $127 = $113;
 $128 = $114;
 $108 = $127;
 $109 = $128;
 $129 = $108;
 $130 = $109;
 $106 = $129;
 $107 = $130;
 $131 = $106;
 $105 = $131;
 $132 = $105;
 $104 = $132;
 $133 = $104;
 $134 = $107;
 $85 = $134;
 $135 = $85;
 $84 = $135;
 $136 = $84;
 $89 = $133;
 $90 = $136;
 $137 = $89;
 $88 = $137;
 $138 = $88;
 ;HEAP32[$91>>2]=HEAP32[$138>>2]|0;HEAP32[$91+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$91+8>>2]=HEAP32[$138+8>>2]|0;
 $139 = $90;
 $86 = $139;
 $140 = $86;
 $141 = $89;
 ;HEAP32[$141>>2]=HEAP32[$140>>2]|0;HEAP32[$141+4>>2]=HEAP32[$140+4>>2]|0;HEAP32[$141+8>>2]=HEAP32[$140+8>>2]|0;
 $87 = $91;
 $142 = $87;
 $143 = $90;
 ;HEAP32[$143>>2]=HEAP32[$142>>2]|0;HEAP32[$143+4>>2]=HEAP32[$142+4>>2]|0;HEAP32[$143+8>>2]=HEAP32[$142+8>>2]|0;
 $94 = $131;
 $144 = $94;
 $93 = $144;
 $145 = $93;
 $92 = $145;
 $146 = $92;
 $147 = $107;
 $97 = $147;
 $148 = $97;
 $96 = $148;
 $149 = $96;
 $95 = $149;
 $150 = $95;
 $101 = $146;
 $102 = $150;
 $151 = $101;
 $152 = $102;
 ;HEAP8[$100>>0]=HEAP8[$103>>0]|0;
 $98 = $151;
 $99 = $152;
 $153 = $116;
 $154 = (($153) + 1)|0;
 $116 = $154;
 $155 = $115;
 $156 = $113;
 $157 = $112;
 $158 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($155,$156,$157)|0);
 if (!($158)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $159 = $112;
 $160 = $113;
 $56 = $159;
 $57 = $160;
 $161 = $56;
 $162 = $57;
 $54 = $161;
 $55 = $162;
 $163 = $54;
 $53 = $163;
 $164 = $53;
 $52 = $164;
 $165 = $52;
 $166 = $55;
 $33 = $166;
 $167 = $33;
 $32 = $167;
 $168 = $32;
 $37 = $165;
 $38 = $168;
 $169 = $37;
 $36 = $169;
 $170 = $36;
 ;HEAP32[$39>>2]=HEAP32[$170>>2]|0;HEAP32[$39+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$170+8>>2]|0;
 $171 = $38;
 $34 = $171;
 $172 = $34;
 $173 = $37;
 ;HEAP32[$173>>2]=HEAP32[$172>>2]|0;HEAP32[$173+4>>2]=HEAP32[$172+4>>2]|0;HEAP32[$173+8>>2]=HEAP32[$172+8>>2]|0;
 $35 = $39;
 $174 = $35;
 $175 = $38;
 ;HEAP32[$175>>2]=HEAP32[$174>>2]|0;HEAP32[$175+4>>2]=HEAP32[$174+4>>2]|0;HEAP32[$175+8>>2]=HEAP32[$174+8>>2]|0;
 $42 = $163;
 $176 = $42;
 $41 = $176;
 $177 = $41;
 $40 = $177;
 $178 = $40;
 $179 = $55;
 $45 = $179;
 $180 = $45;
 $44 = $180;
 $181 = $44;
 $43 = $181;
 $182 = $43;
 $49 = $178;
 $50 = $182;
 $183 = $49;
 $184 = $50;
 ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
 $46 = $183;
 $47 = $184;
 $185 = $116;
 $186 = (($185) + 1)|0;
 $116 = $186;
 $187 = $115;
 $188 = $112;
 $189 = $111;
 $190 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($187,$188,$189)|0);
 if (!($190)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $191 = $111;
 $192 = $112;
 $30 = $191;
 $31 = $192;
 $193 = $30;
 $194 = $31;
 $28 = $193;
 $29 = $194;
 $195 = $28;
 $27 = $195;
 $196 = $27;
 $26 = $196;
 $197 = $26;
 $198 = $29;
 $7 = $198;
 $199 = $7;
 $6 = $199;
 $200 = $6;
 $11 = $197;
 $12 = $200;
 $201 = $11;
 $10 = $201;
 $202 = $10;
 ;HEAP32[$13>>2]=HEAP32[$202>>2]|0;HEAP32[$13+4>>2]=HEAP32[$202+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$202+8>>2]|0;
 $203 = $12;
 $8 = $203;
 $204 = $8;
 $205 = $11;
 ;HEAP32[$205>>2]=HEAP32[$204>>2]|0;HEAP32[$205+4>>2]=HEAP32[$204+4>>2]|0;HEAP32[$205+8>>2]=HEAP32[$204+8>>2]|0;
 $9 = $13;
 $206 = $9;
 $207 = $12;
 ;HEAP32[$207>>2]=HEAP32[$206>>2]|0;HEAP32[$207+4>>2]=HEAP32[$206+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$206+8>>2]|0;
 $16 = $195;
 $208 = $16;
 $15 = $208;
 $209 = $15;
 $14 = $209;
 $210 = $14;
 $211 = $29;
 $19 = $211;
 $212 = $19;
 $18 = $212;
 $213 = $18;
 $17 = $213;
 $214 = $17;
 $23 = $210;
 $24 = $214;
 $215 = $23;
 $216 = $24;
 ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
 $20 = $215;
 $21 = $216;
 $217 = $116;
 $218 = (($217) + 1)|0;
 $116 = $218;
 $219 = $115;
 $220 = $111;
 $221 = $110;
 $222 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($219,$220,$221)|0);
 if (!($222)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $223 = $110;
 $224 = $111;
 $82 = $223;
 $83 = $224;
 $225 = $82;
 $226 = $83;
 $80 = $225;
 $81 = $226;
 $227 = $80;
 $79 = $227;
 $228 = $79;
 $78 = $228;
 $229 = $78;
 $230 = $81;
 $59 = $230;
 $231 = $59;
 $58 = $231;
 $232 = $58;
 $63 = $229;
 $64 = $232;
 $233 = $63;
 $62 = $233;
 $234 = $62;
 ;HEAP32[$65>>2]=HEAP32[$234>>2]|0;HEAP32[$65+4>>2]=HEAP32[$234+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$234+8>>2]|0;
 $235 = $64;
 $60 = $235;
 $236 = $60;
 $237 = $63;
 ;HEAP32[$237>>2]=HEAP32[$236>>2]|0;HEAP32[$237+4>>2]=HEAP32[$236+4>>2]|0;HEAP32[$237+8>>2]=HEAP32[$236+8>>2]|0;
 $61 = $65;
 $238 = $61;
 $239 = $64;
 ;HEAP32[$239>>2]=HEAP32[$238>>2]|0;HEAP32[$239+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$239+8>>2]=HEAP32[$238+8>>2]|0;
 $68 = $227;
 $240 = $68;
 $67 = $240;
 $241 = $67;
 $66 = $241;
 $242 = $66;
 $243 = $81;
 $71 = $243;
 $244 = $71;
 $70 = $244;
 $245 = $70;
 $69 = $245;
 $246 = $69;
 $75 = $242;
 $76 = $246;
 $247 = $75;
 $248 = $76;
 ;HEAP8[$74>>0]=HEAP8[$77>>0]|0;
 $72 = $247;
 $73 = $248;
 $249 = $116;
 $250 = (($249) + 1)|0;
 $116 = $250;
 $251 = $116;
 STACKTOP = sp;return ($251|0);
}
function __ZNSt3__218__insertion_sort_3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $18 = sp + 24|0;
 $21 = sp + 491|0;
 $48 = sp + 490|0;
 $49 = sp + 489|0;
 $52 = sp + 16|0;
 $55 = sp + 488|0;
 $79 = sp + 8|0;
 $82 = sp + 487|0;
 $109 = sp + 486|0;
 $110 = sp + 485|0;
 $113 = sp;
 $116 = sp + 484|0;
 $123 = sp + 40|0;
 $118 = $0;
 $119 = $1;
 $120 = $2;
 $127 = $118;
 $128 = ((($127)) + 24|0);
 $121 = $128;
 $129 = $118;
 $130 = $118;
 $131 = ((($130)) + 12|0);
 $132 = $121;
 $133 = $120;
 (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($129,$131,$132,$133)|0);
 $134 = $121;
 $135 = ((($134)) + 12|0);
 $122 = $135;
 L1: while(1) {
  $136 = $122;
  $137 = $119;
  $138 = ($136|0)!=($137|0);
  if (!($138)) {
   label = 30;
   break;
  }
  $139 = $120;
  $140 = $122;
  $141 = $121;
  $142 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($139,$140,$141)|0);
  if ($142) {
   $143 = $122;
   $117 = $143;
   $144 = $117;
   $63 = $123;
   $64 = $144;
   $145 = $63;
   $146 = $64;
   $62 = $146;
   $147 = $62;
   ;HEAP32[$145>>2]=HEAP32[$147>>2]|0;HEAP32[$145+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$145+8>>2]=HEAP32[$147+8>>2]|0;
   $148 = $64;
   $59 = $148;
   $149 = $59;
   $58 = $149;
   $150 = $58;
   $57 = $150;
   $151 = $57;
   $60 = $151;
   $61 = 0;
   while(1) {
    $152 = $61;
    $153 = ($152>>>0)<(3);
    if (!($153)) {
     break;
    }
    $154 = $60;
    $155 = $61;
    $156 = (($154) + ($155<<2)|0);
    HEAP32[$156>>2] = 0;
    $157 = $61;
    $158 = (($157) + 1)|0;
    $61 = $158;
   }
   $159 = $121;
   $124 = $159;
   $160 = $122;
   $121 = $160;
   while(1) {
    $161 = $124;
    $56 = $161;
    $162 = $56;
    $163 = $121;
    $53 = $163;
    $54 = $162;
    $164 = $53;
    $165 = $54;
    ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
    $50 = $164;
    $51 = $165;
    $166 = $50;
    $47 = $166;
    $167 = $47;
    $46 = $167;
    $45 = $167;
    $168 = $45;
    $44 = $168;
    $169 = $44;
    $43 = $169;
    $170 = $43;
    $171 = ((($170)) + 11|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = $173 & 128;
    $175 = ($174|0)!=(0);
    if ($175) {
     $38 = $167;
     $176 = $38;
     $37 = $176;
     $177 = $37;
     $36 = $177;
     $178 = $36;
     $179 = HEAP32[$178>>2]|0;
     HEAP8[$48>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($179,$48);
     $29 = $167;
     $30 = 0;
     $180 = $29;
     $181 = $30;
     $28 = $180;
     $182 = $28;
     $27 = $182;
     $183 = $27;
     $184 = ((($183)) + 4|0);
     HEAP32[$184>>2] = $181;
    } else {
     $35 = $167;
     $185 = $35;
     $34 = $185;
     $186 = $34;
     $33 = $186;
     $187 = $33;
     $32 = $187;
     $188 = $32;
     $31 = $188;
     $189 = $31;
     HEAP8[$49>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($189,$49);
     $41 = $167;
     $42 = 0;
     $190 = $41;
     $191 = $42;
     $192 = $191&255;
     $40 = $190;
     $193 = $40;
     $39 = $193;
     $194 = $39;
     $195 = ((($194)) + 11|0);
     HEAP8[$195>>0] = $192;
    }
    $26 = $166;
    $196 = $26;
    __THREW__ = 0;
    invoke_vii(413,($196|0),0);
    $197 = __THREW__; __THREW__ = 0;
    $198 = $197&1;
    if ($198) {
     label = 12;
     break L1;
    }
    $201 = $51;
    $25 = $201;
    $202 = $25;
    $24 = $202;
    $203 = $24;
    $23 = $166;
    $204 = $23;
    $22 = $204;
    $205 = $22;
    ;HEAP32[$205>>2]=HEAP32[$203>>2]|0;HEAP32[$205+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$205+8>>2]=HEAP32[$203+8>>2]|0;
    $206 = $51;
    $19 = $166;
    $20 = $206;
    $207 = $19;
    $208 = $20;
    ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
    $16 = $207;
    $17 = $208;
    $209 = $16;
    $210 = $17;
    $15 = $210;
    $211 = $15;
    $14 = $211;
    $212 = $14;
    $13 = $212;
    $213 = $13;
    $9 = $213;
    $12 = $209;
    $214 = $12;
    $11 = $214;
    $215 = $11;
    $10 = $215;
    $216 = $51;
    $6 = $216;
    $217 = $6;
    $5 = $217;
    $218 = $5;
    $4 = $218;
    $219 = $4;
    $7 = $219;
    $8 = 0;
    while(1) {
     $220 = $8;
     $221 = ($220>>>0)<(3);
     if (!($221)) {
      break;
     }
     $222 = $7;
     $223 = $8;
     $224 = (($222) + ($223<<2)|0);
     HEAP32[$224>>2] = 0;
     $225 = $8;
     $226 = (($225) + 1)|0;
     $8 = $226;
    }
    $227 = $124;
    $121 = $227;
    $228 = $121;
    $229 = $118;
    $230 = ($228|0)!=($229|0);
    if (!($230)) {
     break;
    }
    $231 = $120;
    $232 = $124;
    $233 = ((($232)) + -12|0);
    $124 = $233;
    __THREW__ = 0;
    $234 = (invoke_iiii(414,($231|0),($123|0),($233|0))|0);
    $235 = __THREW__; __THREW__ = 0;
    $236 = $235&1;
    if ($236) {
     label = 28;
     break L1;
    }
    if (!($234)) {
     break;
    }
   }
   $3 = $123;
   $237 = $3;
   $238 = $121;
   $114 = $238;
   $115 = $237;
   $239 = $114;
   $240 = $115;
   ;HEAP8[$113>>0]=HEAP8[$116>>0]|0;
   $111 = $239;
   $112 = $240;
   $241 = $111;
   $108 = $241;
   $242 = $108;
   $107 = $242;
   $106 = $242;
   $243 = $106;
   $105 = $243;
   $244 = $105;
   $104 = $244;
   $245 = $104;
   $246 = ((($245)) + 11|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $247&255;
   $249 = $248 & 128;
   $250 = ($249|0)!=(0);
   if ($250) {
    $99 = $242;
    $251 = $99;
    $98 = $251;
    $252 = $98;
    $97 = $252;
    $253 = $97;
    $254 = HEAP32[$253>>2]|0;
    HEAP8[$109>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($254,$109);
    $90 = $242;
    $91 = 0;
    $255 = $90;
    $256 = $91;
    $89 = $255;
    $257 = $89;
    $88 = $257;
    $258 = $88;
    $259 = ((($258)) + 4|0);
    HEAP32[$259>>2] = $256;
   } else {
    $96 = $242;
    $260 = $96;
    $95 = $260;
    $261 = $95;
    $94 = $261;
    $262 = $94;
    $93 = $262;
    $263 = $93;
    $92 = $263;
    $264 = $92;
    HEAP8[$110>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($264,$110);
    $102 = $242;
    $103 = 0;
    $265 = $102;
    $266 = $103;
    $267 = $266&255;
    $101 = $265;
    $268 = $101;
    $100 = $268;
    $269 = $100;
    $270 = ((($269)) + 11|0);
    HEAP8[$270>>0] = $267;
   }
   $87 = $241;
   $271 = $87;
   __THREW__ = 0;
   invoke_vii(413,($271|0),0);
   $272 = __THREW__; __THREW__ = 0;
   $273 = $272&1;
   if ($273) {
    label = 23;
    break;
   }
   $276 = $112;
   $86 = $276;
   $277 = $86;
   $85 = $277;
   $278 = $85;
   $84 = $241;
   $279 = $84;
   $83 = $279;
   $280 = $83;
   ;HEAP32[$280>>2]=HEAP32[$278>>2]|0;HEAP32[$280+4>>2]=HEAP32[$278+4>>2]|0;HEAP32[$280+8>>2]=HEAP32[$278+8>>2]|0;
   $281 = $112;
   $80 = $241;
   $81 = $281;
   $282 = $80;
   $283 = $81;
   ;HEAP8[$79>>0]=HEAP8[$82>>0]|0;
   $77 = $282;
   $78 = $283;
   $284 = $77;
   $285 = $78;
   $76 = $285;
   $286 = $76;
   $75 = $286;
   $287 = $75;
   $74 = $287;
   $288 = $74;
   $70 = $288;
   $73 = $284;
   $289 = $73;
   $72 = $289;
   $290 = $72;
   $71 = $290;
   $291 = $112;
   $67 = $291;
   $292 = $67;
   $66 = $292;
   $293 = $66;
   $65 = $293;
   $294 = $65;
   $68 = $294;
   $69 = 0;
   while(1) {
    $295 = $69;
    $296 = ($295>>>0)<(3);
    if (!($296)) {
     break;
    }
    $297 = $68;
    $298 = $69;
    $299 = (($297) + ($298<<2)|0);
    HEAP32[$299>>2] = 0;
    $300 = $69;
    $301 = (($300) + 1)|0;
    $69 = $301;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($123);
  }
  $306 = $122;
  $121 = $306;
  $307 = $122;
  $308 = ((($307)) + 12|0);
  $122 = $308;
 }
 if ((label|0) == 12) {
  $199 = ___cxa_find_matching_catch_3(0|0)|0;
  $200 = tempRet0;
  ___clang_call_terminate($199);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $274 = ___cxa_find_matching_catch_3(0|0)|0;
  $275 = tempRet0;
  ___clang_call_terminate($274);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $302 = ___cxa_find_matching_catch_2()|0;
  $303 = tempRet0;
  $125 = $302;
  $126 = $303;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($123);
  $304 = $125;
  $305 = $126;
  ___resumeException($304|0);
  // unreachable;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEbT0_SC_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $18 = sp + 32|0;
 $21 = sp + 617|0;
 $48 = sp + 616|0;
 $49 = sp + 615|0;
 $52 = sp + 24|0;
 $55 = sp + 614|0;
 $80 = sp + 16|0;
 $83 = sp + 613|0;
 $110 = sp + 612|0;
 $111 = sp + 611|0;
 $114 = sp + 8|0;
 $117 = sp + 610|0;
 $125 = sp + 156|0;
 $134 = sp;
 $137 = sp + 609|0;
 $144 = sp + 608|0;
 $152 = sp + 52|0;
 $145 = $0;
 $146 = $1;
 $147 = $2;
 $157 = $146;
 $158 = $145;
 $159 = $157;
 $160 = $158;
 $161 = (($159) - ($160))|0;
 $162 = (($161|0) / 12)&-1;
 switch ($162|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  HEAP8[$144>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 2:  {
  $163 = $147;
  $164 = $146;
  $165 = ((($164)) + -12|0);
  $146 = $165;
  $166 = $145;
  $167 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($163,$165,$166)|0);
  if ($167) {
   $168 = $145;
   $169 = $146;
   $142 = $168;
   $143 = $169;
   $170 = $142;
   $171 = $143;
   $140 = $170;
   $141 = $171;
   $172 = $140;
   $139 = $172;
   $173 = $139;
   $138 = $173;
   $174 = $138;
   $175 = $141;
   $119 = $175;
   $176 = $119;
   $118 = $176;
   $177 = $118;
   $123 = $174;
   $124 = $177;
   $178 = $123;
   $122 = $178;
   $179 = $122;
   ;HEAP32[$125>>2]=HEAP32[$179>>2]|0;HEAP32[$125+4>>2]=HEAP32[$179+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[$179+8>>2]|0;
   $180 = $124;
   $120 = $180;
   $181 = $120;
   $182 = $123;
   ;HEAP32[$182>>2]=HEAP32[$181>>2]|0;HEAP32[$182+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$182+8>>2]=HEAP32[$181+8>>2]|0;
   $121 = $125;
   $183 = $121;
   $184 = $124;
   ;HEAP32[$184>>2]=HEAP32[$183>>2]|0;HEAP32[$184+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$184+8>>2]=HEAP32[$183+8>>2]|0;
   $128 = $172;
   $185 = $128;
   $127 = $185;
   $186 = $127;
   $126 = $186;
   $187 = $126;
   $188 = $141;
   $131 = $188;
   $189 = $131;
   $130 = $189;
   $190 = $130;
   $129 = $190;
   $191 = $129;
   $135 = $187;
   $136 = $191;
   $192 = $135;
   $193 = $136;
   ;HEAP8[$134>>0]=HEAP8[$137>>0]|0;
   $132 = $192;
   $133 = $193;
  }
  $$expand_i1_val2 = 1;
  HEAP8[$144>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 3:  {
  $194 = $145;
  $195 = $145;
  $196 = ((($195)) + 12|0);
  $197 = $146;
  $198 = ((($197)) + -12|0);
  $146 = $198;
  $199 = $147;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($194,$196,$198,$199)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$144>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 4:  {
  $200 = $145;
  $201 = $145;
  $202 = ((($201)) + 12|0);
  $203 = $145;
  $204 = ((($203)) + 24|0);
  $205 = $146;
  $206 = ((($205)) + -12|0);
  $146 = $206;
  $207 = $147;
  (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_T_($200,$202,$204,$206,$207)|0);
  $$expand_i1_val6 = 1;
  HEAP8[$144>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 5:  {
  $208 = $145;
  $209 = $145;
  $210 = ((($209)) + 12|0);
  $211 = $145;
  $212 = ((($211)) + 24|0);
  $213 = $145;
  $214 = ((($213)) + 36|0);
  $215 = $146;
  $216 = ((($215)) + -12|0);
  $146 = $216;
  $217 = $147;
  (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_SC_SC_T_($208,$210,$212,$214,$216,$217)|0);
  $$expand_i1_val8 = 1;
  HEAP8[$144>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 default: {
  $218 = $145;
  $219 = ((($218)) + 24|0);
  $148 = $219;
  $220 = $145;
  $221 = $145;
  $222 = ((($221)) + 12|0);
  $223 = $148;
  $224 = $147;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEjT0_SC_SC_T_($220,$222,$223,$224)|0);
  $149 = 8;
  $150 = 0;
  $225 = $148;
  $226 = ((($225)) + 12|0);
  $151 = $226;
  L3: while(1) {
   $227 = $151;
   $228 = $146;
   $229 = ($227|0)!=($228|0);
   if (!($229)) {
    label = 41;
    break;
   }
   $230 = $147;
   $231 = $151;
   $232 = $148;
   $233 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_($230,$231,$232)|0);
   if ($233) {
    $234 = $151;
    $65 = $234;
    $235 = $65;
    $63 = $152;
    $64 = $235;
    $236 = $63;
    $237 = $64;
    $62 = $237;
    $238 = $62;
    ;HEAP32[$236>>2]=HEAP32[$238>>2]|0;HEAP32[$236+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$238+8>>2]|0;
    $239 = $64;
    $59 = $239;
    $240 = $59;
    $58 = $240;
    $241 = $58;
    $57 = $241;
    $242 = $57;
    $60 = $242;
    $61 = 0;
    while(1) {
     $243 = $61;
     $244 = ($243>>>0)<(3);
     if (!($244)) {
      break;
     }
     $245 = $60;
     $246 = $61;
     $247 = (($245) + ($246<<2)|0);
     HEAP32[$247>>2] = 0;
     $248 = $61;
     $249 = (($248) + 1)|0;
     $61 = $249;
    }
    $250 = $148;
    $153 = $250;
    $251 = $151;
    $148 = $251;
    while(1) {
     $252 = $153;
     $56 = $252;
     $253 = $56;
     $254 = $148;
     $53 = $254;
     $54 = $253;
     $255 = $53;
     $256 = $54;
     ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
     $50 = $255;
     $51 = $256;
     $257 = $50;
     $47 = $257;
     $258 = $47;
     $46 = $258;
     $45 = $258;
     $259 = $45;
     $44 = $259;
     $260 = $44;
     $43 = $260;
     $261 = $43;
     $262 = ((($261)) + 11|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = $264 & 128;
     $266 = ($265|0)!=(0);
     if ($266) {
      $38 = $258;
      $267 = $38;
      $37 = $267;
      $268 = $37;
      $36 = $268;
      $269 = $36;
      $270 = HEAP32[$269>>2]|0;
      HEAP8[$48>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($270,$48);
      $29 = $258;
      $30 = 0;
      $271 = $29;
      $272 = $30;
      $28 = $271;
      $273 = $28;
      $27 = $273;
      $274 = $27;
      $275 = ((($274)) + 4|0);
      HEAP32[$275>>2] = $272;
     } else {
      $35 = $258;
      $276 = $35;
      $34 = $276;
      $277 = $34;
      $33 = $277;
      $278 = $33;
      $32 = $278;
      $279 = $32;
      $31 = $279;
      $280 = $31;
      HEAP8[$49>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($280,$49);
      $41 = $258;
      $42 = 0;
      $281 = $41;
      $282 = $42;
      $283 = $282&255;
      $40 = $281;
      $284 = $40;
      $39 = $284;
      $285 = $39;
      $286 = ((($285)) + 11|0);
      HEAP8[$286>>0] = $283;
     }
     $26 = $257;
     $287 = $26;
     __THREW__ = 0;
     invoke_vii(413,($287|0),0);
     $288 = __THREW__; __THREW__ = 0;
     $289 = $288&1;
     if ($289) {
      label = 20;
      break L3;
     }
     $292 = $51;
     $25 = $292;
     $293 = $25;
     $24 = $293;
     $294 = $24;
     $23 = $257;
     $295 = $23;
     $22 = $295;
     $296 = $22;
     ;HEAP32[$296>>2]=HEAP32[$294>>2]|0;HEAP32[$296+4>>2]=HEAP32[$294+4>>2]|0;HEAP32[$296+8>>2]=HEAP32[$294+8>>2]|0;
     $297 = $51;
     $19 = $257;
     $20 = $297;
     $298 = $19;
     $299 = $20;
     ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
     $16 = $298;
     $17 = $299;
     $300 = $16;
     $301 = $17;
     $15 = $301;
     $302 = $15;
     $14 = $302;
     $303 = $14;
     $13 = $303;
     $304 = $13;
     $9 = $304;
     $12 = $300;
     $305 = $12;
     $11 = $305;
     $306 = $11;
     $10 = $306;
     $307 = $51;
     $6 = $307;
     $308 = $6;
     $5 = $308;
     $309 = $5;
     $4 = $309;
     $310 = $4;
     $7 = $310;
     $8 = 0;
     while(1) {
      $311 = $8;
      $312 = ($311>>>0)<(3);
      if (!($312)) {
       break;
      }
      $313 = $7;
      $314 = $8;
      $315 = (($313) + ($314<<2)|0);
      HEAP32[$315>>2] = 0;
      $316 = $8;
      $317 = (($316) + 1)|0;
      $8 = $317;
     }
     $318 = $153;
     $148 = $318;
     $319 = $148;
     $320 = $145;
     $321 = ($319|0)!=($320|0);
     if (!($321)) {
      break;
     }
     $322 = $147;
     $323 = $153;
     $324 = ((($323)) + -12|0);
     $153 = $324;
     __THREW__ = 0;
     $325 = (invoke_iiii(414,($322|0),($152|0),($324|0))|0);
     $326 = __THREW__; __THREW__ = 0;
     $327 = $326&1;
     if ($327) {
      label = 37;
      break L3;
     }
     if (!($325)) {
      break;
     }
    }
    $3 = $152;
    $328 = $3;
    $329 = $148;
    $115 = $329;
    $116 = $328;
    $330 = $115;
    $331 = $116;
    ;HEAP8[$114>>0]=HEAP8[$117>>0]|0;
    $112 = $330;
    $113 = $331;
    $332 = $112;
    $109 = $332;
    $333 = $109;
    $108 = $333;
    $107 = $333;
    $334 = $107;
    $106 = $334;
    $335 = $106;
    $105 = $335;
    $336 = $105;
    $337 = ((($336)) + 11|0);
    $338 = HEAP8[$337>>0]|0;
    $339 = $338&255;
    $340 = $339 & 128;
    $341 = ($340|0)!=(0);
    if ($341) {
     $100 = $333;
     $342 = $100;
     $99 = $342;
     $343 = $99;
     $98 = $343;
     $344 = $98;
     $345 = HEAP32[$344>>2]|0;
     HEAP8[$110>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($345,$110);
     $91 = $333;
     $92 = 0;
     $346 = $91;
     $347 = $92;
     $90 = $346;
     $348 = $90;
     $89 = $348;
     $349 = $89;
     $350 = ((($349)) + 4|0);
     HEAP32[$350>>2] = $347;
    } else {
     $97 = $333;
     $351 = $97;
     $96 = $351;
     $352 = $96;
     $95 = $352;
     $353 = $95;
     $94 = $353;
     $354 = $94;
     $93 = $354;
     $355 = $93;
     HEAP8[$111>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($355,$111);
     $103 = $333;
     $104 = 0;
     $356 = $103;
     $357 = $104;
     $358 = $357&255;
     $102 = $356;
     $359 = $102;
     $101 = $359;
     $360 = $101;
     $361 = ((($360)) + 11|0);
     HEAP8[$361>>0] = $358;
    }
    $88 = $332;
    $362 = $88;
    __THREW__ = 0;
    invoke_vii(413,($362|0),0);
    $363 = __THREW__; __THREW__ = 0;
    $364 = $363&1;
    if ($364) {
     label = 31;
     break;
    }
    $367 = $113;
    $87 = $367;
    $368 = $87;
    $86 = $368;
    $369 = $86;
    $85 = $332;
    $370 = $85;
    $84 = $370;
    $371 = $84;
    ;HEAP32[$371>>2]=HEAP32[$369>>2]|0;HEAP32[$371+4>>2]=HEAP32[$369+4>>2]|0;HEAP32[$371+8>>2]=HEAP32[$369+8>>2]|0;
    $372 = $113;
    $81 = $332;
    $82 = $372;
    $373 = $81;
    $374 = $82;
    ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
    $78 = $373;
    $79 = $374;
    $375 = $78;
    $376 = $79;
    $77 = $376;
    $377 = $77;
    $76 = $377;
    $378 = $76;
    $75 = $378;
    $379 = $75;
    $71 = $379;
    $74 = $375;
    $380 = $74;
    $73 = $380;
    $381 = $73;
    $72 = $381;
    $382 = $113;
    $68 = $382;
    $383 = $68;
    $67 = $383;
    $384 = $67;
    $66 = $384;
    $385 = $66;
    $69 = $385;
    $70 = 0;
    while(1) {
     $386 = $70;
     $387 = ($386>>>0)<(3);
     if (!($387)) {
      break;
     }
     $388 = $69;
     $389 = $70;
     $390 = (($388) + ($389<<2)|0);
     HEAP32[$390>>2] = 0;
     $391 = $70;
     $392 = (($391) + 1)|0;
     $70 = $392;
    }
    $393 = $150;
    $394 = (($393) + 1)|0;
    $150 = $394;
    $395 = ($394|0)==(8);
    if ($395) {
     $396 = $151;
     $397 = ((($396)) + 12|0);
     $151 = $397;
     $398 = $146;
     $399 = ($397|0)==($398|0);
     $$expand_i1_val10 = $399&1;
     HEAP8[$144>>0] = $$expand_i1_val10;
     $156 = 1;
    } else {
     $156 = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($152);
    $404 = $156;
    $switch = ($404>>>0)<(1);
    if (!($switch)) {
     label = 42;
     break;
    }
   }
   $405 = $151;
   $148 = $405;
   $406 = $151;
   $407 = ((($406)) + 12|0);
   $151 = $407;
  }
  if ((label|0) == 20) {
   $290 = ___cxa_find_matching_catch_3(0|0)|0;
   $291 = tempRet0;
   ___clang_call_terminate($290);
   // unreachable;
  }
  else if ((label|0) == 31) {
   $365 = ___cxa_find_matching_catch_3(0|0)|0;
   $366 = tempRet0;
   ___clang_call_terminate($365);
   // unreachable;
  }
  else if ((label|0) == 37) {
   $400 = ___cxa_find_matching_catch_2()|0;
   $401 = tempRet0;
   $154 = $400;
   $155 = $401;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($152);
   $402 = $154;
   $403 = $155;
   ___resumeException($402|0);
   // unreachable;
  }
  else if ((label|0) == 41) {
   $$expand_i1_val12 = 1;
   HEAP8[$144>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$144>>0]|0;
   $408 = $$pre_trunc&1;
   STACKTOP = sp;return ($408|0);
  }
  else if ((label|0) == 42) {
   $$pre_trunc = HEAP8[$144>>0]|0;
   $408 = $$pre_trunc&1;
   STACKTOP = sp;return ($408|0);
  }
 }
 }
 return (0)|0;
}
function __ZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangeb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $23 = sp + 40|0;
 $28 = sp + 777|0;
 $39 = sp + 776|0;
 $56 = sp + 580|0;
 $59 = sp + 568|0;
 $63 = sp + 552|0;
 $66 = sp + 540|0;
 $79 = sp + 32|0;
 $80 = sp + 24|0;
 $81 = sp + 16|0;
 $86 = sp + 472|0;
 $87 = sp + 8|0;
 $90 = sp + 460|0;
 $91 = sp + 775|0;
 $92 = sp;
 $96 = sp + 774|0;
 $114 = sp + 376|0;
 $117 = sp + 364|0;
 $121 = sp + 348|0;
 $124 = sp + 336|0;
 $129 = sp + 316|0;
 $132 = sp + 304|0;
 $139 = sp + 276|0;
 $142 = sp + 264|0;
 $160 = sp + 196|0;
 $161 = sp + 184|0;
 $162 = sp + 176|0;
 $163 = sp + 160|0;
 $167 = sp + 144|0;
 $168 = sp + 140|0;
 $169 = sp + 128|0;
 $170 = sp + 120|0;
 $171 = sp + 112|0;
 $172 = sp + 96|0;
 $173 = sp + 88|0;
 $175 = sp + 72|0;
 $176 = sp + 64|0;
 $177 = sp + 52|0;
 $178 = sp + 48|0;
 $179 = sp + 44|0;
 $180 = sp + 772|0;
 $157 = $1;
 $158 = $4;
 $181 = $5&1;
 $159 = $181;
 $182 = $157;
 $156 = $2;
 $183 = $156;
 $155 = $183;
 $184 = $155;
 $154 = $184;
 $185 = $154;
 $153 = $185;
 $186 = $153;
 $152 = $186;
 $187 = $152;
 $188 = ((($187)) + 11|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = $190 & 128;
 $192 = ($191|0)!=(0);
 if ($192) {
  $148 = $184;
  $193 = $148;
  $147 = $193;
  $194 = $147;
  $146 = $194;
  $195 = $146;
  $196 = ((($195)) + 4|0);
  $197 = HEAP32[$196>>2]|0;
  $205 = $197;
 } else {
  $151 = $184;
  $198 = $151;
  $150 = $198;
  $199 = $150;
  $149 = $199;
  $200 = $149;
  $201 = ((($200)) + 11|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $205 = $203;
 }
 $204 = ($205>>>0)<(2);
 if ($204) {
  $145 = $0;
  $206 = $145;
  $144 = $206;
  $207 = $144;
  $143 = $207;
  HEAP32[$207>>2] = 0;
  $208 = ((($207)) + 4|0);
  HEAP32[$208>>2] = 0;
  $209 = ((($207)) + 8|0);
  $141 = $209;
  HEAP32[$142>>2] = 0;
  $210 = $141;
  $140 = $142;
  $211 = $140;
  $212 = HEAP32[$211>>2]|0;
  $138 = $210;
  HEAP32[$139>>2] = $212;
  $213 = $138;
  $137 = $213;
  $136 = $139;
  $214 = $136;
  $215 = HEAP32[$214>>2]|0;
  HEAP32[$213>>2] = $215;
  STACKTOP = sp;return;
 }
 $216 = $158;
 HEAP32[$160>>2] = $216;
 $135 = $161;
 $217 = $135;
 $134 = $217;
 $218 = $134;
 $133 = $218;
 HEAP32[$218>>2] = 0;
 $219 = ((($218)) + 4|0);
 HEAP32[$219>>2] = 0;
 $220 = ((($218)) + 8|0);
 $131 = $220;
 HEAP32[$132>>2] = 0;
 $221 = $131;
 $130 = $132;
 $222 = $130;
 $223 = HEAP32[$222>>2]|0;
 $128 = $221;
 HEAP32[$129>>2] = $223;
 $224 = $128;
 $127 = $224;
 $126 = $129;
 $225 = $126;
 $226 = HEAP32[$225>>2]|0;
 HEAP32[$224>>2] = $226;
 __THREW__ = 0;
 invoke_vii(351,($163|0),($2|0));
 $227 = __THREW__; __THREW__ = 0;
 $228 = $227&1;
 if ($228) {
  $288 = ___cxa_find_matching_catch_2()|0;
  $289 = tempRet0;
  $164 = $288;
  $165 = $289;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($161);
  $457 = $164;
  $458 = $165;
  ___resumeException($457|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viiii(345,($162|0),($182|0),($163|0),0);
 $229 = __THREW__; __THREW__ = 0;
 $230 = $229&1;
 if ($230) {
  $290 = ___cxa_find_matching_catch_2()|0;
  $291 = tempRet0;
  $164 = $290;
  $165 = $291;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($163);
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($161);
  $457 = $164;
  $458 = $165;
  ___resumeException($457|0);
  // unreachable;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($163);
 $166 = $3;
 $231 = $166;
 $125 = $231;
 $232 = $125;
 $233 = HEAP32[$232>>2]|0;
 $122 = $232;
 $123 = $233;
 $234 = $123;
 $119 = $121;
 $120 = $234;
 $235 = $119;
 $236 = $120;
 HEAP32[$235>>2] = $236;
 $237 = HEAP32[$121>>2]|0;
 HEAP32[$124>>2] = $237;
 $238 = HEAP32[$124>>2]|0;
 HEAP32[$167>>2] = $238;
 $239 = $166;
 $118 = $239;
 $240 = $118;
 $241 = ((($240)) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $115 = $240;
 $116 = $242;
 $243 = $116;
 $112 = $114;
 $113 = $243;
 $244 = $112;
 $245 = $113;
 HEAP32[$244>>2] = $245;
 $246 = HEAP32[$114>>2]|0;
 HEAP32[$117>>2] = $246;
 $247 = HEAP32[$117>>2]|0;
 HEAP32[$168>>2] = $247;
 while(1) {
  $72 = $167;
  $73 = $168;
  $248 = $72;
  $249 = $73;
  $70 = $248;
  $71 = $249;
  $250 = $70;
  $69 = $250;
  $251 = $69;
  $252 = HEAP32[$251>>2]|0;
  $253 = $71;
  $68 = $253;
  $254 = $68;
  $255 = HEAP32[$254>>2]|0;
  $256 = ($252|0)==($255|0);
  $257 = $256 ^ 1;
  if (!($257)) {
   label = 48;
   break;
  }
  $53 = $167;
  $258 = $53;
  $259 = HEAP32[$258>>2]|0;
  __THREW__ = 0;
  invoke_vii(351,($169|0),($259|0));
  $260 = __THREW__; __THREW__ = 0;
  $261 = $260&1;
  if ($261) {
   label = 20;
   break;
  }
  __THREW__ = 0;
  invoke_vii(351,($172|0),($169|0));
  $262 = __THREW__; __THREW__ = 0;
  $263 = $262&1;
  if ($263) {
   label = 21;
   break;
  }
  __THREW__ = 0;
  invoke_viiii(345,($171|0),($182|0),($172|0),0);
  $264 = __THREW__; __THREW__ = 0;
  $265 = $264&1;
  if ($265) {
   label = 22;
   break;
  }
  $51 = $171;
  $266 = $51;
  $267 = HEAP32[$266>>2]|0;
  $49 = $173;
  $50 = $162;
  $268 = $49;
  $269 = $50;
  $270 = HEAP32[$269>>2]|0;
  HEAP32[$268>>2] = $270;
  $271 = ((($268)) + 4|0);
  $272 = $50;
  $273 = ((($272)) + 4|0);
  $274 = HEAP32[$273>>2]|0;
  HEAP32[$271>>2] = $274;
  $275 = ((($268)) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($276|0)!=(0|0);
  if ($277) {
   $278 = ((($268)) + 4|0);
   $279 = HEAP32[$278>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($279);
  }
  __THREW__ = 0;
  invoke_viii(415,($170|0),($267|0),($173|0));
  $280 = __THREW__; __THREW__ = 0;
  $281 = $280&1;
  if ($281) {
   label = 23;
   break;
  }
  __ZNSt3__210shared_ptrI5LevelED2Ev($173);
  __ZNSt3__210shared_ptrI5LevelED2Ev($171);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($172);
  $47 = $170;
  $48 = 0;
  $282 = $47;
  $46 = $282;
  $283 = $46;
  $45 = $283;
  $284 = $45;
  $285 = HEAP32[$284>>2]|0;
  $286 = ($285|0)!=(0|0);
  $287 = $286 ^ 1;
  if ($287) {
   $174 = 3;
  } else {
   $43 = $175;
   $44 = $170;
   $300 = $43;
   $301 = $44;
   $302 = HEAP32[$301>>2]|0;
   HEAP32[$300>>2] = $302;
   $303 = ((($300)) + 4|0);
   $304 = $44;
   $305 = ((($304)) + 4|0);
   $306 = HEAP32[$305>>2]|0;
   HEAP32[$303>>2] = $306;
   $307 = ((($300)) + 4|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = ($308|0)!=(0|0);
   if ($309) {
    $310 = ((($300)) + 4|0);
    $311 = HEAP32[$310>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($311);
   }
   $41 = $176;
   $42 = $162;
   $312 = $41;
   $313 = $42;
   $314 = HEAP32[$313>>2]|0;
   HEAP32[$312>>2] = $314;
   $315 = ((($312)) + 4|0);
   $316 = $42;
   $317 = ((($316)) + 4|0);
   $318 = HEAP32[$317>>2]|0;
   HEAP32[$315>>2] = $318;
   $319 = ((($312)) + 4|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = ($320|0)!=(0|0);
   if ($321) {
    $322 = ((($312)) + 4|0);
    $323 = HEAP32[$322>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($323);
   }
   __THREW__ = 0;
   $324 = (invoke_iiii(416,($160|0),($175|0),($176|0))|0);
   $325 = __THREW__; __THREW__ = 0;
   $326 = $325&1;
   if ($326) {
    label = 39;
    break;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($176);
   __ZNSt3__210shared_ptrI5LevelED2Ev($175);
   if ($324) {
    $40 = $170;
    $327 = $40;
    $328 = HEAP32[$327>>2]|0;
    __THREW__ = 0;
    invoke_vii(406,($177|0),($328|0));
    $329 = __THREW__; __THREW__ = 0;
    $330 = $329&1;
    if ($330) {
     label = 40;
     break;
    }
    $37 = $161;
    $38 = $177;
    $331 = $37;
    $332 = ((($331)) + 4|0);
    $333 = HEAP32[$332>>2]|0;
    $36 = $331;
    $334 = $36;
    $335 = ((($334)) + 8|0);
    $35 = $335;
    $336 = $35;
    $34 = $336;
    $337 = $34;
    $338 = HEAP32[$337>>2]|0;
    $339 = ($333>>>0)<($338>>>0);
    if ($339) {
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($39,$331,1);
     $33 = $331;
     $340 = $33;
     $341 = ((($340)) + 8|0);
     $32 = $341;
     $342 = $32;
     $31 = $342;
     $343 = $31;
     $344 = ((($331)) + 4|0);
     $345 = HEAP32[$344>>2]|0;
     $29 = $345;
     $346 = $29;
     $347 = $38;
     $6 = $347;
     $348 = $6;
     $25 = $343;
     $26 = $346;
     $27 = $348;
     $349 = $25;
     $350 = $26;
     $351 = $27;
     $24 = $351;
     $352 = $24;
     ;HEAP8[$23>>0]=HEAP8[$28>>0]|0;
     $20 = $349;
     $21 = $350;
     $22 = $352;
     $353 = $20;
     $354 = $21;
     $355 = $22;
     $19 = $355;
     $356 = $19;
     $16 = $353;
     $17 = $354;
     $18 = $356;
     $357 = $17;
     $358 = $18;
     $15 = $358;
     $359 = $15;
     $13 = $357;
     $14 = $359;
     $360 = $13;
     $361 = $14;
     $12 = $361;
     $362 = $12;
     ;HEAP32[$360>>2]=HEAP32[$362>>2]|0;HEAP32[$360+4>>2]=HEAP32[$362+4>>2]|0;HEAP32[$360+8>>2]=HEAP32[$362+8>>2]|0;
     $363 = $14;
     $9 = $363;
     $364 = $9;
     $8 = $364;
     $365 = $8;
     $7 = $365;
     $366 = $7;
     $10 = $366;
     $11 = 0;
     while(1) {
      $367 = $11;
      $368 = ($367>>>0)<(3);
      if (!($368)) {
       break;
      }
      $369 = $10;
      $370 = $11;
      $371 = (($369) + ($370<<2)|0);
      HEAP32[$371>>2] = 0;
      $372 = $11;
      $373 = (($372) + 1)|0;
      $11 = $373;
     }
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($39);
     $374 = ((($331)) + 4|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ((($375)) + 12|0);
     HEAP32[$374>>2] = $376;
    } else {
     $377 = $38;
     $30 = $377;
     $378 = $30;
     __THREW__ = 0;
     invoke_vii(407,($331|0),($378|0));
     $379 = __THREW__; __THREW__ = 0;
     $380 = $379&1;
     if ($380) {
      label = 41;
      break;
     }
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($177);
   }
   $174 = 0;
  }
  __ZNSt3__210shared_ptrI5LevelED2Ev($170);
  $387 = $174;
  $cond = ($387|0)==(0);
  if ($cond) {
   $174 = 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($169);
  $52 = $167;
  $388 = $52;
  $389 = HEAP32[$388>>2]|0;
  $390 = ((($389)) + 12|0);
  HEAP32[$388>>2] = $390;
 }
 do {
  if ((label|0) == 21) {
   $294 = ___cxa_find_matching_catch_2()|0;
   $295 = tempRet0;
   $164 = $294;
   $165 = $295;
   label = 47;
  }
  else if ((label|0) == 22) {
   $296 = ___cxa_find_matching_catch_2()|0;
   $297 = tempRet0;
   $164 = $296;
   $165 = $297;
   label = 24;
  }
  else if ((label|0) == 23) {
   $298 = ___cxa_find_matching_catch_2()|0;
   $299 = tempRet0;
   $164 = $298;
   $165 = $299;
   __ZNSt3__210shared_ptrI5LevelED2Ev($173);
   __ZNSt3__210shared_ptrI5LevelED2Ev($171);
   label = 24;
  }
  else if ((label|0) == 39) {
   $381 = ___cxa_find_matching_catch_2()|0;
   $382 = tempRet0;
   $164 = $381;
   $165 = $382;
   __ZNSt3__210shared_ptrI5LevelED2Ev($176);
   __ZNSt3__210shared_ptrI5LevelED2Ev($175);
   label = 46;
  }
  else if ((label|0) == 40) {
   $383 = ___cxa_find_matching_catch_2()|0;
   $384 = tempRet0;
   $164 = $383;
   $165 = $384;
   label = 46;
  }
  else if ((label|0) == 41) {
   $385 = ___cxa_find_matching_catch_2()|0;
   $386 = tempRet0;
   $164 = $385;
   $165 = $386;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($177);
   label = 46;
  }
  else if ((label|0) == 48) {
   $391 = $159;
   $392 = $391&1;
   if ($392) {
    $60 = $161;
    $393 = $60;
    $394 = HEAP32[$393>>2]|0;
    $57 = $393;
    $58 = $394;
    $395 = $58;
    $54 = $56;
    $55 = $395;
    $396 = $54;
    $397 = $55;
    HEAP32[$396>>2] = $397;
    $398 = HEAP32[$56>>2]|0;
    HEAP32[$59>>2] = $398;
    $399 = HEAP32[$59>>2]|0;
    HEAP32[$178>>2] = $399;
    $67 = $161;
    $400 = $67;
    $401 = ((($400)) + 4|0);
    $402 = HEAP32[$401>>2]|0;
    $64 = $400;
    $65 = $402;
    $403 = $65;
    $61 = $63;
    $62 = $403;
    $404 = $61;
    $405 = $62;
    HEAP32[$404>>2] = $405;
    $406 = HEAP32[$63>>2]|0;
    HEAP32[$66>>2] = $406;
    $407 = HEAP32[$66>>2]|0;
    HEAP32[$179>>2] = $407;
    ;HEAP8[$79>>0]=HEAP8[$180>>0]|0;
    ;HEAP8[$80>>0]=HEAP8[$179>>0]|0;HEAP8[$80+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$179+3>>0]|0;
    ;HEAP8[$81>>0]=HEAP8[$178>>0]|0;HEAP8[$81+1>>0]=HEAP8[$178+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$178+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$178+3>>0]|0;
    $78 = $81;
    $408 = $78;
    $409 = HEAP32[$408>>2]|0;
    $74 = $80;
    $410 = $74;
    $411 = HEAP32[$410>>2]|0;
    $75 = $409;
    $76 = $411;
    $77 = $79;
    $412 = $75;
    $413 = $76;
    $414 = $77;
    __THREW__ = 0;
    invoke_viii(417,($412|0),($413|0),($414|0));
    $415 = __THREW__; __THREW__ = 0;
    $416 = $415&1;
    if ($416) {
     label = 20;
     break;
    }
   }
   $110 = $0;
   $111 = $161;
   $417 = $110;
   $418 = $111;
   $109 = $418;
   $419 = $109;
   $420 = ((($419)) + 8|0);
   $108 = $420;
   $421 = $108;
   $107 = $421;
   $422 = $107;
   $106 = $422;
   $423 = $106;
   $94 = $417;
   $95 = $423;
   $424 = $94;
   $93 = $424;
   HEAP32[$424>>2] = 0;
   $425 = ((($424)) + 4|0);
   HEAP32[$425>>2] = 0;
   $426 = ((($424)) + 8|0);
   ;HEAP8[$92>>0]=HEAP8[$96>>0]|0;
   $89 = $426;
   HEAP32[$90>>2] = 0;
   $427 = $89;
   $88 = $90;
   $428 = $88;
   $429 = HEAP32[$428>>2]|0;
   $82 = $92;
   ;HEAP8[$87>>0]=HEAP8[$91>>0]|0;
   $85 = $427;
   HEAP32[$86>>2] = $429;
   $430 = $85;
   $84 = $87;
   $83 = $86;
   $431 = $83;
   $432 = HEAP32[$431>>2]|0;
   HEAP32[$430>>2] = $432;
   $433 = $111;
   $434 = HEAP32[$433>>2]|0;
   HEAP32[$417>>2] = $434;
   $435 = $111;
   $436 = ((($435)) + 4|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = ((($417)) + 4|0);
   HEAP32[$438>>2] = $437;
   $439 = $111;
   $99 = $439;
   $440 = $99;
   $441 = ((($440)) + 8|0);
   $98 = $441;
   $442 = $98;
   $97 = $442;
   $443 = $97;
   $444 = HEAP32[$443>>2]|0;
   $102 = $417;
   $445 = $102;
   $446 = ((($445)) + 8|0);
   $101 = $446;
   $447 = $101;
   $100 = $447;
   $448 = $100;
   HEAP32[$448>>2] = $444;
   $449 = $111;
   $105 = $449;
   $450 = $105;
   $451 = ((($450)) + 8|0);
   $104 = $451;
   $452 = $104;
   $103 = $452;
   $453 = $103;
   HEAP32[$453>>2] = 0;
   $454 = $111;
   $455 = ((($454)) + 4|0);
   HEAP32[$455>>2] = 0;
   $456 = $111;
   HEAP32[$456>>2] = 0;
   $174 = 1;
   __ZNSt3__210shared_ptrI5LevelED2Ev($162);
   __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($161);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 20) {
  $292 = ___cxa_find_matching_catch_2()|0;
  $293 = tempRet0;
  $164 = $292;
  $165 = $293;
 }
 else if ((label|0) == 24) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($172);
  label = 47;
 }
 else if ((label|0) == 46) {
  __ZNSt3__210shared_ptrI5LevelED2Ev($170);
  label = 47;
 }
 if ((label|0) == 47) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($169);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($162);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($161);
 $457 = $164;
 $458 = $165;
 ___resumeException($457|0);
 // unreachable;
}
function __ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__2clENS0_10shared_ptrI5LevelEESE_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 140|0;
 $21 = sp + 64|0;
 $22 = sp + 56|0;
 $25 = sp + 40|0;
 $26 = sp + 32|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 $29 = sp + 8|0;
 $30 = sp;
 $20 = $0;
 $31 = $20;
 $32 = HEAP32[$31>>2]|0;
 switch ($32|0) {
 case 0:  {
  $17 = $21;
  $18 = $1;
  $33 = $17;
  $34 = $18;
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$33>>2] = $35;
  $36 = ((($33)) + 4|0);
  $37 = $18;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$36>>2] = $39;
  $40 = ((($33)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   $43 = ((($33)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($44);
  }
  $15 = $22;
  $16 = $2;
  $45 = $15;
  $46 = $16;
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$45>>2] = $47;
  $48 = ((($45)) + 4|0);
  $49 = $16;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$48>>2] = $51;
  $52 = ((($45)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = ((($45)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($56);
  }
  __THREW__ = 0;
  $57 = (invoke_iii(409,($21|0),($22|0))|0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch_2()|0;
   $61 = tempRet0;
   $23 = $60;
   $24 = $61;
   __ZNSt3__210shared_ptrI5LevelED2Ev($22);
   __ZNSt3__210shared_ptrI5LevelED2Ev($21);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val = $57&1;
   HEAP8[$19>>0] = $$expand_i1_val;
   __ZNSt3__210shared_ptrI5LevelED2Ev($22);
   __ZNSt3__210shared_ptrI5LevelED2Ev($21);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 1:  {
  $13 = $25;
  $14 = $1;
  $62 = $13;
  $63 = $14;
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$62>>2] = $64;
  $65 = ((($62)) + 4|0);
  $66 = $14;
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$65>>2] = $68;
  $69 = ((($62)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = ((($62)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($73);
  }
  $11 = $26;
  $12 = $2;
  $74 = $11;
  $75 = $12;
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$74>>2] = $76;
  $77 = ((($74)) + 4|0);
  $78 = $12;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$77>>2] = $80;
  $81 = ((($74)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = ((($74)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($85);
  }
  __THREW__ = 0;
  $86 = (invoke_iii(410,($25|0),($26|0))|0);
  $87 = __THREW__; __THREW__ = 0;
  $88 = $87&1;
  if ($88) {
   $89 = ___cxa_find_matching_catch_2()|0;
   $90 = tempRet0;
   $23 = $89;
   $24 = $90;
   __ZNSt3__210shared_ptrI5LevelED2Ev($26);
   __ZNSt3__210shared_ptrI5LevelED2Ev($25);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val2 = $86&1;
   HEAP8[$19>>0] = $$expand_i1_val2;
   __ZNSt3__210shared_ptrI5LevelED2Ev($26);
   __ZNSt3__210shared_ptrI5LevelED2Ev($25);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 2:  {
  $9 = $27;
  $10 = $1;
  $91 = $9;
  $92 = $10;
  $93 = HEAP32[$92>>2]|0;
  HEAP32[$91>>2] = $93;
  $94 = ((($91)) + 4|0);
  $95 = $10;
  $96 = ((($95)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$94>>2] = $97;
  $98 = ((($91)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)!=(0|0);
  if ($100) {
   $101 = ((($91)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($102);
  }
  $7 = $28;
  $8 = $2;
  $103 = $7;
  $104 = $8;
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$103>>2] = $105;
  $106 = ((($103)) + 4|0);
  $107 = $8;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$106>>2] = $109;
  $110 = ((($103)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0|0);
  if ($112) {
   $113 = ((($103)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($114);
  }
  __THREW__ = 0;
  $115 = (invoke_iii(411,($27|0),($28|0))|0);
  $116 = __THREW__; __THREW__ = 0;
  $117 = $116&1;
  if ($117) {
   $118 = ___cxa_find_matching_catch_2()|0;
   $119 = tempRet0;
   $23 = $118;
   $24 = $119;
   __ZNSt3__210shared_ptrI5LevelED2Ev($28);
   __ZNSt3__210shared_ptrI5LevelED2Ev($27);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val4 = $115&1;
   HEAP8[$19>>0] = $$expand_i1_val4;
   __ZNSt3__210shared_ptrI5LevelED2Ev($28);
   __ZNSt3__210shared_ptrI5LevelED2Ev($27);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 case 3:  {
  $5 = $29;
  $6 = $1;
  $120 = $5;
  $121 = $6;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$120>>2] = $122;
  $123 = ((($120)) + 4|0);
  $124 = $6;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  HEAP32[$123>>2] = $126;
  $127 = ((($120)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($128|0)!=(0|0);
  if ($129) {
   $130 = ((($120)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($131);
  }
  $3 = $30;
  $4 = $2;
  $132 = $3;
  $133 = $4;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = ((($132)) + 4|0);
  $136 = $4;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  $139 = ((($132)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)!=(0|0);
  if ($141) {
   $142 = ((($132)) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($143);
  }
  __THREW__ = 0;
  $144 = (invoke_iii(412,($29|0),($30|0))|0);
  $145 = __THREW__; __THREW__ = 0;
  $146 = $145&1;
  if ($146) {
   $147 = ___cxa_find_matching_catch_2()|0;
   $148 = tempRet0;
   $23 = $147;
   $24 = $148;
   __ZNSt3__210shared_ptrI5LevelED2Ev($30);
   __ZNSt3__210shared_ptrI5LevelED2Ev($29);
   $150 = $23;
   $151 = $24;
   ___resumeException($150|0);
   // unreachable;
  } else {
   $$expand_i1_val6 = $144&1;
   HEAP8[$19>>0] = $$expand_i1_val6;
   __ZNSt3__210shared_ptrI5LevelED2Ev($30);
   __ZNSt3__210shared_ptrI5LevelED2Ev($29);
   $$pre_trunc = HEAP8[$19>>0]|0;
   $149 = $$pre_trunc&1;
   STACKTOP = sp;return ($149|0);
  }
  break;
 }
 default: {
  _llvm_trap();
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(720|0);
 $10 = sp + 672|0;
 $19 = sp + 40|0;
 $22 = sp + 718|0;
 $36 = sp + 568|0;
 $45 = sp + 32|0;
 $48 = sp + 717|0;
 $62 = sp + 464|0;
 $71 = sp + 24|0;
 $74 = sp + 716|0;
 $88 = sp + 360|0;
 $97 = sp + 16|0;
 $100 = sp + 715|0;
 $114 = sp + 256|0;
 $123 = sp + 8|0;
 $126 = sp + 714|0;
 $140 = sp + 152|0;
 $149 = sp;
 $152 = sp + 713|0;
 $159 = $0;
 $160 = $1;
 $161 = $2;
 $162 = 6;
 L1: while(1) {
  L3: while(1) {
   $171 = $160;
   $172 = $159;
   $173 = $171;
   $174 = $172;
   $175 = (($173) - ($174))|0;
   $176 = (($175|0) / 12)&-1;
   $163 = $176;
   $177 = $163;
   switch ($177|0) {
   case 2:  {
    label = 4;
    break L1;
    break;
   }
   case 3:  {
    label = 6;
    break L1;
    break;
   }
   case 4:  {
    label = 7;
    break L1;
    break;
   }
   case 5:  {
    label = 8;
    break L1;
    break;
   }
   case 1: case 0:  {
    label = 52;
    break L1;
    break;
   }
   default: {
   }
   }
   $233 = $163;
   $234 = ($233|0)<=(6);
   $235 = $159;
   if ($234) {
    label = 10;
    break L1;
   }
   $164 = $235;
   $238 = $160;
   $165 = $238;
   $239 = $165;
   $240 = ((($239)) + -12|0);
   $165 = $240;
   $241 = $163;
   $242 = ($241|0)>=(1000);
   $243 = $163;
   $244 = (($243|0) / 2)&-1;
   $167 = $244;
   $245 = $167;
   $246 = $164;
   $247 = (($246) + (($245*12)|0)|0);
   $164 = $247;
   if ($242) {
    $248 = $167;
    $249 = (($248|0) / 2)&-1;
    $167 = $249;
    $250 = $159;
    $251 = $159;
    $252 = $167;
    $253 = (($251) + (($252*12)|0)|0);
    $254 = $164;
    $255 = $164;
    $256 = $167;
    $257 = (($255) + (($256*12)|0)|0);
    $258 = $165;
    $259 = $161;
    $260 = (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_SF_T_($250,$253,$254,$257,$258,$259)|0);
    $166 = $260;
   } else {
    $261 = $159;
    $262 = $164;
    $263 = $165;
    $264 = $161;
    $265 = (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($261,$262,$263,$264)|0);
    $166 = $265;
   }
   $266 = $159;
   $168 = $266;
   $267 = $165;
   $169 = $267;
   $268 = $161;
   $269 = $168;
   $270 = $164;
   $271 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($268,$269,$270)|0);
   if ($271) {
    break;
   }
   while(1) {
    $272 = $168;
    $273 = $169;
    $274 = ((($273)) + -12|0);
    $169 = $274;
    $275 = ($272|0)==($274|0);
    if ($275) {
     break;
    }
    $370 = $161;
    $371 = $169;
    $372 = $164;
    $373 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($370,$371,$372)|0);
    if ($373) {
     label = 30;
     break L3;
    }
   }
   $276 = $168;
   $277 = ((($276)) + 12|0);
   $168 = $277;
   $278 = $160;
   $169 = $278;
   $279 = $161;
   $280 = $159;
   $281 = $169;
   $282 = ((($281)) + -12|0);
   $169 = $282;
   $283 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($279,$280,$282)|0);
   if (!($283)) {
    while(1) {
     $284 = $168;
     $285 = $169;
     $286 = ($284|0)==($285|0);
     if ($286) {
      label = 52;
      break L1;
     }
     $287 = $161;
     $288 = $159;
     $289 = $168;
     $290 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($287,$288,$289)|0);
     $291 = $168;
     if ($290) {
      break;
     }
     $321 = ((($291)) + 12|0);
     $168 = $321;
    }
    $292 = $169;
    $131 = $291;
    $132 = $292;
    $293 = $131;
    $294 = $132;
    $129 = $293;
    $130 = $294;
    $295 = $129;
    $128 = $295;
    $296 = $128;
    $127 = $296;
    $297 = $127;
    $298 = $130;
    $108 = $298;
    $299 = $108;
    $107 = $299;
    $300 = $107;
    $112 = $297;
    $113 = $300;
    $301 = $112;
    $111 = $301;
    $302 = $111;
    ;HEAP32[$114>>2]=HEAP32[$302>>2]|0;HEAP32[$114+4>>2]=HEAP32[$302+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$302+8>>2]|0;
    $303 = $113;
    $109 = $303;
    $304 = $109;
    $305 = $112;
    ;HEAP32[$305>>2]=HEAP32[$304>>2]|0;HEAP32[$305+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$305+8>>2]=HEAP32[$304+8>>2]|0;
    $110 = $114;
    $306 = $110;
    $307 = $113;
    ;HEAP32[$307>>2]=HEAP32[$306>>2]|0;HEAP32[$307+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$307+8>>2]=HEAP32[$306+8>>2]|0;
    $117 = $295;
    $308 = $117;
    $116 = $308;
    $309 = $116;
    $115 = $309;
    $310 = $115;
    $311 = $130;
    $120 = $311;
    $312 = $120;
    $119 = $312;
    $313 = $119;
    $118 = $313;
    $314 = $118;
    $124 = $310;
    $125 = $314;
    $315 = $124;
    $316 = $125;
    ;HEAP8[$123>>0]=HEAP8[$126>>0]|0;
    $121 = $315;
    $122 = $316;
    $317 = $166;
    $318 = (($317) + 1)|0;
    $166 = $318;
    $319 = $168;
    $320 = ((($319)) + 12|0);
    $168 = $320;
   }
   $322 = $168;
   $323 = $169;
   $324 = ($322|0)==($323|0);
   if ($324) {
    label = 52;
    break L1;
   }
   while(1) {
    while(1) {
     $325 = $161;
     $326 = $159;
     $327 = $168;
     $328 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($325,$326,$327)|0);
     $329 = $328 ^ 1;
     if (!($329)) {
      break;
     }
     $330 = $168;
     $331 = ((($330)) + 12|0);
     $168 = $331;
    }
    while(1) {
     $332 = $161;
     $333 = $159;
     $334 = $169;
     $335 = ((($334)) + -12|0);
     $169 = $335;
     $336 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($332,$333,$335)|0);
     if (!($336)) {
      break;
     }
    }
    $337 = $168;
    $338 = $169;
    $339 = ($337>>>0)>=($338>>>0);
    $340 = $168;
    if ($339) {
     break;
    }
    $341 = $169;
    $105 = $340;
    $106 = $341;
    $342 = $105;
    $343 = $106;
    $103 = $342;
    $104 = $343;
    $344 = $103;
    $102 = $344;
    $345 = $102;
    $101 = $345;
    $346 = $101;
    $347 = $104;
    $82 = $347;
    $348 = $82;
    $81 = $348;
    $349 = $81;
    $86 = $346;
    $87 = $349;
    $350 = $86;
    $85 = $350;
    $351 = $85;
    ;HEAP32[$88>>2]=HEAP32[$351>>2]|0;HEAP32[$88+4>>2]=HEAP32[$351+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$351+8>>2]|0;
    $352 = $87;
    $83 = $352;
    $353 = $83;
    $354 = $86;
    ;HEAP32[$354>>2]=HEAP32[$353>>2]|0;HEAP32[$354+4>>2]=HEAP32[$353+4>>2]|0;HEAP32[$354+8>>2]=HEAP32[$353+8>>2]|0;
    $84 = $88;
    $355 = $84;
    $356 = $87;
    ;HEAP32[$356>>2]=HEAP32[$355>>2]|0;HEAP32[$356+4>>2]=HEAP32[$355+4>>2]|0;HEAP32[$356+8>>2]=HEAP32[$355+8>>2]|0;
    $91 = $344;
    $357 = $91;
    $90 = $357;
    $358 = $90;
    $89 = $358;
    $359 = $89;
    $360 = $104;
    $94 = $360;
    $361 = $94;
    $93 = $361;
    $362 = $93;
    $92 = $362;
    $363 = $92;
    $98 = $359;
    $99 = $363;
    $364 = $98;
    $365 = $99;
    ;HEAP8[$97>>0]=HEAP8[$100>>0]|0;
    $95 = $364;
    $96 = $365;
    $366 = $166;
    $367 = (($366) + 1)|0;
    $166 = $367;
    $368 = $168;
    $369 = ((($368)) + 12|0);
    $168 = $369;
   }
   $159 = $340;
  }
  if ((label|0) == 30) {
   label = 0;
   $374 = $168;
   $375 = $169;
   $79 = $374;
   $80 = $375;
   $376 = $79;
   $377 = $80;
   $77 = $376;
   $78 = $377;
   $378 = $77;
   $76 = $378;
   $379 = $76;
   $75 = $379;
   $380 = $75;
   $381 = $78;
   $56 = $381;
   $382 = $56;
   $55 = $382;
   $383 = $55;
   $60 = $380;
   $61 = $383;
   $384 = $60;
   $59 = $384;
   $385 = $59;
   ;HEAP32[$62>>2]=HEAP32[$385>>2]|0;HEAP32[$62+4>>2]=HEAP32[$385+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$385+8>>2]|0;
   $386 = $61;
   $57 = $386;
   $387 = $57;
   $388 = $60;
   ;HEAP32[$388>>2]=HEAP32[$387>>2]|0;HEAP32[$388+4>>2]=HEAP32[$387+4>>2]|0;HEAP32[$388+8>>2]=HEAP32[$387+8>>2]|0;
   $58 = $62;
   $389 = $58;
   $390 = $61;
   ;HEAP32[$390>>2]=HEAP32[$389>>2]|0;HEAP32[$390+4>>2]=HEAP32[$389+4>>2]|0;HEAP32[$390+8>>2]=HEAP32[$389+8>>2]|0;
   $65 = $378;
   $391 = $65;
   $64 = $391;
   $392 = $64;
   $63 = $392;
   $393 = $63;
   $394 = $78;
   $68 = $394;
   $395 = $68;
   $67 = $395;
   $396 = $67;
   $66 = $396;
   $397 = $66;
   $72 = $393;
   $73 = $397;
   $398 = $72;
   $399 = $73;
   ;HEAP8[$71>>0]=HEAP8[$74>>0]|0;
   $69 = $398;
   $70 = $399;
   $400 = $166;
   $401 = (($400) + 1)|0;
   $166 = $401;
  }
  $402 = $168;
  $403 = ((($402)) + 12|0);
  $168 = $403;
  $404 = $168;
  $405 = $169;
  $406 = ($404>>>0)<($405>>>0);
  L35: do {
   if ($406) {
    while(1) {
     while(1) {
      $407 = $161;
      $408 = $168;
      $409 = $164;
      $410 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($407,$408,$409)|0);
      if (!($410)) {
       break;
      }
      $411 = $168;
      $412 = ((($411)) + 12|0);
      $168 = $412;
     }
     while(1) {
      $413 = $161;
      $414 = $169;
      $415 = ((($414)) + -12|0);
      $169 = $415;
      $416 = $164;
      $417 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($413,$415,$416)|0);
      $418 = $417 ^ 1;
      if (!($418)) {
       break;
      }
     }
     $419 = $168;
     $420 = $169;
     $421 = ($419>>>0)>($420>>>0);
     if ($421) {
      break L35;
     }
     $422 = $168;
     $423 = $169;
     $53 = $422;
     $54 = $423;
     $424 = $53;
     $425 = $54;
     $51 = $424;
     $52 = $425;
     $426 = $51;
     $50 = $426;
     $427 = $50;
     $49 = $427;
     $428 = $49;
     $429 = $52;
     $30 = $429;
     $430 = $30;
     $29 = $430;
     $431 = $29;
     $34 = $428;
     $35 = $431;
     $432 = $34;
     $33 = $432;
     $433 = $33;
     ;HEAP32[$36>>2]=HEAP32[$433>>2]|0;HEAP32[$36+4>>2]=HEAP32[$433+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$433+8>>2]|0;
     $434 = $35;
     $31 = $434;
     $435 = $31;
     $436 = $34;
     ;HEAP32[$436>>2]=HEAP32[$435>>2]|0;HEAP32[$436+4>>2]=HEAP32[$435+4>>2]|0;HEAP32[$436+8>>2]=HEAP32[$435+8>>2]|0;
     $32 = $36;
     $437 = $32;
     $438 = $35;
     ;HEAP32[$438>>2]=HEAP32[$437>>2]|0;HEAP32[$438+4>>2]=HEAP32[$437+4>>2]|0;HEAP32[$438+8>>2]=HEAP32[$437+8>>2]|0;
     $39 = $426;
     $439 = $39;
     $38 = $439;
     $440 = $38;
     $37 = $440;
     $441 = $37;
     $442 = $52;
     $42 = $442;
     $443 = $42;
     $41 = $443;
     $444 = $41;
     $40 = $444;
     $445 = $40;
     $46 = $441;
     $47 = $445;
     $446 = $46;
     $447 = $47;
     ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;
     $43 = $446;
     $44 = $447;
     $448 = $166;
     $449 = (($448) + 1)|0;
     $166 = $449;
     $450 = $164;
     $451 = $168;
     $452 = ($450|0)==($451|0);
     if ($452) {
      $453 = $169;
      $164 = $453;
     }
     $454 = $168;
     $455 = ((($454)) + 12|0);
     $168 = $455;
    }
   }
  } while(0);
  $456 = $168;
  $457 = $164;
  $458 = ($456|0)!=($457|0);
  if ($458) {
   $459 = $161;
   $460 = $164;
   $461 = $168;
   $462 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($459,$460,$461)|0);
   if ($462) {
    $463 = $168;
    $464 = $164;
    $27 = $463;
    $28 = $464;
    $465 = $27;
    $466 = $28;
    $25 = $465;
    $26 = $466;
    $467 = $25;
    $24 = $467;
    $468 = $24;
    $23 = $468;
    $469 = $23;
    $470 = $26;
    $4 = $470;
    $471 = $4;
    $3 = $471;
    $472 = $3;
    $8 = $469;
    $9 = $472;
    $473 = $8;
    $7 = $473;
    $474 = $7;
    ;HEAP32[$10>>2]=HEAP32[$474>>2]|0;HEAP32[$10+4>>2]=HEAP32[$474+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$474+8>>2]|0;
    $475 = $9;
    $5 = $475;
    $476 = $5;
    $477 = $8;
    ;HEAP32[$477>>2]=HEAP32[$476>>2]|0;HEAP32[$477+4>>2]=HEAP32[$476+4>>2]|0;HEAP32[$477+8>>2]=HEAP32[$476+8>>2]|0;
    $6 = $10;
    $478 = $6;
    $479 = $9;
    ;HEAP32[$479>>2]=HEAP32[$478>>2]|0;HEAP32[$479+4>>2]=HEAP32[$478+4>>2]|0;HEAP32[$479+8>>2]=HEAP32[$478+8>>2]|0;
    $13 = $467;
    $480 = $13;
    $12 = $480;
    $481 = $12;
    $11 = $481;
    $482 = $11;
    $483 = $26;
    $16 = $483;
    $484 = $16;
    $15 = $484;
    $485 = $15;
    $14 = $485;
    $486 = $14;
    $20 = $482;
    $21 = $486;
    $487 = $20;
    $488 = $21;
    ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
    $17 = $487;
    $18 = $488;
    $489 = $166;
    $490 = (($489) + 1)|0;
    $166 = $490;
   }
  }
  $491 = $166;
  $492 = ($491|0)==(0);
  do {
   if ($492) {
    $493 = $159;
    $494 = $168;
    $495 = $161;
    $496 = (__ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEbT0_SF_T_($493,$494,$495)|0);
    $497 = $496&1;
    $170 = $497;
    $498 = $168;
    $499 = ((($498)) + 12|0);
    $500 = $160;
    $501 = $161;
    $502 = (__ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEbT0_SF_T_($499,$500,$501)|0);
    $503 = $170;
    $504 = $503&1;
    if ($502) {
     if ($504) {
      label = 52;
      break L1;
     }
     $505 = $168;
     $160 = $505;
     continue L1;
    } else {
     if (!($504)) {
      break;
     }
     $506 = $168;
     $507 = ((($506)) + 12|0);
     $168 = $507;
     $159 = $507;
     continue L1;
    }
   }
  } while(0);
  $508 = $168;
  $509 = $159;
  $510 = $508;
  $511 = $509;
  $512 = (($510) - ($511))|0;
  $513 = (($512|0) / 12)&-1;
  $514 = $160;
  $515 = $168;
  $516 = $514;
  $517 = $515;
  $518 = (($516) - ($517))|0;
  $519 = (($518|0) / 12)&-1;
  $520 = ($513|0)<($519|0);
  if ($520) {
   $521 = $159;
   $522 = $168;
   $523 = $161;
   __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_($521,$522,$523);
   $524 = $168;
   $525 = ((($524)) + 12|0);
   $168 = $525;
   $159 = $525;
   continue;
  } else {
   $526 = $168;
   $527 = ((($526)) + 12|0);
   $528 = $160;
   $529 = $161;
   __ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_($527,$528,$529);
   $530 = $168;
   $160 = $530;
   continue;
  }
 }
 if ((label|0) == 4) {
  $178 = $161;
  $179 = $160;
  $180 = ((($179)) + -12|0);
  $160 = $180;
  $181 = $159;
  $182 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($178,$180,$181)|0);
  if (!($182)) {
   STACKTOP = sp;return;
  }
  $183 = $159;
  $184 = $160;
  $157 = $183;
  $158 = $184;
  $185 = $157;
  $186 = $158;
  $155 = $185;
  $156 = $186;
  $187 = $155;
  $154 = $187;
  $188 = $154;
  $153 = $188;
  $189 = $153;
  $190 = $156;
  $134 = $190;
  $191 = $134;
  $133 = $191;
  $192 = $133;
  $138 = $189;
  $139 = $192;
  $193 = $138;
  $137 = $193;
  $194 = $137;
  ;HEAP32[$140>>2]=HEAP32[$194>>2]|0;HEAP32[$140+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$140+8>>2]=HEAP32[$194+8>>2]|0;
  $195 = $139;
  $135 = $195;
  $196 = $135;
  $197 = $138;
  ;HEAP32[$197>>2]=HEAP32[$196>>2]|0;HEAP32[$197+4>>2]=HEAP32[$196+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$196+8>>2]|0;
  $136 = $140;
  $198 = $136;
  $199 = $139;
  ;HEAP32[$199>>2]=HEAP32[$198>>2]|0;HEAP32[$199+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$199+8>>2]=HEAP32[$198+8>>2]|0;
  $143 = $187;
  $200 = $143;
  $142 = $200;
  $201 = $142;
  $141 = $201;
  $202 = $141;
  $203 = $156;
  $146 = $203;
  $204 = $146;
  $145 = $204;
  $205 = $145;
  $144 = $205;
  $206 = $144;
  $150 = $202;
  $151 = $206;
  $207 = $150;
  $208 = $151;
  ;HEAP8[$149>>0]=HEAP8[$152>>0]|0;
  $147 = $207;
  $148 = $208;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  $209 = $159;
  $210 = $159;
  $211 = ((($210)) + 12|0);
  $212 = $160;
  $213 = ((($212)) + -12|0);
  $160 = $213;
  $214 = $161;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($209,$211,$213,$214)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $215 = $159;
  $216 = $159;
  $217 = ((($216)) + 12|0);
  $218 = $159;
  $219 = ((($218)) + 24|0);
  $220 = $160;
  $221 = ((($220)) + -12|0);
  $160 = $221;
  $222 = $161;
  (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_T_($215,$217,$219,$221,$222)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $223 = $159;
  $224 = $159;
  $225 = ((($224)) + 12|0);
  $226 = $159;
  $227 = ((($226)) + 24|0);
  $228 = $159;
  $229 = ((($228)) + 36|0);
  $230 = $160;
  $231 = ((($230)) + -12|0);
  $160 = $231;
  $232 = $161;
  (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_SF_T_($223,$225,$227,$229,$231,$232)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $236 = $160;
  $237 = $161;
  __ZNSt3__218__insertion_sort_3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_($235,$236,$237);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 52) {
  STACKTOP = sp;return;
 }
}
function __ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $23 = $0;
 $24 = $1;
 $25 = $2;
 $26 = $24;
 $22 = $26;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $20 = $28;
 $29 = $20;
 $19 = $29;
 $30 = $19;
 $31 = ((($30)) + 11|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 & 128;
 $35 = ($34|0)!=(0);
 if ($35) {
  $15 = $27;
  $36 = $15;
  $14 = $36;
  $37 = $14;
  $13 = $37;
  $38 = $13;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $69 = $40;
 } else {
  $18 = $27;
  $41 = $18;
  $17 = $41;
  $42 = $17;
  $16 = $42;
  $43 = $16;
  $44 = ((($43)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $69 = $46;
 }
 $47 = $25;
 $12 = $47;
 $48 = $12;
 $11 = $48;
 $49 = $11;
 $10 = $49;
 $50 = $10;
 $9 = $50;
 $51 = $9;
 $52 = ((($51)) + 11|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 & 128;
 $56 = ($55|0)!=(0);
 if ($56) {
  $5 = $48;
  $57 = $5;
  $4 = $57;
  $58 = $4;
  $3 = $58;
  $59 = $3;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $70 = $61;
  $68 = ($69>>>0)<($70>>>0);
  STACKTOP = sp;return ($68|0);
 } else {
  $8 = $48;
  $62 = $8;
  $7 = $62;
  $63 = $7;
  $6 = $63;
  $64 = $6;
  $65 = ((($64)) + 11|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $70 = $67;
  $68 = ($69>>>0)<($70>>>0);
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $11 = sp + 540|0;
 $20 = sp + 32|0;
 $23 = sp + 584|0;
 $37 = sp + 436|0;
 $46 = sp + 24|0;
 $49 = sp + 583|0;
 $63 = sp + 332|0;
 $72 = sp + 16|0;
 $75 = sp + 582|0;
 $89 = sp + 228|0;
 $98 = sp + 8|0;
 $101 = sp + 581|0;
 $115 = sp + 124|0;
 $124 = sp;
 $127 = sp + 580|0;
 $135 = $0;
 $136 = $1;
 $137 = $2;
 $138 = $3;
 $139 = 0;
 $140 = $138;
 $141 = $136;
 $142 = $135;
 $143 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($140,$141,$142)|0);
 $144 = $138;
 $145 = $137;
 $146 = $136;
 $147 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($144,$145,$146)|0);
 if ($143) {
  $206 = $135;
  if ($147) {
   $207 = $137;
   $28 = $206;
   $29 = $207;
   $208 = $28;
   $209 = $29;
   $26 = $208;
   $27 = $209;
   $210 = $26;
   $25 = $210;
   $211 = $25;
   $24 = $211;
   $212 = $24;
   $213 = $27;
   $5 = $213;
   $214 = $5;
   $4 = $214;
   $215 = $4;
   $9 = $212;
   $10 = $215;
   $216 = $9;
   $8 = $216;
   $217 = $8;
   ;HEAP32[$11>>2]=HEAP32[$217>>2]|0;HEAP32[$11+4>>2]=HEAP32[$217+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$217+8>>2]|0;
   $218 = $10;
   $6 = $218;
   $219 = $6;
   $220 = $9;
   ;HEAP32[$220>>2]=HEAP32[$219>>2]|0;HEAP32[$220+4>>2]=HEAP32[$219+4>>2]|0;HEAP32[$220+8>>2]=HEAP32[$219+8>>2]|0;
   $7 = $11;
   $221 = $7;
   $222 = $10;
   ;HEAP32[$222>>2]=HEAP32[$221>>2]|0;HEAP32[$222+4>>2]=HEAP32[$221+4>>2]|0;HEAP32[$222+8>>2]=HEAP32[$221+8>>2]|0;
   $14 = $210;
   $223 = $14;
   $13 = $223;
   $224 = $13;
   $12 = $224;
   $225 = $12;
   $226 = $27;
   $17 = $226;
   $227 = $17;
   $16 = $227;
   $228 = $16;
   $15 = $228;
   $229 = $15;
   $21 = $225;
   $22 = $229;
   $230 = $21;
   $231 = $22;
   ;HEAP8[$20>>0]=HEAP8[$23>>0]|0;
   $18 = $230;
   $19 = $231;
   $139 = 1;
   $232 = $139;
   $134 = $232;
   $289 = $134;
   STACKTOP = sp;return ($289|0);
  }
  $233 = $136;
  $54 = $206;
  $55 = $233;
  $234 = $54;
  $235 = $55;
  $52 = $234;
  $53 = $235;
  $236 = $52;
  $51 = $236;
  $237 = $51;
  $50 = $237;
  $238 = $50;
  $239 = $53;
  $31 = $239;
  $240 = $31;
  $30 = $240;
  $241 = $30;
  $35 = $238;
  $36 = $241;
  $242 = $35;
  $34 = $242;
  $243 = $34;
  ;HEAP32[$37>>2]=HEAP32[$243>>2]|0;HEAP32[$37+4>>2]=HEAP32[$243+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$243+8>>2]|0;
  $244 = $36;
  $32 = $244;
  $245 = $32;
  $246 = $35;
  ;HEAP32[$246>>2]=HEAP32[$245>>2]|0;HEAP32[$246+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$246+8>>2]=HEAP32[$245+8>>2]|0;
  $33 = $37;
  $247 = $33;
  $248 = $36;
  ;HEAP32[$248>>2]=HEAP32[$247>>2]|0;HEAP32[$248+4>>2]=HEAP32[$247+4>>2]|0;HEAP32[$248+8>>2]=HEAP32[$247+8>>2]|0;
  $40 = $236;
  $249 = $40;
  $39 = $249;
  $250 = $39;
  $38 = $250;
  $251 = $38;
  $252 = $53;
  $43 = $252;
  $253 = $43;
  $42 = $253;
  $254 = $42;
  $41 = $254;
  $255 = $41;
  $47 = $251;
  $48 = $255;
  $256 = $47;
  $257 = $48;
  ;HEAP8[$46>>0]=HEAP8[$49>>0]|0;
  $44 = $256;
  $45 = $257;
  $139 = 1;
  $258 = $138;
  $259 = $137;
  $260 = $136;
  $261 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($258,$259,$260)|0);
  if ($261) {
   $262 = $136;
   $263 = $137;
   $106 = $262;
   $107 = $263;
   $264 = $106;
   $265 = $107;
   $104 = $264;
   $105 = $265;
   $266 = $104;
   $103 = $266;
   $267 = $103;
   $102 = $267;
   $268 = $102;
   $269 = $105;
   $83 = $269;
   $270 = $83;
   $82 = $270;
   $271 = $82;
   $87 = $268;
   $88 = $271;
   $272 = $87;
   $86 = $272;
   $273 = $86;
   ;HEAP32[$89>>2]=HEAP32[$273>>2]|0;HEAP32[$89+4>>2]=HEAP32[$273+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$273+8>>2]|0;
   $274 = $88;
   $84 = $274;
   $275 = $84;
   $276 = $87;
   ;HEAP32[$276>>2]=HEAP32[$275>>2]|0;HEAP32[$276+4>>2]=HEAP32[$275+4>>2]|0;HEAP32[$276+8>>2]=HEAP32[$275+8>>2]|0;
   $85 = $89;
   $277 = $85;
   $278 = $88;
   ;HEAP32[$278>>2]=HEAP32[$277>>2]|0;HEAP32[$278+4>>2]=HEAP32[$277+4>>2]|0;HEAP32[$278+8>>2]=HEAP32[$277+8>>2]|0;
   $92 = $266;
   $279 = $92;
   $91 = $279;
   $280 = $91;
   $90 = $280;
   $281 = $90;
   $282 = $105;
   $95 = $282;
   $283 = $95;
   $94 = $283;
   $284 = $94;
   $93 = $284;
   $285 = $93;
   $99 = $281;
   $100 = $285;
   $286 = $99;
   $287 = $100;
   ;HEAP8[$98>>0]=HEAP8[$101>>0]|0;
   $96 = $286;
   $97 = $287;
   $139 = 2;
  }
  $288 = $139;
  $134 = $288;
  $289 = $134;
  STACKTOP = sp;return ($289|0);
 } else {
  if (!($147)) {
   $148 = $139;
   $134 = $148;
   $289 = $134;
   STACKTOP = sp;return ($289|0);
  }
  $149 = $136;
  $150 = $137;
  $132 = $149;
  $133 = $150;
  $151 = $132;
  $152 = $133;
  $130 = $151;
  $131 = $152;
  $153 = $130;
  $129 = $153;
  $154 = $129;
  $128 = $154;
  $155 = $128;
  $156 = $131;
  $109 = $156;
  $157 = $109;
  $108 = $157;
  $158 = $108;
  $113 = $155;
  $114 = $158;
  $159 = $113;
  $112 = $159;
  $160 = $112;
  ;HEAP32[$115>>2]=HEAP32[$160>>2]|0;HEAP32[$115+4>>2]=HEAP32[$160+4>>2]|0;HEAP32[$115+8>>2]=HEAP32[$160+8>>2]|0;
  $161 = $114;
  $110 = $161;
  $162 = $110;
  $163 = $113;
  ;HEAP32[$163>>2]=HEAP32[$162>>2]|0;HEAP32[$163+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$163+8>>2]=HEAP32[$162+8>>2]|0;
  $111 = $115;
  $164 = $111;
  $165 = $114;
  ;HEAP32[$165>>2]=HEAP32[$164>>2]|0;HEAP32[$165+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$165+8>>2]=HEAP32[$164+8>>2]|0;
  $118 = $153;
  $166 = $118;
  $117 = $166;
  $167 = $117;
  $116 = $167;
  $168 = $116;
  $169 = $131;
  $121 = $169;
  $170 = $121;
  $120 = $170;
  $171 = $120;
  $119 = $171;
  $172 = $119;
  $125 = $168;
  $126 = $172;
  $173 = $125;
  $174 = $126;
  ;HEAP8[$124>>0]=HEAP8[$127>>0]|0;
  $122 = $173;
  $123 = $174;
  $139 = 1;
  $175 = $138;
  $176 = $136;
  $177 = $135;
  $178 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($175,$176,$177)|0);
  if ($178) {
   $179 = $135;
   $180 = $136;
   $80 = $179;
   $81 = $180;
   $181 = $80;
   $182 = $81;
   $78 = $181;
   $79 = $182;
   $183 = $78;
   $77 = $183;
   $184 = $77;
   $76 = $184;
   $185 = $76;
   $186 = $79;
   $57 = $186;
   $187 = $57;
   $56 = $187;
   $188 = $56;
   $61 = $185;
   $62 = $188;
   $189 = $61;
   $60 = $189;
   $190 = $60;
   ;HEAP32[$63>>2]=HEAP32[$190>>2]|0;HEAP32[$63+4>>2]=HEAP32[$190+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$190+8>>2]|0;
   $191 = $62;
   $58 = $191;
   $192 = $58;
   $193 = $61;
   ;HEAP32[$193>>2]=HEAP32[$192>>2]|0;HEAP32[$193+4>>2]=HEAP32[$192+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$192+8>>2]|0;
   $59 = $63;
   $194 = $59;
   $195 = $62;
   ;HEAP32[$195>>2]=HEAP32[$194>>2]|0;HEAP32[$195+4>>2]=HEAP32[$194+4>>2]|0;HEAP32[$195+8>>2]=HEAP32[$194+8>>2]|0;
   $66 = $183;
   $196 = $66;
   $65 = $196;
   $197 = $65;
   $64 = $197;
   $198 = $64;
   $199 = $79;
   $69 = $199;
   $200 = $69;
   $68 = $200;
   $201 = $68;
   $67 = $201;
   $202 = $67;
   $73 = $198;
   $74 = $202;
   $203 = $73;
   $204 = $74;
   ;HEAP8[$72>>0]=HEAP8[$75>>0]|0;
   $70 = $203;
   $71 = $204;
   $139 = 2;
  }
  $205 = $139;
  $134 = $205;
  $289 = $134;
  STACKTOP = sp;return ($289|0);
 }
 return (0)|0;
}
function __ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_T_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $12 = sp + 316|0;
 $21 = sp + 16|0;
 $24 = sp + 358|0;
 $38 = sp + 212|0;
 $47 = sp + 8|0;
 $50 = sp + 357|0;
 $64 = sp + 108|0;
 $73 = sp;
 $76 = sp + 356|0;
 $83 = $0;
 $84 = $1;
 $85 = $2;
 $86 = $3;
 $87 = $4;
 $89 = $83;
 $90 = $84;
 $91 = $85;
 $92 = $87;
 $93 = (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($89,$90,$91,$92)|0);
 $88 = $93;
 $94 = $87;
 $95 = $86;
 $96 = $85;
 $97 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($94,$95,$96)|0);
 if (!($97)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $98 = $85;
 $99 = $86;
 $81 = $98;
 $82 = $99;
 $100 = $81;
 $101 = $82;
 $79 = $100;
 $80 = $101;
 $102 = $79;
 $78 = $102;
 $103 = $78;
 $77 = $103;
 $104 = $77;
 $105 = $80;
 $58 = $105;
 $106 = $58;
 $57 = $106;
 $107 = $57;
 $62 = $104;
 $63 = $107;
 $108 = $62;
 $61 = $108;
 $109 = $61;
 ;HEAP32[$64>>2]=HEAP32[$109>>2]|0;HEAP32[$64+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$109+8>>2]|0;
 $110 = $63;
 $59 = $110;
 $111 = $59;
 $112 = $62;
 ;HEAP32[$112>>2]=HEAP32[$111>>2]|0;HEAP32[$112+4>>2]=HEAP32[$111+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$111+8>>2]|0;
 $60 = $64;
 $113 = $60;
 $114 = $63;
 ;HEAP32[$114>>2]=HEAP32[$113>>2]|0;HEAP32[$114+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$114+8>>2]=HEAP32[$113+8>>2]|0;
 $67 = $102;
 $115 = $67;
 $66 = $115;
 $116 = $66;
 $65 = $116;
 $117 = $65;
 $118 = $80;
 $70 = $118;
 $119 = $70;
 $69 = $119;
 $120 = $69;
 $68 = $120;
 $121 = $68;
 $74 = $117;
 $75 = $121;
 $122 = $74;
 $123 = $75;
 ;HEAP8[$73>>0]=HEAP8[$76>>0]|0;
 $71 = $122;
 $72 = $123;
 $124 = $88;
 $125 = (($124) + 1)|0;
 $88 = $125;
 $126 = $87;
 $127 = $85;
 $128 = $84;
 $129 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($126,$127,$128)|0);
 if (!($129)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $130 = $84;
 $131 = $85;
 $29 = $130;
 $30 = $131;
 $132 = $29;
 $133 = $30;
 $27 = $132;
 $28 = $133;
 $134 = $27;
 $26 = $134;
 $135 = $26;
 $25 = $135;
 $136 = $25;
 $137 = $28;
 $6 = $137;
 $138 = $6;
 $5 = $138;
 $139 = $5;
 $10 = $136;
 $11 = $139;
 $140 = $10;
 $9 = $140;
 $141 = $9;
 ;HEAP32[$12>>2]=HEAP32[$141>>2]|0;HEAP32[$12+4>>2]=HEAP32[$141+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$141+8>>2]|0;
 $142 = $11;
 $7 = $142;
 $143 = $7;
 $144 = $10;
 ;HEAP32[$144>>2]=HEAP32[$143>>2]|0;HEAP32[$144+4>>2]=HEAP32[$143+4>>2]|0;HEAP32[$144+8>>2]=HEAP32[$143+8>>2]|0;
 $8 = $12;
 $145 = $8;
 $146 = $11;
 ;HEAP32[$146>>2]=HEAP32[$145>>2]|0;HEAP32[$146+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$146+8>>2]=HEAP32[$145+8>>2]|0;
 $15 = $134;
 $147 = $15;
 $14 = $147;
 $148 = $14;
 $13 = $148;
 $149 = $13;
 $150 = $28;
 $18 = $150;
 $151 = $18;
 $17 = $151;
 $152 = $17;
 $16 = $152;
 $153 = $16;
 $22 = $149;
 $23 = $153;
 $154 = $22;
 $155 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $154;
 $20 = $155;
 $156 = $88;
 $157 = (($156) + 1)|0;
 $88 = $157;
 $158 = $87;
 $159 = $84;
 $160 = $83;
 $161 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($158,$159,$160)|0);
 if (!($161)) {
  $190 = $88;
  STACKTOP = sp;return ($190|0);
 }
 $162 = $83;
 $163 = $84;
 $55 = $162;
 $56 = $163;
 $164 = $55;
 $165 = $56;
 $53 = $164;
 $54 = $165;
 $166 = $53;
 $52 = $166;
 $167 = $52;
 $51 = $167;
 $168 = $51;
 $169 = $54;
 $32 = $169;
 $170 = $32;
 $31 = $170;
 $171 = $31;
 $36 = $168;
 $37 = $171;
 $172 = $36;
 $35 = $172;
 $173 = $35;
 ;HEAP32[$38>>2]=HEAP32[$173>>2]|0;HEAP32[$38+4>>2]=HEAP32[$173+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$173+8>>2]|0;
 $174 = $37;
 $33 = $174;
 $175 = $33;
 $176 = $36;
 ;HEAP32[$176>>2]=HEAP32[$175>>2]|0;HEAP32[$176+4>>2]=HEAP32[$175+4>>2]|0;HEAP32[$176+8>>2]=HEAP32[$175+8>>2]|0;
 $34 = $38;
 $177 = $34;
 $178 = $37;
 ;HEAP32[$178>>2]=HEAP32[$177>>2]|0;HEAP32[$178+4>>2]=HEAP32[$177+4>>2]|0;HEAP32[$178+8>>2]=HEAP32[$177+8>>2]|0;
 $41 = $166;
 $179 = $41;
 $40 = $179;
 $180 = $40;
 $39 = $180;
 $181 = $39;
 $182 = $54;
 $44 = $182;
 $183 = $44;
 $43 = $183;
 $184 = $43;
 $42 = $184;
 $185 = $42;
 $48 = $181;
 $49 = $185;
 $186 = $48;
 $187 = $49;
 ;HEAP8[$47>>0]=HEAP8[$50>>0]|0;
 $45 = $186;
 $46 = $187;
 $188 = $88;
 $189 = (($188) + 1)|0;
 $88 = $189;
 $190 = $88;
 STACKTOP = sp;return ($190|0);
}
function __ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_SF_T_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $13 = sp + 432|0;
 $22 = sp + 24|0;
 $25 = sp + 475|0;
 $39 = sp + 328|0;
 $48 = sp + 16|0;
 $51 = sp + 474|0;
 $65 = sp + 224|0;
 $74 = sp + 8|0;
 $77 = sp + 473|0;
 $91 = sp + 120|0;
 $100 = sp;
 $103 = sp + 472|0;
 $110 = $0;
 $111 = $1;
 $112 = $2;
 $113 = $3;
 $114 = $4;
 $115 = $5;
 $117 = $110;
 $118 = $111;
 $119 = $112;
 $120 = $113;
 $121 = $115;
 $122 = (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_T_($117,$118,$119,$120,$121)|0);
 $116 = $122;
 $123 = $115;
 $124 = $114;
 $125 = $113;
 $126 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($123,$124,$125)|0);
 if (!($126)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $127 = $113;
 $128 = $114;
 $108 = $127;
 $109 = $128;
 $129 = $108;
 $130 = $109;
 $106 = $129;
 $107 = $130;
 $131 = $106;
 $105 = $131;
 $132 = $105;
 $104 = $132;
 $133 = $104;
 $134 = $107;
 $85 = $134;
 $135 = $85;
 $84 = $135;
 $136 = $84;
 $89 = $133;
 $90 = $136;
 $137 = $89;
 $88 = $137;
 $138 = $88;
 ;HEAP32[$91>>2]=HEAP32[$138>>2]|0;HEAP32[$91+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$91+8>>2]=HEAP32[$138+8>>2]|0;
 $139 = $90;
 $86 = $139;
 $140 = $86;
 $141 = $89;
 ;HEAP32[$141>>2]=HEAP32[$140>>2]|0;HEAP32[$141+4>>2]=HEAP32[$140+4>>2]|0;HEAP32[$141+8>>2]=HEAP32[$140+8>>2]|0;
 $87 = $91;
 $142 = $87;
 $143 = $90;
 ;HEAP32[$143>>2]=HEAP32[$142>>2]|0;HEAP32[$143+4>>2]=HEAP32[$142+4>>2]|0;HEAP32[$143+8>>2]=HEAP32[$142+8>>2]|0;
 $94 = $131;
 $144 = $94;
 $93 = $144;
 $145 = $93;
 $92 = $145;
 $146 = $92;
 $147 = $107;
 $97 = $147;
 $148 = $97;
 $96 = $148;
 $149 = $96;
 $95 = $149;
 $150 = $95;
 $101 = $146;
 $102 = $150;
 $151 = $101;
 $152 = $102;
 ;HEAP8[$100>>0]=HEAP8[$103>>0]|0;
 $98 = $151;
 $99 = $152;
 $153 = $116;
 $154 = (($153) + 1)|0;
 $116 = $154;
 $155 = $115;
 $156 = $113;
 $157 = $112;
 $158 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($155,$156,$157)|0);
 if (!($158)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $159 = $112;
 $160 = $113;
 $56 = $159;
 $57 = $160;
 $161 = $56;
 $162 = $57;
 $54 = $161;
 $55 = $162;
 $163 = $54;
 $53 = $163;
 $164 = $53;
 $52 = $164;
 $165 = $52;
 $166 = $55;
 $33 = $166;
 $167 = $33;
 $32 = $167;
 $168 = $32;
 $37 = $165;
 $38 = $168;
 $169 = $37;
 $36 = $169;
 $170 = $36;
 ;HEAP32[$39>>2]=HEAP32[$170>>2]|0;HEAP32[$39+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$170+8>>2]|0;
 $171 = $38;
 $34 = $171;
 $172 = $34;
 $173 = $37;
 ;HEAP32[$173>>2]=HEAP32[$172>>2]|0;HEAP32[$173+4>>2]=HEAP32[$172+4>>2]|0;HEAP32[$173+8>>2]=HEAP32[$172+8>>2]|0;
 $35 = $39;
 $174 = $35;
 $175 = $38;
 ;HEAP32[$175>>2]=HEAP32[$174>>2]|0;HEAP32[$175+4>>2]=HEAP32[$174+4>>2]|0;HEAP32[$175+8>>2]=HEAP32[$174+8>>2]|0;
 $42 = $163;
 $176 = $42;
 $41 = $176;
 $177 = $41;
 $40 = $177;
 $178 = $40;
 $179 = $55;
 $45 = $179;
 $180 = $45;
 $44 = $180;
 $181 = $44;
 $43 = $181;
 $182 = $43;
 $49 = $178;
 $50 = $182;
 $183 = $49;
 $184 = $50;
 ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
 $46 = $183;
 $47 = $184;
 $185 = $116;
 $186 = (($185) + 1)|0;
 $116 = $186;
 $187 = $115;
 $188 = $112;
 $189 = $111;
 $190 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($187,$188,$189)|0);
 if (!($190)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $191 = $111;
 $192 = $112;
 $30 = $191;
 $31 = $192;
 $193 = $30;
 $194 = $31;
 $28 = $193;
 $29 = $194;
 $195 = $28;
 $27 = $195;
 $196 = $27;
 $26 = $196;
 $197 = $26;
 $198 = $29;
 $7 = $198;
 $199 = $7;
 $6 = $199;
 $200 = $6;
 $11 = $197;
 $12 = $200;
 $201 = $11;
 $10 = $201;
 $202 = $10;
 ;HEAP32[$13>>2]=HEAP32[$202>>2]|0;HEAP32[$13+4>>2]=HEAP32[$202+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$202+8>>2]|0;
 $203 = $12;
 $8 = $203;
 $204 = $8;
 $205 = $11;
 ;HEAP32[$205>>2]=HEAP32[$204>>2]|0;HEAP32[$205+4>>2]=HEAP32[$204+4>>2]|0;HEAP32[$205+8>>2]=HEAP32[$204+8>>2]|0;
 $9 = $13;
 $206 = $9;
 $207 = $12;
 ;HEAP32[$207>>2]=HEAP32[$206>>2]|0;HEAP32[$207+4>>2]=HEAP32[$206+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$206+8>>2]|0;
 $16 = $195;
 $208 = $16;
 $15 = $208;
 $209 = $15;
 $14 = $209;
 $210 = $14;
 $211 = $29;
 $19 = $211;
 $212 = $19;
 $18 = $212;
 $213 = $18;
 $17 = $213;
 $214 = $17;
 $23 = $210;
 $24 = $214;
 $215 = $23;
 $216 = $24;
 ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
 $20 = $215;
 $21 = $216;
 $217 = $116;
 $218 = (($217) + 1)|0;
 $116 = $218;
 $219 = $115;
 $220 = $111;
 $221 = $110;
 $222 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($219,$220,$221)|0);
 if (!($222)) {
  $251 = $116;
  STACKTOP = sp;return ($251|0);
 }
 $223 = $110;
 $224 = $111;
 $82 = $223;
 $83 = $224;
 $225 = $82;
 $226 = $83;
 $80 = $225;
 $81 = $226;
 $227 = $80;
 $79 = $227;
 $228 = $79;
 $78 = $228;
 $229 = $78;
 $230 = $81;
 $59 = $230;
 $231 = $59;
 $58 = $231;
 $232 = $58;
 $63 = $229;
 $64 = $232;
 $233 = $63;
 $62 = $233;
 $234 = $62;
 ;HEAP32[$65>>2]=HEAP32[$234>>2]|0;HEAP32[$65+4>>2]=HEAP32[$234+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$234+8>>2]|0;
 $235 = $64;
 $60 = $235;
 $236 = $60;
 $237 = $63;
 ;HEAP32[$237>>2]=HEAP32[$236>>2]|0;HEAP32[$237+4>>2]=HEAP32[$236+4>>2]|0;HEAP32[$237+8>>2]=HEAP32[$236+8>>2]|0;
 $61 = $65;
 $238 = $61;
 $239 = $64;
 ;HEAP32[$239>>2]=HEAP32[$238>>2]|0;HEAP32[$239+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$239+8>>2]=HEAP32[$238+8>>2]|0;
 $68 = $227;
 $240 = $68;
 $67 = $240;
 $241 = $67;
 $66 = $241;
 $242 = $66;
 $243 = $81;
 $71 = $243;
 $244 = $71;
 $70 = $244;
 $245 = $70;
 $69 = $245;
 $246 = $69;
 $75 = $242;
 $76 = $246;
 $247 = $75;
 $248 = $76;
 ;HEAP8[$74>>0]=HEAP8[$77>>0]|0;
 $72 = $247;
 $73 = $248;
 $249 = $116;
 $250 = (($249) + 1)|0;
 $116 = $250;
 $251 = $116;
 STACKTOP = sp;return ($251|0);
}
function __ZNSt3__218__insertion_sort_3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $18 = sp + 24|0;
 $21 = sp + 491|0;
 $48 = sp + 490|0;
 $49 = sp + 489|0;
 $52 = sp + 16|0;
 $55 = sp + 488|0;
 $79 = sp + 8|0;
 $82 = sp + 487|0;
 $109 = sp + 486|0;
 $110 = sp + 485|0;
 $113 = sp;
 $116 = sp + 484|0;
 $123 = sp + 40|0;
 $118 = $0;
 $119 = $1;
 $120 = $2;
 $127 = $118;
 $128 = ((($127)) + 24|0);
 $121 = $128;
 $129 = $118;
 $130 = $118;
 $131 = ((($130)) + 12|0);
 $132 = $121;
 $133 = $120;
 (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($129,$131,$132,$133)|0);
 $134 = $121;
 $135 = ((($134)) + 12|0);
 $122 = $135;
 L1: while(1) {
  $136 = $122;
  $137 = $119;
  $138 = ($136|0)!=($137|0);
  if (!($138)) {
   label = 30;
   break;
  }
  $139 = $120;
  $140 = $122;
  $141 = $121;
  $142 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($139,$140,$141)|0);
  if ($142) {
   $143 = $122;
   $117 = $143;
   $144 = $117;
   $63 = $123;
   $64 = $144;
   $145 = $63;
   $146 = $64;
   $62 = $146;
   $147 = $62;
   ;HEAP32[$145>>2]=HEAP32[$147>>2]|0;HEAP32[$145+4>>2]=HEAP32[$147+4>>2]|0;HEAP32[$145+8>>2]=HEAP32[$147+8>>2]|0;
   $148 = $64;
   $59 = $148;
   $149 = $59;
   $58 = $149;
   $150 = $58;
   $57 = $150;
   $151 = $57;
   $60 = $151;
   $61 = 0;
   while(1) {
    $152 = $61;
    $153 = ($152>>>0)<(3);
    if (!($153)) {
     break;
    }
    $154 = $60;
    $155 = $61;
    $156 = (($154) + ($155<<2)|0);
    HEAP32[$156>>2] = 0;
    $157 = $61;
    $158 = (($157) + 1)|0;
    $61 = $158;
   }
   $159 = $121;
   $124 = $159;
   $160 = $122;
   $121 = $160;
   while(1) {
    $161 = $124;
    $56 = $161;
    $162 = $56;
    $163 = $121;
    $53 = $163;
    $54 = $162;
    $164 = $53;
    $165 = $54;
    ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
    $50 = $164;
    $51 = $165;
    $166 = $50;
    $47 = $166;
    $167 = $47;
    $46 = $167;
    $45 = $167;
    $168 = $45;
    $44 = $168;
    $169 = $44;
    $43 = $169;
    $170 = $43;
    $171 = ((($170)) + 11|0);
    $172 = HEAP8[$171>>0]|0;
    $173 = $172&255;
    $174 = $173 & 128;
    $175 = ($174|0)!=(0);
    if ($175) {
     $38 = $167;
     $176 = $38;
     $37 = $176;
     $177 = $37;
     $36 = $177;
     $178 = $36;
     $179 = HEAP32[$178>>2]|0;
     HEAP8[$48>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($179,$48);
     $29 = $167;
     $30 = 0;
     $180 = $29;
     $181 = $30;
     $28 = $180;
     $182 = $28;
     $27 = $182;
     $183 = $27;
     $184 = ((($183)) + 4|0);
     HEAP32[$184>>2] = $181;
    } else {
     $35 = $167;
     $185 = $35;
     $34 = $185;
     $186 = $34;
     $33 = $186;
     $187 = $33;
     $32 = $187;
     $188 = $32;
     $31 = $188;
     $189 = $31;
     HEAP8[$49>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($189,$49);
     $41 = $167;
     $42 = 0;
     $190 = $41;
     $191 = $42;
     $192 = $191&255;
     $40 = $190;
     $193 = $40;
     $39 = $193;
     $194 = $39;
     $195 = ((($194)) + 11|0);
     HEAP8[$195>>0] = $192;
    }
    $26 = $166;
    $196 = $26;
    __THREW__ = 0;
    invoke_vii(413,($196|0),0);
    $197 = __THREW__; __THREW__ = 0;
    $198 = $197&1;
    if ($198) {
     label = 12;
     break L1;
    }
    $201 = $51;
    $25 = $201;
    $202 = $25;
    $24 = $202;
    $203 = $24;
    $23 = $166;
    $204 = $23;
    $22 = $204;
    $205 = $22;
    ;HEAP32[$205>>2]=HEAP32[$203>>2]|0;HEAP32[$205+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$205+8>>2]=HEAP32[$203+8>>2]|0;
    $206 = $51;
    $19 = $166;
    $20 = $206;
    $207 = $19;
    $208 = $20;
    ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
    $16 = $207;
    $17 = $208;
    $209 = $16;
    $210 = $17;
    $15 = $210;
    $211 = $15;
    $14 = $211;
    $212 = $14;
    $13 = $212;
    $213 = $13;
    $9 = $213;
    $12 = $209;
    $214 = $12;
    $11 = $214;
    $215 = $11;
    $10 = $215;
    $216 = $51;
    $6 = $216;
    $217 = $6;
    $5 = $217;
    $218 = $5;
    $4 = $218;
    $219 = $4;
    $7 = $219;
    $8 = 0;
    while(1) {
     $220 = $8;
     $221 = ($220>>>0)<(3);
     if (!($221)) {
      break;
     }
     $222 = $7;
     $223 = $8;
     $224 = (($222) + ($223<<2)|0);
     HEAP32[$224>>2] = 0;
     $225 = $8;
     $226 = (($225) + 1)|0;
     $8 = $226;
    }
    $227 = $124;
    $121 = $227;
    $228 = $121;
    $229 = $118;
    $230 = ($228|0)!=($229|0);
    if (!($230)) {
     break;
    }
    $231 = $120;
    $232 = $124;
    $233 = ((($232)) + -12|0);
    $124 = $233;
    __THREW__ = 0;
    $234 = (invoke_iiii(418,($231|0),($123|0),($233|0))|0);
    $235 = __THREW__; __THREW__ = 0;
    $236 = $235&1;
    if ($236) {
     label = 28;
     break L1;
    }
    if (!($234)) {
     break;
    }
   }
   $3 = $123;
   $237 = $3;
   $238 = $121;
   $114 = $238;
   $115 = $237;
   $239 = $114;
   $240 = $115;
   ;HEAP8[$113>>0]=HEAP8[$116>>0]|0;
   $111 = $239;
   $112 = $240;
   $241 = $111;
   $108 = $241;
   $242 = $108;
   $107 = $242;
   $106 = $242;
   $243 = $106;
   $105 = $243;
   $244 = $105;
   $104 = $244;
   $245 = $104;
   $246 = ((($245)) + 11|0);
   $247 = HEAP8[$246>>0]|0;
   $248 = $247&255;
   $249 = $248 & 128;
   $250 = ($249|0)!=(0);
   if ($250) {
    $99 = $242;
    $251 = $99;
    $98 = $251;
    $252 = $98;
    $97 = $252;
    $253 = $97;
    $254 = HEAP32[$253>>2]|0;
    HEAP8[$109>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($254,$109);
    $90 = $242;
    $91 = 0;
    $255 = $90;
    $256 = $91;
    $89 = $255;
    $257 = $89;
    $88 = $257;
    $258 = $88;
    $259 = ((($258)) + 4|0);
    HEAP32[$259>>2] = $256;
   } else {
    $96 = $242;
    $260 = $96;
    $95 = $260;
    $261 = $95;
    $94 = $261;
    $262 = $94;
    $93 = $262;
    $263 = $93;
    $92 = $263;
    $264 = $92;
    HEAP8[$110>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($264,$110);
    $102 = $242;
    $103 = 0;
    $265 = $102;
    $266 = $103;
    $267 = $266&255;
    $101 = $265;
    $268 = $101;
    $100 = $268;
    $269 = $100;
    $270 = ((($269)) + 11|0);
    HEAP8[$270>>0] = $267;
   }
   $87 = $241;
   $271 = $87;
   __THREW__ = 0;
   invoke_vii(413,($271|0),0);
   $272 = __THREW__; __THREW__ = 0;
   $273 = $272&1;
   if ($273) {
    label = 23;
    break;
   }
   $276 = $112;
   $86 = $276;
   $277 = $86;
   $85 = $277;
   $278 = $85;
   $84 = $241;
   $279 = $84;
   $83 = $279;
   $280 = $83;
   ;HEAP32[$280>>2]=HEAP32[$278>>2]|0;HEAP32[$280+4>>2]=HEAP32[$278+4>>2]|0;HEAP32[$280+8>>2]=HEAP32[$278+8>>2]|0;
   $281 = $112;
   $80 = $241;
   $81 = $281;
   $282 = $80;
   $283 = $81;
   ;HEAP8[$79>>0]=HEAP8[$82>>0]|0;
   $77 = $282;
   $78 = $283;
   $284 = $77;
   $285 = $78;
   $76 = $285;
   $286 = $76;
   $75 = $286;
   $287 = $75;
   $74 = $287;
   $288 = $74;
   $70 = $288;
   $73 = $284;
   $289 = $73;
   $72 = $289;
   $290 = $72;
   $71 = $290;
   $291 = $112;
   $67 = $291;
   $292 = $67;
   $66 = $292;
   $293 = $66;
   $65 = $293;
   $294 = $65;
   $68 = $294;
   $69 = 0;
   while(1) {
    $295 = $69;
    $296 = ($295>>>0)<(3);
    if (!($296)) {
     break;
    }
    $297 = $68;
    $298 = $69;
    $299 = (($297) + ($298<<2)|0);
    HEAP32[$299>>2] = 0;
    $300 = $69;
    $301 = (($300) + 1)|0;
    $69 = $301;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($123);
  }
  $306 = $122;
  $121 = $306;
  $307 = $122;
  $308 = ((($307)) + 12|0);
  $122 = $308;
 }
 if ((label|0) == 12) {
  $199 = ___cxa_find_matching_catch_3(0|0)|0;
  $200 = tempRet0;
  ___clang_call_terminate($199);
  // unreachable;
 }
 else if ((label|0) == 23) {
  $274 = ___cxa_find_matching_catch_3(0|0)|0;
  $275 = tempRet0;
  ___clang_call_terminate($274);
  // unreachable;
 }
 else if ((label|0) == 28) {
  $302 = ___cxa_find_matching_catch_2()|0;
  $303 = tempRet0;
  $125 = $302;
  $126 = $303;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($123);
  $304 = $125;
  $305 = $126;
  ___resumeException($304|0);
  // unreachable;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__227__insertion_sort_incompleteIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEbT0_SF_T_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $18 = sp + 32|0;
 $21 = sp + 617|0;
 $48 = sp + 616|0;
 $49 = sp + 615|0;
 $52 = sp + 24|0;
 $55 = sp + 614|0;
 $80 = sp + 16|0;
 $83 = sp + 613|0;
 $110 = sp + 612|0;
 $111 = sp + 611|0;
 $114 = sp + 8|0;
 $117 = sp + 610|0;
 $125 = sp + 156|0;
 $134 = sp;
 $137 = sp + 609|0;
 $144 = sp + 608|0;
 $152 = sp + 52|0;
 $145 = $0;
 $146 = $1;
 $147 = $2;
 $157 = $146;
 $158 = $145;
 $159 = $157;
 $160 = $158;
 $161 = (($159) - ($160))|0;
 $162 = (($161|0) / 12)&-1;
 switch ($162|0) {
 case 1: case 0:  {
  $$expand_i1_val = 1;
  HEAP8[$144>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 2:  {
  $163 = $147;
  $164 = $146;
  $165 = ((($164)) + -12|0);
  $146 = $165;
  $166 = $145;
  $167 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($163,$165,$166)|0);
  if ($167) {
   $168 = $145;
   $169 = $146;
   $142 = $168;
   $143 = $169;
   $170 = $142;
   $171 = $143;
   $140 = $170;
   $141 = $171;
   $172 = $140;
   $139 = $172;
   $173 = $139;
   $138 = $173;
   $174 = $138;
   $175 = $141;
   $119 = $175;
   $176 = $119;
   $118 = $176;
   $177 = $118;
   $123 = $174;
   $124 = $177;
   $178 = $123;
   $122 = $178;
   $179 = $122;
   ;HEAP32[$125>>2]=HEAP32[$179>>2]|0;HEAP32[$125+4>>2]=HEAP32[$179+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[$179+8>>2]|0;
   $180 = $124;
   $120 = $180;
   $181 = $120;
   $182 = $123;
   ;HEAP32[$182>>2]=HEAP32[$181>>2]|0;HEAP32[$182+4>>2]=HEAP32[$181+4>>2]|0;HEAP32[$182+8>>2]=HEAP32[$181+8>>2]|0;
   $121 = $125;
   $183 = $121;
   $184 = $124;
   ;HEAP32[$184>>2]=HEAP32[$183>>2]|0;HEAP32[$184+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$184+8>>2]=HEAP32[$183+8>>2]|0;
   $128 = $172;
   $185 = $128;
   $127 = $185;
   $186 = $127;
   $126 = $186;
   $187 = $126;
   $188 = $141;
   $131 = $188;
   $189 = $131;
   $130 = $189;
   $190 = $130;
   $129 = $190;
   $191 = $129;
   $135 = $187;
   $136 = $191;
   $192 = $135;
   $193 = $136;
   ;HEAP8[$134>>0]=HEAP8[$137>>0]|0;
   $132 = $192;
   $133 = $193;
  }
  $$expand_i1_val2 = 1;
  HEAP8[$144>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 3:  {
  $194 = $145;
  $195 = $145;
  $196 = ((($195)) + 12|0);
  $197 = $146;
  $198 = ((($197)) + -12|0);
  $146 = $198;
  $199 = $147;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($194,$196,$198,$199)|0);
  $$expand_i1_val4 = 1;
  HEAP8[$144>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 4:  {
  $200 = $145;
  $201 = $145;
  $202 = ((($201)) + 12|0);
  $203 = $145;
  $204 = ((($203)) + 24|0);
  $205 = $146;
  $206 = ((($205)) + -12|0);
  $146 = $206;
  $207 = $147;
  (__ZNSt3__27__sort4IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_T_($200,$202,$204,$206,$207)|0);
  $$expand_i1_val6 = 1;
  HEAP8[$144>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 case 5:  {
  $208 = $145;
  $209 = $145;
  $210 = ((($209)) + 12|0);
  $211 = $145;
  $212 = ((($211)) + 24|0);
  $213 = $145;
  $214 = ((($213)) + 36|0);
  $215 = $146;
  $216 = ((($215)) + -12|0);
  $146 = $216;
  $217 = $147;
  (__ZNSt3__27__sort5IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_SF_SF_T_($208,$210,$212,$214,$216,$217)|0);
  $$expand_i1_val8 = 1;
  HEAP8[$144>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$144>>0]|0;
  $408 = $$pre_trunc&1;
  STACKTOP = sp;return ($408|0);
  break;
 }
 default: {
  $218 = $145;
  $219 = ((($218)) + 24|0);
  $148 = $219;
  $220 = $145;
  $221 = $145;
  $222 = ((($221)) + 12|0);
  $223 = $148;
  $224 = $147;
  (__ZNSt3__27__sort3IRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEjT0_SF_SF_T_($220,$222,$223,$224)|0);
  $149 = 8;
  $150 = 0;
  $225 = $148;
  $226 = ((($225)) + 12|0);
  $151 = $226;
  L3: while(1) {
   $227 = $151;
   $228 = $146;
   $229 = ($227|0)!=($228|0);
   if (!($229)) {
    label = 41;
    break;
   }
   $230 = $147;
   $231 = $151;
   $232 = $148;
   $233 = (__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_($230,$231,$232)|0);
   if ($233) {
    $234 = $151;
    $65 = $234;
    $235 = $65;
    $63 = $152;
    $64 = $235;
    $236 = $63;
    $237 = $64;
    $62 = $237;
    $238 = $62;
    ;HEAP32[$236>>2]=HEAP32[$238>>2]|0;HEAP32[$236+4>>2]=HEAP32[$238+4>>2]|0;HEAP32[$236+8>>2]=HEAP32[$238+8>>2]|0;
    $239 = $64;
    $59 = $239;
    $240 = $59;
    $58 = $240;
    $241 = $58;
    $57 = $241;
    $242 = $57;
    $60 = $242;
    $61 = 0;
    while(1) {
     $243 = $61;
     $244 = ($243>>>0)<(3);
     if (!($244)) {
      break;
     }
     $245 = $60;
     $246 = $61;
     $247 = (($245) + ($246<<2)|0);
     HEAP32[$247>>2] = 0;
     $248 = $61;
     $249 = (($248) + 1)|0;
     $61 = $249;
    }
    $250 = $148;
    $153 = $250;
    $251 = $151;
    $148 = $251;
    while(1) {
     $252 = $153;
     $56 = $252;
     $253 = $56;
     $254 = $148;
     $53 = $254;
     $54 = $253;
     $255 = $53;
     $256 = $54;
     ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
     $50 = $255;
     $51 = $256;
     $257 = $50;
     $47 = $257;
     $258 = $47;
     $46 = $258;
     $45 = $258;
     $259 = $45;
     $44 = $259;
     $260 = $44;
     $43 = $260;
     $261 = $43;
     $262 = ((($261)) + 11|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = $264 & 128;
     $266 = ($265|0)!=(0);
     if ($266) {
      $38 = $258;
      $267 = $38;
      $37 = $267;
      $268 = $37;
      $36 = $268;
      $269 = $36;
      $270 = HEAP32[$269>>2]|0;
      HEAP8[$48>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($270,$48);
      $29 = $258;
      $30 = 0;
      $271 = $29;
      $272 = $30;
      $28 = $271;
      $273 = $28;
      $27 = $273;
      $274 = $27;
      $275 = ((($274)) + 4|0);
      HEAP32[$275>>2] = $272;
     } else {
      $35 = $258;
      $276 = $35;
      $34 = $276;
      $277 = $34;
      $33 = $277;
      $278 = $33;
      $32 = $278;
      $279 = $32;
      $31 = $279;
      $280 = $31;
      HEAP8[$49>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($280,$49);
      $41 = $258;
      $42 = 0;
      $281 = $41;
      $282 = $42;
      $283 = $282&255;
      $40 = $281;
      $284 = $40;
      $39 = $284;
      $285 = $39;
      $286 = ((($285)) + 11|0);
      HEAP8[$286>>0] = $283;
     }
     $26 = $257;
     $287 = $26;
     __THREW__ = 0;
     invoke_vii(413,($287|0),0);
     $288 = __THREW__; __THREW__ = 0;
     $289 = $288&1;
     if ($289) {
      label = 20;
      break L3;
     }
     $292 = $51;
     $25 = $292;
     $293 = $25;
     $24 = $293;
     $294 = $24;
     $23 = $257;
     $295 = $23;
     $22 = $295;
     $296 = $22;
     ;HEAP32[$296>>2]=HEAP32[$294>>2]|0;HEAP32[$296+4>>2]=HEAP32[$294+4>>2]|0;HEAP32[$296+8>>2]=HEAP32[$294+8>>2]|0;
     $297 = $51;
     $19 = $257;
     $20 = $297;
     $298 = $19;
     $299 = $20;
     ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
     $16 = $298;
     $17 = $299;
     $300 = $16;
     $301 = $17;
     $15 = $301;
     $302 = $15;
     $14 = $302;
     $303 = $14;
     $13 = $303;
     $304 = $13;
     $9 = $304;
     $12 = $300;
     $305 = $12;
     $11 = $305;
     $306 = $11;
     $10 = $306;
     $307 = $51;
     $6 = $307;
     $308 = $6;
     $5 = $308;
     $309 = $5;
     $4 = $309;
     $310 = $4;
     $7 = $310;
     $8 = 0;
     while(1) {
      $311 = $8;
      $312 = ($311>>>0)<(3);
      if (!($312)) {
       break;
      }
      $313 = $7;
      $314 = $8;
      $315 = (($313) + ($314<<2)|0);
      HEAP32[$315>>2] = 0;
      $316 = $8;
      $317 = (($316) + 1)|0;
      $8 = $317;
     }
     $318 = $153;
     $148 = $318;
     $319 = $148;
     $320 = $145;
     $321 = ($319|0)!=($320|0);
     if (!($321)) {
      break;
     }
     $322 = $147;
     $323 = $153;
     $324 = ((($323)) + -12|0);
     $153 = $324;
     __THREW__ = 0;
     $325 = (invoke_iiii(418,($322|0),($152|0),($324|0))|0);
     $326 = __THREW__; __THREW__ = 0;
     $327 = $326&1;
     if ($327) {
      label = 37;
      break L3;
     }
     if (!($325)) {
      break;
     }
    }
    $3 = $152;
    $328 = $3;
    $329 = $148;
    $115 = $329;
    $116 = $328;
    $330 = $115;
    $331 = $116;
    ;HEAP8[$114>>0]=HEAP8[$117>>0]|0;
    $112 = $330;
    $113 = $331;
    $332 = $112;
    $109 = $332;
    $333 = $109;
    $108 = $333;
    $107 = $333;
    $334 = $107;
    $106 = $334;
    $335 = $106;
    $105 = $335;
    $336 = $105;
    $337 = ((($336)) + 11|0);
    $338 = HEAP8[$337>>0]|0;
    $339 = $338&255;
    $340 = $339 & 128;
    $341 = ($340|0)!=(0);
    if ($341) {
     $100 = $333;
     $342 = $100;
     $99 = $342;
     $343 = $99;
     $98 = $343;
     $344 = $98;
     $345 = HEAP32[$344>>2]|0;
     HEAP8[$110>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($345,$110);
     $91 = $333;
     $92 = 0;
     $346 = $91;
     $347 = $92;
     $90 = $346;
     $348 = $90;
     $89 = $348;
     $349 = $89;
     $350 = ((($349)) + 4|0);
     HEAP32[$350>>2] = $347;
    } else {
     $97 = $333;
     $351 = $97;
     $96 = $351;
     $352 = $96;
     $95 = $352;
     $353 = $95;
     $94 = $353;
     $354 = $94;
     $93 = $354;
     $355 = $93;
     HEAP8[$111>>0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($355,$111);
     $103 = $333;
     $104 = 0;
     $356 = $103;
     $357 = $104;
     $358 = $357&255;
     $102 = $356;
     $359 = $102;
     $101 = $359;
     $360 = $101;
     $361 = ((($360)) + 11|0);
     HEAP8[$361>>0] = $358;
    }
    $88 = $332;
    $362 = $88;
    __THREW__ = 0;
    invoke_vii(413,($362|0),0);
    $363 = __THREW__; __THREW__ = 0;
    $364 = $363&1;
    if ($364) {
     label = 31;
     break;
    }
    $367 = $113;
    $87 = $367;
    $368 = $87;
    $86 = $368;
    $369 = $86;
    $85 = $332;
    $370 = $85;
    $84 = $370;
    $371 = $84;
    ;HEAP32[$371>>2]=HEAP32[$369>>2]|0;HEAP32[$371+4>>2]=HEAP32[$369+4>>2]|0;HEAP32[$371+8>>2]=HEAP32[$369+8>>2]|0;
    $372 = $113;
    $81 = $332;
    $82 = $372;
    $373 = $81;
    $374 = $82;
    ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
    $78 = $373;
    $79 = $374;
    $375 = $78;
    $376 = $79;
    $77 = $376;
    $377 = $77;
    $76 = $377;
    $378 = $76;
    $75 = $378;
    $379 = $75;
    $71 = $379;
    $74 = $375;
    $380 = $74;
    $73 = $380;
    $381 = $73;
    $72 = $381;
    $382 = $113;
    $68 = $382;
    $383 = $68;
    $67 = $383;
    $384 = $67;
    $66 = $384;
    $385 = $66;
    $69 = $385;
    $70 = 0;
    while(1) {
     $386 = $70;
     $387 = ($386>>>0)<(3);
     if (!($387)) {
      break;
     }
     $388 = $69;
     $389 = $70;
     $390 = (($388) + ($389<<2)|0);
     HEAP32[$390>>2] = 0;
     $391 = $70;
     $392 = (($391) + 1)|0;
     $70 = $392;
    }
    $393 = $150;
    $394 = (($393) + 1)|0;
    $150 = $394;
    $395 = ($394|0)==(8);
    if ($395) {
     $396 = $151;
     $397 = ((($396)) + 12|0);
     $151 = $397;
     $398 = $146;
     $399 = ($397|0)==($398|0);
     $$expand_i1_val10 = $399&1;
     HEAP8[$144>>0] = $$expand_i1_val10;
     $156 = 1;
    } else {
     $156 = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($152);
    $404 = $156;
    $switch = ($404>>>0)<(1);
    if (!($switch)) {
     label = 42;
     break;
    }
   }
   $405 = $151;
   $148 = $405;
   $406 = $151;
   $407 = ((($406)) + 12|0);
   $151 = $407;
  }
  if ((label|0) == 20) {
   $290 = ___cxa_find_matching_catch_3(0|0)|0;
   $291 = tempRet0;
   ___clang_call_terminate($290);
   // unreachable;
  }
  else if ((label|0) == 31) {
   $365 = ___cxa_find_matching_catch_3(0|0)|0;
   $366 = tempRet0;
   ___clang_call_terminate($365);
   // unreachable;
  }
  else if ((label|0) == 37) {
   $400 = ___cxa_find_matching_catch_2()|0;
   $401 = tempRet0;
   $154 = $400;
   $155 = $401;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($152);
   $402 = $154;
   $403 = $155;
   ___resumeException($402|0);
   // unreachable;
  }
  else if ((label|0) == 41) {
   $$expand_i1_val12 = 1;
   HEAP8[$144>>0] = $$expand_i1_val12;
   $$pre_trunc = HEAP8[$144>>0]|0;
   $408 = $$pre_trunc&1;
   STACKTOP = sp;return ($408|0);
  }
  else if ((label|0) == 42) {
   $$pre_trunc = HEAP8[$144>>0]|0;
   $408 = $$pre_trunc&1;
   STACKTOP = sp;return ($408|0);
  }
 }
 }
 return (0)|0;
}
function __ZN5Level9to_stringEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $$byval_copy = sp + 560|0;
 $12 = sp + 516|0;
 $15 = sp + 504|0;
 $19 = sp + 488|0;
 $22 = sp + 476|0;
 $55 = sp + 336|0;
 $69 = sp + 280|0;
 $75 = sp + 256|0;
 $82 = sp + 224|0;
 $92 = sp + 176|0;
 $93 = sp + 168|0;
 $96 = sp + 16|0;
 $98 = sp + 8|0;
 $99 = sp + 4|0;
 $91 = $1;
 $102 = $91;
 $103 = (__Znwj(32)|0);
 __ZN5LevelC2Ev($103);
 ;HEAP32[$93>>2]=0|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$93>>2]|0;
 __ZNSt3__210shared_ptrI5LevelEC2IS1_EEPT_NS_9enable_ifIXsr14is_convertibleIS5_PS1_EE5valueENS2_5__natEE4typeE($92,$103,$$byval_copy);
 $90 = $92;
 $104 = $90;
 $105 = HEAP32[$104>>2]|0;
 __THREW__ = 0;
 (invoke_iii(419,($105|0),($102|0))|0);
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if ($107) {
  $158 = ___cxa_find_matching_catch_2()|0;
  $159 = tempRet0;
  $$sink1 = $159;$$sink2 = $158;
 } else {
  while(1) {
   $89 = $92;
   $108 = $89;
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($109)) + 16|0);
   $87 = $110;
   $88 = 0;
   $111 = $87;
   $86 = $111;
   $112 = $86;
   $85 = $112;
   $113 = $85;
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)!=(0|0);
   if (!($115)) {
    break;
   }
   $84 = $92;
   $116 = $84;
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($117)) + 16|0);
   $80 = $92;
   $81 = $118;
   $119 = $80;
   $120 = $81;
   $78 = $82;
   $79 = $120;
   $121 = $78;
   $122 = $79;
   $123 = HEAP32[$122>>2]|0;
   HEAP32[$121>>2] = $123;
   $124 = ((($121)) + 4|0);
   $125 = $79;
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP32[$124>>2] = $127;
   $128 = ((($121)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)!=(0|0);
   if ($130) {
    $131 = ((($121)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    __ZNSt3__219__shared_weak_count12__add_sharedEv($132);
   }
   $76 = $82;
   $77 = $119;
   $133 = $76;
   $134 = $77;
   $73 = $133;
   $74 = $134;
   $135 = $73;
   $72 = $135;
   $136 = $72;
   $137 = HEAP32[$136>>2]|0;
   HEAP32[$75>>2] = $137;
   $138 = $74;
   $70 = $138;
   $139 = $70;
   $140 = HEAP32[$139>>2]|0;
   $141 = $73;
   HEAP32[$141>>2] = $140;
   $71 = $75;
   $142 = $71;
   $143 = HEAP32[$142>>2]|0;
   $144 = $74;
   HEAP32[$144>>2] = $143;
   $145 = ((($133)) + 4|0);
   $146 = $77;
   $147 = ((($146)) + 4|0);
   $67 = $145;
   $68 = $147;
   $148 = $67;
   $66 = $148;
   $149 = $66;
   $150 = HEAP32[$149>>2]|0;
   HEAP32[$69>>2] = $150;
   $151 = $68;
   $64 = $151;
   $152 = $64;
   $153 = HEAP32[$152>>2]|0;
   $154 = $67;
   HEAP32[$154>>2] = $153;
   $65 = $69;
   $155 = $65;
   $156 = HEAP32[$155>>2]|0;
   $157 = $68;
   HEAP32[$157>>2] = $156;
   __ZNSt3__210shared_ptrI5LevelED2Ev($82);
  }
  $60 = $96;
  $61 = 24;
  $160 = $60;
  $161 = ((($160)) + 64|0);
  $59 = $161;
  $162 = $59;
  $58 = $162;
  $163 = $58;
  HEAP32[$163>>2] = (6420);
  HEAP32[$162>>2] = (6404);
  HEAP32[$160>>2] = (2148);
  $164 = ((($160)) + 64|0);
  HEAP32[$164>>2] = (2188);
  $165 = ((($160)) + 8|0);
  HEAP32[$165>>2] = (2168);
  $166 = ((($160)) + 12|0);
  $32 = $160;
  $167 = 2200;
  $33 = $167;
  $34 = $166;
  $168 = $32;
  $169 = $33;
  $170 = $34;
  $171 = ((($169)) + 4|0);
  $29 = $168;
  $30 = $171;
  $31 = $170;
  $172 = $29;
  $173 = $30;
  $174 = HEAP32[$173>>2]|0;
  HEAP32[$172>>2] = $174;
  $175 = ((($173)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = HEAP32[$172>>2]|0;
  $178 = ((($177)) + -12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($172) + ($179)|0);
  HEAP32[$180>>2] = $176;
  $181 = ((($172)) + 4|0);
  HEAP32[$181>>2] = 0;
  $182 = HEAP32[$172>>2]|0;
  $183 = ((($182)) + -12|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($172) + ($184)|0);
  $186 = $31;
  $27 = $185;
  $28 = $186;
  $187 = $27;
  $188 = $28;
  __THREW__ = 0;
  invoke_vii(346,($187|0),($188|0));
  $189 = __THREW__; __THREW__ = 0;
  $190 = $189&1;
  if ($190) {
   $258 = ___cxa_find_matching_catch_2()|0;
   $259 = tempRet0;
   $62 = $258;
   $63 = $259;
  } else {
   $191 = ((($187)) + 72|0);
   HEAP32[$191>>2] = 0;
   $192 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $193 = ((($187)) + 76|0);
   HEAP32[$193>>2] = $192;
   $194 = ((($168)) + 8|0);
   $195 = ((($169)) + 12|0);
   $25 = $194;
   $26 = $195;
   $196 = $25;
   $197 = $26;
   $198 = HEAP32[$197>>2]|0;
   HEAP32[$196>>2] = $198;
   $199 = ((($197)) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = HEAP32[$196>>2]|0;
   $202 = ((($201)) + -12|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($196) + ($203)|0);
   HEAP32[$204>>2] = $200;
   $205 = HEAP32[$169>>2]|0;
   HEAP32[$168>>2] = $205;
   $206 = ((($169)) + 20|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = HEAP32[$168>>2]|0;
   $209 = ((($208)) + -12|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($168) + ($210)|0);
   HEAP32[$211>>2] = $207;
   $212 = ((($169)) + 24|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ((($168)) + 8|0);
   HEAP32[$214>>2] = $213;
   HEAP32[$160>>2] = (2148);
   $215 = ((($160)) + 64|0);
   HEAP32[$215>>2] = (2188);
   $216 = ((($160)) + 8|0);
   HEAP32[$216>>2] = (2168);
   $217 = ((($160)) + 12|0);
   $218 = $61;
   $53 = $217;
   $54 = $218;
   $219 = $53;
   __THREW__ = 0;
   invoke_vi(347,($219|0));
   $220 = __THREW__; __THREW__ = 0;
   $221 = $220&1;
   do {
    if ($221) {
     $260 = ___cxa_find_matching_catch_2()|0;
     $261 = tempRet0;
     $$sink3 = $261;$$sink4 = $260;
    } else {
     HEAP32[$219>>2] = (2244);
     $222 = ((($219)) + 32|0);
     $52 = $222;
     $223 = $52;
     $51 = $223;
     $224 = $51;
     $50 = $224;
     $225 = $50;
     $49 = $225;
     ;HEAP32[$225>>2]=0|0;HEAP32[$225+4>>2]=0|0;HEAP32[$225+8>>2]=0|0;
     $46 = $223;
     $226 = $46;
     $45 = $226;
     $227 = $45;
     $44 = $227;
     $228 = $44;
     $47 = $228;
     $48 = 0;
     while(1) {
      $229 = $48;
      $230 = ($229>>>0)<(3);
      if (!($230)) {
       break;
      }
      $231 = $47;
      $232 = $48;
      $233 = (($231) + ($232<<2)|0);
      HEAP32[$233>>2] = 0;
      $234 = $48;
      $235 = (($234) + 1)|0;
      $48 = $235;
     }
     $236 = ((($219)) + 44|0);
     HEAP32[$236>>2] = 0;
     $237 = ((($219)) + 48|0);
     $238 = $54;
     HEAP32[$237>>2] = $238;
     $43 = $55;
     $239 = $43;
     $42 = $239;
     $240 = $42;
     $41 = $240;
     $241 = $41;
     $40 = $241;
     ;HEAP32[$241>>2]=0|0;HEAP32[$241+4>>2]=0|0;HEAP32[$241+8>>2]=0|0;
     $37 = $239;
     $242 = $37;
     $36 = $242;
     $243 = $36;
     $35 = $243;
     $244 = $35;
     $38 = $244;
     $39 = 0;
     while(1) {
      $245 = $39;
      $246 = ($245>>>0)<(3);
      if (!($246)) {
       break;
      }
      $247 = $38;
      $248 = $39;
      $249 = (($247) + ($248<<2)|0);
      HEAP32[$249>>2] = 0;
      $250 = $39;
      $251 = (($250) + 1)|0;
      $39 = $251;
     }
     __THREW__ = 0;
     invoke_vii(348,($219|0),($55|0));
     $252 = __THREW__; __THREW__ = 0;
     $253 = $252&1;
     if ($253) {
      $254 = ___cxa_find_matching_catch_2()|0;
      $255 = tempRet0;
      $56 = $254;
      $57 = $255;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($55);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($222);
      __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($219);
      $256 = $56;
      $257 = $57;
      $$sink3 = $257;$$sink4 = $256;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($55);
     $24 = $92;
     $266 = $24;
     $267 = HEAP32[$266>>2]|0;
     $268 = ((($267)) + 4|0);
     $97 = $268;
     $269 = $97;
     $23 = $269;
     $270 = $23;
     $271 = HEAP32[$270>>2]|0;
     $20 = $270;
     $21 = $271;
     $272 = $21;
     $17 = $19;
     $18 = $272;
     $273 = $17;
     $274 = $18;
     HEAP32[$273>>2] = $274;
     $275 = HEAP32[$19>>2]|0;
     HEAP32[$22>>2] = $275;
     $276 = HEAP32[$22>>2]|0;
     HEAP32[$98>>2] = $276;
     $277 = $97;
     $16 = $277;
     $278 = $16;
     $279 = ((($278)) + 4|0);
     $280 = HEAP32[$279>>2]|0;
     $13 = $278;
     $14 = $280;
     $281 = $14;
     $10 = $12;
     $11 = $281;
     $282 = $10;
     $283 = $11;
     HEAP32[$282>>2] = $283;
     $284 = HEAP32[$12>>2]|0;
     HEAP32[$15>>2] = $284;
     $285 = HEAP32[$15>>2]|0;
     HEAP32[$99>>2] = $285;
     while(1) {
      $8 = $98;
      $9 = $99;
      $286 = $8;
      $287 = $9;
      $6 = $286;
      $7 = $287;
      $288 = $6;
      $5 = $288;
      $289 = $5;
      $290 = HEAP32[$289>>2]|0;
      $291 = $7;
      $4 = $291;
      $292 = $4;
      $293 = HEAP32[$292>>2]|0;
      $294 = ($290|0)==($293|0);
      $295 = $294 ^ 1;
      if (!($295)) {
       label = 27;
       break;
      }
      $3 = $98;
      $296 = $3;
      $297 = HEAP32[$296>>2]|0;
      $298 = +HEAPF32[$297>>2];
      $100 = $298;
      $299 = $100;
      $300 = (~~(($299)));
      $101 = $300;
      $301 = ((($96)) + 8|0);
      $302 = $101;
      __THREW__ = 0;
      (invoke_iii(420,($301|0),($302|0))|0);
      $303 = __THREW__; __THREW__ = 0;
      $304 = $303&1;
      if ($304) {
       break;
      }
      $2 = $98;
      $305 = $2;
      $306 = HEAP32[$305>>2]|0;
      $307 = ((($306)) + 4|0);
      HEAP32[$305>>2] = $307;
     }
     if ((label|0) == 27) {
      $83 = $96;
      $310 = $83;
      $311 = ((($310)) + 12|0);
      __THREW__ = 0;
      invoke_vii(366,($0|0),($311|0));
      $312 = __THREW__; __THREW__ = 0;
      $313 = $312&1;
      if (!($313)) {
       __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
       __ZNSt3__210shared_ptrI5LevelED2Ev($92);
       STACKTOP = sp;return;
      }
     }
     $308 = ___cxa_find_matching_catch_2()|0;
     $309 = tempRet0;
     $94 = $308;
     $95 = $309;
     __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
     __ZNSt3__210shared_ptrI5LevelED2Ev($92);
     $314 = $94;
     $315 = $95;
     ___resumeException($314|0);
     // unreachable;
    }
   } while(0);
   $62 = $$sink4;
   $63 = $$sink3;
   $262 = 2200;
   __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($160,$262);
  }
  $263 = ((($160)) + 64|0);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($263);
  $264 = $62;
  $265 = $63;
  $$sink1 = $265;$$sink2 = $264;
 }
 $94 = $$sink2;
 $95 = $$sink1;
 __ZNSt3__210shared_ptrI5LevelED2Ev($92);
 $314 = $94;
 $315 = $95;
 ___resumeException($314|0);
 // unreachable;
}
function __ZN5LevelaSERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $7 = sp + 176|0;
 $13 = sp + 152|0;
 $20 = sp + 120|0;
 $26 = sp + 96|0;
 $32 = sp + 72|0;
 $39 = sp + 40|0;
 $42 = sp;
 $45 = sp + 200|0;
 $48 = $0;
 $49 = $1;
 $50 = $48;
 $51 = $49;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $53 = ((($50)) + 4|0);
 $54 = $49;
 $55 = ((($54)) + 4|0);
 $46 = $53;
 $47 = $55;
 $56 = $46;
 $57 = $47;
 $58 = ($56|0)!=($57|0);
 if ($58) {
  $59 = $47;
  $43 = $56;
  $44 = $59;
  $60 = $43;
  $61 = $44;
  ;HEAP8[$42>>0]=HEAP8[$45>>0]|0;
  $40 = $60;
  $41 = $61;
  $62 = $47;
  $63 = HEAP32[$62>>2]|0;
  $64 = $47;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($56,$63,$66);
 }
 $67 = ((($50)) + 16|0);
 $68 = $49;
 $69 = ((($68)) + 16|0);
 $37 = $67;
 $38 = $69;
 $70 = $37;
 $71 = $38;
 $35 = $39;
 $36 = $71;
 $72 = $35;
 $73 = $36;
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$72>>2] = $74;
 $75 = ((($72)) + 4|0);
 $76 = $36;
 $77 = ((($76)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 HEAP32[$75>>2] = $78;
 $79 = ((($72)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = ((($72)) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  __ZNSt3__219__shared_weak_count12__add_sharedEv($83);
 }
 $33 = $39;
 $34 = $70;
 $84 = $33;
 $85 = $34;
 $30 = $84;
 $31 = $85;
 $86 = $30;
 $29 = $86;
 $87 = $29;
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$32>>2] = $88;
 $89 = $31;
 $27 = $89;
 $90 = $27;
 $91 = HEAP32[$90>>2]|0;
 $92 = $30;
 HEAP32[$92>>2] = $91;
 $28 = $32;
 $93 = $28;
 $94 = HEAP32[$93>>2]|0;
 $95 = $31;
 HEAP32[$95>>2] = $94;
 $96 = ((($84)) + 4|0);
 $97 = $34;
 $98 = ((($97)) + 4|0);
 $24 = $96;
 $25 = $98;
 $99 = $24;
 $23 = $99;
 $100 = $23;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$26>>2] = $101;
 $102 = $25;
 $21 = $102;
 $103 = $21;
 $104 = HEAP32[$103>>2]|0;
 $105 = $24;
 HEAP32[$105>>2] = $104;
 $22 = $26;
 $106 = $22;
 $107 = HEAP32[$106>>2]|0;
 $108 = $25;
 HEAP32[$108>>2] = $107;
 __ZNSt3__210shared_ptrI5LevelED2Ev($39);
 $109 = ((($50)) + 24|0);
 $110 = $49;
 $111 = ((($110)) + 24|0);
 $18 = $109;
 $19 = $111;
 $112 = $18;
 $113 = $19;
 $16 = $20;
 $17 = $113;
 $114 = $16;
 $115 = $17;
 $116 = HEAP32[$115>>2]|0;
 HEAP32[$114>>2] = $116;
 $117 = ((($114)) + 4|0);
 $118 = $17;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$117>>2] = $120;
 $121 = ((($114)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($114)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  __ZNSt3__219__shared_weak_count12__add_sharedEv($125);
 }
 $14 = $20;
 $15 = $112;
 $126 = $14;
 $127 = $15;
 $11 = $126;
 $12 = $127;
 $128 = $11;
 $10 = $128;
 $129 = $10;
 $130 = HEAP32[$129>>2]|0;
 HEAP32[$13>>2] = $130;
 $131 = $12;
 $8 = $131;
 $132 = $8;
 $133 = HEAP32[$132>>2]|0;
 $134 = $11;
 HEAP32[$134>>2] = $133;
 $9 = $13;
 $135 = $9;
 $136 = HEAP32[$135>>2]|0;
 $137 = $12;
 HEAP32[$137>>2] = $136;
 $138 = ((($126)) + 4|0);
 $139 = $15;
 $140 = ((($139)) + 4|0);
 $5 = $138;
 $6 = $140;
 $141 = $5;
 $4 = $141;
 $142 = $4;
 $143 = HEAP32[$142>>2]|0;
 HEAP32[$7>>2] = $143;
 $144 = $6;
 $2 = $144;
 $145 = $2;
 $146 = HEAP32[$145>>2]|0;
 $147 = $5;
 HEAP32[$147>>2] = $146;
 $3 = $7;
 $148 = $3;
 $149 = HEAP32[$148>>2]|0;
 $150 = $6;
 HEAP32[$150>>2] = $149;
 __ZNSt3__210shared_ptrI5LevelED2Ev($20);
 STACKTOP = sp;return ($50|0);
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP8[$3>>0] = $1;
 $4 = $2;
 $5 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($4,$3,1)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $8 = sp + 24|0;
 $11 = sp + 296|0;
 $34 = sp + 16|0;
 $37 = sp + 295|0;
 $44 = sp + 8|0;
 $47 = sp + 294|0;
 $55 = sp + 104|0;
 $58 = sp + 92|0;
 $67 = sp;
 $70 = sp + 293|0;
 $75 = sp + 32|0;
 $71 = $0;
 $72 = $1;
 $73 = $2;
 $78 = $71;
 $79 = $72;
 $80 = $73;
 $68 = $79;
 $69 = $80;
 $81 = $68;
 $82 = $69;
 ;HEAP8[$67>>0]=HEAP8[$70>>0]|0;
 $65 = $81;
 $66 = $82;
 $83 = $66;
 $84 = $65;
 $85 = $83;
 $86 = $84;
 $87 = (($85) - ($86))|0;
 $88 = (($87|0) / 4)&-1;
 $74 = $88;
 $89 = $74;
 $64 = $78;
 $90 = $64;
 $63 = $90;
 $91 = $63;
 $62 = $91;
 $92 = $62;
 $93 = ((($92)) + 8|0);
 $61 = $93;
 $94 = $61;
 $60 = $94;
 $95 = $60;
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$91>>2]|0;
 $98 = $96;
 $99 = $97;
 $100 = (($98) - ($99))|0;
 $101 = (($100|0) / 4)&-1;
 $102 = ($89>>>0)<=($101>>>0);
 if (!($102)) {
  __ZNSt3__26vectorIfNS_9allocatorIfEEE10deallocateEv($78);
  $200 = $74;
  $54 = $78;
  HEAP32[$55>>2] = $200;
  $201 = $54;
  $202 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($201)|0);
  $56 = $202;
  $203 = HEAP32[$55>>2]|0;
  $204 = $56;
  $205 = ($203>>>0)>($204>>>0);
  if ($205) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($201);
  }
  $52 = $201;
  $206 = $52;
  $51 = $206;
  $207 = $51;
  $50 = $207;
  $208 = $50;
  $209 = ((($208)) + 8|0);
  $49 = $209;
  $210 = $49;
  $48 = $210;
  $211 = $48;
  $212 = HEAP32[$211>>2]|0;
  $213 = HEAP32[$207>>2]|0;
  $214 = $212;
  $215 = $213;
  $216 = (($214) - ($215))|0;
  $217 = (($216|0) / 4)&-1;
  $57 = $217;
  $218 = $57;
  $219 = $56;
  $220 = (($219>>>0) / 2)&-1;
  $221 = ($218>>>0)>=($220>>>0);
  if ($221) {
   $222 = $56;
   $53 = $222;
  } else {
   $223 = $57;
   $224 = $223<<1;
   HEAP32[$58>>2] = $224;
   $45 = $58;
   $46 = $55;
   $225 = $45;
   $226 = $46;
   ;HEAP8[$44>>0]=HEAP8[$47>>0]|0;
   $42 = $225;
   $43 = $226;
   $227 = $42;
   $228 = $43;
   $39 = $44;
   $40 = $227;
   $41 = $228;
   $229 = $40;
   $230 = HEAP32[$229>>2]|0;
   $231 = $41;
   $232 = HEAP32[$231>>2]|0;
   $233 = ($230>>>0)<($232>>>0);
   $234 = $43;
   $235 = $42;
   $236 = $233 ? $234 : $235;
   $237 = HEAP32[$236>>2]|0;
   $53 = $237;
  }
  $238 = $53;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEj($78,$238);
  $239 = $72;
  $240 = $73;
  $241 = $74;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($78,$239,$240,$241);
  STACKTOP = sp;return;
 }
 $103 = $73;
 HEAP32[$75>>2] = $103;
 $76 = 0;
 $104 = $74;
 $59 = $78;
 $105 = $59;
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = HEAP32[$105>>2]|0;
 $109 = $107;
 $110 = $108;
 $111 = (($109) - ($110))|0;
 $112 = (($111|0) / 4)&-1;
 $113 = ($104>>>0)>($112>>>0);
 if ($113) {
  $76 = 1;
  $114 = $72;
  HEAP32[$75>>2] = $114;
  $38 = $78;
  $115 = $38;
  $116 = ((($115)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = HEAP32[$115>>2]|0;
  $119 = $117;
  $120 = $118;
  $121 = (($119) - ($120))|0;
  $122 = (($121|0) / 4)&-1;
  $35 = $75;
  $36 = $122;
  $123 = $35;
  $124 = $36;
  ;HEAP8[$34>>0]=HEAP8[$37>>0]|0;
  $32 = $123;
  $33 = $124;
  $125 = $33;
  $126 = $32;
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($125<<2)|0);
  HEAP32[$126>>2] = $128;
 }
 $129 = $72;
 $130 = HEAP32[$75>>2]|0;
 $131 = HEAP32[$78>>2]|0;
 $29 = $129;
 $30 = $130;
 $31 = $131;
 $132 = $29;
 $28 = $132;
 $133 = $28;
 $134 = $30;
 $22 = $134;
 $135 = $22;
 $136 = $31;
 $23 = $136;
 $137 = $23;
 $24 = $133;
 $25 = $135;
 $26 = $137;
 $138 = $25;
 $139 = $24;
 $140 = $138;
 $141 = $139;
 $142 = (($140) - ($141))|0;
 $143 = (($142|0) / 4)&-1;
 $27 = $143;
 $144 = $27;
 $145 = ($144>>>0)>(0);
 if ($145) {
  $146 = $26;
  $147 = $24;
  $148 = $27;
  $149 = $148<<2;
  _memmove(($146|0),($147|0),($149|0))|0;
 }
 $150 = $26;
 $151 = $27;
 $152 = (($150) + ($151<<2)|0);
 $77 = $152;
 $153 = $76;
 $154 = $153&1;
 if ($154) {
  $155 = HEAP32[$75>>2]|0;
  $156 = $73;
  $157 = $74;
  $3 = $78;
  $158 = $3;
  $159 = ((($158)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = HEAP32[$158>>2]|0;
  $162 = $160;
  $163 = $161;
  $164 = (($162) - ($163))|0;
  $165 = (($164|0) / 4)&-1;
  $166 = (($157) - ($165))|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($78,$155,$156,$166);
  STACKTOP = sp;return;
 }
 $167 = $77;
 $19 = $78;
 $20 = $167;
 $168 = $19;
 $18 = $168;
 $169 = $18;
 $170 = ((($169)) + 4|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = HEAP32[$169>>2]|0;
 $173 = $171;
 $174 = $172;
 $175 = (($173) - ($174))|0;
 $176 = (($175|0) / 4)&-1;
 $21 = $176;
 $177 = $20;
 $16 = $168;
 $17 = $177;
 $178 = $16;
 while(1) {
  $179 = $17;
  $180 = ((($178)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($179|0)!=($181|0);
  if (!($182)) {
   break;
  }
  $15 = $178;
  $183 = $15;
  $184 = ((($183)) + 8|0);
  $14 = $184;
  $185 = $14;
  $13 = $185;
  $186 = $13;
  $187 = ((($178)) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($188)) + -4|0);
  HEAP32[$187>>2] = $189;
  $12 = $189;
  $190 = $12;
  $9 = $186;
  $10 = $190;
  $191 = $9;
  $192 = $10;
  ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
  $6 = $191;
  $7 = $192;
  $193 = $6;
  $194 = $7;
  $4 = $193;
  $5 = $194;
 }
 $195 = $21;
 __THREW__ = 0;
 invoke_vii(421,($168|0),($195|0));
 $196 = __THREW__; __THREW__ = 0;
 $197 = $196&1;
 if ($197) {
  $198 = ___cxa_find_matching_catch_3(0|0)|0;
  $199 = tempRet0;
  ___clang_call_terminate($198);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE18__construct_at_endIPfEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 52|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $18 = $12;
 $11 = $18;
 $19 = $11;
 $20 = ((($19)) + 8|0);
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $16 = $22;
 $23 = $15;
 __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($17,$18,$23);
 $24 = $16;
 $25 = $13;
 $26 = $14;
 $27 = ((($18)) + 4|0);
 $4 = $24;
 $5 = $25;
 $6 = $26;
 $7 = $27;
 $28 = $6;
 $29 = $5;
 $30 = $28;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32|0) / 4)&-1;
 $8 = $33;
 $34 = $8;
 $35 = ($34|0)>(0);
 if (!($35)) {
  __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($17);
  STACKTOP = sp;return;
 }
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = $8;
 $40 = $39<<2;
 _memcpy(($37|0),($38|0),($40|0))|0;
 $41 = $8;
 $42 = $7;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($41<<2)|0);
 HEAP32[$42>>2] = $44;
 __ZNSt3__26vectorIfNS_9allocatorIfEEE24__RAII_IncreaseAnnotator6__doneEv($17);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $15 = $18;
 $19 = $15;
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $21 = $14;
 $13 = $18;
 $22 = $13;
 $23 = HEAP32[$22>>2]|0;
 $12 = $23;
 $24 = $12;
 $6 = $18;
 $25 = $6;
 $5 = $25;
 $26 = $5;
 $4 = $26;
 $27 = $4;
 $28 = ((($27)) + 8|0);
 $3 = $28;
 $29 = $3;
 $2 = $29;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$26>>2]|0;
 $33 = $31;
 $34 = $32;
 $35 = (($33) - ($34))|0;
 $36 = (($35|0) / 4)&-1;
 $37 = (($24) + ($36<<2)|0);
 $8 = $18;
 $38 = $8;
 $39 = HEAP32[$38>>2]|0;
 $7 = $39;
 $40 = $7;
 $41 = $17;
 $42 = (($40) + ($41<<2)|0);
 $10 = $18;
 $43 = $10;
 $44 = HEAP32[$43>>2]|0;
 $9 = $44;
 $45 = $9;
 $11 = $18;
 $46 = $11;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$46>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 4)&-1;
 $54 = (($45) + ($53<<2)|0);
 __ZNKSt3__26vectorIfNS_9allocatorIfEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($18,$21,$37,$42,$54);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $24 = sp;
 $27 = sp + 148|0;
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $36 = $39;
 $42 = $36;
 $35 = $42;
 $43 = $35;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $37 = $50;
 $34 = $42;
 $51 = $34;
 $52 = HEAP32[$51>>2]|0;
 $32 = $51;
 $33 = $52;
 $53 = $32;
 while(1) {
  $54 = $33;
  $55 = ((($53)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54|0)!=($56|0);
  if (!($57)) {
   break;
  }
  $31 = $53;
  $58 = $31;
  $59 = ((($58)) + 8|0);
  $30 = $59;
  $60 = $30;
  $29 = $60;
  $61 = $29;
  $62 = ((($53)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -4|0);
  HEAP32[$62>>2] = $64;
  $28 = $64;
  $65 = $28;
  $25 = $61;
  $26 = $65;
  $66 = $25;
  $67 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $66;
  $23 = $67;
  $68 = $22;
  $69 = $23;
  $20 = $68;
  $21 = $69;
 }
 $70 = $37;
 __THREW__ = 0;
 invoke_vii(421,($42|0),($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch_3(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 }
 $19 = $42;
 $18 = $39;
 $75 = $18;
 $76 = ((($75)) + 8|0);
 $17 = $76;
 $77 = $17;
 $16 = $77;
 $78 = $16;
 $79 = HEAP32[$39>>2]|0;
 $15 = $39;
 $80 = $15;
 $14 = $80;
 $81 = $14;
 $13 = $81;
 $82 = $13;
 $83 = ((($82)) + 8|0);
 $12 = $83;
 $84 = $12;
 $11 = $84;
 $85 = $11;
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$81>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $5 = $78;
 $6 = $79;
 $7 = $91;
 $92 = $5;
 $93 = $6;
 $94 = $7;
 $2 = $92;
 $3 = $93;
 $4 = $94;
 $95 = $3;
 $1 = $95;
 $96 = $1;
 __ZdlPv($96);
 $10 = $39;
 $97 = $10;
 $98 = ((($97)) + 8|0);
 $9 = $98;
 $99 = $9;
 $8 = $99;
 $100 = $8;
 HEAP32[$100>>2] = 0;
 $101 = ((($39)) + 4|0);
 HEAP32[$101>>2] = 0;
 HEAP32[$39>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16;
 $19 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($17)|0);
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17);
 }
 $14 = $17;
 $21 = $14;
 $22 = ((($21)) + 8|0);
 $13 = $22;
 $23 = $13;
 $12 = $23;
 $24 = $12;
 $25 = $16;
 $10 = $24;
 $11 = $25;
 $26 = $10;
 $27 = $11;
 $7 = $26;
 $8 = $27;
 $9 = 0;
 $28 = $7;
 $29 = $8;
 $6 = $28;
 $30 = ($29>>>0)>(1073741823);
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($31);
  ___cxa_throw(($31|0),(1888|0),(327|0));
  // unreachable;
 } else {
  $32 = $8;
  $33 = $32<<2;
  $5 = $33;
  $34 = $5;
  $35 = (__Znwj($34)|0);
  $36 = ((($17)) + 4|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$17>>2] = $35;
  $37 = HEAP32[$17>>2]|0;
  $38 = $16;
  $39 = (($37) + ($38<<2)|0);
  $4 = $17;
  $40 = $4;
  $41 = ((($40)) + 8|0);
  $3 = $41;
  $42 = $3;
  $2 = $42;
  $43 = $2;
  HEAP32[$43>>2] = $39;
  __ZNKSt3__26vectorIfNS_9allocatorIfEEE14__annotate_newEj($17,0);
  STACKTOP = sp;return;
 }
}
function __ZN5Level17matchedLowerLevelENSt3__210shared_ptrIS_EE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 164|0;
 $17 = sp + 104|0;
 $23 = sp + 80|0;
 $30 = sp + 48|0;
 $36 = sp + 16|0;
 $37 = sp + 12|0;
 $35 = $1;
 $41 = $35;
 $42 = (__Znwj(32)|0);
 __ZN5LevelC2Ev($42);
 ;HEAP32[$37>>2]=0|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$37>>2]|0;
 __ZNSt3__210shared_ptrI5LevelEC2IS1_EEPT_NS_9enable_ifIXsr14is_convertibleIS5_PS1_EE5valueENS2_5__natEE4typeE($36,$42,$$byval_copy);
 $34 = $36;
 $43 = $34;
 $44 = HEAP32[$43>>2]|0;
 __THREW__ = 0;
 (invoke_iii(419,($44|0),($41|0))|0);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if ($46) {
  $72 = ___cxa_find_matching_catch_2()|0;
  $73 = tempRet0;
  $38 = $72;
  $39 = $73;
  __ZNSt3__210shared_ptrI5LevelED2Ev($36);
  $74 = $38;
  $75 = $39;
  ___resumeException($74|0);
  // unreachable;
 }
 while(1) {
  $33 = $36;
  $47 = $33;
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 16|0);
  $10 = $49;
  $11 = 0;
  $50 = $10;
  $9 = $50;
  $51 = $9;
  $8 = $51;
  $52 = $8;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0|0);
  if (!($54)) {
   label = 9;
   break;
  }
  $7 = $36;
  $55 = $7;
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $5 = $2;
  $58 = $5;
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)==($60|0);
  if ($61) {
   label = 4;
   break;
  }
  $6 = $36;
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 16|0);
  $28 = $36;
  $29 = $78;
  $79 = $28;
  $80 = $29;
  $26 = $30;
  $27 = $80;
  $81 = $26;
  $82 = $27;
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$81>>2] = $83;
  $84 = ((($81)) + 4|0);
  $85 = $27;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  HEAP32[$84>>2] = $87;
  $88 = ((($81)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)!=(0|0);
  if ($90) {
   $91 = ((($81)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($92);
  }
  $24 = $30;
  $25 = $79;
  $93 = $24;
  $94 = $25;
  $21 = $93;
  $22 = $94;
  $95 = $21;
  $20 = $95;
  $96 = $20;
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$23>>2] = $97;
  $98 = $22;
  $18 = $98;
  $99 = $18;
  $100 = HEAP32[$99>>2]|0;
  $101 = $21;
  HEAP32[$101>>2] = $100;
  $19 = $23;
  $102 = $19;
  $103 = HEAP32[$102>>2]|0;
  $104 = $22;
  HEAP32[$104>>2] = $103;
  $105 = ((($93)) + 4|0);
  $106 = $25;
  $107 = ((($106)) + 4|0);
  $15 = $105;
  $16 = $107;
  $108 = $15;
  $14 = $108;
  $109 = $14;
  $110 = HEAP32[$109>>2]|0;
  HEAP32[$17>>2] = $110;
  $111 = $16;
  $12 = $111;
  $112 = $12;
  $113 = HEAP32[$112>>2]|0;
  $114 = $15;
  HEAP32[$114>>2] = $113;
  $13 = $17;
  $115 = $13;
  $116 = HEAP32[$115>>2]|0;
  $117 = $16;
  HEAP32[$117>>2] = $116;
  __ZNSt3__210shared_ptrI5LevelED2Ev($30);
 }
 if ((label|0) == 4) {
  $3 = $0;
  $4 = $36;
  $62 = $3;
  $63 = $4;
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$62>>2] = $64;
  $65 = ((($62)) + 4|0);
  $66 = $4;
  $67 = ((($66)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$65>>2] = $68;
  $69 = $4;
  HEAP32[$69>>2] = 0;
  $70 = $4;
  $71 = ((($70)) + 4|0);
  HEAP32[$71>>2] = 0;
  $40 = 1;
  __ZNSt3__210shared_ptrI5LevelED2Ev($36);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $31 = $0;
  $32 = 0;
  $118 = $31;
  HEAP32[$118>>2] = 0;
  $119 = ((($118)) + 4|0);
  HEAP32[$119>>2] = 0;
  $40 = 1;
  __ZNSt3__210shared_ptrI5LevelED2Ev($36);
  STACKTOP = sp;return;
 }
}
function __ZN5Level18isExactlyContainedENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp + 220|0;
 $9 = sp + 208|0;
 $13 = sp + 192|0;
 $16 = sp + 180|0;
 $20 = sp + 164|0;
 $23 = sp + 152|0;
 $38 = sp + 241|0;
 $39 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 32|0;
 $42 = sp + 24|0;
 $43 = sp + 92|0;
 $44 = sp + 88|0;
 $45 = sp + 84|0;
 $46 = sp + 240|0;
 $47 = sp + 16|0;
 $48 = sp + 8|0;
 $49 = sp;
 $54 = sp + 64|0;
 $55 = sp + 60|0;
 $56 = sp + 56|0;
 $57 = $0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 4|0);
 $2 = $1;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($62)) + 4|0);
 $51 = $60;
 $52 = $63;
 $64 = $51;
 $50 = $64;
 $65 = $50;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$65>>2]|0;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (($71|0) / 4)&-1;
 $53 = $72;
 $73 = $53;
 $74 = $52;
 $3 = $74;
 $75 = $3;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$75>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 4)&-1;
 $83 = ($73|0)==($82|0);
 if (!($83)) {
  $135 = 0;
  STACKTOP = sp;return ($135|0);
 }
 $84 = $51;
 $10 = $84;
 $85 = $10;
 $86 = HEAP32[$85>>2]|0;
 $7 = $85;
 $8 = $86;
 $87 = $8;
 $4 = $6;
 $5 = $87;
 $88 = $4;
 $89 = $5;
 HEAP32[$88>>2] = $89;
 $90 = HEAP32[$6>>2]|0;
 HEAP32[$9>>2] = $90;
 $91 = HEAP32[$9>>2]|0;
 HEAP32[$54>>2] = $91;
 $92 = $51;
 $17 = $92;
 $93 = $17;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $14 = $93;
 $15 = $95;
 $96 = $15;
 $11 = $13;
 $12 = $96;
 $97 = $11;
 $98 = $12;
 HEAP32[$97>>2] = $98;
 $99 = HEAP32[$13>>2]|0;
 HEAP32[$16>>2] = $99;
 $100 = HEAP32[$16>>2]|0;
 HEAP32[$55>>2] = $100;
 $101 = $52;
 $24 = $101;
 $102 = $24;
 $103 = HEAP32[$102>>2]|0;
 $21 = $102;
 $22 = $103;
 $104 = $22;
 $18 = $20;
 $19 = $104;
 $105 = $18;
 $106 = $19;
 HEAP32[$105>>2] = $106;
 $107 = HEAP32[$20>>2]|0;
 HEAP32[$23>>2] = $107;
 $108 = HEAP32[$23>>2]|0;
 HEAP32[$56>>2] = $108;
 ;HEAP8[$47>>0]=HEAP8[$56>>0]|0;HEAP8[$47+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$47+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$47+3>>0]=HEAP8[$56+3>>0]|0;
 ;HEAP8[$48>>0]=HEAP8[$55>>0]|0;HEAP8[$48+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$55+3>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$54>>0]|0;HEAP8[$49+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$54+3>>0]|0;
 ;HEAP32[$43>>2]=HEAP32[$49>>2]|0;
 ;HEAP32[$44>>2]=HEAP32[$48>>2]|0;
 ;HEAP32[$45>>2]=HEAP32[$47>>2]|0;
 ;HEAP8[$39>>0]=HEAP8[$46>>0]|0;
 ;HEAP8[$40>>0]=HEAP8[$45>>0]|0;HEAP8[$40+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$40+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$40+3>>0]=HEAP8[$45+3>>0]|0;
 ;HEAP8[$41>>0]=HEAP8[$44>>0]|0;HEAP8[$41+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$44+3>>0]|0;
 ;HEAP8[$42>>0]=HEAP8[$43>>0]|0;HEAP8[$42+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$42+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$42+3>>0]=HEAP8[$43+3>>0]|0;
 while(1) {
  $36 = $42;
  $37 = $41;
  $109 = $36;
  $110 = $37;
  $34 = $109;
  $35 = $110;
  $111 = $34;
  $33 = $111;
  $112 = $33;
  $113 = HEAP32[$112>>2]|0;
  $114 = $35;
  $32 = $114;
  $115 = $32;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($113|0)==($116|0);
  $118 = $117 ^ 1;
  if (!($118)) {
   label = 7;
   break;
  }
  $25 = $42;
  $119 = $25;
  $120 = HEAP32[$119>>2]|0;
  $26 = $40;
  $121 = $26;
  $122 = HEAP32[$121>>2]|0;
  $27 = $39;
  $28 = $120;
  $29 = $122;
  $123 = $28;
  $124 = +HEAPF32[$123>>2];
  $125 = $29;
  $126 = +HEAPF32[$125>>2];
  $127 = $124 == $126;
  if (!($127)) {
   label = 5;
   break;
  }
  $30 = $42;
  $128 = $30;
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($129)) + 4|0);
  HEAP32[$128>>2] = $130;
  $31 = $40;
  $131 = $31;
  $132 = HEAP32[$131>>2]|0;
  $133 = ((($132)) + 4|0);
  HEAP32[$131>>2] = $133;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 0;
  HEAP8[$38>>0] = $$expand_i1_val;
 }
 else if ((label|0) == 7) {
  $$expand_i1_val2 = 1;
  HEAP8[$38>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$38>>0]|0;
 $134 = $$pre_trunc&1;
 $135 = $134;
 STACKTOP = sp;return ($135|0);
}
function __ZN5Level15areExactlyEqualENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc15 = 0, $$pre_trunc17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 50|0;
 $9 = sp + 16|0;
 $10 = sp + 49|0;
 $11 = sp + 8|0;
 $12 = sp + 48|0;
 $7 = $0;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $6 = $1;
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 $$expand_i1_val = 0;
 HEAP8[$10>>0] = $$expand_i1_val;
 $$expand_i1_val2 = 0;
 HEAP8[$12>>0] = $$expand_i1_val2;
 if ($21) {
  $4 = $9;
  $5 = $0;
  $22 = $4;
  $23 = $5;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$22>>2] = $24;
  $25 = ((($22)) + 4|0);
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$25>>2] = $28;
  $29 = ((($22)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = ((($22)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($33);
  }
  $$expand_i1_val4 = 1;
  HEAP8[$10>>0] = $$expand_i1_val4;
  $2 = $11;
  $3 = $1;
  $34 = $2;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$34>>2] = $36;
  $37 = ((($34)) + 4|0);
  $38 = $3;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$37>>2] = $40;
  $41 = ((($34)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = ((($34)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($45);
  }
  $$expand_i1_val6 = 1;
  HEAP8[$12>>0] = $$expand_i1_val6;
  __THREW__ = 0;
  $46 = (invoke_iii(422,($9|0),($11|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch_2()|0;
   $54 = tempRet0;
   $13 = $53;
   $14 = $54;
   $$pre_trunc15 = HEAP8[$12>>0]|0;
   $55 = $$pre_trunc15&1;
   if ($55) {
    __ZNSt3__210shared_ptrI5LevelED2Ev($11);
   }
   $$pre_trunc17 = HEAP8[$10>>0]|0;
   $56 = $$pre_trunc17&1;
   if (!($56)) {
    $57 = $13;
    $58 = $14;
    ___resumeException($57|0);
    // unreachable;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($9);
   $57 = $13;
   $58 = $14;
   ___resumeException($57|0);
   // unreachable;
  } else {
   $49 = $46;
  }
 } else {
  $49 = 0;
 }
 $$expand_i1_val8 = $49&1;
 HEAP8[$8>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $50 = $$pre_trunc&1;
 if ($50) {
  __ZNSt3__210shared_ptrI5LevelED2Ev($11);
 }
 $$pre_trunc11 = HEAP8[$10>>0]|0;
 $51 = $$pre_trunc11&1;
 if (!($51)) {
  $$pre_trunc13 = HEAP8[$8>>0]|0;
  $52 = $$pre_trunc13&1;
  STACKTOP = sp;return ($52|0);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($9);
 $$pre_trunc13 = HEAP8[$8>>0]|0;
 $52 = $$pre_trunc13&1;
 STACKTOP = sp;return ($52|0);
}
function __ZN5Level19isAnywhereContainedENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $15 = sp + 412|0;
 $18 = sp + 400|0;
 $23 = sp + 380|0;
 $26 = sp + 368|0;
 $36 = sp + 328|0;
 $38 = sp + 24|0;
 $39 = sp + 16|0;
 $43 = sp + 308|0;
 $46 = sp + 296|0;
 $64 = sp + 224|0;
 $67 = sp + 212|0;
 $72 = sp + 192|0;
 $75 = sp + 180|0;
 $85 = sp + 140|0;
 $87 = sp + 8|0;
 $88 = sp;
 $92 = sp + 120|0;
 $95 = sp + 108|0;
 $104 = sp + 468|0;
 $106 = sp + 68|0;
 $107 = sp + 64|0;
 $108 = sp + 60|0;
 $109 = sp + 56|0;
 $110 = sp + 52|0;
 $112 = sp + 44|0;
 $113 = sp + 40|0;
 $114 = sp + 36|0;
 $115 = sp + 32|0;
 $116 = sp + 28|0;
 $103 = $0;
 $117 = $103;
 $118 = HEAP32[$117>>2]|0;
 $119 = ((($118)) + 4|0);
 $2 = $119;
 $120 = $2;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$120>>2]|0;
 $124 = $122;
 $125 = $123;
 $126 = (($124) - ($125))|0;
 $127 = (($126|0) / 4)&-1;
 $3 = $1;
 $128 = $3;
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 4|0);
 $4 = $130;
 $131 = $4;
 $132 = ((($131)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = HEAP32[$131>>2]|0;
 $135 = $133;
 $136 = $134;
 $137 = (($135) - ($136))|0;
 $138 = (($137|0) / 4)&-1;
 $139 = ($127>>>0)>($138>>>0);
 L1: do {
  if ($139) {
   $5 = $1;
   $140 = $5;
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 4|0);
   $6 = $142;
   $143 = $6;
   $144 = ((($143)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$143>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = ($150|0)==(0);
   if ($151) {
    $$expand_i1_val = 0;
    HEAP8[$104>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$104>>0]|0;
    $336 = $$pre_trunc&1;
    STACKTOP = sp;return ($336|0);
   }
   $105 = 0;
   while(1) {
    $152 = $105;
    $7 = $1;
    $153 = $7;
    $154 = HEAP32[$153>>2]|0;
    $155 = ((($154)) + 4|0);
    $8 = $155;
    $156 = $8;
    $157 = ((($156)) + 4|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = HEAP32[$156>>2]|0;
    $160 = $158;
    $161 = $159;
    $162 = (($160) - ($161))|0;
    $163 = (($162|0) / 4)&-1;
    $164 = ($152>>>0)<($163>>>0);
    if (!($164)) {
     break L1;
    }
    $9 = $1;
    $165 = $9;
    $166 = HEAP32[$165>>2]|0;
    $167 = ((($166)) + 4|0);
    $168 = $105;
    $10 = $167;
    $11 = $168;
    $169 = $10;
    $170 = HEAP32[$169>>2]|0;
    $171 = $11;
    $172 = (($170) + ($171<<2)|0);
    $173 = +HEAPF32[$172>>2];
    HEAPF32[$106>>2] = $173;
    $12 = $0;
    $174 = $12;
    $175 = HEAP32[$174>>2]|0;
    $176 = ((($175)) + 4|0);
    $19 = $176;
    $177 = $19;
    $178 = HEAP32[$177>>2]|0;
    $16 = $177;
    $17 = $178;
    $179 = $17;
    $13 = $15;
    $14 = $179;
    $180 = $13;
    $181 = $14;
    HEAP32[$180>>2] = $181;
    $182 = HEAP32[$15>>2]|0;
    HEAP32[$18>>2] = $182;
    $183 = HEAP32[$18>>2]|0;
    HEAP32[$108>>2] = $183;
    $20 = $0;
    $184 = $20;
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($185)) + 4|0);
    $27 = $186;
    $187 = $27;
    $188 = ((($187)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $24 = $187;
    $25 = $189;
    $190 = $25;
    $21 = $23;
    $22 = $190;
    $191 = $21;
    $192 = $22;
    HEAP32[$191>>2] = $192;
    $193 = HEAP32[$23>>2]|0;
    HEAP32[$26>>2] = $193;
    $194 = HEAP32[$26>>2]|0;
    HEAP32[$109>>2] = $194;
    ;HEAP8[$38>>0]=HEAP8[$109>>0]|0;HEAP8[$38+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$109+3>>0]|0;
    ;HEAP8[$39>>0]=HEAP8[$108>>0]|0;HEAP8[$39+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$108+3>>0]|0;
    $37 = $106;
    while(1) {
     $34 = $39;
     $35 = $38;
     $195 = $34;
     $196 = $35;
     $32 = $195;
     $33 = $196;
     $197 = $32;
     $31 = $197;
     $198 = $31;
     $199 = HEAP32[$198>>2]|0;
     $200 = $33;
     $30 = $200;
     $201 = $30;
     $202 = HEAP32[$201>>2]|0;
     $203 = ($199|0)==($202|0);
     $204 = $203 ^ 1;
     if (!($204)) {
      break;
     }
     $28 = $39;
     $205 = $28;
     $206 = HEAP32[$205>>2]|0;
     $207 = +HEAPF32[$206>>2];
     $208 = $37;
     $209 = +HEAPF32[$208>>2];
     $210 = $207 == $209;
     if ($210) {
      break;
     }
     $29 = $39;
     $211 = $29;
     $212 = HEAP32[$211>>2]|0;
     $213 = ((($212)) + 4|0);
     HEAP32[$211>>2] = $213;
    }
    ;HEAP32[$36>>2]=HEAP32[$39>>2]|0;
    $214 = HEAP32[$36>>2]|0;
    HEAP32[$107>>2] = $214;
    $40 = $0;
    $215 = $40;
    $216 = HEAP32[$215>>2]|0;
    $217 = ((($216)) + 4|0);
    $47 = $217;
    $218 = $47;
    $219 = ((($218)) + 4|0);
    $220 = HEAP32[$219>>2]|0;
    $44 = $218;
    $45 = $220;
    $221 = $45;
    $41 = $43;
    $42 = $221;
    $222 = $41;
    $223 = $42;
    HEAP32[$222>>2] = $223;
    $224 = HEAP32[$43>>2]|0;
    HEAP32[$46>>2] = $224;
    $225 = HEAP32[$46>>2]|0;
    HEAP32[$110>>2] = $225;
    $52 = $107;
    $53 = $110;
    $226 = $52;
    $227 = $53;
    $50 = $226;
    $51 = $227;
    $228 = $50;
    $49 = $228;
    $229 = $49;
    $230 = HEAP32[$229>>2]|0;
    $231 = $51;
    $48 = $231;
    $232 = $48;
    $233 = HEAP32[$232>>2]|0;
    $234 = ($230|0)==($233|0);
    $235 = $234 ^ 1;
    if (!($235)) {
     break;
    }
    $236 = $105;
    $237 = (($236) + 1)|0;
    $105 = $237;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$104>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$104>>0]|0;
   $336 = $$pre_trunc&1;
   STACKTOP = sp;return ($336|0);
  } else {
   $54 = $0;
   $238 = $54;
   $239 = HEAP32[$238>>2]|0;
   $240 = ((($239)) + 4|0);
   $55 = $240;
   $241 = $55;
   $242 = ((($241)) + 4|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[$241>>2]|0;
   $245 = $243;
   $246 = $244;
   $247 = (($245) - ($246))|0;
   $248 = (($247|0) / 4)&-1;
   $249 = ($248|0)==(0);
   if ($249) {
    $$expand_i1_val4 = 0;
    HEAP8[$104>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$104>>0]|0;
    $336 = $$pre_trunc&1;
    STACKTOP = sp;return ($336|0);
   }
   $111 = 0;
   while(1) {
    $250 = $111;
    $56 = $0;
    $251 = $56;
    $252 = HEAP32[$251>>2]|0;
    $253 = ((($252)) + 4|0);
    $57 = $253;
    $254 = $57;
    $255 = ((($254)) + 4|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = HEAP32[$254>>2]|0;
    $258 = $256;
    $259 = $257;
    $260 = (($258) - ($259))|0;
    $261 = (($260|0) / 4)&-1;
    $262 = ($250>>>0)<($261>>>0);
    if (!($262)) {
     break L1;
    }
    $58 = $0;
    $263 = $58;
    $264 = HEAP32[$263>>2]|0;
    $265 = ((($264)) + 4|0);
    $266 = $111;
    $59 = $265;
    $60 = $266;
    $267 = $59;
    $268 = HEAP32[$267>>2]|0;
    $269 = $60;
    $270 = (($268) + ($269<<2)|0);
    $271 = +HEAPF32[$270>>2];
    HEAPF32[$112>>2] = $271;
    $61 = $1;
    $272 = $61;
    $273 = HEAP32[$272>>2]|0;
    $274 = ((($273)) + 4|0);
    $68 = $274;
    $275 = $68;
    $276 = HEAP32[$275>>2]|0;
    $65 = $275;
    $66 = $276;
    $277 = $66;
    $62 = $64;
    $63 = $277;
    $278 = $62;
    $279 = $63;
    HEAP32[$278>>2] = $279;
    $280 = HEAP32[$64>>2]|0;
    HEAP32[$67>>2] = $280;
    $281 = HEAP32[$67>>2]|0;
    HEAP32[$114>>2] = $281;
    $69 = $1;
    $282 = $69;
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($283)) + 4|0);
    $76 = $284;
    $285 = $76;
    $286 = ((($285)) + 4|0);
    $287 = HEAP32[$286>>2]|0;
    $73 = $285;
    $74 = $287;
    $288 = $74;
    $70 = $72;
    $71 = $288;
    $289 = $70;
    $290 = $71;
    HEAP32[$289>>2] = $290;
    $291 = HEAP32[$72>>2]|0;
    HEAP32[$75>>2] = $291;
    $292 = HEAP32[$75>>2]|0;
    HEAP32[$115>>2] = $292;
    ;HEAP8[$87>>0]=HEAP8[$115>>0]|0;HEAP8[$87+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$115+3>>0]|0;
    ;HEAP8[$88>>0]=HEAP8[$114>>0]|0;HEAP8[$88+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$114+3>>0]|0;
    $86 = $112;
    while(1) {
     $83 = $88;
     $84 = $87;
     $293 = $83;
     $294 = $84;
     $81 = $293;
     $82 = $294;
     $295 = $81;
     $80 = $295;
     $296 = $80;
     $297 = HEAP32[$296>>2]|0;
     $298 = $82;
     $79 = $298;
     $299 = $79;
     $300 = HEAP32[$299>>2]|0;
     $301 = ($297|0)==($300|0);
     $302 = $301 ^ 1;
     if (!($302)) {
      break;
     }
     $77 = $88;
     $303 = $77;
     $304 = HEAP32[$303>>2]|0;
     $305 = +HEAPF32[$304>>2];
     $306 = $86;
     $307 = +HEAPF32[$306>>2];
     $308 = $305 == $307;
     if ($308) {
      break;
     }
     $78 = $88;
     $309 = $78;
     $310 = HEAP32[$309>>2]|0;
     $311 = ((($310)) + 4|0);
     HEAP32[$309>>2] = $311;
    }
    ;HEAP32[$85>>2]=HEAP32[$88>>2]|0;
    $312 = HEAP32[$85>>2]|0;
    HEAP32[$113>>2] = $312;
    $89 = $1;
    $313 = $89;
    $314 = HEAP32[$313>>2]|0;
    $315 = ((($314)) + 4|0);
    $96 = $315;
    $316 = $96;
    $317 = ((($316)) + 4|0);
    $318 = HEAP32[$317>>2]|0;
    $93 = $316;
    $94 = $318;
    $319 = $94;
    $90 = $92;
    $91 = $319;
    $320 = $90;
    $321 = $91;
    HEAP32[$320>>2] = $321;
    $322 = HEAP32[$92>>2]|0;
    HEAP32[$95>>2] = $322;
    $323 = HEAP32[$95>>2]|0;
    HEAP32[$116>>2] = $323;
    $101 = $113;
    $102 = $116;
    $324 = $101;
    $325 = $102;
    $99 = $324;
    $100 = $325;
    $326 = $99;
    $98 = $326;
    $327 = $98;
    $328 = HEAP32[$327>>2]|0;
    $329 = $100;
    $97 = $329;
    $330 = $97;
    $331 = HEAP32[$330>>2]|0;
    $332 = ($328|0)==($331|0);
    $333 = $332 ^ 1;
    if (!($333)) {
     break;
    }
    $334 = $111;
    $335 = (($334) + 1)|0;
    $111 = $335;
   }
   $$expand_i1_val6 = 0;
   HEAP8[$104>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$104>>0]|0;
   $336 = $$pre_trunc&1;
   STACKTOP = sp;return ($336|0);
  }
 } while(0);
 $$expand_i1_val8 = 1;
 HEAP8[$104>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$104>>0]|0;
 $336 = $$pre_trunc&1;
 STACKTOP = sp;return ($336|0);
}
function __ZN5Level16areAnywhereEqualENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc15 = 0, $$pre_trunc17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 50|0;
 $9 = sp + 16|0;
 $10 = sp + 49|0;
 $11 = sp + 8|0;
 $12 = sp + 48|0;
 $7 = $0;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $6 = $1;
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 $$expand_i1_val = 0;
 HEAP8[$10>>0] = $$expand_i1_val;
 $$expand_i1_val2 = 0;
 HEAP8[$12>>0] = $$expand_i1_val2;
 if ($21) {
  $4 = $9;
  $5 = $0;
  $22 = $4;
  $23 = $5;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$22>>2] = $24;
  $25 = ((($22)) + 4|0);
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$25>>2] = $28;
  $29 = ((($22)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = ((($22)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($33);
  }
  $$expand_i1_val4 = 1;
  HEAP8[$10>>0] = $$expand_i1_val4;
  $2 = $11;
  $3 = $1;
  $34 = $2;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$34>>2] = $36;
  $37 = ((($34)) + 4|0);
  $38 = $3;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$37>>2] = $40;
  $41 = ((($34)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = ((($34)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($45);
  }
  $$expand_i1_val6 = 1;
  HEAP8[$12>>0] = $$expand_i1_val6;
  __THREW__ = 0;
  $46 = (invoke_iii(423,($9|0),($11|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch_2()|0;
   $54 = tempRet0;
   $13 = $53;
   $14 = $54;
   $$pre_trunc15 = HEAP8[$12>>0]|0;
   $55 = $$pre_trunc15&1;
   if ($55) {
    __ZNSt3__210shared_ptrI5LevelED2Ev($11);
   }
   $$pre_trunc17 = HEAP8[$10>>0]|0;
   $56 = $$pre_trunc17&1;
   if (!($56)) {
    $57 = $13;
    $58 = $14;
    ___resumeException($57|0);
    // unreachable;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($9);
   $57 = $13;
   $58 = $14;
   ___resumeException($57|0);
   // unreachable;
  } else {
   $49 = $46;
  }
 } else {
  $49 = 0;
 }
 $$expand_i1_val8 = $49&1;
 HEAP8[$8>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $50 = $$pre_trunc&1;
 if ($50) {
  __ZNSt3__210shared_ptrI5LevelED2Ev($11);
 }
 $$pre_trunc11 = HEAP8[$10>>0]|0;
 $51 = $$pre_trunc11&1;
 if (!($51)) {
  $$pre_trunc13 = HEAP8[$8>>0]|0;
  $52 = $$pre_trunc13&1;
  STACKTOP = sp;return ($52|0);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($9);
 $$pre_trunc13 = HEAP8[$8>>0]|0;
 $52 = $$pre_trunc13&1;
 STACKTOP = sp;return ($52|0);
}
function __ZN5Level16isStartContainedENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0;
 var $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $15 = sp + 540|0;
 $18 = sp + 528|0;
 $23 = sp + 508|0;
 $26 = sp + 496|0;
 $32 = sp + 472|0;
 $43 = sp + 428|0;
 $45 = sp + 24|0;
 $46 = sp + 16|0;
 $50 = sp + 408|0;
 $53 = sp + 396|0;
 $59 = sp + 372|0;
 $78 = sp + 296|0;
 $81 = sp + 284|0;
 $86 = sp + 264|0;
 $89 = sp + 252|0;
 $95 = sp + 228|0;
 $106 = sp + 184|0;
 $108 = sp + 8|0;
 $109 = sp;
 $113 = sp + 164|0;
 $116 = sp + 152|0;
 $122 = sp + 128|0;
 $132 = sp + 596|0;
 $134 = sp + 84|0;
 $135 = sp + 80|0;
 $136 = sp + 76|0;
 $137 = sp + 72|0;
 $138 = sp + 68|0;
 $139 = sp + 64|0;
 $140 = sp + 60|0;
 $142 = sp + 52|0;
 $143 = sp + 48|0;
 $144 = sp + 44|0;
 $145 = sp + 40|0;
 $146 = sp + 36|0;
 $147 = sp + 32|0;
 $148 = sp + 28|0;
 $131 = $0;
 $149 = $131;
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($150)) + 4|0);
 $2 = $151;
 $152 = $2;
 $153 = ((($152)) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = HEAP32[$152>>2]|0;
 $156 = $154;
 $157 = $155;
 $158 = (($156) - ($157))|0;
 $159 = (($158|0) / 4)&-1;
 $3 = $1;
 $160 = $3;
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($161)) + 4|0);
 $4 = $162;
 $163 = $4;
 $164 = ((($163)) + 4|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = HEAP32[$163>>2]|0;
 $167 = $165;
 $168 = $166;
 $169 = (($167) - ($168))|0;
 $170 = (($169|0) / 4)&-1;
 $171 = ($159>>>0)>($170>>>0);
 L1: do {
  if ($171) {
   $5 = $1;
   $172 = $5;
   $173 = HEAP32[$172>>2]|0;
   $174 = ((($173)) + 4|0);
   $6 = $174;
   $175 = $6;
   $176 = ((($175)) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = HEAP32[$175>>2]|0;
   $179 = $177;
   $180 = $178;
   $181 = (($179) - ($180))|0;
   $182 = (($181|0) / 4)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$expand_i1_val = 0;
    HEAP8[$132>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$132>>0]|0;
    $436 = $$pre_trunc&1;
    STACKTOP = sp;return ($436|0);
   }
   $133 = 0;
   while(1) {
    $184 = $133;
    $7 = $1;
    $185 = $7;
    $186 = HEAP32[$185>>2]|0;
    $187 = ((($186)) + 4|0);
    $8 = $187;
    $188 = $8;
    $189 = ((($188)) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = HEAP32[$188>>2]|0;
    $192 = $190;
    $193 = $191;
    $194 = (($192) - ($193))|0;
    $195 = (($194|0) / 4)&-1;
    $196 = ($184>>>0)<($195>>>0);
    if (!($196)) {
     break L1;
    }
    $9 = $1;
    $197 = $9;
    $198 = HEAP32[$197>>2]|0;
    $199 = ((($198)) + 4|0);
    $200 = $133;
    $10 = $199;
    $11 = $200;
    $201 = $10;
    $202 = HEAP32[$201>>2]|0;
    $203 = $11;
    $204 = (($202) + ($203<<2)|0);
    $205 = +HEAPF32[$204>>2];
    HEAPF32[$134>>2] = $205;
    $12 = $0;
    $206 = $12;
    $207 = HEAP32[$206>>2]|0;
    $208 = ((($207)) + 4|0);
    $19 = $208;
    $209 = $19;
    $210 = HEAP32[$209>>2]|0;
    $16 = $209;
    $17 = $210;
    $211 = $17;
    $13 = $15;
    $14 = $211;
    $212 = $13;
    $213 = $14;
    HEAP32[$212>>2] = $213;
    $214 = HEAP32[$15>>2]|0;
    HEAP32[$18>>2] = $214;
    $215 = HEAP32[$18>>2]|0;
    HEAP32[$136>>2] = $215;
    $20 = $0;
    $216 = $20;
    $217 = HEAP32[$216>>2]|0;
    $218 = ((($217)) + 4|0);
    $27 = $218;
    $219 = $27;
    $220 = HEAP32[$219>>2]|0;
    $24 = $219;
    $25 = $220;
    $221 = $25;
    $21 = $23;
    $22 = $221;
    $222 = $21;
    $223 = $22;
    HEAP32[$222>>2] = $223;
    $224 = HEAP32[$23>>2]|0;
    HEAP32[$26>>2] = $224;
    $225 = HEAP32[$26>>2]|0;
    HEAP32[$138>>2] = $225;
    $28 = $1;
    $226 = $28;
    $227 = HEAP32[$226>>2]|0;
    $228 = ((($227)) + 4|0);
    $29 = $228;
    $229 = $29;
    $230 = ((($229)) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = HEAP32[$229>>2]|0;
    $233 = $231;
    $234 = $232;
    $235 = (($233) - ($234))|0;
    $236 = (($235|0) / 4)&-1;
    $33 = $138;
    $34 = $236;
    $237 = $33;
    ;HEAP32[$32>>2]=HEAP32[$237>>2]|0;
    $238 = $34;
    $30 = $32;
    $31 = $238;
    $239 = $30;
    $240 = $31;
    $241 = HEAP32[$239>>2]|0;
    $242 = (($241) + ($240<<2)|0);
    HEAP32[$239>>2] = $242;
    $243 = HEAP32[$32>>2]|0;
    HEAP32[$137>>2] = $243;
    ;HEAP8[$45>>0]=HEAP8[$137>>0]|0;HEAP8[$45+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$45+3>>0]=HEAP8[$137+3>>0]|0;
    ;HEAP8[$46>>0]=HEAP8[$136>>0]|0;HEAP8[$46+1>>0]=HEAP8[$136+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$136+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$136+3>>0]|0;
    $44 = $134;
    while(1) {
     $41 = $46;
     $42 = $45;
     $244 = $41;
     $245 = $42;
     $39 = $244;
     $40 = $245;
     $246 = $39;
     $38 = $246;
     $247 = $38;
     $248 = HEAP32[$247>>2]|0;
     $249 = $40;
     $37 = $249;
     $250 = $37;
     $251 = HEAP32[$250>>2]|0;
     $252 = ($248|0)==($251|0);
     $253 = $252 ^ 1;
     if (!($253)) {
      break;
     }
     $35 = $46;
     $254 = $35;
     $255 = HEAP32[$254>>2]|0;
     $256 = +HEAPF32[$255>>2];
     $257 = $44;
     $258 = +HEAPF32[$257>>2];
     $259 = $256 == $258;
     if ($259) {
      break;
     }
     $36 = $46;
     $260 = $36;
     $261 = HEAP32[$260>>2]|0;
     $262 = ((($261)) + 4|0);
     HEAP32[$260>>2] = $262;
    }
    ;HEAP32[$43>>2]=HEAP32[$46>>2]|0;
    $263 = HEAP32[$43>>2]|0;
    HEAP32[$135>>2] = $263;
    $47 = $0;
    $264 = $47;
    $265 = HEAP32[$264>>2]|0;
    $266 = ((($265)) + 4|0);
    $54 = $266;
    $267 = $54;
    $268 = HEAP32[$267>>2]|0;
    $51 = $267;
    $52 = $268;
    $269 = $52;
    $48 = $50;
    $49 = $269;
    $270 = $48;
    $271 = $49;
    HEAP32[$270>>2] = $271;
    $272 = HEAP32[$50>>2]|0;
    HEAP32[$53>>2] = $272;
    $273 = HEAP32[$53>>2]|0;
    HEAP32[$140>>2] = $273;
    $55 = $1;
    $274 = $55;
    $275 = HEAP32[$274>>2]|0;
    $276 = ((($275)) + 4|0);
    $56 = $276;
    $277 = $56;
    $278 = ((($277)) + 4|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = HEAP32[$277>>2]|0;
    $281 = $279;
    $282 = $280;
    $283 = (($281) - ($282))|0;
    $284 = (($283|0) / 4)&-1;
    $60 = $140;
    $61 = $284;
    $285 = $60;
    ;HEAP32[$59>>2]=HEAP32[$285>>2]|0;
    $286 = $61;
    $57 = $59;
    $58 = $286;
    $287 = $57;
    $288 = $58;
    $289 = HEAP32[$287>>2]|0;
    $290 = (($289) + ($288<<2)|0);
    HEAP32[$287>>2] = $290;
    $291 = HEAP32[$59>>2]|0;
    HEAP32[$139>>2] = $291;
    $66 = $135;
    $67 = $139;
    $292 = $66;
    $293 = $67;
    $64 = $292;
    $65 = $293;
    $294 = $64;
    $63 = $294;
    $295 = $63;
    $296 = HEAP32[$295>>2]|0;
    $297 = $65;
    $62 = $297;
    $298 = $62;
    $299 = HEAP32[$298>>2]|0;
    $300 = ($296|0)==($299|0);
    $301 = $300 ^ 1;
    if (!($301)) {
     break;
    }
    $302 = $133;
    $303 = (($302) + 1)|0;
    $133 = $303;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$132>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$132>>0]|0;
   $436 = $$pre_trunc&1;
   STACKTOP = sp;return ($436|0);
  } else {
   $68 = $0;
   $304 = $68;
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($305)) + 4|0);
   $69 = $306;
   $307 = $69;
   $308 = ((($307)) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$307>>2]|0;
   $311 = $309;
   $312 = $310;
   $313 = (($311) - ($312))|0;
   $314 = (($313|0) / 4)&-1;
   $315 = ($314|0)==(0);
   if ($315) {
    $$expand_i1_val4 = 0;
    HEAP8[$132>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$132>>0]|0;
    $436 = $$pre_trunc&1;
    STACKTOP = sp;return ($436|0);
   }
   $141 = 0;
   while(1) {
    $316 = $141;
    $70 = $0;
    $317 = $70;
    $318 = HEAP32[$317>>2]|0;
    $319 = ((($318)) + 4|0);
    $71 = $319;
    $320 = $71;
    $321 = ((($320)) + 4|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = HEAP32[$320>>2]|0;
    $324 = $322;
    $325 = $323;
    $326 = (($324) - ($325))|0;
    $327 = (($326|0) / 4)&-1;
    $328 = ($316>>>0)<($327>>>0);
    if (!($328)) {
     break L1;
    }
    $72 = $0;
    $329 = $72;
    $330 = HEAP32[$329>>2]|0;
    $331 = ((($330)) + 4|0);
    $332 = $141;
    $73 = $331;
    $74 = $332;
    $333 = $73;
    $334 = HEAP32[$333>>2]|0;
    $335 = $74;
    $336 = (($334) + ($335<<2)|0);
    $337 = +HEAPF32[$336>>2];
    HEAPF32[$142>>2] = $337;
    $75 = $1;
    $338 = $75;
    $339 = HEAP32[$338>>2]|0;
    $340 = ((($339)) + 4|0);
    $82 = $340;
    $341 = $82;
    $342 = HEAP32[$341>>2]|0;
    $79 = $341;
    $80 = $342;
    $343 = $80;
    $76 = $78;
    $77 = $343;
    $344 = $76;
    $345 = $77;
    HEAP32[$344>>2] = $345;
    $346 = HEAP32[$78>>2]|0;
    HEAP32[$81>>2] = $346;
    $347 = HEAP32[$81>>2]|0;
    HEAP32[$144>>2] = $347;
    $83 = $1;
    $348 = $83;
    $349 = HEAP32[$348>>2]|0;
    $350 = ((($349)) + 4|0);
    $90 = $350;
    $351 = $90;
    $352 = HEAP32[$351>>2]|0;
    $87 = $351;
    $88 = $352;
    $353 = $88;
    $84 = $86;
    $85 = $353;
    $354 = $84;
    $355 = $85;
    HEAP32[$354>>2] = $355;
    $356 = HEAP32[$86>>2]|0;
    HEAP32[$89>>2] = $356;
    $357 = HEAP32[$89>>2]|0;
    HEAP32[$146>>2] = $357;
    $91 = $0;
    $358 = $91;
    $359 = HEAP32[$358>>2]|0;
    $360 = ((($359)) + 4|0);
    $92 = $360;
    $361 = $92;
    $362 = ((($361)) + 4|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = HEAP32[$361>>2]|0;
    $365 = $363;
    $366 = $364;
    $367 = (($365) - ($366))|0;
    $368 = (($367|0) / 4)&-1;
    $96 = $146;
    $97 = $368;
    $369 = $96;
    ;HEAP32[$95>>2]=HEAP32[$369>>2]|0;
    $370 = $97;
    $93 = $95;
    $94 = $370;
    $371 = $93;
    $372 = $94;
    $373 = HEAP32[$371>>2]|0;
    $374 = (($373) + ($372<<2)|0);
    HEAP32[$371>>2] = $374;
    $375 = HEAP32[$95>>2]|0;
    HEAP32[$145>>2] = $375;
    ;HEAP8[$108>>0]=HEAP8[$145>>0]|0;HEAP8[$108+1>>0]=HEAP8[$145+1>>0]|0;HEAP8[$108+2>>0]=HEAP8[$145+2>>0]|0;HEAP8[$108+3>>0]=HEAP8[$145+3>>0]|0;
    ;HEAP8[$109>>0]=HEAP8[$144>>0]|0;HEAP8[$109+1>>0]=HEAP8[$144+1>>0]|0;HEAP8[$109+2>>0]=HEAP8[$144+2>>0]|0;HEAP8[$109+3>>0]=HEAP8[$144+3>>0]|0;
    $107 = $142;
    while(1) {
     $104 = $109;
     $105 = $108;
     $376 = $104;
     $377 = $105;
     $102 = $376;
     $103 = $377;
     $378 = $102;
     $101 = $378;
     $379 = $101;
     $380 = HEAP32[$379>>2]|0;
     $381 = $103;
     $100 = $381;
     $382 = $100;
     $383 = HEAP32[$382>>2]|0;
     $384 = ($380|0)==($383|0);
     $385 = $384 ^ 1;
     if (!($385)) {
      break;
     }
     $98 = $109;
     $386 = $98;
     $387 = HEAP32[$386>>2]|0;
     $388 = +HEAPF32[$387>>2];
     $389 = $107;
     $390 = +HEAPF32[$389>>2];
     $391 = $388 == $390;
     if ($391) {
      break;
     }
     $99 = $109;
     $392 = $99;
     $393 = HEAP32[$392>>2]|0;
     $394 = ((($393)) + 4|0);
     HEAP32[$392>>2] = $394;
    }
    ;HEAP32[$106>>2]=HEAP32[$109>>2]|0;
    $395 = HEAP32[$106>>2]|0;
    HEAP32[$143>>2] = $395;
    $110 = $1;
    $396 = $110;
    $397 = HEAP32[$396>>2]|0;
    $398 = ((($397)) + 4|0);
    $117 = $398;
    $399 = $117;
    $400 = HEAP32[$399>>2]|0;
    $114 = $399;
    $115 = $400;
    $401 = $115;
    $111 = $113;
    $112 = $401;
    $402 = $111;
    $403 = $112;
    HEAP32[$402>>2] = $403;
    $404 = HEAP32[$113>>2]|0;
    HEAP32[$116>>2] = $404;
    $405 = HEAP32[$116>>2]|0;
    HEAP32[$148>>2] = $405;
    $118 = $0;
    $406 = $118;
    $407 = HEAP32[$406>>2]|0;
    $408 = ((($407)) + 4|0);
    $119 = $408;
    $409 = $119;
    $410 = ((($409)) + 4|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = HEAP32[$409>>2]|0;
    $413 = $411;
    $414 = $412;
    $415 = (($413) - ($414))|0;
    $416 = (($415|0) / 4)&-1;
    $123 = $148;
    $124 = $416;
    $417 = $123;
    ;HEAP32[$122>>2]=HEAP32[$417>>2]|0;
    $418 = $124;
    $120 = $122;
    $121 = $418;
    $419 = $120;
    $420 = $121;
    $421 = HEAP32[$419>>2]|0;
    $422 = (($421) + ($420<<2)|0);
    HEAP32[$419>>2] = $422;
    $423 = HEAP32[$122>>2]|0;
    HEAP32[$147>>2] = $423;
    $129 = $143;
    $130 = $147;
    $424 = $129;
    $425 = $130;
    $127 = $424;
    $128 = $425;
    $426 = $127;
    $126 = $426;
    $427 = $126;
    $428 = HEAP32[$427>>2]|0;
    $429 = $128;
    $125 = $429;
    $430 = $125;
    $431 = HEAP32[$430>>2]|0;
    $432 = ($428|0)==($431|0);
    $433 = $432 ^ 1;
    if (!($433)) {
     break;
    }
    $434 = $141;
    $435 = (($434) + 1)|0;
    $141 = $435;
   }
   $$expand_i1_val6 = 0;
   HEAP8[$132>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$132>>0]|0;
   $436 = $$pre_trunc&1;
   STACKTOP = sp;return ($436|0);
  }
 } while(0);
 $$expand_i1_val8 = 1;
 HEAP8[$132>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$132>>0]|0;
 $436 = $$pre_trunc&1;
 STACKTOP = sp;return ($436|0);
}
function __ZN5Level13areStartEqualENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc15 = 0, $$pre_trunc17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 50|0;
 $9 = sp + 16|0;
 $10 = sp + 49|0;
 $11 = sp + 8|0;
 $12 = sp + 48|0;
 $7 = $0;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $6 = $1;
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 $$expand_i1_val = 0;
 HEAP8[$10>>0] = $$expand_i1_val;
 $$expand_i1_val2 = 0;
 HEAP8[$12>>0] = $$expand_i1_val2;
 if ($21) {
  $4 = $9;
  $5 = $0;
  $22 = $4;
  $23 = $5;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$22>>2] = $24;
  $25 = ((($22)) + 4|0);
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$25>>2] = $28;
  $29 = ((($22)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = ((($22)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($33);
  }
  $$expand_i1_val4 = 1;
  HEAP8[$10>>0] = $$expand_i1_val4;
  $2 = $11;
  $3 = $1;
  $34 = $2;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$34>>2] = $36;
  $37 = ((($34)) + 4|0);
  $38 = $3;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$37>>2] = $40;
  $41 = ((($34)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = ((($34)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($45);
  }
  $$expand_i1_val6 = 1;
  HEAP8[$12>>0] = $$expand_i1_val6;
  __THREW__ = 0;
  $46 = (invoke_iii(424,($9|0),($11|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch_2()|0;
   $54 = tempRet0;
   $13 = $53;
   $14 = $54;
   $$pre_trunc15 = HEAP8[$12>>0]|0;
   $55 = $$pre_trunc15&1;
   if ($55) {
    __ZNSt3__210shared_ptrI5LevelED2Ev($11);
   }
   $$pre_trunc17 = HEAP8[$10>>0]|0;
   $56 = $$pre_trunc17&1;
   if (!($56)) {
    $57 = $13;
    $58 = $14;
    ___resumeException($57|0);
    // unreachable;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($9);
   $57 = $13;
   $58 = $14;
   ___resumeException($57|0);
   // unreachable;
  } else {
   $49 = $46;
  }
 } else {
  $49 = 0;
 }
 $$expand_i1_val8 = $49&1;
 HEAP8[$8>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $50 = $$pre_trunc&1;
 if ($50) {
  __ZNSt3__210shared_ptrI5LevelED2Ev($11);
 }
 $$pre_trunc11 = HEAP8[$10>>0]|0;
 $51 = $$pre_trunc11&1;
 if (!($51)) {
  $$pre_trunc13 = HEAP8[$8>>0]|0;
  $52 = $$pre_trunc13&1;
  STACKTOP = sp;return ($52|0);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($9);
 $$pre_trunc13 = HEAP8[$8>>0]|0;
 $52 = $$pre_trunc13&1;
 STACKTOP = sp;return ($52|0);
}
function __ZN5Level14isEndContainedENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $15 = sp + 500|0;
 $18 = sp + 488|0;
 $24 = sp + 464|0;
 $27 = sp + 452|0;
 $33 = sp + 428|0;
 $36 = sp + 416|0;
 $46 = sp + 376|0;
 $48 = sp + 24|0;
 $49 = sp + 16|0;
 $53 = sp + 356|0;
 $56 = sp + 344|0;
 $74 = sp + 272|0;
 $77 = sp + 260|0;
 $83 = sp + 236|0;
 $86 = sp + 224|0;
 $92 = sp + 200|0;
 $95 = sp + 188|0;
 $105 = sp + 148|0;
 $107 = sp + 8|0;
 $108 = sp;
 $112 = sp + 128|0;
 $115 = sp + 116|0;
 $124 = sp + 556|0;
 $126 = sp + 76|0;
 $127 = sp + 72|0;
 $128 = sp + 68|0;
 $129 = sp + 64|0;
 $130 = sp + 60|0;
 $131 = sp + 56|0;
 $133 = sp + 48|0;
 $134 = sp + 44|0;
 $135 = sp + 40|0;
 $136 = sp + 36|0;
 $137 = sp + 32|0;
 $138 = sp + 28|0;
 $123 = $0;
 $139 = $123;
 $140 = HEAP32[$139>>2]|0;
 $141 = ((($140)) + 4|0);
 $2 = $141;
 $142 = $2;
 $143 = ((($142)) + 4|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = HEAP32[$142>>2]|0;
 $146 = $144;
 $147 = $145;
 $148 = (($146) - ($147))|0;
 $149 = (($148|0) / 4)&-1;
 $3 = $1;
 $150 = $3;
 $151 = HEAP32[$150>>2]|0;
 $152 = ((($151)) + 4|0);
 $4 = $152;
 $153 = $4;
 $154 = ((($153)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$153>>2]|0;
 $157 = $155;
 $158 = $156;
 $159 = (($157) - ($158))|0;
 $160 = (($159|0) / 4)&-1;
 $161 = ($149>>>0)>($160>>>0);
 L1: do {
  if ($161) {
   $5 = $1;
   $162 = $5;
   $163 = HEAP32[$162>>2]|0;
   $164 = ((($163)) + 4|0);
   $6 = $164;
   $165 = $6;
   $166 = ((($165)) + 4|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = HEAP32[$165>>2]|0;
   $169 = $167;
   $170 = $168;
   $171 = (($169) - ($170))|0;
   $172 = (($171|0) / 4)&-1;
   $173 = ($172|0)==(0);
   if ($173) {
    $$expand_i1_val = 0;
    HEAP8[$124>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$124>>0]|0;
    $403 = $$pre_trunc&1;
    STACKTOP = sp;return ($403|0);
   }
   $125 = 0;
   while(1) {
    $174 = $125;
    $7 = $1;
    $175 = $7;
    $176 = HEAP32[$175>>2]|0;
    $177 = ((($176)) + 4|0);
    $8 = $177;
    $178 = $8;
    $179 = ((($178)) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = HEAP32[$178>>2]|0;
    $182 = $180;
    $183 = $181;
    $184 = (($182) - ($183))|0;
    $185 = (($184|0) / 4)&-1;
    $186 = ($174>>>0)<($185>>>0);
    if (!($186)) {
     break L1;
    }
    $9 = $1;
    $187 = $9;
    $188 = HEAP32[$187>>2]|0;
    $189 = ((($188)) + 4|0);
    $190 = $125;
    $10 = $189;
    $11 = $190;
    $191 = $10;
    $192 = HEAP32[$191>>2]|0;
    $193 = $11;
    $194 = (($192) + ($193<<2)|0);
    $195 = +HEAPF32[$194>>2];
    HEAPF32[$126>>2] = $195;
    $12 = $0;
    $196 = $12;
    $197 = HEAP32[$196>>2]|0;
    $198 = ((($197)) + 4|0);
    $19 = $198;
    $199 = $19;
    $200 = ((($199)) + 4|0);
    $201 = HEAP32[$200>>2]|0;
    $16 = $199;
    $17 = $201;
    $202 = $17;
    $13 = $15;
    $14 = $202;
    $203 = $13;
    $204 = $14;
    HEAP32[$203>>2] = $204;
    $205 = HEAP32[$15>>2]|0;
    HEAP32[$18>>2] = $205;
    $206 = HEAP32[$18>>2]|0;
    HEAP32[$129>>2] = $206;
    $20 = $1;
    $207 = $20;
    $208 = HEAP32[$207>>2]|0;
    $209 = ((($208)) + 4|0);
    $21 = $209;
    $210 = $21;
    $211 = ((($210)) + 4|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = HEAP32[$210>>2]|0;
    $214 = $212;
    $215 = $213;
    $216 = (($214) - ($215))|0;
    $217 = (($216|0) / 4)&-1;
    $28 = $129;
    $29 = $217;
    $218 = $28;
    $219 = $29;
    $220 = (0 - ($219))|0;
    $25 = $218;
    $26 = $220;
    $221 = $25;
    ;HEAP32[$24>>2]=HEAP32[$221>>2]|0;
    $222 = $26;
    $22 = $24;
    $23 = $222;
    $223 = $22;
    $224 = $23;
    $225 = HEAP32[$223>>2]|0;
    $226 = (($225) + ($224<<2)|0);
    HEAP32[$223>>2] = $226;
    $227 = HEAP32[$24>>2]|0;
    HEAP32[$27>>2] = $227;
    $228 = HEAP32[$27>>2]|0;
    HEAP32[$128>>2] = $228;
    $30 = $0;
    $229 = $30;
    $230 = HEAP32[$229>>2]|0;
    $231 = ((($230)) + 4|0);
    $37 = $231;
    $232 = $37;
    $233 = ((($232)) + 4|0);
    $234 = HEAP32[$233>>2]|0;
    $34 = $232;
    $35 = $234;
    $235 = $35;
    $31 = $33;
    $32 = $235;
    $236 = $31;
    $237 = $32;
    HEAP32[$236>>2] = $237;
    $238 = HEAP32[$33>>2]|0;
    HEAP32[$36>>2] = $238;
    $239 = HEAP32[$36>>2]|0;
    HEAP32[$130>>2] = $239;
    ;HEAP8[$48>>0]=HEAP8[$130>>0]|0;HEAP8[$48+1>>0]=HEAP8[$130+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$130+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$130+3>>0]|0;
    ;HEAP8[$49>>0]=HEAP8[$128>>0]|0;HEAP8[$49+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$128+3>>0]|0;
    $47 = $126;
    while(1) {
     $44 = $49;
     $45 = $48;
     $240 = $44;
     $241 = $45;
     $42 = $240;
     $43 = $241;
     $242 = $42;
     $41 = $242;
     $243 = $41;
     $244 = HEAP32[$243>>2]|0;
     $245 = $43;
     $40 = $245;
     $246 = $40;
     $247 = HEAP32[$246>>2]|0;
     $248 = ($244|0)==($247|0);
     $249 = $248 ^ 1;
     if (!($249)) {
      break;
     }
     $38 = $49;
     $250 = $38;
     $251 = HEAP32[$250>>2]|0;
     $252 = +HEAPF32[$251>>2];
     $253 = $47;
     $254 = +HEAPF32[$253>>2];
     $255 = $252 == $254;
     if ($255) {
      break;
     }
     $39 = $49;
     $256 = $39;
     $257 = HEAP32[$256>>2]|0;
     $258 = ((($257)) + 4|0);
     HEAP32[$256>>2] = $258;
    }
    ;HEAP32[$46>>2]=HEAP32[$49>>2]|0;
    $259 = HEAP32[$46>>2]|0;
    HEAP32[$127>>2] = $259;
    $50 = $0;
    $260 = $50;
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($261)) + 4|0);
    $57 = $262;
    $263 = $57;
    $264 = ((($263)) + 4|0);
    $265 = HEAP32[$264>>2]|0;
    $54 = $263;
    $55 = $265;
    $266 = $55;
    $51 = $53;
    $52 = $266;
    $267 = $51;
    $268 = $52;
    HEAP32[$267>>2] = $268;
    $269 = HEAP32[$53>>2]|0;
    HEAP32[$56>>2] = $269;
    $270 = HEAP32[$56>>2]|0;
    HEAP32[$131>>2] = $270;
    $62 = $127;
    $63 = $131;
    $271 = $62;
    $272 = $63;
    $60 = $271;
    $61 = $272;
    $273 = $60;
    $59 = $273;
    $274 = $59;
    $275 = HEAP32[$274>>2]|0;
    $276 = $61;
    $58 = $276;
    $277 = $58;
    $278 = HEAP32[$277>>2]|0;
    $279 = ($275|0)==($278|0);
    $280 = $279 ^ 1;
    if (!($280)) {
     break;
    }
    $281 = $125;
    $282 = (($281) + 1)|0;
    $125 = $282;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$124>>0] = $$expand_i1_val2;
   $$pre_trunc = HEAP8[$124>>0]|0;
   $403 = $$pre_trunc&1;
   STACKTOP = sp;return ($403|0);
  } else {
   $64 = $0;
   $283 = $64;
   $284 = HEAP32[$283>>2]|0;
   $285 = ((($284)) + 4|0);
   $65 = $285;
   $286 = $65;
   $287 = ((($286)) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = HEAP32[$286>>2]|0;
   $290 = $288;
   $291 = $289;
   $292 = (($290) - ($291))|0;
   $293 = (($292|0) / 4)&-1;
   $294 = ($293|0)==(0);
   if ($294) {
    $$expand_i1_val4 = 0;
    HEAP8[$124>>0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$124>>0]|0;
    $403 = $$pre_trunc&1;
    STACKTOP = sp;return ($403|0);
   }
   $132 = 0;
   while(1) {
    $295 = $132;
    $66 = $0;
    $296 = $66;
    $297 = HEAP32[$296>>2]|0;
    $298 = ((($297)) + 4|0);
    $67 = $298;
    $299 = $67;
    $300 = ((($299)) + 4|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = HEAP32[$299>>2]|0;
    $303 = $301;
    $304 = $302;
    $305 = (($303) - ($304))|0;
    $306 = (($305|0) / 4)&-1;
    $307 = ($295>>>0)<($306>>>0);
    if (!($307)) {
     break L1;
    }
    $68 = $0;
    $308 = $68;
    $309 = HEAP32[$308>>2]|0;
    $310 = ((($309)) + 4|0);
    $311 = $132;
    $69 = $310;
    $70 = $311;
    $312 = $69;
    $313 = HEAP32[$312>>2]|0;
    $314 = $70;
    $315 = (($313) + ($314<<2)|0);
    $316 = +HEAPF32[$315>>2];
    HEAPF32[$133>>2] = $316;
    $71 = $1;
    $317 = $71;
    $318 = HEAP32[$317>>2]|0;
    $319 = ((($318)) + 4|0);
    $78 = $319;
    $320 = $78;
    $321 = HEAP32[$320>>2]|0;
    $75 = $320;
    $76 = $321;
    $322 = $76;
    $72 = $74;
    $73 = $322;
    $323 = $72;
    $324 = $73;
    HEAP32[$323>>2] = $324;
    $325 = HEAP32[$74>>2]|0;
    HEAP32[$77>>2] = $325;
    $326 = HEAP32[$77>>2]|0;
    HEAP32[$136>>2] = $326;
    $79 = $0;
    $327 = $79;
    $328 = HEAP32[$327>>2]|0;
    $329 = ((($328)) + 4|0);
    $80 = $329;
    $330 = $80;
    $331 = ((($330)) + 4|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = HEAP32[$330>>2]|0;
    $334 = $332;
    $335 = $333;
    $336 = (($334) - ($335))|0;
    $337 = (($336|0) / 4)&-1;
    $87 = $136;
    $88 = $337;
    $338 = $87;
    $339 = $88;
    $340 = (0 - ($339))|0;
    $84 = $338;
    $85 = $340;
    $341 = $84;
    ;HEAP32[$83>>2]=HEAP32[$341>>2]|0;
    $342 = $85;
    $81 = $83;
    $82 = $342;
    $343 = $81;
    $344 = $82;
    $345 = HEAP32[$343>>2]|0;
    $346 = (($345) + ($344<<2)|0);
    HEAP32[$343>>2] = $346;
    $347 = HEAP32[$83>>2]|0;
    HEAP32[$86>>2] = $347;
    $348 = HEAP32[$86>>2]|0;
    HEAP32[$135>>2] = $348;
    $89 = $1;
    $349 = $89;
    $350 = HEAP32[$349>>2]|0;
    $351 = ((($350)) + 4|0);
    $96 = $351;
    $352 = $96;
    $353 = ((($352)) + 4|0);
    $354 = HEAP32[$353>>2]|0;
    $93 = $352;
    $94 = $354;
    $355 = $94;
    $90 = $92;
    $91 = $355;
    $356 = $90;
    $357 = $91;
    HEAP32[$356>>2] = $357;
    $358 = HEAP32[$92>>2]|0;
    HEAP32[$95>>2] = $358;
    $359 = HEAP32[$95>>2]|0;
    HEAP32[$137>>2] = $359;
    ;HEAP8[$107>>0]=HEAP8[$137>>0]|0;HEAP8[$107+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$137+3>>0]|0;
    ;HEAP8[$108>>0]=HEAP8[$135>>0]|0;HEAP8[$108+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$108+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$108+3>>0]=HEAP8[$135+3>>0]|0;
    $106 = $133;
    while(1) {
     $103 = $108;
     $104 = $107;
     $360 = $103;
     $361 = $104;
     $101 = $360;
     $102 = $361;
     $362 = $101;
     $100 = $362;
     $363 = $100;
     $364 = HEAP32[$363>>2]|0;
     $365 = $102;
     $99 = $365;
     $366 = $99;
     $367 = HEAP32[$366>>2]|0;
     $368 = ($364|0)==($367|0);
     $369 = $368 ^ 1;
     if (!($369)) {
      break;
     }
     $97 = $108;
     $370 = $97;
     $371 = HEAP32[$370>>2]|0;
     $372 = +HEAPF32[$371>>2];
     $373 = $106;
     $374 = +HEAPF32[$373>>2];
     $375 = $372 == $374;
     if ($375) {
      break;
     }
     $98 = $108;
     $376 = $98;
     $377 = HEAP32[$376>>2]|0;
     $378 = ((($377)) + 4|0);
     HEAP32[$376>>2] = $378;
    }
    ;HEAP32[$105>>2]=HEAP32[$108>>2]|0;
    $379 = HEAP32[$105>>2]|0;
    HEAP32[$134>>2] = $379;
    $109 = $1;
    $380 = $109;
    $381 = HEAP32[$380>>2]|0;
    $382 = ((($381)) + 4|0);
    $116 = $382;
    $383 = $116;
    $384 = ((($383)) + 4|0);
    $385 = HEAP32[$384>>2]|0;
    $113 = $383;
    $114 = $385;
    $386 = $114;
    $110 = $112;
    $111 = $386;
    $387 = $110;
    $388 = $111;
    HEAP32[$387>>2] = $388;
    $389 = HEAP32[$112>>2]|0;
    HEAP32[$115>>2] = $389;
    $390 = HEAP32[$115>>2]|0;
    HEAP32[$138>>2] = $390;
    $121 = $134;
    $122 = $138;
    $391 = $121;
    $392 = $122;
    $119 = $391;
    $120 = $392;
    $393 = $119;
    $118 = $393;
    $394 = $118;
    $395 = HEAP32[$394>>2]|0;
    $396 = $120;
    $117 = $396;
    $397 = $117;
    $398 = HEAP32[$397>>2]|0;
    $399 = ($395|0)==($398|0);
    $400 = $399 ^ 1;
    if (!($400)) {
     break;
    }
    $401 = $132;
    $402 = (($401) + 1)|0;
    $132 = $402;
   }
   $$expand_i1_val6 = 0;
   HEAP8[$124>>0] = $$expand_i1_val6;
   $$pre_trunc = HEAP8[$124>>0]|0;
   $403 = $$pre_trunc&1;
   STACKTOP = sp;return ($403|0);
  }
 } while(0);
 $$expand_i1_val8 = 1;
 HEAP8[$124>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$124>>0]|0;
 $403 = $$pre_trunc&1;
 STACKTOP = sp;return ($403|0);
}
function __ZN5Level11areEndEqualENSt3__210shared_ptrIS_EES2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc15 = 0, $$pre_trunc17 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 50|0;
 $9 = sp + 16|0;
 $10 = sp + 49|0;
 $11 = sp + 8|0;
 $12 = sp + 48|0;
 $7 = $0;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $6 = $1;
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 $$expand_i1_val = 0;
 HEAP8[$10>>0] = $$expand_i1_val;
 $$expand_i1_val2 = 0;
 HEAP8[$12>>0] = $$expand_i1_val2;
 if ($21) {
  $4 = $9;
  $5 = $0;
  $22 = $4;
  $23 = $5;
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$22>>2] = $24;
  $25 = ((($22)) + 4|0);
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$25>>2] = $28;
  $29 = ((($22)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = ((($22)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($33);
  }
  $$expand_i1_val4 = 1;
  HEAP8[$10>>0] = $$expand_i1_val4;
  $2 = $11;
  $3 = $1;
  $34 = $2;
  $35 = $3;
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$34>>2] = $36;
  $37 = ((($34)) + 4|0);
  $38 = $3;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$37>>2] = $40;
  $41 = ((($34)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  if ($43) {
   $44 = ((($34)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   __ZNSt3__219__shared_weak_count12__add_sharedEv($45);
  }
  $$expand_i1_val6 = 1;
  HEAP8[$12>>0] = $$expand_i1_val6;
  __THREW__ = 0;
  $46 = (invoke_iii(425,($9|0),($11|0))|0);
  $47 = __THREW__; __THREW__ = 0;
  $48 = $47&1;
  if ($48) {
   $53 = ___cxa_find_matching_catch_2()|0;
   $54 = tempRet0;
   $13 = $53;
   $14 = $54;
   $$pre_trunc15 = HEAP8[$12>>0]|0;
   $55 = $$pre_trunc15&1;
   if ($55) {
    __ZNSt3__210shared_ptrI5LevelED2Ev($11);
   }
   $$pre_trunc17 = HEAP8[$10>>0]|0;
   $56 = $$pre_trunc17&1;
   if (!($56)) {
    $57 = $13;
    $58 = $14;
    ___resumeException($57|0);
    // unreachable;
   }
   __ZNSt3__210shared_ptrI5LevelED2Ev($9);
   $57 = $13;
   $58 = $14;
   ___resumeException($57|0);
   // unreachable;
  } else {
   $49 = $46;
  }
 } else {
  $49 = 0;
 }
 $$expand_i1_val8 = $49&1;
 HEAP8[$8>>0] = $$expand_i1_val8;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $50 = $$pre_trunc&1;
 if ($50) {
  __ZNSt3__210shared_ptrI5LevelED2Ev($11);
 }
 $$pre_trunc11 = HEAP8[$10>>0]|0;
 $51 = $$pre_trunc11&1;
 if (!($51)) {
  $$pre_trunc13 = HEAP8[$8>>0]|0;
  $52 = $$pre_trunc13&1;
  STACKTOP = sp;return ($52|0);
 }
 __ZNSt3__210shared_ptrI5LevelED2Ev($9);
 $$pre_trunc13 = HEAP8[$8>>0]|0;
 $52 = $$pre_trunc13&1;
 STACKTOP = sp;return ($52|0);
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_45();
 return;
}
function ___cxx_global_var_init_45() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(22091);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(11147|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(11152|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(11157);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(11162);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(11174);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(11188);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(11194);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(11209);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(11213);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(11226);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(11231);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(11245);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(11251);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(11258|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(11270|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(11303|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(11316|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(11332);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(11362);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(11399);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(11438);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(11469);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(11509);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(11538);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(11576);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(11606);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(11645);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(11677);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(11710);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(11743);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(11777);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(11810);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(11844);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(11875);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(11907);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (296|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (312|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (320|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (328|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (336|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (360|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (376|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (392|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (400|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (424|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2112|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2104|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2096|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2088|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2080|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2072|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2064|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2056|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2040|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2048|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2032|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2024|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2016|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (19528|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_570($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_103()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_103() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2776|0);
}
function _dummy_570($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 41;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_742($0,$1,$2,-1,-1)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _strtox_742($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((12462) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((12462) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (12718 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((12462) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((12462) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $157 = ($158>>>0)>($153>>>0);
      $159 = ($160>>>0)>($152>>>0);
      $161 = ($158|0)==($153|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((12462) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((12462) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((12462) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((12462) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((12462) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((12462) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$26 = $$pre;$29 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$26 = $21;$29 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$26 = $21;$29 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   if (!($25)) {
    $27 = $26;
    $28 = $29;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($28))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($29)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 1023]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 1023]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = tempRet0;
 tempRet0 = ($5);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_742($0,$1,$2,0,-2147483648)|0);
 $4 = tempRet0;
 tempRet0 = ($4);
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=3148; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 1023]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((12727 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 13191;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 13191;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 13191 : (13193);
     $$$ = $238 ? $$ : (13192);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 13191;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 13191;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 13201;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_684($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 13191;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (13191 + ($208)|0);
    $$289 = $or$cond283 ? 13191 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 13191;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_684($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_684($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_684($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_684($0,48,$$2261,$312,$314);
  _pad_684($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_684($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (13239 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_104()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_684($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_685($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 13208;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (13209) : (13214);
  $$$ = $16 ? $$ : (13211);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_685($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (13239 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_684($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_684($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_684($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_684($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_684($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_684($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,13255,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_684($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,13255,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_684($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_684($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 13227 : 13231;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 15158 : 13235;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_684($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_684($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_685($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_431()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_431() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_104() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (13257 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 13345;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 13345;
  } else {
   $$01214 = 13345;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 1023]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3272|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self()|0);
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 4 : 1;
 return ($5|0);
}
function ___pthread_self() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3276|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4816|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $$ = $isdigit | $3;
 $4 = $$&1;
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (15149 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (15158 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$101 = $39;$53 = 0;$55 = 0;$99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $55;$215 = $53;$216 = $55;$217 = $53;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $52 = ($53|0)<(0);
   $54 = ($55>>>0)<(8);
   $56 = ($53|0)==(0);
   $57 = $56 & $54;
   $58 = $52 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($53|0)<(0);
     $62 = ($55>>>0)<(14);
     $63 = ($53|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($55|0),($53|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $99;$215 = $101;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $98 = $97 ? $55 : $99;
   $100 = $97 ? $53 : $101;
   $102 = ($53|0)<(0);
   $103 = ($55>>>0)<(8);
   $104 = ($53|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $55;$109 = $53;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($98|0),($100|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$72 = $374;$73 = $372;$75 = $375;$76 = $373;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$72 = 0;$73 = $366;$75 = 0;$76 = $367;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $71 = $70 ? $72 : $73;
   $74 = $70 ? $75 : $76;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $72;$377 = $75;$378 = $71;$379 = $74;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $72;$382 = $75;$383 = $77;$384 = $71;$385 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($71|0),($74|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$105 = $92;$106 = $72;$108 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$105 = $378;$106 = $376;$108 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$105 = $384;$106 = $381;$108 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($105|0);
    $155 = ($105|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($105|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($105|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($105))|0;
      $166 = (6356 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($105, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($105) + -10)|0;
      $175 = (6356 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($105|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $105;
   } else {
    $184 = ($105|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (6356 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $105;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $105;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $287 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (6388 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $286 = ($287|0)==($$$5355|0);
     if (!($286)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $287;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_272($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$154 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$154 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $154;HEAP32[tempDoublePtr+4>>2] = $152;$155 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $155;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _dummy_413();
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _dummy_413() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _freelocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___loc_is_allocated($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _free($0);
 }
 return;
}
function ___loc_is_allocated($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)!=(0|0);
 $2 = ($0|0)!=(19592|0);
 $or$cond = $1 & $2;
 $3 = ($0|0)!=(2420|0);
 $$ = $3 & $or$cond;
 $4 = $$&1;
 return ($4|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 19616 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_422()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (2444 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_422() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $2 = $isdigit&1;
 return ($2|0);
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c_dot_utf8$$4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((15162|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (15169 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((15241|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 15246;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = $21;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 15246;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 15246;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,15246)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,15254)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[4905]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((19624|0));
     $48 = HEAP32[4905]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((19624|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(19536)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((15260|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($$neg) + ($67))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           _memcpy(($2|0),($$1100111|0),($70|0))|0;
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           _memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0;
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $87 = $$pre121;
          } else {
           $87 = $68;
          }
          $86 = ($87<<24>>24)!=(0);
          $88 = $86&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         $80 = HEAP32[$3>>2]|0;
         if ($79) {
          (___munmap($76,$80)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          _memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0;
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[4905]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[4905] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $92 = (_malloc(28)|0);
      $93 = ($92|0)==(0|0);
      if ($93) {
       $$4 = $92;
      } else {
       $94 = HEAP32[593]|0;
       HEAP32[$92>>2] = $94;
       $95 = HEAP32[(2376)>>2]|0;
       $96 = ((($92)) + 4|0);
       HEAP32[$96>>2] = $95;
       $97 = ((($92)) + 8|0);
       _memcpy(($97|0),($$2123|0),($$093$lcssa|0))|0;
       $98 = (($97) + ($$093$lcssa)|0);
       HEAP8[$98>>0] = 0;
       $99 = HEAP32[4905]|0;
       $100 = ((($92)) + 24|0);
       HEAP32[$100>>2] = $99;
       HEAP32[4905] = $92;
       $$4 = $92;
      }
     }
     $101 = ($$4|0)==(0|0);
     $102 = ($0|0)==(0);
     $or$cond = $102 & $101;
     $__c_dot_utf8$$4 = $or$cond ? 2372 : $$4;
     ___unlock((19624|0));
     $$0 = $__c_dot_utf8$$4;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 2372;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$033$ = 0, $$03339 = 0, $$03440 = 0, $$036 = 0, $$13538 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $exitcond41 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (___loc_is_allocated($2)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = ($2|0)==(0|0);
   $$03339 = 0;$$13538 = 0;
   while(1) {
    $13 = 1 << $$13538;
    $14 = $13 & $0;
    $15 = ($14|0)!=(0);
    $brmerge = $6 | $15;
    if ($brmerge) {
     $18 = $15 ? $1 : 23132;
     $19 = (___get_locale($$13538,$18)|0);
     $$0 = $19;
    } else {
     $16 = (($2) + ($$13538<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $$0 = $17;
    }
    $not$ = ($$0|0)!=(0|0);
    $20 = $not$&1;
    $$033$ = (($20) + ($$03339))|0;
    $21 = (($3) + ($$13538<<2)|0);
    HEAP32[$21>>2] = $$0;
    $22 = (($$13538) + 1)|0;
    $exitcond = ($22|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$03339 = $$033$;$$13538 = $22;
    }
   }
   switch ($$033$|0) {
   case 0:  {
    $$036 = 19592;
    break L1;
    break;
   }
   case 1:  {
    $23 = HEAP32[$3>>2]|0;
    $24 = ($23|0)==(2372|0);
    if ($24) {
     $$036 = 2420;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$036 = $2;
  } else {
   $$03440 = 0;
   while(1) {
    $7 = 1 << $$03440;
    $8 = $7 & $0;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (($2) + ($$03440<<2)|0);
     $11 = (___get_locale($$03440,$1)|0);
     HEAP32[$10>>2] = $11;
    }
    $12 = (($$03440) + 1)|0;
    $exitcond41 = ($12|0)==(6);
    if ($exitcond41) {
     $$036 = $2;
     break;
    } else {
     $$03440 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$036|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_233()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  $5 = ($0|0)==((-1)|0);
  $6 = $5 ? (19568) : $0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($3|0)==((19568)|0);
 $8 = $7 ? (-1) : $3;
 return ($8|0);
}
function ___pthread_self_233() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function _log10f($0) {
 $0 = +$0;
 var $$0 = 0, $$080 = 0, $$081 = 0.0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = ($1>>>0)<(8388608);
 $3 = ($1|0)<(0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $$mask = $1 & 2147483647;
   $4 = ($$mask|0)==(0);
   if ($4) {
    $5 = $0 * $0;
    $6 = -1.0 / $5;
    $$081 = $6;
    break;
   }
   if ($3) {
    $7 = $0 - $0;
    $8 = $7 / 0.0;
    $$081 = $8;
    break;
   } else {
    $9 = $0 * 33554432.0;
    $10 = (HEAPF32[tempDoublePtr>>2]=$9,HEAP32[tempDoublePtr>>2]|0);
    $$0 = -152;$$080 = $10;
    label = 9;
    break;
   }
  } else {
   $11 = ($1>>>0)>(2139095039);
   if ($11) {
    $$081 = $0;
   } else {
    $12 = ($1|0)==(1065353216);
    if ($12) {
     $$081 = 0.0;
    } else {
     $$0 = -127;$$080 = $1;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $13 = (($$080) + 4913933)|0;
  $14 = $13 >>> 23;
  $15 = (($$0) + ($14))|0;
  $16 = $13 & 8388607;
  $17 = (($16) + 1060439283)|0;
  $18 = (HEAP32[tempDoublePtr>>2]=$17,+HEAPF32[tempDoublePtr>>2]);
  $19 = $18 + -1.0;
  $20 = $19 + 2.0;
  $21 = $19 / $20;
  $22 = $21 * $21;
  $23 = $22 * $22;
  $24 = $23 * 0.24279078841209412;
  $25 = $24 + 0.40000972151756287;
  $26 = $23 * $25;
  $27 = $23 * 0.28498786687850952;
  $28 = $27 + 0.66666662693023682;
  $29 = $22 * $28;
  $30 = $29 + $26;
  $31 = $19 * 0.5;
  $32 = $19 * $31;
  $33 = $19 - $32;
  $34 = (HEAPF32[tempDoublePtr>>2]=$33,HEAP32[tempDoublePtr>>2]|0);
  $35 = $34 & -4096;
  $36 = (HEAP32[tempDoublePtr>>2]=$35,+HEAPF32[tempDoublePtr>>2]);
  $37 = $19 - $36;
  $38 = $37 - $32;
  $39 = $32 + $30;
  $40 = $21 * $39;
  $41 = $38 + $40;
  $42 = (+($15|0));
  $43 = $42 * 7.9034151667656261E-7;
  $44 = $36 + $41;
  $45 = $44 * 3.1689971365267411E-5;
  $46 = $43 - $45;
  $47 = $41 * 0.434326171875;
  $48 = $47 + $46;
  $49 = $36 * 0.434326171875;
  $50 = $49 + $48;
  $51 = $42 * 0.30102920532226563;
  $52 = $51 + $50;
  $$081 = $52;
 }
 return (+$$081);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 1023]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_428()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $not$ = ($15|0)==(0|0);
     $16 = HEAP8[$1>>0]|0;
     if ($not$) {
      $17 = $16 << 24 >> 24;
      $18 = $17 & 57343;
      HEAP32[$$>>2] = $18;
      $$0 = 1;
      break L1;
     }
     $19 = $16&255;
     $20 = (($19) + -194)|0;
     $21 = ($20>>>0)>(50);
     if (!($21)) {
      $22 = ((($1)) + 1|0);
      $23 = (2444 + ($20<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($2>>>0)<(4);
      if ($25) {
       $26 = ($2*6)|0;
       $27 = (($26) + -6)|0;
       $28 = -2147483648 >>> $27;
       $29 = $24 & $28;
       $30 = ($29|0)==(0);
       if (!($30)) {
        break;
       }
      }
      $31 = HEAP8[$22>>0]|0;
      $32 = $31&255;
      $33 = $32 >>> 3;
      $34 = (($33) + -16)|0;
      $35 = $24 >> 26;
      $36 = (($33) + ($35))|0;
      $37 = $34 | $36;
      $38 = ($37>>>0)>(7);
      if (!($38)) {
       $39 = $24 << 6;
       $40 = (($32) + -128)|0;
       $41 = $40 | $39;
       $42 = ($41|0)<(0);
       if (!($42)) {
        HEAP32[$$>>2] = $41;
        $$0 = 2;
        break L1;
       }
       $43 = ((($1)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44&255;
       $46 = (($45) + -128)|0;
       $47 = ($46>>>0)>(63);
       if (!($47)) {
        $48 = $41 << 6;
        $49 = $46 | $48;
        $50 = ($49|0)<(0);
        if (!($50)) {
         HEAP32[$$>>2] = $49;
         $$0 = 3;
         break L1;
        }
        $51 = ((($1)) + 3|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52&255;
        $54 = (($53) + -128)|0;
        $55 = ($54>>>0)>(63);
        if (!($55)) {
         $56 = $49 << 6;
         $57 = $54 | $56;
         HEAP32[$$>>2] = $57;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $58 = (___errno_location()|0);
   HEAP32[$58>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_428() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((19632|0));
 return (19640|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((19632|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[786]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[786]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 1023]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 1023]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 426;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0;
 var $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0;
 var $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $306 = $10;
 } else {
  $306 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $21 = ((($4)) + 1|0);
   $22 = ((($4)) + 1|0);
   $$0273429 = $1;$$0283428 = 0;$$0288425 = 0;$$0305423 = 0;$102 = 0;$24 = $11;
   L6: while(1) {
    $23 = $24&255;
    $25 = (_isspace($23)|0);
    $26 = ($25|0)==(0);
    L8: do {
     if ($26) {
      $53 = ($24<<24>>24)==(37);
      L10: do {
       if ($53) {
        $54 = ((($$0273429)) + 1|0);
        $55 = HEAP8[$54>>0]|0;
        L12: do {
         switch ($55<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $76 = ((($$0273429)) + 2|0);
          $$0293 = 0;$$2275 = $76;
          break;
         }
         default: {
          $77 = $55&255;
          $isdigittmp = (($77) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $78 = ((($$0273429)) + 2|0);
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(36);
           if ($80) {
            $81 = (_arg_n($2,$isdigittmp)|0);
            $82 = ((($$0273429)) + 3|0);
            $$0293 = $81;$$2275 = $82;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $83 = $arglist_current;
          $84 = ((0) + 4|0);
          $expanded1 = $84;
          $expanded = (($expanded1) - 1)|0;
          $85 = (($83) + ($expanded))|0;
          $86 = ((0) + 4|0);
          $expanded5 = $86;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $87 = $85 & $expanded3;
          $88 = $87;
          $89 = HEAP32[$88>>2]|0;
          $arglist_next = ((($88)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $89;$$2275 = $54;
         }
         }
        } while(0);
        $90 = HEAP8[$$2275>>0]|0;
        $91 = $90&255;
        $isdigittmp315414 = (($91) + -48)|0;
        $isdigit316415 = ($isdigittmp315414>>>0)<(10);
        if ($isdigit316415) {
         $$0266417 = 0;$$3416 = $$2275;$95 = $91;
         while(1) {
          $92 = ($$0266417*10)|0;
          $93 = (($92) + -48)|0;
          $94 = (($93) + ($95))|0;
          $96 = ((($$3416)) + 1|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = $97&255;
          $isdigittmp315 = (($98) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266417 = $94;$$3416 = $96;$95 = $98;
          } else {
           $$0266$lcssa = $94;$$3$lcssa = $96;$$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa355 = $90;
        }
        $99 = ($$lcssa355<<24>>24)==(109);
        $100 = ($$0293|0)!=(0|0);
        $101 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = ((($$$3)) + 1|0);
        $104 = HEAP8[$$$3>>0]|0;
        switch ($104<<24>>24) {
        case 104:  {
         $105 = HEAP8[$103>>0]|0;
         $106 = ($105<<24>>24)==(104);
         $107 = ((($$$3)) + 2|0);
         $$319 = $106 ? $107 : $103;
         $$320 = $106 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $108 = HEAP8[$103>>0]|0;
         $109 = ($108<<24>>24)==(108);
         $110 = ((($$$3)) + 2|0);
         $$321 = $109 ? $110 : $103;
         $$322 = $109 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $103;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $103;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $103;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
         label = 137;
         break L6;
        }
        }
        $111 = HEAP8[$$5>>0]|0;
        $112 = $111&255;
        $113 = $112 & 47;
        $114 = ($113|0)==(3);
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $116 = ($$0266$lcssa|0)>(1);
         $$$0266 = $116 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283428;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283428;
         break;
        }
        case 110:  {
         $117 = ($$0283428|0)<(0);
         $118 = $117 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283428,$118);
         $$11 = $$5;$$1289 = $$0288425;$$2285 = $$0283428;$$6311 = $$$0305;$307 = $$327;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $119 = HEAP32[$13>>2]|0;
          $120 = HEAP32[$14>>2]|0;
          $121 = ($119>>>0)<($120>>>0);
          if ($121) {
           $122 = ((($119)) + 1|0);
           HEAP32[$13>>2] = $122;
           $123 = HEAP8[$119>>0]|0;
           $124 = $123&255;
           $126 = $124;
          } else {
           $125 = (___shgetc($0)|0);
           $126 = $125;
          }
          $127 = (_isspace($126)|0);
          $128 = ($127|0)==(0);
          if ($128) {
           break;
          }
         }
         $129 = HEAP32[$14>>2]|0;
         $130 = ($129|0)==(0|0);
         if ($130) {
          $$pre507 = HEAP32[$13>>2]|0;
          $138 = $$pre507;
         } else {
          $131 = HEAP32[$13>>2]|0;
          $132 = ((($131)) + -1|0);
          HEAP32[$13>>2] = $132;
          $133 = $132;
          $138 = $133;
         }
         $134 = HEAP32[$15>>2]|0;
         $135 = HEAP32[$16>>2]|0;
         $136 = (($134) + ($$0283428))|0;
         $137 = (($136) + ($138))|0;
         $139 = (($137) - ($135))|0;
         $$1267 = $$0266$lcssa;$$1284 = $139;
        }
        }
        ___shlim($0,$$1267);
        $140 = HEAP32[$13>>2]|0;
        $141 = HEAP32[$14>>2]|0;
        $142 = ($140>>>0)<($141>>>0);
        if ($142) {
         $143 = ((($140)) + 1|0);
         HEAP32[$13>>2] = $143;
         $147 = $141;
        } else {
         $144 = (___shgetc($0)|0);
         $145 = ($144|0)<(0);
         if ($145) {
          $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14>>2]|0;
         $147 = $$pre509;
        }
        $146 = ($147|0)==(0|0);
        if (!($146)) {
         $148 = HEAP32[$13>>2]|0;
         $149 = ((($148)) + -1|0);
         HEAP32[$13>>2] = $149;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $150 = ($$|0)==(99);
          $151 = $$ | 16;
          $152 = ($151|0)==(115);
          L57: do {
           if ($152) {
            $153 = ($$|0)==(115);
            _memset(($21|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($153) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $154 = ((($$5)) + 1|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)==(94);
            $157 = ((($$5)) + 2|0);
            $$0292 = $156&1;
            $$6 = $156 ? $157 : $154;
            $158 = $156&1;
            _memset(($22|0),($158|0),256)|0;
            HEAP8[$4>>0] = 0;
            $159 = HEAP8[$$6>>0]|0;
            switch ($159<<24>>24) {
            case 45:  {
             $$sink443 = $19;
             label = 64;
             break;
            }
            case 93:  {
             $$sink443 = $20;
             label = 64;
             break;
            }
            default: {
             $$pre514 = $$0292 ^ 1;
             $$pre515 = $$pre514&255;
             $$7$ph = $$6;$$pre$phi516Z2D = $$pre515;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $160 = ((($$6)) + 1|0);
             $161 = $$0292 ^ 1;
             $162 = $161&255;
             HEAP8[$$sink443>>0] = $162;
             $$7$ph = $160;$$pre$phi516Z2D = $162;
            }
            $$7 = $$7$ph;
            while(1) {
             $163 = HEAP8[$$7>>0]|0;
             L69: do {
              switch ($163<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $164 = ((($$7)) + 1|0);
               $165 = HEAP8[$164>>0]|0;
               switch ($165<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$176 = 45;
                break L69;
                break;
               }
               default: {
               }
               }
               $166 = ((($$7)) + -1|0);
               $167 = HEAP8[$166>>0]|0;
               $168 = ($167&255)<($165&255);
               if ($168) {
                $169 = $167&255;
                $$0286420 = $169;
                while(1) {
                 $170 = (($$0286420) + 1)|0;
                 $171 = (($4) + ($170)|0);
                 HEAP8[$171>>0] = $$pre$phi516Z2D;
                 $172 = HEAP8[$164>>0]|0;
                 $173 = $172&255;
                 $174 = ($170|0)<($173|0);
                 if ($174) {
                  $$0286420 = $170;
                 } else {
                  $$8 = $164;$176 = $172;
                  break;
                 }
                }
               } else {
                $$8 = $164;$176 = $165;
               }
               break;
              }
              default: {
               $$8 = $$7;$176 = $163;
              }
              }
             } while(0);
             $175 = $176&255;
             $177 = (($175) + 1)|0;
             $178 = (($4) + ($177)|0);
             HEAP8[$178>>0] = $$pre$phi516Z2D;
             $179 = ((($$8)) + 1|0);
             $$7 = $179;
            }
           }
          } while(0);
          $180 = (($$1267) + 1)|0;
          $181 = $150 ? $180 : 31;
          $182 = ($$$0268|0)==(1);
          L77: do {
           if ($182) {
            if ($narrow) {
             $183 = $181 << 2;
             $184 = (_malloc($183)|0);
             $185 = ($184|0)==(0|0);
             if ($185) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $311 = $184;
             }
            } else {
             $311 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $181;$$0278$ph = 0;$$ph = $311;
            L82: while(1) {
             $186 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L86: while(1) {
               $187 = HEAP32[$13>>2]|0;
               $188 = HEAP32[$14>>2]|0;
               $189 = ($187>>>0)<($188>>>0);
               if ($189) {
                $190 = ((($187)) + 1|0);
                HEAP32[$13>>2] = $190;
                $191 = HEAP8[$187>>0]|0;
                $192 = $191&255;
                $195 = $192;
               } else {
                $193 = (___shgetc($0)|0);
                $195 = $193;
               }
               $194 = (($195) + 1)|0;
               $196 = (($4) + ($194)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                break L82;
               }
               $199 = $195&255;
               HEAP8[$6>>0] = $199;
               $200 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($200|0) {
               case -1:  {
                $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($186) {
               $$1279 = $$0278$ph336;
              } else {
               $201 = (($$ph) + ($$0278$ph336<<2)|0);
               $202 = (($$0278$ph336) + 1)|0;
               $203 = HEAP32[$5>>2]|0;
               HEAP32[$201>>2] = $203;
               $$1279 = $202;
              }
              $204 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $204;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor331 = $$0276$ph << 1;
             $205 = $factor331 | 1;
             $206 = $205 << 2;
             $207 = (_realloc($$ph,$206)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$309 = $$ph;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $205;$$ph = $207;$$0278$ph = $$0278$ph$phi;
             }
            }
            $209 = (_mbsinit($3)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
             label = 137;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$312 = $$ph;
            }
           } else {
            if ($narrow) {
             $211 = (_malloc($181)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$1277$ph = $181;$$2280$ph = 0;$$2307$ph = $211;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $213 = HEAP32[$13>>2]|0;
               $214 = HEAP32[$14>>2]|0;
               $215 = ($213>>>0)<($214>>>0);
               if ($215) {
                $216 = ((($213)) + 1|0);
                HEAP32[$13>>2] = $216;
                $217 = HEAP8[$213>>0]|0;
                $218 = $217&255;
                $221 = $218;
               } else {
                $219 = (___shgetc($0)|0);
                $221 = $219;
               }
               $220 = (($221) + 1)|0;
               $222 = (($4) + ($220)|0);
               $223 = HEAP8[$222>>0]|0;
               $224 = ($223<<24>>24)==(0);
               if ($224) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$312 = 0;
                break L77;
               }
               $225 = $221&255;
               $226 = (($$2280) + 1)|0;
               $227 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$227>>0] = $225;
               $228 = ($226|0)==($$1277$ph|0);
               if ($228) {
                break;
               } else {
                $$2280 = $226;
               }
              }
              $factor = $$1277$ph << 1;
              $229 = $factor | 1;
              $230 = (_realloc($$2307$ph,$229)|0);
              $231 = ($230|0)==(0|0);
              if ($231) {
               $$7312 = $$2307$ph;$309 = 0;$narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $229;$$2307$ph = $230;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $232 = ($$0293|0)==(0|0);
            if ($232) {
             $250 = $147;
             while(1) {
              $248 = HEAP32[$13>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$13>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($0)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($4) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$312 = 0;
               break L77;
              }
              $$pre512 = HEAP32[$14>>2]|0;
              $250 = $$pre512;
             }
            } else {
             $$3281 = 0;$235 = $147;
             while(1) {
              $233 = HEAP32[$13>>2]|0;
              $234 = ($233>>>0)<($235>>>0);
              if ($234) {
               $236 = ((($233)) + 1|0);
               HEAP32[$13>>2] = $236;
               $237 = HEAP8[$233>>0]|0;
               $238 = $237&255;
               $241 = $238;
              } else {
               $239 = (___shgetc($0)|0);
               $241 = $239;
              }
              $240 = (($241) + 1)|0;
              $242 = (($4) + ($240)|0);
              $243 = HEAP8[$242>>0]|0;
              $244 = ($243<<24>>24)==(0);
              if ($244) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$312 = 0;
               break L77;
              }
              $245 = $241&255;
              $246 = (($$3281) + 1)|0;
              $247 = (($$0293) + ($$3281)|0);
              HEAP8[$247>>0] = $245;
              $$pre511 = HEAP32[$14>>2]|0;
              $$3281 = $246;$235 = $$pre511;
             }
            }
           }
          } while(0);
          $260 = HEAP32[$14>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $$pre513 = HEAP32[$13>>2]|0;
           $268 = $$pre513;
          } else {
           $262 = HEAP32[$13>>2]|0;
           $263 = ((($262)) + -1|0);
           HEAP32[$13>>2] = $263;
           $264 = $263;
           $268 = $264;
          }
          $265 = HEAP32[$15>>2]|0;
          $266 = HEAP32[$16>>2]|0;
          $267 = (($268) - ($266))|0;
          $269 = (($267) + ($265))|0;
          $270 = ($269|0)==(0);
          if ($270) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          $$not = $150 ^ 1;
          $271 = ($269|0)==($$1267|0);
          $or$cond318 = $271 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($182) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($150) {
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          } else {
           $272 = ($$5299|0)==(0|0);
           if (!($272)) {
            $273 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$273>>2] = 0;
           }
           $274 = ($$4309|0)==(0|0);
           if ($274) {
            $$10 = $$9;$$5310 = 0;$310 = $312;
            break L55;
           }
           $275 = (($$4309) + ($$4282)|0);
           HEAP8[$275>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $285 = (+___floatscan($0,$$$0268,0));
          $286 = HEAP32[$15>>2]|0;
          $287 = HEAP32[$13>>2]|0;
          $288 = HEAP32[$16>>2]|0;
          $289 = (($288) - ($287))|0;
          $290 = ($286|0)==($289|0);
          if ($290) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $291 = ($$0293|0)==(0|0);
          if ($291) {
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $292 = $285;
            HEAPF32[$$0293>>2] = $292;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $276 = (___intscan($0,$$0272,0,-1,-1)|0);
          $277 = tempRet0;
          $278 = HEAP32[$15>>2]|0;
          $279 = HEAP32[$13>>2]|0;
          $280 = HEAP32[$16>>2]|0;
          $281 = (($280) - ($279))|0;
          $282 = ($278|0)==($281|0);
          if ($282) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$|0)==(112);
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293>>2] = $284;
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          } else {
           _store_int($$0293,$$$0268,$276,$277);
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          }
         }
        } while(0);
        $293 = HEAP32[$15>>2]|0;
        $294 = HEAP32[$13>>2]|0;
        $295 = HEAP32[$16>>2]|0;
        $296 = (($293) + ($$1284))|0;
        $297 = (($296) + ($294))|0;
        $298 = (($297) - ($295))|0;
        $299 = $100&1;
        $$0288$ = (($299) + ($$0288425))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $298;$$6311 = $$5310;$307 = $310;
        break L8;
       }
      } while(0);
      $56 = $53&1;
      $57 = (($$0273429) + ($56)|0);
      ___shlim($0,0);
      $58 = HEAP32[$13>>2]|0;
      $59 = HEAP32[$14>>2]|0;
      $60 = ($58>>>0)<($59>>>0);
      if ($60) {
       $61 = ((($58)) + 1|0);
       HEAP32[$13>>2] = $61;
       $62 = HEAP8[$58>>0]|0;
       $63 = $62&255;
       $68 = $63;
      } else {
       $64 = (___shgetc($0)|0);
       $68 = $64;
      }
      $65 = HEAP8[$57>>0]|0;
      $66 = $65&255;
      $67 = ($68|0)==($66|0);
      if (!($67)) {
       label = 22;
       break L6;
      }
      $75 = (($$0283428) + 1)|0;
      $$11 = $57;$$1289 = $$0288425;$$2285 = $75;$$6311 = $$0305423;$307 = $102;
     } else {
      $$1274 = $$0273429;
      while(1) {
       $27 = ((($$1274)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = (_isspace($29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0,0);
      while(1) {
       $32 = HEAP32[$13>>2]|0;
       $33 = HEAP32[$14>>2]|0;
       $34 = ($32>>>0)<($33>>>0);
       if ($34) {
        $35 = ((($32)) + 1|0);
        HEAP32[$13>>2] = $35;
        $36 = HEAP8[$32>>0]|0;
        $37 = $36&255;
        $39 = $37;
       } else {
        $38 = (___shgetc($0)|0);
        $39 = $38;
       }
       $40 = (_isspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre = HEAP32[$13>>2]|0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13>>2]|0;
       $45 = ((($44)) + -1|0);
       HEAP32[$13>>2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15>>2]|0;
      $48 = HEAP32[$16>>2]|0;
      $49 = (($47) + ($$0283428))|0;
      $50 = (($49) + ($51))|0;
      $52 = (($50) - ($48))|0;
      $$11 = $$1274;$$1289 = $$0288425;$$2285 = $52;$$6311 = $$0305423;$307 = $102;
     }
    } while(0);
    $300 = ((($$11)) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = ($301<<24>>24)==(0);
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;$$0283428 = $$2285;$$0288425 = $$1289;$$0305423 = $$6311;$102 = $307;$24 = $301;
    }
   }
   if ((label|0) == 22) {
    $69 = HEAP32[$14>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = HEAP32[$13>>2]|0;
     $72 = ((($71)) + -1|0);
     HEAP32[$13>>2] = $72;
    }
    $73 = ($68|0)>(-1);
    $74 = ($$0288425|0)!=(0);
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305423;$308 = $102;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $$328$le441 = $narrow469&1;
    $$old4 = ($$0288425|0)==(0);
    if ($$old4) {
     $$1271 = $$328$le441;$$8313 = $$7312;$308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;$$2290 = $$0288425;$$9314 = $$7312;$304 = $309;
    }
   }
   else if ((label|0) == 139) {
    $$328$le439 = $narrow&1;
    $$2 = $$328$le439;$$2290 = $$0288425;$$9314 = $$9314$ph;$304 = $$ph353;
   }
   if ((label|0) == 138) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$304 = $308;
   }
   $303 = ($$2|0)==(0);
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $305 = ($306|0)==(0);
 if (!($305)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ? $2 : 19644;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04975 = 0, $$05274 = 0, $$055$ = 0, $$05573 = 0, $$064 = 0, $$076 = 0, $$1 = 0, $$150 = 0, $$153 = 0, $$156 = 0, $$25170 = 0, $$25469 = 0, $$257 = 0, $$271 = 0, $$3 = 0, $$35868 = 0, $$59 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$59 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05274 = $2;$$05573 = $$;$$076 = $$59;$44 = $$cast;
   while(1) {
    $11 = $$05274 >>> 2;
    $12 = ($11>>>0)>=($$05573>>>0);
    $13 = ($$05274>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$064 = $$076;$$150 = $$04975;$$153 = $$05274;$$257 = $$05573;$26 = $44;
     break L1;
    }
    $$055$ = $12 ? $$05573 : $11;
    $15 = (($$05274) - ($$055$))|0;
    $16 = (_mbsrtowcs($$076,$6,$$055$,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$076|0)==($5|0);
    $19 = (($$076) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$156 = (($$05573) - ($20))|0;
    $$1 = $18 ? $$076 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$156|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05274 = $15;$$05573 = $$156;$$076 = $$1;$44 = $22;
    } else {
     $$064 = $$1;$$150 = $21;$$153 = $15;$$257 = $$156;$26 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$064 = $$076;$$150 = -1;$$153 = $15;$$257 = 0;$26 = $$pr$pre;
  } else {
   $$064 = $$59;$$150 = 0;$$153 = $2;$$257 = $$;$26 = $$cast;
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 L8: do {
  if ($25) {
   $$3 = $$150;
  } else {
   $27 = ($$257|0)!=(0);
   $28 = ($$153|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25469 = $$153;$$271 = $$064;$$35868 = $$257;$30 = $26;
    while(1) {
     $31 = (_mbrtowc($$271,$30,$$25469,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25469) - ($31))|0;
     $37 = ((($$271)) + 4|0);
     $38 = (($$35868) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25469 = $36;$$271 = $37;$$35868 = $38;$30 = $35;
     } else {
      $$3 = $39;
      break L8;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$3 = -1;
     break L8;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$3 = $$25170;
     break L8;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$3 = $$25170;
     break L8;
    }
    }
   } else {
    $$3 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$3|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0100$lcssa = 0, $$0100136 = 0, $$0107135 = 0, $$0113134 = 0, $$099 = 0, $$10 = 0, $$1101 = 0, $$1101$ph = 0, $$1108$ph = 0, $$1108138 = 0, $$11124 = 0, $$1114 = 0, $$1114$ph = 0, $$11163 = 0, $$2 = 0, $$2102144 = 0, $$2109 = 0, $$2115143 = 0, $$3103 = 0, $$3110 = 0;
 var $$3116 = 0, $$4 = 0, $$4104 = 0, $$4111 = 0, $$4117 = 0, $$5 = 0, $$5105 = 0, $$5112 = 0, $$5112123 = 0, $$5112162 = 0, $$5118$ph = 0, $$5118137 = 0, $$6 = 0, $$6106$lcssa = 0, $$6106$ph = 0, $$6106139 = 0, $$6119 = 0, $$7 = 0, $$7120 = 0, $$8 = 0;
 var $$8121 = 0, $$9 = 0, $$9$sink = 0, $$9122 = 0, $$9122161 = 0, $$old1 = 0, $$pre$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$4104 = $4;$$4117 = $2;
    label = 25;
   } else {
    HEAP32[$3>>2] = 0;
    $$4 = $6;$$4111 = $0;$$8121 = $2;$$9 = $4;
    label = 43;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = (___pthread_self_425()|0);
   $10 = ((($9)) + 188|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $not$ = ($12|0)==(0|0);
   $13 = ($0|0)!=(0|0);
   if (!($not$)) {
    if ($13) {
     $$1108$ph = $0;$$5118$ph = $2;$$6106$ph = $4;
     label = 15;
     break;
    } else {
     $$1101$ph = $4;$$1114$ph = $2;
     label = 14;
     break;
    }
   }
   if (!($13)) {
    $15 = (_strlen($4)|0);
    $$099 = $15;
    label = 59;
    break;
   }
   $14 = ($2|0)==(0);
   L13: do {
    if ($14) {
     $$0100$lcssa = $4;
    } else {
     $$0100136 = $4;$$0107135 = $0;$$0113134 = $2;
     while(1) {
      $16 = HEAP8[$$0100136>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       break;
      }
      $18 = ((($$0100136)) + 1|0);
      $19 = $16 << 24 >> 24;
      $20 = $19 & 57343;
      $21 = ((($$0107135)) + 4|0);
      HEAP32[$$0107135>>2] = $20;
      $22 = (($$0113134) + -1)|0;
      $23 = ($22|0)==(0);
      if ($23) {
       $$0100$lcssa = $18;
       break L13;
      } else {
       $$0100136 = $18;$$0107135 = $21;$$0113134 = $22;
      }
     }
     HEAP32[$$0107135>>2] = 0;
     HEAP32[$1>>2] = 0;
     $24 = (($2) - ($$0113134))|0;
     $$099 = $24;
     label = 59;
     break L5;
    }
   } while(0);
   HEAP32[$1>>2] = $$0100$lcssa;
   $$099 = $2;
   label = 59;
  }
 } while(0);
 L19: while(1) {
  L20: do {
   if ((label|0) == 14) {
    label = 0;
    $$1101 = $$1101$ph;$$1114 = $$1114$ph;
    while(1) {
     $26 = HEAP8[$$1101>>0]|0;
     $27 = $26&255;
     $28 = (($27) + -1)|0;
     $29 = ($28>>>0)<(127);
     if ($29) {
      $30 = $$1101;
      $31 = $30 & 3;
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = HEAP32[$$1101>>2]|0;
       $34 = (($33) + -16843009)|0;
       $35 = $34 | $33;
       $36 = $35 & -2139062144;
       $37 = ($36|0)==(0);
       $38 = $33&255;
       if ($37) {
        $$2102144 = $$1101;$$2115143 = $$1114;
        while(1) {
         $39 = ((($$2102144)) + 4|0);
         $40 = (($$2115143) + -4)|0;
         $41 = HEAP32[$39>>2]|0;
         $42 = (($41) + -16843009)|0;
         $43 = $42 | $41;
         $44 = $43 & -2139062144;
         $45 = ($44|0)==(0);
         if ($45) {
          $$2102144 = $39;$$2115143 = $40;
         } else {
          break;
         }
        }
        $46 = $41&255;
        $$3103 = $39;$$3116 = $40;$48 = $46;
       } else {
        $$3103 = $$1101;$$3116 = $$1114;$48 = $38;
       }
      } else {
       $$3103 = $$1101;$$3116 = $$1114;$48 = $26;
      }
     } else {
      $$3103 = $$1101;$$3116 = $$1114;$48 = $26;
     }
     $47 = $48&255;
     $49 = (($47) + -1)|0;
     $50 = ($49>>>0)<(127);
     if (!($50)) {
      break;
     }
     $51 = ((($$3103)) + 1|0);
     $52 = (($$3116) + -1)|0;
     $$1101 = $51;$$1114 = $52;
    }
    $53 = (($47) + -194)|0;
    $54 = ($53>>>0)>(50);
    if ($54) {
     $$11163 = $$3103;$$5112162 = $0;$$9122161 = $$3116;
     label = 53;
    } else {
     $55 = ((($$3103)) + 1|0);
     $56 = (2444 + ($53<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $$2 = $57;$$4104 = $55;$$4117 = $$3116;
     label = 25;
     continue L19;
    }
   }
   else if ((label|0) == 15) {
    label = 0;
    $25 = ($$5118$ph|0)==(0);
    L22: do {
     if ($25) {
      $$6106$lcssa = $$6106$ph;
     } else {
      $$1108138 = $$1108$ph;$$5118137 = $$5118$ph;$$6106139 = $$6106$ph;
      while(1) {
       $80 = HEAP8[$$6106139>>0]|0;
       $81 = $80&255;
       $82 = (($81) + -1)|0;
       $83 = ($82>>>0)<(127);
       do {
        if ($83) {
         $84 = $$6106139;
         $85 = $84 & 3;
         $86 = ($85|0)==(0);
         $87 = ($$5118137>>>0)>(4);
         $or$cond = $87 & $86;
         if ($or$cond) {
          $$2109 = $$1108138;$$6119 = $$5118137;$$7 = $$6106139;
          while(1) {
           $88 = HEAP32[$$7>>2]|0;
           $89 = (($88) + -16843009)|0;
           $90 = $89 | $88;
           $91 = $90 & -2139062144;
           $92 = ($91|0)==(0);
           if (!($92)) {
            label = 38;
            break;
           }
           $93 = ((($$7)) + 1|0);
           $94 = $88 & 255;
           $95 = ((($$2109)) + 4|0);
           HEAP32[$$2109>>2] = $94;
           $96 = ((($$7)) + 2|0);
           $97 = HEAP8[$93>>0]|0;
           $98 = $97&255;
           $99 = ((($$2109)) + 8|0);
           HEAP32[$95>>2] = $98;
           $100 = ((($$7)) + 3|0);
           $101 = HEAP8[$96>>0]|0;
           $102 = $101&255;
           $103 = ((($$2109)) + 12|0);
           HEAP32[$99>>2] = $102;
           $104 = ((($$7)) + 4|0);
           $105 = HEAP8[$100>>0]|0;
           $106 = $105&255;
           $107 = ((($$2109)) + 16|0);
           HEAP32[$103>>2] = $106;
           $108 = (($$6119) + -4)|0;
           $$old1 = ($108>>>0)>(4);
           if ($$old1) {
            $$2109 = $107;$$6119 = $108;$$7 = $104;
           } else {
            label = 37;
            break;
           }
          }
          if ((label|0) == 37) {
           label = 0;
           $$pre$pre = HEAP8[$104>>0]|0;
           $$3110 = $107;$$7120 = $108;$$8 = $104;$111 = $$pre$pre;
           break;
          }
          else if ((label|0) == 38) {
           label = 0;
           $109 = $88&255;
           $$3110 = $$2109;$$7120 = $$6119;$$8 = $$7;$111 = $109;
           break;
          }
         } else {
          $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$111 = $80;
         }
        } else {
         $$3110 = $$1108138;$$7120 = $$5118137;$$8 = $$6106139;$111 = $80;
        }
       } while(0);
       $110 = $111&255;
       $112 = (($110) + -1)|0;
       $113 = ($112>>>0)<(127);
       if (!($113)) {
        break;
       }
       $114 = ((($$8)) + 1|0);
       $115 = ((($$3110)) + 4|0);
       HEAP32[$$3110>>2] = $110;
       $116 = (($$7120) + -1)|0;
       $117 = ($116|0)==(0);
       if ($117) {
        $$6106$lcssa = $114;
        break L22;
       } else {
        $$1108138 = $115;$$5118137 = $116;$$6106139 = $114;
       }
      }
      $118 = (($110) + -194)|0;
      $119 = ($118>>>0)>(50);
      if ($119) {
       $$11163 = $$8;$$5112162 = $$3110;$$9122161 = $$7120;
       label = 53;
       break L20;
      }
      $120 = ((($$8)) + 1|0);
      $121 = (2444 + ($118<<2)|0);
      $122 = HEAP32[$121>>2]|0;
      $$4 = $122;$$4111 = $$3110;$$8121 = $$7120;$$9 = $120;
      label = 43;
      continue L19;
     }
    } while(0);
    HEAP32[$1>>2] = $$6106$lcssa;
    $$099 = $2;
    label = 59;
    continue L19;
   }
   else if ((label|0) == 25) {
    label = 0;
    $58 = HEAP8[$$4104>>0]|0;
    $59 = $58&255;
    $60 = $59 >>> 3;
    $61 = (($60) + -16)|0;
    $62 = $$2 >> 26;
    $63 = (($60) + ($62))|0;
    $64 = $61 | $63;
    $65 = ($64>>>0)>(7);
    if ($65) {
     $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
     label = 52;
    } else {
     $66 = ((($$4104)) + 1|0);
     $67 = $$2 & 33554432;
     $68 = ($67|0)==(0);
     if ($68) {
      $$5105 = $66;
     } else {
      $69 = HEAP8[$66>>0]|0;
      $70 = $69 & -64;
      $71 = ($70<<24>>24)==(-128);
      if (!($71)) {
       $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
       label = 52;
       break;
      }
      $72 = ((($$4104)) + 2|0);
      $73 = $$2 & 524288;
      $74 = ($73|0)==(0);
      if ($74) {
       $$5105 = $72;
      } else {
       $75 = HEAP8[$72>>0]|0;
       $76 = $75 & -64;
       $77 = ($76<<24>>24)==(-128);
       if (!($77)) {
        $$5112 = $0;$$6 = $$2;$$9$sink = $$4104;$$9122 = $$4117;
        label = 52;
        break;
       }
       $78 = ((($$4104)) + 3|0);
       $$5105 = $78;
      }
     }
     $79 = (($$4117) + -1)|0;
     $$1101$ph = $$5105;$$1114$ph = $79;
     label = 14;
     continue L19;
    }
   }
   else if ((label|0) == 43) {
    label = 0;
    $123 = HEAP8[$$9>>0]|0;
    $124 = $123&255;
    $125 = $124 >>> 3;
    $126 = (($125) + -16)|0;
    $127 = $$4 >> 26;
    $128 = (($125) + ($127))|0;
    $129 = $126 | $128;
    $130 = ($129>>>0)>(7);
    if ($130) {
     $$5112 = $$4111;$$6 = $$4;$$9$sink = $$9;$$9122 = $$8121;
     label = 52;
    } else {
     $131 = $$4 << 6;
     $132 = ((($$9)) + 1|0);
     $133 = (($124) + -128)|0;
     $134 = $133 | $131;
     $135 = ($134|0)<(0);
     do {
      if ($135) {
       $136 = HEAP8[$132>>0]|0;
       $137 = $136&255;
       $138 = (($137) + -128)|0;
       $139 = ($138>>>0)>(63);
       if ($139) {
        $140 = ((($$9)) + -1|0);
        $$11124 = $140;$$5112123 = $$4111;
        break L20;
       }
       $141 = $134 << 6;
       $142 = ((($$9)) + 2|0);
       $143 = $138 | $141;
       $144 = ($143|0)<(0);
       if ($144) {
        $145 = HEAP8[$142>>0]|0;
        $146 = $145&255;
        $147 = (($146) + -128)|0;
        $148 = ($147>>>0)>(63);
        if ($148) {
         $149 = ((($$9)) + -1|0);
         $$11124 = $149;$$5112123 = $$4111;
         break L20;
        } else {
         $150 = $143 << 6;
         $151 = ((($$9)) + 3|0);
         $152 = $147 | $150;
         $$10 = $151;$$5 = $152;
         break;
        }
       } else {
        $$10 = $142;$$5 = $143;
       }
      } else {
       $$10 = $132;$$5 = $134;
      }
     } while(0);
     $153 = ((($$4111)) + 4|0);
     HEAP32[$$4111>>2] = $$5;
     $154 = (($$8121) + -1)|0;
     $$1108$ph = $153;$$5118$ph = $154;$$6106$ph = $$10;
     label = 15;
     continue L19;
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    return ($$099|0);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   $155 = ((($$9$sink)) + -1|0);
   $156 = ($$6|0)==(0);
   if ($156) {
    $$11163 = $155;$$5112162 = $$5112;$$9122161 = $$9122;
    label = 53;
   } else {
    $$11124 = $155;$$5112123 = $$5112;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $157 = HEAP8[$$11163>>0]|0;
   $158 = ($157<<24>>24)==(0);
   if ($158) {
    $159 = ($$5112162|0)==(0|0);
    if (!($159)) {
     HEAP32[$$5112162>>2] = 0;
     HEAP32[$1>>2] = 0;
    }
    $160 = (($2) - ($$9122161))|0;
    $$099 = $160;
    label = 59;
    continue;
   } else {
    $$11124 = $$11163;$$5112123 = $$5112162;
   }
  }
  $161 = (___errno_location()|0);
  HEAP32[$161>>2] = 84;
  $162 = ($$5112123|0)==(0|0);
  if ($162) {
   $$099 = -1;
   label = 59;
   continue;
  }
  HEAP32[$1>>2] = $$11124;
  $$099 = -1;
  label = 59;
 }
 return (0)|0;
}
function ___pthread_self_425() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$04773 = 0, $$05072 = 0, $$053$$050 = 0, $$05371 = 0, $$062 = 0, $$074 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$154 = 0, $$24968 = 0, $$25267 = 0, $$255 = 0, $$269 = 0, $$3 = 0, $$35666 = 0, $$57 = 0, $$cast = 0, $$pr$pre = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$ = $8 ? $3 : 256;
 $$57 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$|0)!=(0);
 $or$cond70 = $10 & $9;
 L1: do {
  if ($or$cond70) {
   $$04773 = 0;$$05072 = $2;$$05371 = $$;$$074 = $$57;$45 = $$cast;
   while(1) {
    $11 = ($$05072>>>0)>=($$05371>>>0);
    $12 = ($$05072>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$062 = $$074;$$148 = $$04773;$$151 = $$05072;$$255 = $$05371;$25 = $45;
     break L1;
    }
    $$053$$050 = $11 ? $$05371 : $$05072;
    $14 = (($$05072) - ($$053$$050))|0;
    $15 = (_wcsrtombs($$074,$6,$$053$$050,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$074|0)==($5|0);
    $18 = (($$074) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$154 = (($$05371) - ($19))|0;
    $$1 = $17 ? $$074 : $18;
    $20 = (($15) + ($$04773))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$154|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04773 = $20;$$05072 = $14;$$05371 = $$154;$$074 = $$1;$45 = $21;
    } else {
     $$062 = $$1;$$148 = $20;$$151 = $14;$$255 = $$154;$25 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$062 = $$074;$$148 = -1;$$151 = $14;$$255 = 0;$25 = $$pr$pre;
  } else {
   $$062 = $$57;$$148 = 0;$$151 = $2;$$255 = $$;$25 = $$cast;
  }
 } while(0);
 $24 = ($25|0)==(0|0);
 L8: do {
  if ($24) {
   $$3 = $$148;
  } else {
   $26 = ($$255|0)!=(0);
   $27 = ($$151|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24968 = $$148;$$25267 = $$151;$$269 = $$062;$$35666 = $$255;$30 = $25;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$269,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25267) + -1)|0;
     $38 = (($$269) + ($31)|0);
     $39 = (($$35666) - ($31))|0;
     $40 = (($31) + ($$24968))|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24968 = $40;$$25267 = $37;$$269 = $38;$$35666 = $39;$30 = $36;
     } else {
      $$3 = $40;
      break L8;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$3 = $$24968;
    } else {
     $$3 = -1;
    }
   } else {
    $$3 = $$148;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$3|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05675 = 0, $$057$lcssa = 0, $$05785 = 0, $$05874 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26084 = 0, $$279 = 0, $$3 = 0, $$361 = 0, $$478 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre102 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $7 = HEAP32[$1>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $$05675 = $7;$$05874 = 0;$11 = $8;
    while(1) {
     $10 = ($11>>>0)>(127);
     if ($10) {
      $12 = (_wcrtomb($4,$11,0)|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $12;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05874))|0;
     $14 = ((($$05675)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = $$159;
      break;
     } else {
      $$05675 = $14;$$05874 = $$159;$11 = $15;
     }
    }
   }
  } else {
   $6 = ($2>>>0)>(3);
   L9: do {
    if ($6) {
     $$pre = HEAP32[$1>>2]|0;
     $$05785 = $0;$$26084 = $2;$19 = $$pre;
     while(1) {
      $18 = HEAP32[$19>>2]|0;
      $20 = (($18) + -1)|0;
      $21 = ($20>>>0)>(126);
      if ($21) {
       $22 = ($18|0)==(0);
       if ($22) {
        break;
       }
       $24 = (_wcrtomb($$05785,$18,0)|0);
       $25 = ($24|0)==(-1);
       if ($25) {
        $$0 = -1;
        break L1;
       }
       $26 = (($$05785) + ($24)|0);
       $27 = (($$26084) - ($24))|0;
       $$1 = $26;$$361 = $27;$32 = $19;
      } else {
       $28 = $18&255;
       $29 = ((($$05785)) + 1|0);
       HEAP8[$$05785>>0] = $28;
       $30 = (($$26084) + -1)|0;
       $$pre100 = HEAP32[$1>>2]|0;
       $$1 = $29;$$361 = $30;$32 = $$pre100;
      }
      $31 = ((($32)) + 4|0);
      HEAP32[$1>>2] = $31;
      $33 = ($$361>>>0)>(3);
      if ($33) {
       $$05785 = $$1;$$26084 = $$361;$19 = $31;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L9;
      }
     }
     HEAP8[$$05785>>0] = 0;
     HEAP32[$1>>2] = 0;
     $23 = (($2) - ($$26084))|0;
     $$0 = $23;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $17 = ($$260$lcssa|0)==(0);
   if ($17) {
    $$0 = $2;
   } else {
    $$pre101 = HEAP32[$1>>2]|0;
    $$279 = $$057$lcssa;$$478 = $$260$lcssa;$35 = $$pre101;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 19;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$478>>>0)<($40>>>0);
      if ($42) {
       label = 22;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$279,$44,0)|0);
      $45 = (($$279) + ($40)|0);
      $46 = (($$478) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$279)) + 1|0);
      HEAP8[$$279>>0] = $47;
      $49 = (($$478) + -1)|0;
      $$pre102 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre102;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$279 = $$3;$$478 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 19) {
     HEAP8[$$279>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$478))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 22) {
     $43 = (($2) - ($$478))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,2));
 return (+$2);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtold($0,$1));
 return (+$3);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01417 = 0, $$019 = 0, $$118 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  $$in = $2;
  while(1) {
   $9 = (($$in) + -1)|0;
   $10 = (($1) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($9<<2)|0);
   HEAP32[$12>>2] = $11;
   $13 = ($9|0)==(0);
   if ($13) {
    break;
   } else {
    $$in = $9;
   }
  }
 } else {
  $8 = ($2|0)==(0);
  if (!($8)) {
   $$01417 = $1;$$019 = $0;$$118 = $2;
   while(1) {
    $14 = (($$118) + -1)|0;
    $15 = ((($$01417)) + 4|0);
    $16 = HEAP32[$$01417>>2]|0;
    $17 = ((($$019)) + 4|0);
    HEAP32[$$019>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01417 = $15;$$019 = $17;$$118 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4912]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (19688 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4912] = $24;
     } else {
      $25 = HEAP32[(19664)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(19656)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (19688 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4912] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(19664)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(19668)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (19688 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4912] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(19664)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(19656)>>2] = $84;
     HEAP32[(19668)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(19652)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (19952 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(19664)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (19952 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(19652)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(19664)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(19664)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(19664)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(19668)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (19688 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[4912] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(19664)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(19656)>>2] = $$0193$lcssa$i;
      HEAP32[(19668)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(19652)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (19952 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (19952 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(19656)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(19664)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (19952 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(19652)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(19664)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(19664)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(19664)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (19688 + ($425<<2)|0);
          $427 = HEAP32[4912]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4912] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(19664)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (19952 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(19652)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(19664)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(19664)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(19656)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(19668)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(19668)>>2] = $511;
   HEAP32[(19656)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(19656)>>2] = 0;
   HEAP32[(19668)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(19660)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(19660)>>2] = $526;
  $527 = HEAP32[(19672)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(19672)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[5030]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(20128)>>2] = 4096;
  HEAP32[(20124)>>2] = 4096;
  HEAP32[(20132)>>2] = -1;
  HEAP32[(20136)>>2] = -1;
  HEAP32[(20140)>>2] = 0;
  HEAP32[(20092)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[5030] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(20128)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(20088)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(20080)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(20092)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(19672)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (20096);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(20124)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(20080)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(20088)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(20128)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(20092)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(20092)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(20080)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(20080)>>2] = $627;
  $628 = HEAP32[(20084)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(20084)>>2] = $627;
  }
  $630 = HEAP32[(19672)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(19664)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(19664)>>2] = $$749$i;
    }
    HEAP32[(20096)>>2] = $$749$i;
    HEAP32[(20100)>>2] = $$723948$i;
    HEAP32[(20108)>>2] = 0;
    $635 = HEAP32[5030]|0;
    HEAP32[(19684)>>2] = $635;
    HEAP32[(19680)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (19688 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(19672)>>2] = $649;
    HEAP32[(19660)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(20136)>>2]|0;
    HEAP32[(19676)>>2] = $655;
   } else {
    $$024371$i = (20096);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(19660)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(19672)>>2] = $679;
       HEAP32[(19660)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(20136)>>2]|0;
       HEAP32[(19676)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(19664)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(19664)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (20096);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(19660)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(19660)>>2] = $727;
        HEAP32[(19672)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(19668)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(19656)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(19656)>>2] = $733;
         HEAP32[(19668)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (19688 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[4912]|0;
            $760 = $759 & $758;
            HEAP32[4912] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (19952 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(19652)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(19652)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(19664)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(19664)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(19664)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (19688 + ($836<<2)|0);
         $838 = HEAP32[4912]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[4912] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(19664)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (19952 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(19652)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(19652)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(19664)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(19664)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (20096);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(19672)>>2] = $946;
    HEAP32[(19660)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(20136)>>2]|0;
    HEAP32[(19676)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(20096)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(20096)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(20096)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(20096)+12>>2]|0;
    HEAP32[(20096)>>2] = $$749$i;
    HEAP32[(20100)>>2] = $$723948$i;
    HEAP32[(20108)>>2] = 0;
    HEAP32[(20104)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (19688 + ($968<<2)|0);
      $970 = HEAP32[4912]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[4912] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(19664)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (19952 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(19652)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(19652)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(19664)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(19664)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(19660)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(19660)>>2] = $1050;
   $1051 = HEAP32[(19672)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(19672)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(19664)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(19668)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(19656)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (19688 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4912]|0;
     $38 = $37 & $36;
     HEAP32[4912] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (19952 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(19652)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(19652)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(19664)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(19664)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(19664)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(19672)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(19668)>>2]|0;
  if ($121) {
   $123 = HEAP32[(19660)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(19660)>>2] = $124;
   HEAP32[(19672)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(19668)>>2] = 0;
   HEAP32[(19656)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(19656)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(19656)>>2] = $130;
   HEAP32[(19668)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (19688 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(19664)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[4912]|0;
     $154 = $153 & $152;
     HEAP32[4912] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(19664)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(19664)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(19664)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (19952 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(19652)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(19652)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(19664)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(19664)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(19664)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(19668)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(19656)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (19688 + ($234<<2)|0);
  $236 = HEAP32[4912]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[4912] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(19664)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (19952 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(19652)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(19652)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(19664)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(19664)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(19680)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(19680)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (20104);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(19680)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(19664)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(20128)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(19672)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(19660)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(19672)>>2] = $40;
  HEAP32[(19660)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(19668)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(19656)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(19656)>>2] = $storemerge1;
  HEAP32[(19668)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (19688 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[4912]|0;
    $92 = $91 & $90;
    HEAP32[4912] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (19952 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(19652)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(19652)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(19664)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(19664)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(19664)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(19664)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(19668)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(19656)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (19688 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[4912]|0;
     $34 = $33 & $32;
     HEAP32[4912] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (19952 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(19652)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(19652)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(19664)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(19664)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(19664)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(19664)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(19672)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(19668)>>2]|0;
  if ($115) {
   $117 = HEAP32[(19660)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(19660)>>2] = $118;
   HEAP32[(19672)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(19668)>>2] = 0;
   HEAP32[(19656)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(19656)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(19656)>>2] = $124;
   HEAP32[(19668)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (19688 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[4912]|0;
     $147 = $146 & $145;
     HEAP32[4912] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (19952 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(19652)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(19652)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(19664)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(19664)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(19664)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(19668)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(19656)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (19688 + ($224<<2)|0);
  $226 = HEAP32[4912]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[4912] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(19664)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (19952 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(19652)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(19652)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(19664)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(19664)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6420);
 __THREW__ = 0;
 invoke_vii(427,($0|0),0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $12 = ___cxa_find_matching_catch_3(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $3 = ((($0)) + 28|0);
  __ZNSt3__26localeD2Ev($3);
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  $8 = ((($0)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = ((($0)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  return;
 }
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 1023]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6436);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = 0;$$013 = $1;
 while(1) {
  $5 = ($$0|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $storemerge = $10;
  } else {
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($11)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_ii[$13 & 1023]($0)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
   $16 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($14)|0);
   $storemerge = $16;
  }
  HEAP8[$$013>>0] = $storemerge;
  $17 = (($$0) + 1)|0;
  $18 = ((($$013)) + 1|0);
  $$0 = $17;$$013 = $18;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($0)|0);
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $8;
   $20 = $7;
   $21 = (($19) - ($20))|0;
   $22 = (($2) - ($$021))|0;
   $23 = ($22|0)<($21|0);
   $$sroa$speculated = $23 ? $22 : $21;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($7,$$0,$$sroa$speculated)|0);
   $24 = HEAP32[$4>>2]|0;
   $25 = (($24) + ($$sroa$speculated)|0);
   HEAP32[$4>>2] = $25;
   $26 = (($$0) + ($$sroa$speculated)|0);
   $27 = (($$sroa$speculated) + ($$021))|0;
   $$0 = $26;$$021 = $27;
   continue;
  }
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$$0>>0]|0;
  $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
  $15 = (FUNCTION_TABLE_iii[$12 & 511]($0,$14)|0);
  $16 = ($15|0)==($3|0);
  if ($16) {
   break;
  }
  $17 = ((($$0)) + 1|0);
  $18 = (($$021) + 1)|0;
  $$0 = $17;$$021 = $18;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,6532);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,6540);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0,6608);
 $1 = ((($0)) + 12|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -8|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($1);
 return;
}
function __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -8|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($1);
 return;
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($1)) + 12|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($2,$3);
 $4 = ((($1)) + 4|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$4);
 return;
}
function __ZNSt3__219__iostream_categoryD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__219__iostream_category4nameEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15560|0);
}
function __ZNKSt3__219__iostream_category7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(1);
 $4 = ($2|0)<(257);
 $or$cond = $3 & $4;
 if ($or$cond) {
  __ZNKSt3__212__do_message7messageEi($0,$1,$2);
 } else {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(15524)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,15524,$5);
 }
 return;
}
function __ZNSt3__28ios_base7failureD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 return;
}
function __ZNSt3__28ios_base7failureD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base7failureD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$index = 0, $$index2 = 0, $$sink = 0, $$sroa_idx2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $not$ = ($4|0)==(0|0);
 $5 = $not$&1;
 $$sink = $5 | $1;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $$sink & $8;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__217iostream_categoryEv()|0);
 HEAP32[$2>>2] = 1;
 $$sroa_idx2$i = ((($2)) + 4|0);
 HEAP32[$$sroa_idx2$i>>2] = (6692);
 __THREW__ = 0;
 invoke_viii(428,($11|0),(15625|0),($2|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  ___cxa_free_exception(($11|0));
  $$index = $17;$$index2 = $18;
 } else {
  __THREW__ = 0;
  invoke_viii(429,($11|0),(616|0),(63|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  $$index = $15;$$index2 = $16;
 }
 ___resumeException($$index|0);
 // unreachable;
}
function __ZNSt3__217iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18840]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18840)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (___cxa_atexit((56|0),(6692|0),(___dso_handle|0))|0);
  }
 }
 return (6692|0);
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $3 = sp;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$tmpcast$byval_copy,$1);
 HEAP32[$0>>2] = (6680);
 STACKTOP = sp;return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $not$ = ($1|0)==(0|0);
 $3 = $not$&1;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = 4098;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = 6;
 $9 = ((($0)) + 32|0);
 $10 = ((($0)) + 28|0);
 dest=$9; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($10);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($0,$2);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (6436);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$sroa$028$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i14 = 0, $$pre$phiZ2D = 0, $$sroa$028$138 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP8[$0>>0] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($7)) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12)|0);
  }
  do {
   if (!($2)) {
    $14 = HEAP32[$1>>2]|0;
    $15 = ((($14)) + -12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($1) + ($16)|0);
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 4096;
    $21 = ($20|0)==(0);
    if (!($21)) {
     __ZNKSt3__28ios_base6getlocEv($3,$17);
     __THREW__ = 0;
     $22 = (invoke_iii(354,($3|0),(20160|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      $69 = ___cxa_find_matching_catch_2()|0;
      $70 = tempRet0;
      __ZNSt3__26localeD2Ev($3);
      ___resumeException($69|0);
      // unreachable;
     }
     __ZNSt3__26localeD2Ev($3);
     $25 = HEAP32[$1>>2]|0;
     $26 = ((($25)) + -12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($1) + ($27)|0);
     $29 = ((($28)) + 24|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($22)) + 8|0);
     $32 = $30;
     $33 = ($30|0)==(0);
     $34 = ((($32)) + 12|0);
     $35 = ((($32)) + 16|0);
     $36 = $30;
     while(1) {
      if ($33) {
       $$pre$phiZ2D = 0;$$sroa$028$138 = 0;
       break;
      }
      $37 = HEAP32[$34>>2]|0;
      $38 = HEAP32[$35>>2]|0;
      $39 = ($37|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$36>>2]|0;
       $41 = ((($40)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (FUNCTION_TABLE_ii[$42 & 1023]($32)|0);
       $$0$i$i$i$i14 = $43;
      } else {
       $44 = HEAP8[$37>>0]|0;
       $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
       $$0$i$i$i$i14 = $45;
      }
      $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i14,$46)|0);
      $$$sroa$028$0 = $47 ? 0 : $30;
      if ($47) {
       $$pre$phiZ2D = 0;$$sroa$028$138 = 0;
       break;
      }
      $48 = $$$sroa$028$0;
      $49 = ((($48)) + 12|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($48)) + 16|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($50|0)==($52|0);
      if ($53) {
       $54 = $$$sroa$028$0;
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($55)) + 36|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_ii[$57 & 1023]($48)|0);
       $$0$i$i = $58;
      } else {
       $59 = HEAP8[$50>>0]|0;
       $60 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($59)|0);
       $$0$i$i = $60;
      }
      $61 = $$0$i$i&255;
      $62 = ($61<<24>>24)>(-1);
      if (!($62)) {
       $$pre$phiZ2D = $48;$$sroa$028$138 = $30;
       break;
      }
      $sext = $$0$i$i << 24;
      $63 = $sext >> 24;
      $64 = HEAP32[$31>>2]|0;
      $65 = (($64) + ($63<<1)|0);
      $66 = HEAP16[$65>>1]|0;
      $67 = $66 & 8192;
      $68 = ($67<<16>>16)==(0);
      if ($68) {
       $$pre$phiZ2D = $48;$$sroa$028$138 = $30;
       break;
      }
      $71 = HEAP32[$49>>2]|0;
      $72 = HEAP32[$51>>2]|0;
      $73 = ($71|0)==($72|0);
      if ($73) {
       $74 = $$$sroa$028$0;
       $75 = HEAP32[$74>>2]|0;
       $76 = ((($75)) + 40|0);
       $77 = HEAP32[$76>>2]|0;
       (FUNCTION_TABLE_ii[$77 & 1023]($48)|0);
       continue;
      } else {
       $78 = ((($71)) + 1|0);
       HEAP32[$49>>2] = $78;
       $79 = HEAP8[$71>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($79)|0);
       continue;
      }
     }
     $80 = ($$sroa$028$138|0)==(0);
     if (!($80)) {
      $81 = ((($$pre$phiZ2D)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($$pre$phiZ2D)) + 16|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82|0)==($84|0);
      if ($85) {
       $86 = $$sroa$028$138;
       $87 = HEAP32[$86>>2]|0;
       $88 = ((($87)) + 36|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$phiZ2D)|0);
       $$0$i$i$i$i = $90;
      } else {
       $91 = HEAP8[$82>>0]|0;
       $92 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($91)|0);
       $$0$i$i$i$i = $92;
      }
      $93 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $94 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$93)|0);
      if (!($94)) {
       break;
      }
     }
     $95 = HEAP32[$1>>2]|0;
     $96 = ((($95)) + -12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($1) + ($97)|0);
     $99 = ((($98)) + 16|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 | 6;
     __ZNSt3__28ios_base5clearEj($98,$101);
    }
   }
  } while(0);
  $102 = HEAP32[$1>>2]|0;
  $103 = ((($102)) + -12|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($1) + ($104)|0);
  $106 = ((($105)) + 16|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0);
  $109 = $108&1;
  HEAP8[$0>>0] = $109;
 } else {
  $110 = $9 | 4;
  __ZNSt3__28ios_base5clearEj($7,$110);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vii(382,($1|0),($0|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   L3: do {
    if ($10) {
     $35 = ___cxa_find_matching_catch_3(0|0)|0;
     $36 = tempRet0;
     $$0 = $35;
    } else {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(0);
     do {
      if (!($12)) {
       $13 = HEAP32[$0>>2]|0;
       $14 = ((($13)) + -12|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($0) + ($15)|0);
       $17 = ((($16)) + 24|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = HEAP32[$18>>2]|0;
       $20 = ((($19)) + 24|0);
       $21 = HEAP32[$20>>2]|0;
       __THREW__ = 0;
       $22 = (invoke_ii($21|0,($18|0))|0);
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if (!($24)) {
        $25 = ($22|0)==(-1);
        if (!($25)) {
         break;
        }
        $26 = HEAP32[$0>>2]|0;
        $27 = ((($26)) + -12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($0) + ($28)|0);
        $30 = ((($29)) + 16|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $31 | 1;
        __THREW__ = 0;
        invoke_vii(357,($29|0),($32|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if (!($34)) {
         break;
        }
       }
       $37 = ___cxa_find_matching_catch_3(0|0)|0;
       $38 = tempRet0;
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
       $$0 = $37;
       break L3;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + -12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($0) + ($41)|0);
   __THREW__ = 0;
   invoke_vi(355,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    ___cxa_end_catch();
    break;
   }
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = tempRet0;
   __THREW__ = 0;
   invoke_v(358);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch_3(0|0)|0;
    $50 = tempRet0;
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   $10 = ((($6)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = ((($6)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 8192;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = (__ZSt18uncaught_exceptionv()|0);
     if (!($17)) {
      $18 = HEAP32[$1>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      $28 = (invoke_ii($27|0,($24|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(-1);
       if (!($31)) {
        break;
       }
       $32 = HEAP32[$1>>2]|0;
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + -12|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($32) + ($35)|0);
       $37 = ((($36)) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 | 1;
       __THREW__ = 0;
       invoke_vii(357,($36|0),($39|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if (!($41)) {
        break;
       }
      }
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = tempRet0;
      (___cxa_begin_catch(($42|0))|0);
      __THREW__ = 0;
      invoke_v(358);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       $46 = ___cxa_find_matching_catch_3(0|0)|0;
       $47 = tempRet0;
       ___clang_call_terminate($46);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 1023]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($6) + ($4))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $8 = ($6>>>0)<(11);
  if ($8) {
   $9 = $6&255;
   $10 = ((($0)) + 11|0);
   HEAP8[$10>>0] = $9;
   $$021$ph = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwj($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021$ph = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$021,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$021)) + 1|0);
  $$0 = $20;$$021 = $21;
 }
 $scevgep23 = (($$021$ph) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>(1073741807);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $9 = ($7>>>0)<(2);
  if ($9) {
   $10 = $7&255;
   $11 = ((($0)) + 8|0);
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = $10;
   $$0 = $1;$$021 = $0;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $13 = (($7) + 4)|0;
   $14 = $13 & -4;
   $15 = ($14>>>0)>(1073741823);
   if ($15) {
    $16 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($16);
    ___cxa_throw(($16|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $17 = $14 << 2;
    $18 = (__Znwj($17)|0);
    HEAP32[$0>>2] = $18;
    $19 = $14 | -2147483648;
    $20 = ((($0)) + 8|0);
    HEAP32[$20>>2] = $19;
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = $7;
    $$0 = $1;$$021 = $18;
    break;
   }
  }
 } while(0);
 while(1) {
  $22 = ($$0|0)==($2|0);
  if ($22) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$021,$$0);
  $23 = ((($$0)) + 4|0);
  $24 = ((($$021)) + 4|0);
  $$0 = $23;$$021 = $24;
 }
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$021,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$2 = 0, $$232 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$ptr = 0, $$sroa$026$0 = 0, $$sroa$026$0$copyload = 0, $$sroa$026$0$copyload28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 L1: do {
  if ($16) {
   HEAP32[$6>>2] = -1;
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $20;
   $21 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $21;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
   $22 = (FUNCTION_TABLE_iiiiiii[$19 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
   HEAP32[$1>>2] = $22;
   $23 = HEAP32[$6>>2]|0;
   switch ($23|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$026$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$026$0 = $$sroa$026$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($9,$3);
   __THREW__ = 0;
   $24 = (invoke_iii(354,($9|0),(20160|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   do {
    if ($26) {
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     __ZNSt3__26localeD2Ev($9);
     $$2 = $49;$$232 = $50;
    } else {
     __ZNSt3__26localeD2Ev($9);
     __ZNKSt3__28ios_base6getlocEv($10,$3);
     __THREW__ = 0;
     $27 = (invoke_iii(354,($10|0),(20176|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $51 = ___cxa_find_matching_catch_2()|0;
      $52 = tempRet0;
      __ZNSt3__26localeD2Ev($10);
      $$2 = $51;$$232 = $52;
      break;
     }
     __ZNSt3__26localeD2Ev($10);
     $30 = HEAP32[$27>>2]|0;
     $31 = ((($30)) + 24|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii($32|0,($11|0),($27|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch_2()|0;
      $36 = tempRet0;
      $$2 = $35;$$232 = $36;
      break;
     }
     $$ptr = ((($11)) + 12|0);
     $37 = HEAP32[$27>>2]|0;
     $38 = ((($37)) + 28|0);
     $39 = HEAP32[$38>>2]|0;
     __THREW__ = 0;
     invoke_vii($39|0,($$ptr|0),($27|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
      $$2 = $61;$$232 = $62;
      break;
     }
     $42 = HEAP32[$2>>2]|0;
     HEAP32[$12>>2] = $42;
     $43 = ((($11)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
     $44 = (invoke_iiiiiiii(430,($1|0),($$byval_copy2|0),($11|0),($43|0),($24|0),($4|0),1)|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $53 = ___cxa_find_matching_catch_2()|0;
      $54 = tempRet0;
      $59 = $43;
      while(1) {
       $58 = ((($59)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($58);
       $60 = ($58|0)==($11|0);
       if ($60) {
        break;
       } else {
        $59 = $58;
       }
      }
      $$2 = $53;$$232 = $54;
      break;
     } else {
      $47 = ($44|0)==($11|0);
      $48 = $47&1;
      HEAP8[$5>>0] = $48;
      $$sroa$026$0$copyload28 = HEAP32[$1>>2]|0;
      $56 = $43;
      while(1) {
       $55 = ((($56)) + -12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($55);
       $57 = ($55|0)==($11|0);
       if ($57) {
        break;
       } else {
        $56 = $55;
       }
      }
      $$sroa$026$0 = $$sroa$026$0$copyload28;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$026$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$0$i$i60 = 0, $$022 = 0, $$025 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $$227 = 0, $$3 = 0, $$328 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i39 = 0, $$pre$i4$i$i = 0;
 var $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i34 = 0, $phitmp$i = 0, $phitmp$i55 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __THREW__ = 0;
 invoke_vii(353,($8|0),($3|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if ($17) {
   $99 = ___cxa_find_matching_catch_2()|0;
   $100 = tempRet0;
   $$0 = $99;$$025 = $100;
   label = 36;
  } else {
   __THREW__ = 0;
   $18 = (invoke_iii(354,($8|0),(20160|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $21 = HEAP32[$18>>2]|0;
    $22 = ((($21)) + 32|0);
    $23 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($23|0,($18|0),(15703|0),((15729)|0),($6|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     __ZNSt3__26localeD2Ev($8);
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $$0$i$i33 = 0;
     while(1) {
      $exitcond$i$i34 = ($$0$i$i33|0)==(3);
      if ($exitcond$i$i34) {
       break;
      }
      $26 = (($9) + ($$0$i$i33<<2)|0);
      HEAP32[$26>>2] = 0;
      $27 = (($$0$i$i33) + 1)|0;
      $$0$i$i33 = $27;
     }
     $28 = ((($9)) + 11|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     if ($30) {
      $31 = ((($9)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 & 2147483647;
      $phitmp$i = (($33) + -1)|0;
      $34 = $phitmp$i;
     } else {
      $34 = 10;
     }
     __THREW__ = 0;
     invoke_viii(379,($9|0),($34|0),0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $103 = ___cxa_find_matching_catch_2()|0;
      $104 = tempRet0;
      $$2 = $103;$$227 = $104;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $38 = ($37<<24>>24)<(0);
      $39 = HEAP32[$9>>2]|0;
      $40 = $38 ? $39 : $9;
      HEAP32[$10>>2] = $40;
      HEAP32[$12>>2] = $11;
      HEAP32[$13>>2] = 0;
      $41 = ((($9)) + 4|0);
      $42 = ((($9)) + 8|0);
      $$pre = HEAP32[$1>>2]|0;
      $$022 = $40;$$pre$i$i$i39 = $$pre;$186 = $$pre;
      L21: while(1) {
       $43 = ($$pre$i$i$i39|0)==(0|0);
       if ($43) {
        $$pre$i$i$i = 0;$156 = 0;$187 = 1;
       } else {
        $44 = ((($$pre$i$i$i39)) + 12|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ((($$pre$i$i$i39)) + 16|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($45|0)==($47|0);
        if ($48) {
         $49 = HEAP32[$$pre$i$i$i39>>2]|0;
         $50 = ((($49)) + 36|0);
         $51 = HEAP32[$50>>2]|0;
         __THREW__ = 0;
         $52 = (invoke_ii($51|0,($$pre$i$i$i39|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          break;
         } else {
          $$0$i$i$i$i37 = $52;
         }
        } else {
         $55 = HEAP8[$45>>0]|0;
         $56 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($55)|0);
         $$0$i$i$i$i37 = $56;
        }
        $57 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $58 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37,$57)|0);
        if ($58) {
         HEAP32[$1>>2] = 0;
         $$pre$i$i$i = 0;$156 = 0;$187 = 1;
        } else {
         $$pre$i$i$i = $$pre$i$i$i39;$156 = $186;$187 = 0;
        }
       }
       $59 = HEAP32[$2>>2]|0;
       $60 = ($59|0)==(0|0);
       do {
        if ($60) {
         label = 26;
        } else {
         $61 = ((($59)) + 12|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = ((($59)) + 16|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = ($62|0)==($64|0);
         if ($65) {
          $66 = HEAP32[$59>>2]|0;
          $67 = ((($66)) + 36|0);
          $68 = HEAP32[$67>>2]|0;
          __THREW__ = 0;
          $69 = (invoke_ii($68|0,($59|0))|0);
          $70 = __THREW__; __THREW__ = 0;
          $71 = $70&1;
          if ($71) {
           break L21;
          } else {
           $$0$i$i2$i$i43 = $69;
          }
         } else {
          $72 = HEAP8[$62>>0]|0;
          $73 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($72)|0);
          $$0$i$i2$i$i43 = $73;
         }
         $74 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $75 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43,$74)|0);
         if ($75) {
          HEAP32[$2>>2] = 0;
          label = 26;
          break;
         } else {
          if ($187) {
           $188 = $59;
           break;
          } else {
           $$224 = $$022;$$pre$i4$i$i = $59;
           label = 46;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 26) {
        label = 0;
        if ($187) {
         $$224 = $$022;$$pre$i4$i$i = 0;
         label = 46;
         break;
        } else {
         $188 = 0;
        }
       }
       $76 = HEAP32[$10>>2]|0;
       $77 = HEAP8[$28>>0]|0;
       $78 = ($77<<24>>24)<(0);
       $79 = HEAP32[$41>>2]|0;
       $80 = $77&255;
       $81 = $78 ? $79 : $80;
       $82 = (($$022) + ($81)|0);
       $83 = ($76|0)==($82|0);
       if ($83) {
        $84 = $81 << 1;
        __THREW__ = 0;
        invoke_viii(379,($9|0),($84|0),0);
        $85 = __THREW__; __THREW__ = 0;
        $86 = $85&1;
        if ($86) {
         break;
        }
        $87 = HEAP8[$28>>0]|0;
        $88 = ($87<<24>>24)<(0);
        if ($88) {
         $89 = HEAP32[$42>>2]|0;
         $90 = $89 & 2147483647;
         $phitmp$i55 = (($90) + -1)|0;
         $91 = $phitmp$i55;
        } else {
         $91 = 10;
        }
        __THREW__ = 0;
        invoke_viii(379,($9|0),($91|0),0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         break;
        }
        $94 = HEAP8[$28>>0]|0;
        $95 = ($94<<24>>24)<(0);
        $96 = HEAP32[$9>>2]|0;
        $97 = $95 ? $96 : $9;
        $98 = (($97) + ($81)|0);
        HEAP32[$10>>2] = $98;
        $$123 = $97;
       } else {
        $$123 = $$022;
       }
       $105 = ((($$pre$i$i$i)) + 12|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($$pre$i$i$i)) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($106|0)==($108|0);
       if ($109) {
        $110 = HEAP32[$$pre$i$i$i>>2]|0;
        $111 = ((($110)) + 36|0);
        $112 = HEAP32[$111>>2]|0;
        __THREW__ = 0;
        $113 = (invoke_ii($112|0,($$pre$i$i$i|0))|0);
        $114 = __THREW__; __THREW__ = 0;
        $115 = $114&1;
        if ($115) {
         break;
        } else {
         $$0$i$i60 = $113;
        }
       } else {
        $116 = HEAP8[$106>>0]|0;
        $117 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($116)|0);
        $$0$i$i60 = $117;
       }
       $118 = $$0$i$i60&255;
       __THREW__ = 0;
       $119 = (invoke_iiiiiiiiiii(431,($118|0),16,($$123|0),($10|0),($13|0),0,($7|0),($11|0),($12|0),($6|0))|0);
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        break;
       }
       $122 = ($119|0)==(0);
       if (!($122)) {
        $$224 = $$123;$$pre$i4$i$i = $188;
        label = 46;
        break;
       }
       $123 = HEAP32[$105>>2]|0;
       $124 = HEAP32[$107>>2]|0;
       $125 = ($123|0)==($124|0);
       if ($125) {
        $126 = HEAP32[$$pre$i$i$i>>2]|0;
        $127 = ((($126)) + 40|0);
        $128 = HEAP32[$127>>2]|0;
        __THREW__ = 0;
        (invoke_ii($128|0,($$pre$i$i$i|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         break;
        } else {
         $$022 = $$123;$$pre$i$i$i39 = $$pre$i$i$i;$186 = $156;
         continue;
        }
       } else {
        $131 = ((($123)) + 1|0);
        HEAP32[$105>>2] = $131;
        $132 = HEAP8[$123>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($132)|0);
        $$022 = $$123;$$pre$i$i$i39 = $$pre$i$i$i;$186 = $156;
        continue;
       }
      }
      L60: do {
       if ((label|0) == 46) {
        $133 = HEAP32[$10>>2]|0;
        $134 = $$224;
        $135 = (($133) - ($134))|0;
        __THREW__ = 0;
        invoke_viii(379,($9|0),($135|0),0);
        $136 = __THREW__; __THREW__ = 0;
        $137 = $136&1;
        if (!($137)) {
         $138 = HEAP8[$28>>0]|0;
         $139 = HEAP32[$9>>2]|0;
         __THREW__ = 0;
         $140 = (invoke_i(432)|0);
         $141 = __THREW__; __THREW__ = 0;
         $142 = $141&1;
         if (!($142)) {
          $143 = ($138<<24>>24)<(0);
          $144 = $143 ? $139 : $9;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $5;
          $145 = (invoke_iiiii(433,($144|0),($140|0),(15736|0),($vararg_buffer|0))|0);
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if (!($147)) {
           $148 = ($145|0)==(1);
           if (!($148)) {
            HEAP32[$4>>2] = 4;
           }
           $149 = ($$pre$i$i$i|0)==(0|0);
           if ($149) {
            $189 = 1;
           } else {
            $150 = ((($$pre$i$i$i)) + 12|0);
            $151 = HEAP32[$150>>2]|0;
            $152 = ((($$pre$i$i$i)) + 16|0);
            $153 = HEAP32[$152>>2]|0;
            $154 = ($151|0)==($153|0);
            if ($154) {
             $155 = HEAP32[$156>>2]|0;
             $157 = ((($155)) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              break;
             } else {
              $$0$i$i$i$i = $159;
             }
            } else {
             $162 = HEAP8[$151>>0]|0;
             $163 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($162)|0);
             $$0$i$i$i$i = $163;
            }
            $164 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
            $165 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$164)|0);
            if ($165) {
             HEAP32[$1>>2] = 0;
             $189 = 1;
            } else {
             $189 = 0;
            }
           }
           $166 = ($$pre$i4$i$i|0)==(0|0);
           do {
            if ($166) {
             label = 63;
            } else {
             $167 = ((($$pre$i4$i$i)) + 12|0);
             $168 = HEAP32[$167>>2]|0;
             $169 = ((($$pre$i4$i$i)) + 16|0);
             $170 = HEAP32[$169>>2]|0;
             $171 = ($168|0)==($170|0);
             if ($171) {
              $172 = HEAP32[$$pre$i4$i$i>>2]|0;
              $173 = ((($172)) + 36|0);
              $174 = HEAP32[$173>>2]|0;
              __THREW__ = 0;
              $175 = (invoke_ii($174|0,($$pre$i4$i$i|0))|0);
              $176 = __THREW__; __THREW__ = 0;
              $177 = $176&1;
              if ($177) {
               break L60;
              } else {
               $$0$i$i2$i$i = $175;
              }
             } else {
              $178 = HEAP8[$168>>0]|0;
              $179 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($178)|0);
              $$0$i$i2$i$i = $179;
             }
             $180 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
             $181 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$180)|0);
             if ($181) {
              HEAP32[$2>>2] = 0;
              label = 63;
              break;
             } else {
              if ($189) {
               break;
              } else {
               label = 65;
               break;
              }
             }
            }
           } while(0);
           if ((label|0) == 63) {
            if ($189) {
             label = 65;
            }
           }
           if ((label|0) == 65) {
            $182 = HEAP32[$4>>2]|0;
            $183 = $182 | 2;
            HEAP32[$4>>2] = $183;
           }
           $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
           STACKTOP = sp;return ($$sroa$0$0$copyload|0);
          }
         }
        }
       }
      } while(0);
      $184 = ___cxa_find_matching_catch_2()|0;
      $185 = tempRet0;
      $$2 = $184;$$227 = $185;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     $$3 = $$2;$$328 = $$227;
     break;
    }
   }
   $101 = ___cxa_find_matching_catch_2()|0;
   $102 = tempRet0;
   __ZNSt3__26localeD2Ev($8);
   $$0 = $101;$$025 = $102;
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $$3 = $$0;$$328 = $$025;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9use_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 (__ZNSt3__214__shared_count16__release_sharedEv($1)|0);
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    $44 = (15703 + ($42)|0);
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($42|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(22);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $54 = HEAP8[$44>>0]|0;
      $55 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $55;
      HEAP8[$10>>0] = $54;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = HEAP8[$44>>0]|0;
    $57 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $57;
    HEAP8[$10>>0] = $56;
    $58 = HEAP32[$4>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[$4>>2] = $59;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18848]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(18848)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(434,2147483647,(15739|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5042] = $4;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5042]|0;
 return ($7|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(435,($4|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch_3(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$fca$1$gep = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 8|0;
 $4 = sp;
 HEAP32[$4>>2] = (436);
 $$fca$1$gep = ((($4)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$4+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($3,$$byval_copy,$0);
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$1>>2] = $3;
  HEAP32[$2>>2] = $1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$2,437);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 STACKTOP = sp;return ($9|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale5__imp9has_facetEl($0,$1)|0);
 if ($2) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  return ($7|0);
 } else {
  $3 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($3);
  ___cxa_throw(($3|0),(1952|0),(336|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__26locale5__imp9has_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($1>>>0);
 if ($8) {
  $9 = $5;
  $10 = (($9) + ($1<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = $12;
 } else {
  $13 = 0;
 }
 return ($13|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5043]|0;HEAP32[5043] = (($1+1)|0);
 $2 = (($1) + 1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$repack = 0, $$repack7 = 0, $$unpack = 0, $$unpack5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt4 = ((($1)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 HEAP32[$0>>2] = $2;
 $$repack = ((($0)) + 4|0);
 HEAP32[$$repack>>2] = $$unpack;
 $$repack7 = ((($0)) + 8|0);
 HEAP32[$$repack7>>2] = $$unpack5;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($2);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($0)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $2 = $$unpack2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0;
 var $phitmp$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$183 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$153 = 0;$184 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$153 = 0;$184 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$153 = $183;$184 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($184) {
       $185 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($184) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $185 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP8[$93>>0]|0;
    $104 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = $$0$i$i49&255;
   $106 = HEAP8[$7>>0]|0;
   $107 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $108 = (invoke_iiiiiiiiiiiii(438,($105|0),($15|0),($16|0),($$119|0),($11|0),($106|0),($107|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $109 = __THREW__; __THREW__ = 0;
   $110 = $109&1;
   if ($110) {
    break;
   }
   $111 = ($108|0)==(0);
   if (!($111)) {
    $$2 = $$119;$$pre$i4$i$i = $185;
    label = 37;
    break;
   }
   $112 = HEAP32[$92>>2]|0;
   $113 = HEAP32[$94>>2]|0;
   $114 = ($112|0)==($113|0);
   if ($114) {
    $115 = HEAP32[$$pre$i$i$i>>2]|0;
    $116 = ((($115)) + 40|0);
    $117 = HEAP32[$116>>2]|0;
    __THREW__ = 0;
    (invoke_ii($117|0,($$pre$i$i$i|0))|0);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
     continue;
    }
   } else {
    $120 = ((($112)) + 1|0);
    HEAP32[$92>>2] = $120;
    $121 = HEAP8[$112>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $122 = ((($9)) + 11|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)<(0);
    $125 = ((($9)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $123&255;
    $128 = $124 ? $126 : $127;
    $129 = ($128|0)==(0);
    $130 = HEAP8[$15>>0]|0;
    $131 = ($130<<24>>24)==(0);
    $or$cond = $129 | $131;
    if (!($or$cond)) {
     $132 = HEAP32[$13>>2]|0;
     $133 = $132;
     $134 = $12;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if ($136) {
      $137 = HEAP32[$14>>2]|0;
      $138 = ((($132)) + 4|0);
      HEAP32[$13>>2] = $138;
      HEAP32[$132>>2] = $137;
     }
    }
    $139 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $140 = (+invoke_diii(439,($$2|0),($139|0),($4|0)));
    $141 = __THREW__; __THREW__ = 0;
    $142 = $141&1;
    if (!($142)) {
     HEAPF64[$5>>3] = $140;
     $143 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($143|0),($4|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      $146 = ($$pre$i$i$i|0)==(0|0);
      if ($146) {
       $186 = 1;
      } else {
       $147 = ((($$pre$i$i$i)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ((($$pre$i$i$i)) + 16|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($148|0)==($150|0);
       if ($151) {
        $152 = HEAP32[$153>>2]|0;
        $154 = ((($152)) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         break;
        } else {
         $$0$i$i$i$i = $156;
        }
       } else {
        $159 = HEAP8[$148>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$161)|0);
       if ($162) {
        HEAP32[$1>>2] = 0;
        $186 = 1;
       } else {
        $186 = 0;
       }
      }
      $163 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($163) {
        label = 54;
       } else {
        $164 = ((($$pre$i4$i$i)) + 12|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ((($$pre$i4$i$i)) + 16|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($165|0)==($167|0);
        if ($168) {
         $169 = HEAP32[$$pre$i4$i$i>>2]|0;
         $170 = ((($169)) + 36|0);
         $171 = HEAP32[$170>>2]|0;
         __THREW__ = 0;
         $172 = (invoke_ii($171|0,($$pre$i4$i$i|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L50;
         } else {
          $$0$i$i2$i$i = $172;
         }
        } else {
         $175 = HEAP8[$165>>0]|0;
         $176 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($175)|0);
         $$0$i$i2$i$i = $176;
        }
        $177 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $178 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$177)|0);
        if ($178) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($186) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $179 = HEAP32[$4>>2]|0;
       $180 = $179 | 2;
       HEAP32[$4>>2] = $180;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $181 = ___cxa_find_matching_catch_2()|0;
  $182 = tempRet0;
  $$1 = $181;$$121 = $182;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 __THREW__ = 0;
 $6 = (invoke_iii(354,($5|0),(20160|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(15703|0),((15735)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   $14 = (invoke_iii(354,($5|0),(20176|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP8[$3>>0] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     $26 = (invoke_ii($25|0,($14|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      HEAP8[$4>>0] = $26;
      $29 = HEAP32[$14>>2]|0;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      invoke_vii($31|0,($0|0),($14|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $34 = ___cxa_find_matching_catch_2()|0;
 $35 = tempRet0;
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($34|0);
 // unreachable;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 $13 = $8;
 L1: do {
  if ($12) {
   $14 = HEAP8[$1>>0]|0;
   $15 = ($14<<24>>24)==(0);
   if ($15) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ((($16)) + 1|0);
    HEAP32[$4>>2] = $17;
    HEAP8[$16>>0] = 46;
    $18 = ((($7)) + 11|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)<(0);
    $21 = ((($7)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $19&255;
    $24 = $20 ? $22 : $23;
    $25 = ($24|0)==(0);
    if ($25) {
     $$2 = 0;
    } else {
     $26 = HEAP32[$9>>2]|0;
     $27 = $26;
     $28 = (($27) - ($13))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($26)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$26>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = (($44) - ($13))|0;
     $46 = ($45|0)<(160);
     if (!($46)) {
      $$2 = 0;
      break;
     }
     $47 = HEAP32[$10>>2]|0;
     $48 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $48;
     HEAP32[$43>>2] = $47;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $49 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $50 = ($$0$i$idx|0)==(32);
    if ($50) {
     $$0$lcssa$i = $49;
     break;
    }
    $51 = HEAP8[$$0$i$ptr>>0]|0;
    $52 = ($51<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($52) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $53 = $$0$lcssa$i;
   $54 = $11;
   $55 = (($53) - ($54))|0;
   $56 = ($55|0)>(31);
   if ($56) {
    $$2 = -1;
   } else {
    $57 = (15703 + ($55)|0);
    $58 = HEAP8[$57>>0]|0;
    switch ($55|0) {
    case 24: case 25:  {
     $59 = HEAP32[$4>>2]|0;
     $60 = ($59|0)==($3|0);
     if (!($60)) {
      $61 = ((($59)) + -1|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62 & 95;
      $64 = HEAP8[$2>>0]|0;
      $65 = $64 & 127;
      $66 = ($63<<24>>24)==($65<<24>>24);
      if (!($66)) {
       $$2 = -1;
       break L1;
      }
     }
     $67 = ((($59)) + 1|0);
     HEAP32[$4>>2] = $67;
     HEAP8[$59>>0] = $58;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $68 = HEAP32[$4>>2]|0;
     $69 = ((($68)) + 1|0);
     HEAP32[$4>>2] = $69;
     HEAP8[$68>>0] = $58;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $70 = $58 & 95;
     $71 = $70&255;
     $72 = HEAP8[$2>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = $71 | 128;
      $76 = $75&255;
      HEAP8[$2>>0] = $76;
      $77 = HEAP8[$1>>0]|0;
      $78 = ($77<<24>>24)==(0);
      if (!($78)) {
       HEAP8[$1>>0] = 0;
       $79 = ((($7)) + 11|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = ($80<<24>>24)<(0);
       $82 = ((($7)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $80&255;
       $85 = $81 ? $83 : $84;
       $86 = ($85|0)==(0);
       if (!($86)) {
        $87 = HEAP32[$9>>2]|0;
        $88 = $87;
        $89 = (($88) - ($13))|0;
        $90 = ($89|0)<(160);
        if ($90) {
         $91 = HEAP32[$10>>2]|0;
         $92 = ((($87)) + 4|0);
         HEAP32[$9>>2] = $92;
         HEAP32[$87>>2] = $91;
        }
       }
      }
     }
     $93 = HEAP32[$4>>2]|0;
     $94 = ((($93)) + 1|0);
     HEAP32[$4>>2] = $94;
     HEAP8[$93>>0] = $58;
     $95 = ($55|0)>(21);
     if ($95) {
      $$2 = 0;
      break L1;
     }
     $96 = HEAP32[$10>>2]|0;
     $97 = (($96) + 1)|0;
     HEAP32[$10>>2] = $97;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$030 = 0, $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $21 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP32[$7>>2]|0;
    $21 = $$pre;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = $6 ? $18 : $0;
   $20 = $6 ? $21 : $9;
   $22 = (($19) + ($20)|0);
   $23 = ((($2)) + -4|0);
   $24 = $22;
   $$029 = $1;$$030 = $19;
   while(1) {
    $25 = ($$029>>>0)<($23>>>0);
    $26 = HEAP8[$$030>>0]|0;
    $27 = ($26<<24>>24)>(0);
    $28 = ($26<<24>>24)!=(127);
    $or$cond32 = $27 & $28;
    if (!($25)) {
     break;
    }
    if ($or$cond32) {
     $29 = $26 << 24 >> 24;
     $30 = HEAP32[$$029>>2]|0;
     $31 = ($29|0)==($30|0);
     if (!($31)) {
      label = 10;
      break;
     }
    }
    $32 = $$030;
    $33 = (($24) - ($32))|0;
    $34 = ($33|0)>(1);
    $35 = ((($$030)) + 1|0);
    $$$030 = $34 ? $35 : $$030;
    $36 = ((($$029)) + 4|0);
    $$029 = $36;$$030 = $$$030;
   }
   if ((label|0) == 10) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $37 = $26 << 24 >> 24;
    $38 = HEAP32[$23>>2]|0;
    $39 = (($38) + -1)|0;
    $40 = ($39>>>0)<($37>>>0);
    if (!($40)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0;
 var $phitmp$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$183 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$153 = 0;$184 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$153 = 0;$184 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$153 = $183;$184 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($184) {
       $185 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($184) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $185 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP8[$93>>0]|0;
    $104 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = $$0$i$i49&255;
   $106 = HEAP8[$7>>0]|0;
   $107 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $108 = (invoke_iiiiiiiiiiiii(438,($105|0),($15|0),($16|0),($$119|0),($11|0),($106|0),($107|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $109 = __THREW__; __THREW__ = 0;
   $110 = $109&1;
   if ($110) {
    break;
   }
   $111 = ($108|0)==(0);
   if (!($111)) {
    $$2 = $$119;$$pre$i4$i$i = $185;
    label = 37;
    break;
   }
   $112 = HEAP32[$92>>2]|0;
   $113 = HEAP32[$94>>2]|0;
   $114 = ($112|0)==($113|0);
   if ($114) {
    $115 = HEAP32[$$pre$i$i$i>>2]|0;
    $116 = ((($115)) + 40|0);
    $117 = HEAP32[$116>>2]|0;
    __THREW__ = 0;
    (invoke_ii($117|0,($$pre$i$i$i|0))|0);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
     continue;
    }
   } else {
    $120 = ((($112)) + 1|0);
    HEAP32[$92>>2] = $120;
    $121 = HEAP8[$112>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $122 = ((($9)) + 11|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)<(0);
    $125 = ((($9)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $123&255;
    $128 = $124 ? $126 : $127;
    $129 = ($128|0)==(0);
    $130 = HEAP8[$15>>0]|0;
    $131 = ($130<<24>>24)==(0);
    $or$cond = $129 | $131;
    if (!($or$cond)) {
     $132 = HEAP32[$13>>2]|0;
     $133 = $132;
     $134 = $12;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if ($136) {
      $137 = HEAP32[$14>>2]|0;
      $138 = ((($132)) + 4|0);
      HEAP32[$13>>2] = $138;
      HEAP32[$132>>2] = $137;
     }
    }
    $139 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $140 = (+invoke_diii(441,($$2|0),($139|0),($4|0)));
    $141 = __THREW__; __THREW__ = 0;
    $142 = $141&1;
    if (!($142)) {
     HEAPF64[$5>>3] = $140;
     $143 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($143|0),($4|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      $146 = ($$pre$i$i$i|0)==(0|0);
      if ($146) {
       $186 = 1;
      } else {
       $147 = ((($$pre$i$i$i)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ((($$pre$i$i$i)) + 16|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($148|0)==($150|0);
       if ($151) {
        $152 = HEAP32[$153>>2]|0;
        $154 = ((($152)) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         break;
        } else {
         $$0$i$i$i$i = $156;
        }
       } else {
        $159 = HEAP8[$148>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$161)|0);
       if ($162) {
        HEAP32[$1>>2] = 0;
        $186 = 1;
       } else {
        $186 = 0;
       }
      }
      $163 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($163) {
        label = 54;
       } else {
        $164 = ((($$pre$i4$i$i)) + 12|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ((($$pre$i4$i$i)) + 16|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($165|0)==($167|0);
        if ($168) {
         $169 = HEAP32[$$pre$i4$i$i>>2]|0;
         $170 = ((($169)) + 36|0);
         $171 = HEAP32[$170>>2]|0;
         __THREW__ = 0;
         $172 = (invoke_ii($171|0,($$pre$i4$i$i|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L50;
         } else {
          $$0$i$i2$i$i = $172;
         }
        } else {
         $175 = HEAP8[$165>>0]|0;
         $176 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($175)|0);
         $$0$i$i2$i$i = $176;
        }
        $177 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $178 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$177)|0);
        if ($178) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($186) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $179 = HEAP32[$4>>2]|0;
       $180 = $179 | 2;
       HEAP32[$4>>2] = $180;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $181 = ___cxa_find_matching_catch_2()|0;
  $182 = tempRet0;
  $$1 = $181;$$121 = $182;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0;
 var $phitmp$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 200|0;
 $7 = sp + 199|0;
 $8 = sp + 198|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 197|0;
 $16 = sp + 196|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$183 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$153 = 0;$184 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$153 = 0;$184 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$153 = $183;$184 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($184) {
       $185 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($184) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $185 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP8[$93>>0]|0;
    $104 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = $$0$i$i49&255;
   $106 = HEAP8[$7>>0]|0;
   $107 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $108 = (invoke_iiiiiiiiiiiii(438,($105|0),($15|0),($16|0),($$119|0),($11|0),($106|0),($107|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $109 = __THREW__; __THREW__ = 0;
   $110 = $109&1;
   if ($110) {
    break;
   }
   $111 = ($108|0)==(0);
   if (!($111)) {
    $$2 = $$119;$$pre$i4$i$i = $185;
    label = 37;
    break;
   }
   $112 = HEAP32[$92>>2]|0;
   $113 = HEAP32[$94>>2]|0;
   $114 = ($112|0)==($113|0);
   if ($114) {
    $115 = HEAP32[$$pre$i$i$i>>2]|0;
    $116 = ((($115)) + 40|0);
    $117 = HEAP32[$116>>2]|0;
    __THREW__ = 0;
    (invoke_ii($117|0,($$pre$i$i$i|0))|0);
    $118 = __THREW__; __THREW__ = 0;
    $119 = $118&1;
    if ($119) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
     continue;
    }
   } else {
    $120 = ((($112)) + 1|0);
    HEAP32[$92>>2] = $120;
    $121 = HEAP8[$112>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$183 = $153;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $122 = ((($9)) + 11|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = ($123<<24>>24)<(0);
    $125 = ((($9)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $123&255;
    $128 = $124 ? $126 : $127;
    $129 = ($128|0)==(0);
    $130 = HEAP8[$15>>0]|0;
    $131 = ($130<<24>>24)==(0);
    $or$cond = $129 | $131;
    if (!($or$cond)) {
     $132 = HEAP32[$13>>2]|0;
     $133 = $132;
     $134 = $12;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if ($136) {
      $137 = HEAP32[$14>>2]|0;
      $138 = ((($132)) + 4|0);
      HEAP32[$13>>2] = $138;
      HEAP32[$132>>2] = $137;
     }
    }
    $139 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $140 = (+invoke_diii(442,($$2|0),($139|0),($4|0)));
    $141 = __THREW__; __THREW__ = 0;
    $142 = $141&1;
    if (!($142)) {
     HEAPF32[$5>>2] = $140;
     $143 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($143|0),($4|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      $146 = ($$pre$i$i$i|0)==(0|0);
      if ($146) {
       $186 = 1;
      } else {
       $147 = ((($$pre$i$i$i)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ((($$pre$i$i$i)) + 16|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($148|0)==($150|0);
       if ($151) {
        $152 = HEAP32[$153>>2]|0;
        $154 = ((($152)) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         break;
        } else {
         $$0$i$i$i$i = $156;
        }
       } else {
        $159 = HEAP8[$148>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$161)|0);
       if ($162) {
        HEAP32[$1>>2] = 0;
        $186 = 1;
       } else {
        $186 = 0;
       }
      }
      $163 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($163) {
        label = 54;
       } else {
        $164 = ((($$pre$i4$i$i)) + 12|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ((($$pre$i4$i$i)) + 16|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($165|0)==($167|0);
        if ($168) {
         $169 = HEAP32[$$pre$i4$i$i>>2]|0;
         $170 = ((($169)) + 36|0);
         $171 = HEAP32[$170>>2]|0;
         __THREW__ = 0;
         $172 = (invoke_ii($171|0,($$pre$i4$i$i|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L50;
         } else {
          $$0$i$i2$i$i = $172;
         }
        } else {
         $175 = HEAP8[$165>>0]|0;
         $176 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($175)|0);
         $$0$i$i2$i$i = $176;
        }
        $177 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $178 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$177)|0);
        if ($178) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($186) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $179 = HEAP32[$4>>2]|0;
       $180 = $179 | 2;
       HEAP32[$4>>2] = $180;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $181 = ___cxa_find_matching_catch_2()|0;
  $182 = tempRet0;
  $$1 = $181;$$121 = $182;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    HEAP32[$2>>2] = 4;
   }
   $17 = $9;
   $$0 = $17;
  } else {
   HEAP32[$2>>2] = 4;
   $$0 = 0.0;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$183 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$153 = 0;$184 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$153 = 0;$184 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$153 = $183;$184 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($184) {
       $185 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($184) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $185 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $185;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$183 = $153;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$183 = $153;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(443,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = tempRet0;
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if (!($138)) {
     $139 = $5;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $136;
     $143 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($143|0),($4|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      $146 = ($$pre$i$i$i|0)==(0|0);
      if ($146) {
       $186 = 1;
      } else {
       $147 = ((($$pre$i$i$i)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ((($$pre$i$i$i)) + 16|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($148|0)==($150|0);
       if ($151) {
        $152 = HEAP32[$153>>2]|0;
        $154 = ((($152)) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         break;
        } else {
         $$0$i$i$i$i = $156;
        }
       } else {
        $159 = HEAP8[$148>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$161)|0);
       if ($162) {
        HEAP32[$1>>2] = 0;
        $186 = 1;
       } else {
        $186 = 0;
       }
      }
      $163 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($163) {
        label = 54;
       } else {
        $164 = ((($$pre$i4$i$i)) + 12|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ((($$pre$i4$i$i)) + 16|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($165|0)==($167|0);
        if ($168) {
         $169 = HEAP32[$$pre$i4$i$i>>2]|0;
         $170 = ((($169)) + 36|0);
         $171 = HEAP32[$170>>2]|0;
         __THREW__ = 0;
         $172 = (invoke_ii($171|0,($$pre$i4$i$i|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L50;
         } else {
          $$0$i$i2$i$i = $172;
         }
        } else {
         $175 = HEAP8[$165>>0]|0;
         $176 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($175)|0);
         $$0$i$i2$i$i = $176;
        }
        $177 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $178 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$177)|0);
        if ($178) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($186) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $179 = HEAP32[$4>>2]|0;
       $180 = $179 | 2;
       HEAP32[$4>>2] = $180;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $181 = ___cxa_find_matching_catch_2()|0;
  $182 = tempRet0;
  $$1 = $181;$$127 = $182;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNKSt3__28ios_base6getlocEv($4,$1);
 __THREW__ = 0;
 $5 = (invoke_iii(354,($4|0),(20160|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = HEAP32[$5>>2]|0;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($10|0,($5|0),(15703|0),((15729)|0),($2|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __THREW__ = 0;
   $13 = (invoke_iii(354,($4|0),(20176|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = HEAP32[$13>>2]|0;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_ii($18|0,($13|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     HEAP8[$3>>0] = $19;
     $22 = HEAP32[$13>>2]|0;
     $23 = ((($22)) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_vii($24|0,($0|0),($13|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      __ZNSt3__26localeD2Ev($4);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2()|0;
 $28 = tempRet0;
 __ZNSt3__26localeD2Ev($4);
 ___resumeException($27|0);
 // unreachable;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $21 = 0;$22 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $21 = 0;$22 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   if ($19) {
    $20 = ($15|0)==(34);
    if ($20) {
     $23 = -1;$24 = -1;
     label = 8;
    } else {
     $25 = $12;$26 = $13;
    }
   } else {
    $23 = 0;$24 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$2>>2] = 4;
    $25 = $23;$26 = $24;
   }
   $21 = $26;$22 = $25;
  }
 } while(0);
 tempRet0 = ($21);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$178 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$148 = 0;$179 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$148 = 0;$179 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$148 = $178;$179 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($179) {
       $180 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($179) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $180 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $180;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(444,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     HEAP32[$5>>2] = $135;
     $138 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($138|0),($4|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if (!($140)) {
      $141 = ($$pre$i$i$i|0)==(0|0);
      if ($141) {
       $181 = 1;
      } else {
       $142 = ((($$pre$i$i$i)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($$pre$i$i$i)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$148>>2]|0;
        $149 = ((($147)) + 36|0);
        $150 = HEAP32[$149>>2]|0;
        __THREW__ = 0;
        $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
        $152 = __THREW__; __THREW__ = 0;
        $153 = $152&1;
        if ($153) {
         break;
        } else {
         $$0$i$i$i$i = $151;
        }
       } else {
        $154 = HEAP8[$143>>0]|0;
        $155 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($154)|0);
        $$0$i$i$i$i = $155;
       }
       $156 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $157 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$156)|0);
       if ($157) {
        HEAP32[$1>>2] = 0;
        $181 = 1;
       } else {
        $181 = 0;
       }
      }
      $158 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($158) {
        label = 54;
       } else {
        $159 = ((($$pre$i4$i$i)) + 12|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = ((($$pre$i4$i$i)) + 16|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($160|0)==($162|0);
        if ($163) {
         $164 = HEAP32[$$pre$i4$i$i>>2]|0;
         $165 = ((($164)) + 36|0);
         $166 = HEAP32[$165>>2]|0;
         __THREW__ = 0;
         $167 = (invoke_ii($166|0,($$pre$i4$i$i|0))|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          break L50;
         } else {
          $$0$i$i2$i$i = $167;
         }
        } else {
         $170 = HEAP8[$160>>0]|0;
         $171 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($170)|0);
         $$0$i$i2$i$i = $171;
        }
        $172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$172)|0);
        if ($173) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($181) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $174 = HEAP32[$4>>2]|0;
       $175 = $174 | 2;
       HEAP32[$4>>2] = $175;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $176 = ___cxa_find_matching_catch_2()|0;
  $177 = tempRet0;
  $$1 = $176;$$127 = $177;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$178 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$148 = 0;$179 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$148 = 0;$179 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$148 = $178;$179 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($179) {
       $180 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($179) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $180 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $180;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(445,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     HEAP32[$5>>2] = $135;
     $138 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($138|0),($4|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if (!($140)) {
      $141 = ($$pre$i$i$i|0)==(0|0);
      if ($141) {
       $181 = 1;
      } else {
       $142 = ((($$pre$i$i$i)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($$pre$i$i$i)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$148>>2]|0;
        $149 = ((($147)) + 36|0);
        $150 = HEAP32[$149>>2]|0;
        __THREW__ = 0;
        $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
        $152 = __THREW__; __THREW__ = 0;
        $153 = $152&1;
        if ($153) {
         break;
        } else {
         $$0$i$i$i$i = $151;
        }
       } else {
        $154 = HEAP8[$143>>0]|0;
        $155 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($154)|0);
        $$0$i$i$i$i = $155;
       }
       $156 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $157 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$156)|0);
       if ($157) {
        HEAP32[$1>>2] = 0;
        $181 = 1;
       } else {
        $181 = 0;
       }
      }
      $158 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($158) {
        label = 54;
       } else {
        $159 = ((($$pre$i4$i$i)) + 12|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = ((($$pre$i4$i$i)) + 16|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($160|0)==($162|0);
        if ($163) {
         $164 = HEAP32[$$pre$i4$i$i>>2]|0;
         $165 = ((($164)) + 36|0);
         $166 = HEAP32[$165>>2]|0;
         __THREW__ = 0;
         $167 = (invoke_ii($166|0,($$pre$i4$i$i|0))|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          break L50;
         } else {
          $$0$i$i2$i$i = $167;
         }
        } else {
         $170 = HEAP8[$160>>0]|0;
         $171 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($170)|0);
         $$0$i$i2$i$i = $171;
        }
        $172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$172)|0);
        if ($173) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($181) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $174 = HEAP32[$4>>2]|0;
       $175 = $174 | 2;
       HEAP32[$4>>2] = $175;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $176 = ___cxa_find_matching_catch_2()|0;
  $177 = tempRet0;
  $$1 = $176;$$127 = $177;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$178 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$148 = 0;$179 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$148 = 0;$179 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$148 = $178;$179 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($179) {
       $180 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($179) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $180 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $180;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(446,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     HEAP16[$5>>1] = $135;
     $138 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($138|0),($4|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if (!($140)) {
      $141 = ($$pre$i$i$i|0)==(0|0);
      if ($141) {
       $181 = 1;
      } else {
       $142 = ((($$pre$i$i$i)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($$pre$i$i$i)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$148>>2]|0;
        $149 = ((($147)) + 36|0);
        $150 = HEAP32[$149>>2]|0;
        __THREW__ = 0;
        $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
        $152 = __THREW__; __THREW__ = 0;
        $153 = $152&1;
        if ($153) {
         break;
        } else {
         $$0$i$i$i$i = $151;
        }
       } else {
        $154 = HEAP8[$143>>0]|0;
        $155 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($154)|0);
        $$0$i$i$i$i = $155;
       }
       $156 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $157 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$156)|0);
       if ($157) {
        HEAP32[$1>>2] = 0;
        $181 = 1;
       } else {
        $181 = 0;
       }
      }
      $158 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($158) {
        label = 54;
       } else {
        $159 = ((($$pre$i4$i$i)) + 12|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = ((($$pre$i4$i$i)) + 16|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($160|0)==($162|0);
        if ($163) {
         $164 = HEAP32[$$pre$i4$i$i>>2]|0;
         $165 = ((($164)) + 36|0);
         $166 = HEAP32[$165>>2]|0;
         __THREW__ = 0;
         $167 = (invoke_ii($166|0,($$pre$i4$i$i|0))|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          break L50;
         } else {
          $$0$i$i2$i$i = $167;
         }
        } else {
         $170 = HEAP8[$160>>0]|0;
         $171 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($170)|0);
         $$0$i$i2$i$i = $171;
        }
        $172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$172)|0);
        if ($173) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($181) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $174 = HEAP32[$4>>2]|0;
       $175 = $174 | 2;
       HEAP32[$4>>2] = $175;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $176 = ___cxa_find_matching_catch_2()|0;
  $177 = tempRet0;
  $$1 = $176;$$127 = $177;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = tempRet0;
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(65535);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $26 = $12&65535;
      $$0 = $26;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$183 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$153 = 0;$184 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$153 = 0;$184 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$153 = $183;$184 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($184) {
       $185 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($184) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $185 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $185;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$183 = $153;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$183 = $153;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(447,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = tempRet0;
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if (!($138)) {
     $139 = $5;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $136;
     $143 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($143|0),($4|0));
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      $146 = ($$pre$i$i$i|0)==(0|0);
      if ($146) {
       $186 = 1;
      } else {
       $147 = ((($$pre$i$i$i)) + 12|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ((($$pre$i$i$i)) + 16|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($148|0)==($150|0);
       if ($151) {
        $152 = HEAP32[$153>>2]|0;
        $154 = ((($152)) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (invoke_ii($155|0,($$pre$i$i$i|0))|0);
        $157 = __THREW__; __THREW__ = 0;
        $158 = $157&1;
        if ($158) {
         break;
        } else {
         $$0$i$i$i$i = $156;
        }
       } else {
        $159 = HEAP8[$148>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$161)|0);
       if ($162) {
        HEAP32[$1>>2] = 0;
        $186 = 1;
       } else {
        $186 = 0;
       }
      }
      $163 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($163) {
        label = 54;
       } else {
        $164 = ((($$pre$i4$i$i)) + 12|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ((($$pre$i4$i$i)) + 16|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($165|0)==($167|0);
        if ($168) {
         $169 = HEAP32[$$pre$i4$i$i>>2]|0;
         $170 = ((($169)) + 36|0);
         $171 = HEAP32[$170>>2]|0;
         __THREW__ = 0;
         $172 = (invoke_ii($171|0,($$pre$i4$i$i|0))|0);
         $173 = __THREW__; __THREW__ = 0;
         $174 = $173&1;
         if ($174) {
          break L50;
         } else {
          $$0$i$i2$i$i = $172;
         }
        } else {
         $175 = HEAP8[$165>>0]|0;
         $176 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($175)|0);
         $$0$i$i2$i$i = $176;
        }
        $177 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $178 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$177)|0);
        if ($178) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($186) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($186) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $179 = HEAP32[$4>>2]|0;
       $180 = $179 | 2;
       HEAP32[$4>>2] = $180;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $181 = ___cxa_find_matching_catch_2()|0;
  $182 = tempRet0;
  $$1 = $181;$$127 = $182;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $26 = 0;$27 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = tempRet0;
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  if ($17) {
   $18 = ($13|0)==(34);
   if ($18) {
    HEAP32[$2>>2] = 4;
    $19 = ($11|0)>(0);
    $20 = ($10>>>0)>(0);
    $21 = ($11|0)==(0);
    $22 = $21 & $20;
    $23 = $19 | $22;
    $24 = $23 ? -1 : 0;
    $25 = $23 ? 2147483647 : -2147483648;
    $28 = $24;$29 = $25;
   } else {
    $28 = $10;$29 = $11;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $28 = 0;$29 = 0;
  }
  $26 = $29;$27 = $28;
 }
 tempRet0 = ($26);
 STACKTOP = sp;return ($27|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 198|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$178 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$148 = 0;$179 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP8[$34>>0]|0;
     $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$148 = 0;$179 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$148 = $178;$179 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP8[$51>>0]|0;
      $62 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($179) {
       $180 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($179) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $180 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP8[$91>>0]|0;
    $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = $$0$i$i54&255;
   $104 = HEAP8[$7>>0]|0;
   __THREW__ = 0;
   $105 = (invoke_iiiiiiiiiii(431,($103|0),($14|0),($$125|0),($10|0),($13|0),($104|0),($8|0),($11|0),($12|0),($6|0))|0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    break;
   }
   $108 = ($105|0)==(0);
   if (!($108)) {
    $$2 = $$125;$$pre$i4$i$i = $180;
    label = 37;
    break;
   }
   $109 = HEAP32[$90>>2]|0;
   $110 = HEAP32[$92>>2]|0;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$$pre$i$i$i>>2]|0;
    $113 = ((($112)) + 40|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    (invoke_ii($114|0,($$pre$i$i$i|0))|0);
    $115 = __THREW__; __THREW__ = 0;
    $116 = $115&1;
    if ($116) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
     continue;
    }
   } else {
    $117 = ((($109)) + 1|0);
    HEAP32[$90>>2] = $117;
    $118 = HEAP8[$109>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$178 = $148;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $119 = ((($8)) + 11|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = ($120<<24>>24)<(0);
    $122 = ((($8)) + 4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = $120&255;
    $125 = $121 ? $123 : $124;
    $126 = ($125|0)==(0);
    if (!($126)) {
     $127 = HEAP32[$12>>2]|0;
     $128 = $127;
     $129 = $11;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(160);
     if ($131) {
      $132 = HEAP32[$13>>2]|0;
      $133 = ((($127)) + 4|0);
      HEAP32[$12>>2] = $133;
      HEAP32[$127>>2] = $132;
     }
    }
    $134 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $135 = (invoke_iiiii(448,($$2|0),($134|0),($4|0),($14|0))|0);
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     HEAP32[$5>>2] = $135;
     $138 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($138|0),($4|0));
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     if (!($140)) {
      $141 = ($$pre$i$i$i|0)==(0|0);
      if ($141) {
       $181 = 1;
      } else {
       $142 = ((($$pre$i$i$i)) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ((($$pre$i$i$i)) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$148>>2]|0;
        $149 = ((($147)) + 36|0);
        $150 = HEAP32[$149>>2]|0;
        __THREW__ = 0;
        $151 = (invoke_ii($150|0,($$pre$i$i$i|0))|0);
        $152 = __THREW__; __THREW__ = 0;
        $153 = $152&1;
        if ($153) {
         break;
        } else {
         $$0$i$i$i$i = $151;
        }
       } else {
        $154 = HEAP8[$143>>0]|0;
        $155 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($154)|0);
        $$0$i$i$i$i = $155;
       }
       $156 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $157 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$156)|0);
       if ($157) {
        HEAP32[$1>>2] = 0;
        $181 = 1;
       } else {
        $181 = 0;
       }
      }
      $158 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($158) {
        label = 54;
       } else {
        $159 = ((($$pre$i4$i$i)) + 12|0);
        $160 = HEAP32[$159>>2]|0;
        $161 = ((($$pre$i4$i$i)) + 16|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($160|0)==($162|0);
        if ($163) {
         $164 = HEAP32[$$pre$i4$i$i>>2]|0;
         $165 = ((($164)) + 36|0);
         $166 = HEAP32[$165>>2]|0;
         __THREW__ = 0;
         $167 = (invoke_ii($166|0,($$pre$i4$i$i|0))|0);
         $168 = __THREW__; __THREW__ = 0;
         $169 = $168&1;
         if ($169) {
          break L50;
         } else {
          $$0$i$i2$i$i = $167;
         }
        } else {
         $170 = HEAP8[$160>>0]|0;
         $171 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($170)|0);
         $$0$i$i2$i$i = $171;
        }
        $172 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $173 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$172)|0);
        if ($173) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($181) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($181) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $174 = HEAP32[$4>>2]|0;
       $175 = $174 | 2;
       HEAP32[$4>>2] = $175;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $176 = ___cxa_find_matching_catch_2()|0;
  $177 = tempRet0;
  $$1 = $176;$$127 = $177;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = tempRet0;
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  L7: do {
   if ($17) {
    $18 = ($13|0)==(34);
    do {
     if ($18) {
      HEAP32[$2>>2] = 4;
      $29 = ($11|0)>(0);
      $30 = ($10>>>0)>(0);
      $31 = ($11|0)==(0);
      $32 = $31 & $30;
      $33 = $29 | $32;
      if ($33) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $19 = ($11|0)<(-1);
      $20 = ($10>>>0)<(2147483648);
      $21 = ($11|0)==(-1);
      $22 = $21 & $20;
      $23 = $19 | $22;
      if ($23) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $24 = ($11|0)>(0);
      $25 = ($10>>>0)>(2147483647);
      $26 = ($11|0)==(0);
      $27 = $26 & $25;
      $28 = $24 | $27;
      if ($28) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $10;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i137 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i143 = 0, $$0100 = 0, $$0101 = 0, $$0102 = 0, $$0103 = 0, $$0106 = 0, $$0110 = 0, $$0126 = 0, $$0127 = 0, $$0127191 = 0, $$097 = 0, $$098 = 0, $$099$off0 = 0, $$1104 = 0, $$1107 = 0;
 var $$1111 = 0, $$2$off0 = 0, $$2105 = 0, $$2108 = 0, $$2112 = 0, $$3 = 0, $$3109 = 0, $$3113 = 0, $$5 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i139 = 0, $$pre$i4$i$i145 = 0, $$sink134$sink135199$index = 0, $$sink134$sink135199$index5 = 0, $$sroa$0159$0 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i140 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(449);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $$sink134$sink135199$index = $17;$$sink134$sink135199$index5 = $18;
     break;
    }
   }
   $19 = $13;
   $$0126 = $13;$$sroa$0159$0 = $19;
   label = 6;
  } else {
   $$0126 = $7;$$sroa$0159$0 = 0;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $$0102 = $2;$$0103 = $$0126;$$0106 = 0;$$0110 = $11;
  while(1) {
   $20 = ($$0102|0)==($3|0);
   if ($20) {
    break;
   }
   $21 = ((($$0102)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($$0102)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   } else {
    $26 = $22&255;
    $28 = $26;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    HEAP8[$$0103>>0] = 2;
    $29 = (($$0110) + -1)|0;
    $30 = (($$0106) + 1)|0;
    $$1107 = $30;$$1111 = $29;
   } else {
    HEAP8[$$0103>>0] = 1;
    $$1107 = $$0106;$$1111 = $$0110;
   }
   $31 = ((($$0102)) + 12|0);
   $32 = ((($$0103)) + 1|0);
   $$0102 = $31;$$0103 = $32;$$0106 = $$1107;$$0110 = $$1111;
  }
  $$0101 = 0;$$2108 = $$0106;$$2112 = $$0110;
  L21: while(1) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ($33|0)==(0|0);
   do {
    if ($34) {
     $67 = 1;
    } else {
     $35 = ((($33)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($33)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)==($38|0);
     if ($39) {
      $40 = HEAP32[$33>>2]|0;
      $41 = ((($40)) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      $43 = (invoke_ii($42|0,($33|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       break L21;
      } else {
       $$0$i$i$i$i = $43;
      }
     } else {
      $46 = HEAP8[$36>>0]|0;
      $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
      $$0$i$i$i$i = $47;
     }
     $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
     if ($49) {
      HEAP32[$0>>2] = 0;
      $67 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $67 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $50 = HEAP32[$1>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    $$pre$i4$i$i145 = 0;$68 = 1;
   } else {
    $52 = ((($50)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($50)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($53|0)==($55|0);
    if ($56) {
     $57 = HEAP32[$50>>2]|0;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     __THREW__ = 0;
     $60 = (invoke_ii($59|0,($50|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      break;
     } else {
      $$0$i$i2$i$i = $60;
     }
    } else {
     $63 = HEAP8[$53>>0]|0;
     $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
     $$0$i$i2$i$i = $64;
    }
    $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
    if ($66) {
     HEAP32[$1>>2] = 0;
     $$pre$i4$i$i145 = 0;$68 = 1;
    } else {
     $$pre$i4$i$i145 = $50;$68 = 0;
    }
   }
   $tmp$i$i = $67 ^ $68;
   $69 = ($$2112|0)!=(0);
   $70 = $69 & $tmp$i$i;
   $71 = HEAP32[$0>>2]|0;
   if (!($70)) {
    label = 30;
    break;
   }
   $104 = ((($71)) + 12|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ((($71)) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($105|0)==($107|0);
   if ($108) {
    $109 = HEAP32[$71>>2]|0;
    $110 = ((($109)) + 36|0);
    $111 = HEAP32[$110>>2]|0;
    __THREW__ = 0;
    $112 = (invoke_ii($111|0,($71|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    $114 = $113&1;
    if ($114) {
     break;
    } else {
     $$0$i$i = $112;
    }
   } else {
    $115 = HEAP8[$105>>0]|0;
    $116 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($115)|0);
    $$0$i$i = $116;
   }
   $117 = $$0$i$i&255;
   if ($6) {
    $$0100 = $117;
   } else {
    $118 = HEAP32[$4>>2]|0;
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    __THREW__ = 0;
    $121 = (invoke_iii($120|0,($4|0),($117|0))|0);
    $122 = __THREW__; __THREW__ = 0;
    $123 = $122&1;
    if ($123) {
     break;
    } else {
     $$0100 = $121;
    }
   }
   $124 = (($$0101) + 1)|0;
   $$098 = $2;$$099$off0 = 0;$$1104 = $$0126;$$3109 = $$2108;$$3113 = $$2112;
   while(1) {
    $125 = ($$098|0)==($3|0);
    if ($125) {
     break;
    }
    $126 = HEAP8[$$1104>>0]|0;
    $127 = ($126<<24>>24)==(1);
    do {
     if ($127) {
      $128 = ((($$098)) + 11|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = ($129<<24>>24)<(0);
      if ($130) {
       $131 = HEAP32[$$098>>2]|0;
       $133 = $131;
      } else {
       $133 = $$098;
      }
      $132 = (($133) + ($$0101)|0);
      $134 = HEAP8[$132>>0]|0;
      if ($6) {
       $$097 = $134;
      } else {
       $135 = HEAP32[$4>>2]|0;
       $136 = ((($135)) + 12|0);
       $137 = HEAP32[$136>>2]|0;
       __THREW__ = 0;
       $138 = (invoke_iii($137|0,($4|0),($134|0))|0);
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       if ($140) {
        break L21;
       } else {
        $$097 = $138;
       }
      }
      $141 = ($$0100<<24>>24)==($$097<<24>>24);
      $142 = (($$3113) + -1)|0;
      if (!($141)) {
       HEAP8[$$1104>>0] = 0;
       $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $142;
       break;
      }
      $143 = HEAP8[$128>>0]|0;
      $144 = ($143<<24>>24)<(0);
      if ($144) {
       $145 = ((($$098)) + 4|0);
       $146 = HEAP32[$145>>2]|0;
       $149 = $146;
      } else {
       $147 = $143&255;
       $149 = $147;
      }
      $148 = ($149|0)==($124|0);
      if ($148) {
       $150 = (($$3109) + 1)|0;
       HEAP8[$$1104>>0] = 2;
       $$2$off0 = 1;$$5 = $150;$$5115 = $142;
      } else {
       $$2$off0 = 1;$$5 = $$3109;$$5115 = $$3113;
      }
     } else {
      $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $$3113;
     }
    } while(0);
    $151 = ((($$098)) + 12|0);
    $152 = ((($$1104)) + 1|0);
    $$098 = $151;$$099$off0 = $$2$off0;$$1104 = $152;$$3109 = $$5;$$3113 = $$5115;
   }
   if (!($$099$off0)) {
    $$0101 = $124;$$2108 = $$3109;$$2112 = $$3113;
    continue;
   }
   $153 = HEAP32[$0>>2]|0;
   $154 = ((($153)) + 12|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($153)) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($155|0)==($157|0);
   if ($158) {
    $159 = HEAP32[$153>>2]|0;
    $160 = ((($159)) + 40|0);
    $161 = HEAP32[$160>>2]|0;
    __THREW__ = 0;
    (invoke_ii($161|0,($153|0))|0);
    $162 = __THREW__; __THREW__ = 0;
    $163 = $162&1;
    if ($163) {
     break;
    }
   } else {
    $164 = ((($155)) + 1|0);
    HEAP32[$154>>2] = $164;
    $165 = HEAP8[$155>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($165)|0);
   }
   $166 = (($$3109) + ($$3113))|0;
   $167 = ($166>>>0)>(1);
   if ($167) {
    $$0 = $2;$$2105 = $$0126;$$6 = $$3109;
   } else {
    $$0101 = $124;$$2108 = $$3109;$$2112 = $$3113;
    continue;
   }
   while(1) {
    $168 = ($$0|0)==($3|0);
    if ($168) {
     $$0101 = $124;$$2108 = $$6;$$2112 = $$3113;
     continue L21;
    }
    $169 = HEAP8[$$2105>>0]|0;
    $170 = ($169<<24>>24)==(2);
    if ($170) {
     $171 = ((($$0)) + 11|0);
     $172 = HEAP8[$171>>0]|0;
     $173 = ($172<<24>>24)<(0);
     if ($173) {
      $174 = ((($$0)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $178 = $175;
     } else {
      $176 = $172&255;
      $178 = $176;
     }
     $177 = ($178|0)==($124|0);
     if ($177) {
      $$7 = $$6;
     } else {
      $179 = (($$6) + -1)|0;
      HEAP8[$$2105>>0] = 0;
      $$7 = $179;
     }
    } else {
     $$7 = $$6;
    }
    $180 = ((($$0)) + 12|0);
    $181 = ((($$2105)) + 1|0);
    $$0 = $180;$$2105 = $181;$$6 = $$7;
   }
  }
  L87: do {
   if ((label|0) == 30) {
    $72 = ($71|0)==(0|0);
    do {
     if ($72) {
      $197 = 1;
     } else {
      $73 = ((($71)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($71)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$71>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       $81 = (invoke_ii($80|0,($71|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        break L87;
       } else {
        $$0$i$i$i$i137 = $81;
       }
      } else {
       $84 = HEAP8[$74>>0]|0;
       $85 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($84)|0);
       $$0$i$i$i$i137 = $85;
      }
      $86 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $87 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i137,$86)|0);
      if ($87) {
       HEAP32[$0>>2] = 0;
       $197 = 1;
       break;
      } else {
       $$pre$i$i$i139 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i140 = ($$pre$i$i$i139|0)==(0|0);
       $197 = $phitmp$i$i$i140;
       break;
      }
     }
    } while(0);
    $88 = ($$pre$i4$i$i145|0)==(0|0);
    do {
     if ($88) {
      label = 77;
     } else {
      $89 = ((($$pre$i4$i$i145)) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ((($$pre$i4$i$i145)) + 16|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($90|0)==($92|0);
      if ($93) {
       $94 = HEAP32[$$pre$i4$i$i145>>2]|0;
       $95 = ((($94)) + 36|0);
       $96 = HEAP32[$95>>2]|0;
       __THREW__ = 0;
       $97 = (invoke_ii($96|0,($$pre$i4$i$i145|0))|0);
       $98 = __THREW__; __THREW__ = 0;
       $99 = $98&1;
       if ($99) {
        break L87;
       } else {
        $$0$i$i2$i$i143 = $97;
       }
      } else {
       $100 = HEAP8[$90>>0]|0;
       $101 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($100)|0);
       $$0$i$i2$i$i143 = $101;
      }
      $102 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $103 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i143,$102)|0);
      if ($103) {
       HEAP32[$1>>2] = 0;
       label = 77;
       break;
      } else {
       if ($197) {
        $$0127 = $2;$$3 = $$0126;
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($197) {
      label = 79;
     } else {
      $$0127 = $2;$$3 = $$0126;
     }
    }
    if ((label|0) == 79) {
     $182 = HEAP32[$5>>2]|0;
     $183 = $182 | 2;
     HEAP32[$5>>2] = $183;
     $$0127 = $2;$$3 = $$0126;
    }
    while(1) {
     $184 = ($$0127|0)==($3|0);
     if ($184) {
      label = 83;
      break;
     }
     $185 = HEAP8[$$3>>0]|0;
     $186 = ($185<<24>>24)==(2);
     if ($186) {
      $$0127191 = $$0127;
      break;
     }
     $187 = ((($$0127)) + 12|0);
     $188 = ((($$3)) + 1|0);
     $$0127 = $187;$$3 = $188;
    }
    if ((label|0) == 83) {
     $189 = HEAP32[$5>>2]|0;
     $190 = $189 | 4;
     HEAP32[$5>>2] = $190;
     $$0127191 = $3;
    }
    $191 = ($$sroa$0159$0|0)==(0);
    if (!($191)) {
     $192 = $$sroa$0159$0;
     _free($192);
    }
    STACKTOP = sp;return ($$0127191|0);
   }
  } while(0);
  $193 = ___cxa_find_matching_catch_2()|0;
  $194 = tempRet0;
  $195 = ($$sroa$0159$0|0)==(0);
  if ($195) {
   $$sink134$sink135199$index = $193;$$sink134$sink135199$index5 = $194;
  } else {
   $196 = $$sroa$0159$0;
   _free($196);
   $$sink134$sink135199$index = $193;$$sink134$sink135199$index5 = $194;
  }
 }
 ___resumeException($$sink134$sink135199$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$2 = 0, $$232 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$ptr = 0, $$sroa$026$0 = 0, $$sroa$026$0$copyload = 0, $$sroa$026$0$copyload28 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy2 = sp + 60|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 52|0;
 $6 = sp + 48|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 36|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $12 = sp;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 L1: do {
  if ($16) {
   HEAP32[$6>>2] = -1;
   $17 = HEAP32[$0>>2]|0;
   $18 = ((($17)) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $20;
   $21 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $21;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;
   $22 = (FUNCTION_TABLE_iiiiiii[$19 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$6)|0);
   HEAP32[$1>>2] = $22;
   $23 = HEAP32[$6>>2]|0;
   switch ($23|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$026$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$026$0 = $$sroa$026$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($9,$3);
   __THREW__ = 0;
   $24 = (invoke_iii(354,($9|0),(20192|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   do {
    if ($26) {
     $49 = ___cxa_find_matching_catch_2()|0;
     $50 = tempRet0;
     __ZNSt3__26localeD2Ev($9);
     $$2 = $49;$$232 = $50;
    } else {
     __ZNSt3__26localeD2Ev($9);
     __ZNKSt3__28ios_base6getlocEv($10,$3);
     __THREW__ = 0;
     $27 = (invoke_iii(354,($10|0),(20200|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $51 = ___cxa_find_matching_catch_2()|0;
      $52 = tempRet0;
      __ZNSt3__26localeD2Ev($10);
      $$2 = $51;$$232 = $52;
      break;
     }
     __ZNSt3__26localeD2Ev($10);
     $30 = HEAP32[$27>>2]|0;
     $31 = ((($30)) + 24|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii($32|0,($11|0),($27|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      $35 = ___cxa_find_matching_catch_2()|0;
      $36 = tempRet0;
      $$2 = $35;$$232 = $36;
      break;
     }
     $$ptr = ((($11)) + 12|0);
     $37 = HEAP32[$27>>2]|0;
     $38 = ((($37)) + 28|0);
     $39 = HEAP32[$38>>2]|0;
     __THREW__ = 0;
     invoke_vii($39|0,($$ptr|0),($27|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
      $$2 = $61;$$232 = $62;
      break;
     }
     $42 = HEAP32[$2>>2]|0;
     HEAP32[$12>>2] = $42;
     $43 = ((($11)) + 24|0);
     __THREW__ = 0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$12>>2]|0;
     $44 = (invoke_iiiiiiii(450,($1|0),($$byval_copy2|0),($11|0),($43|0),($24|0),($4|0),1)|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      $53 = ___cxa_find_matching_catch_2()|0;
      $54 = tempRet0;
      $59 = $43;
      while(1) {
       $58 = ((($59)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($58);
       $60 = ($58|0)==($11|0);
       if ($60) {
        break;
       } else {
        $59 = $58;
       }
      }
      $$2 = $53;$$232 = $54;
      break;
     } else {
      $47 = ($44|0)==($11|0);
      $48 = $47&1;
      HEAP8[$5>>0] = $48;
      $$sroa$026$0$copyload28 = HEAP32[$1>>2]|0;
      $56 = $43;
      while(1) {
       $55 = ((($56)) + -12|0);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($55);
       $57 = ($55|0)==($11|0);
       if ($57) {
        break;
       } else {
        $56 = $55;
       }
      }
      $$sroa$026$0 = $$sroa$026$0$copyload28;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$026$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$i$i63 = 0, $$025 = 0, $$028 = 0, $$126 = 0, $$2 = 0, $$227 = 0, $$230 = 0, $$3 = 0, $$331 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i42 = 0, $$pre$i4$i$i = 0;
 var $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i37 = 0, $phitmp$i = 0, $phitmp$i58 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $6 = sp + 208|0;
 $7 = sp + 196|0;
 $8 = sp + 192|0;
 $9 = sp + 180|0;
 $10 = sp + 176|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $14 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($$0$i$i) + 1)|0;
  $$0$i$i = $15;
 }
 __THREW__ = 0;
 invoke_vii(353,($8|0),($3|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if ($17) {
   $99 = ___cxa_find_matching_catch_2()|0;
   $100 = tempRet0;
   $$0 = $99;$$028 = $100;
   label = 36;
  } else {
   __THREW__ = 0;
   $18 = (invoke_iii(354,($8|0),(20192|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $21 = HEAP32[$18>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($23|0,($18|0),(15703|0),((15729)|0),($6|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     __ZNSt3__26localeD2Ev($8);
     ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     $$0$i$i36 = 0;
     while(1) {
      $exitcond$i$i37 = ($$0$i$i36|0)==(3);
      if ($exitcond$i$i37) {
       break;
      }
      $26 = (($9) + ($$0$i$i36<<2)|0);
      HEAP32[$26>>2] = 0;
      $27 = (($$0$i$i36) + 1)|0;
      $$0$i$i36 = $27;
     }
     $28 = ((($9)) + 11|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     if ($30) {
      $31 = ((($9)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 & 2147483647;
      $phitmp$i = (($33) + -1)|0;
      $34 = $phitmp$i;
     } else {
      $34 = 10;
     }
     __THREW__ = 0;
     invoke_viii(379,($9|0),($34|0),0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $103 = ___cxa_find_matching_catch_2()|0;
      $104 = tempRet0;
      $$2 = $103;$$230 = $104;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $38 = ($37<<24>>24)<(0);
      $39 = HEAP32[$9>>2]|0;
      $40 = $38 ? $39 : $9;
      HEAP32[$10>>2] = $40;
      HEAP32[$12>>2] = $11;
      HEAP32[$13>>2] = 0;
      $41 = ((($9)) + 4|0);
      $42 = ((($9)) + 8|0);
      $$pre = HEAP32[$1>>2]|0;
      $$025 = $40;$$pre$i$i$i42 = $$pre;$185 = $$pre;
      L21: while(1) {
       $43 = ($$pre$i$i$i42|0)==(0|0);
       if ($43) {
        $$pre$i$i$i = 0;$155 = 0;$186 = 1;
       } else {
        $44 = ((($$pre$i$i$i42)) + 12|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ((($$pre$i$i$i42)) + 16|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($45|0)==($47|0);
        if ($48) {
         $49 = HEAP32[$$pre$i$i$i42>>2]|0;
         $50 = ((($49)) + 36|0);
         $51 = HEAP32[$50>>2]|0;
         __THREW__ = 0;
         $52 = (invoke_ii($51|0,($$pre$i$i$i42|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          break;
         } else {
          $$0$i$i$i$i40 = $52;
         }
        } else {
         $55 = HEAP32[$45>>2]|0;
         $56 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($55)|0);
         $$0$i$i$i$i40 = $56;
        }
        $57 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $58 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i40,$57)|0);
        if ($58) {
         HEAP32[$1>>2] = 0;
         $$pre$i$i$i = 0;$155 = 0;$186 = 1;
        } else {
         $$pre$i$i$i = $$pre$i$i$i42;$155 = $185;$186 = 0;
        }
       }
       $59 = HEAP32[$2>>2]|0;
       $60 = ($59|0)==(0|0);
       do {
        if ($60) {
         label = 26;
        } else {
         $61 = ((($59)) + 12|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = ((($59)) + 16|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = ($62|0)==($64|0);
         if ($65) {
          $66 = HEAP32[$59>>2]|0;
          $67 = ((($66)) + 36|0);
          $68 = HEAP32[$67>>2]|0;
          __THREW__ = 0;
          $69 = (invoke_ii($68|0,($59|0))|0);
          $70 = __THREW__; __THREW__ = 0;
          $71 = $70&1;
          if ($71) {
           break L21;
          } else {
           $$0$i$i2$i$i46 = $69;
          }
         } else {
          $72 = HEAP32[$62>>2]|0;
          $73 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($72)|0);
          $$0$i$i2$i$i46 = $73;
         }
         $74 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $75 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i46,$74)|0);
         if ($75) {
          HEAP32[$2>>2] = 0;
          label = 26;
          break;
         } else {
          if ($186) {
           $187 = $59;
           break;
          } else {
           $$227 = $$025;$$pre$i4$i$i = $59;
           label = 46;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 26) {
        label = 0;
        if ($186) {
         $$227 = $$025;$$pre$i4$i$i = 0;
         label = 46;
         break;
        } else {
         $187 = 0;
        }
       }
       $76 = HEAP32[$10>>2]|0;
       $77 = HEAP8[$28>>0]|0;
       $78 = ($77<<24>>24)<(0);
       $79 = HEAP32[$41>>2]|0;
       $80 = $77&255;
       $81 = $78 ? $79 : $80;
       $82 = (($$025) + ($81)|0);
       $83 = ($76|0)==($82|0);
       if ($83) {
        $84 = $81 << 1;
        __THREW__ = 0;
        invoke_viii(379,($9|0),($84|0),0);
        $85 = __THREW__; __THREW__ = 0;
        $86 = $85&1;
        if ($86) {
         break;
        }
        $87 = HEAP8[$28>>0]|0;
        $88 = ($87<<24>>24)<(0);
        if ($88) {
         $89 = HEAP32[$42>>2]|0;
         $90 = $89 & 2147483647;
         $phitmp$i58 = (($90) + -1)|0;
         $91 = $phitmp$i58;
        } else {
         $91 = 10;
        }
        __THREW__ = 0;
        invoke_viii(379,($9|0),($91|0),0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         break;
        }
        $94 = HEAP8[$28>>0]|0;
        $95 = ($94<<24>>24)<(0);
        $96 = HEAP32[$9>>2]|0;
        $97 = $95 ? $96 : $9;
        $98 = (($97) + ($81)|0);
        HEAP32[$10>>2] = $98;
        $$126 = $97;
       } else {
        $$126 = $$025;
       }
       $105 = ((($$pre$i$i$i)) + 12|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ((($$pre$i$i$i)) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($106|0)==($108|0);
       if ($109) {
        $110 = HEAP32[$$pre$i$i$i>>2]|0;
        $111 = ((($110)) + 36|0);
        $112 = HEAP32[$111>>2]|0;
        __THREW__ = 0;
        $113 = (invoke_ii($112|0,($$pre$i$i$i|0))|0);
        $114 = __THREW__; __THREW__ = 0;
        $115 = $114&1;
        if ($115) {
         break;
        } else {
         $$0$i$i63 = $113;
        }
       } else {
        $116 = HEAP32[$106>>2]|0;
        $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
        $$0$i$i63 = $117;
       }
       __THREW__ = 0;
       $118 = (invoke_iiiiiiiiiii(451,($$0$i$i63|0),16,($$126|0),($10|0),($13|0),0,($7|0),($11|0),($12|0),($6|0))|0);
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        break;
       }
       $121 = ($118|0)==(0);
       if (!($121)) {
        $$227 = $$126;$$pre$i4$i$i = $187;
        label = 46;
        break;
       }
       $122 = HEAP32[$105>>2]|0;
       $123 = HEAP32[$107>>2]|0;
       $124 = ($122|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$$pre$i$i$i>>2]|0;
        $126 = ((($125)) + 40|0);
        $127 = HEAP32[$126>>2]|0;
        __THREW__ = 0;
        (invoke_ii($127|0,($$pre$i$i$i|0))|0);
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         break;
        } else {
         $$025 = $$126;$$pre$i$i$i42 = $$pre$i$i$i;$185 = $155;
         continue;
        }
       } else {
        $130 = ((($122)) + 4|0);
        HEAP32[$105>>2] = $130;
        $131 = HEAP32[$122>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
        $$025 = $$126;$$pre$i$i$i42 = $$pre$i$i$i;$185 = $155;
        continue;
       }
      }
      L60: do {
       if ((label|0) == 46) {
        $132 = HEAP32[$10>>2]|0;
        $133 = $$227;
        $134 = (($132) - ($133))|0;
        __THREW__ = 0;
        invoke_viii(379,($9|0),($134|0),0);
        $135 = __THREW__; __THREW__ = 0;
        $136 = $135&1;
        if (!($136)) {
         $137 = HEAP8[$28>>0]|0;
         $138 = HEAP32[$9>>2]|0;
         __THREW__ = 0;
         $139 = (invoke_i(432)|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if (!($141)) {
          $142 = ($137<<24>>24)<(0);
          $143 = $142 ? $138 : $9;
          __THREW__ = 0;
          HEAP32[$vararg_buffer>>2] = $5;
          $144 = (invoke_iiiii(433,($143|0),($139|0),(15736|0),($vararg_buffer|0))|0);
          $145 = __THREW__; __THREW__ = 0;
          $146 = $145&1;
          if (!($146)) {
           $147 = ($144|0)==(1);
           if (!($147)) {
            HEAP32[$4>>2] = 4;
           }
           $148 = ($$pre$i$i$i|0)==(0|0);
           if ($148) {
            $188 = 1;
           } else {
            $149 = ((($$pre$i$i$i)) + 12|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = ((($$pre$i$i$i)) + 16|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = ($150|0)==($152|0);
            if ($153) {
             $154 = HEAP32[$155>>2]|0;
             $156 = ((($154)) + 36|0);
             $157 = HEAP32[$156>>2]|0;
             __THREW__ = 0;
             $158 = (invoke_ii($157|0,($$pre$i$i$i|0))|0);
             $159 = __THREW__; __THREW__ = 0;
             $160 = $159&1;
             if ($160) {
              break;
             } else {
              $$0$i$i$i$i = $158;
             }
            } else {
             $161 = HEAP32[$150>>2]|0;
             $162 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($161)|0);
             $$0$i$i$i$i = $162;
            }
            $163 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
            $164 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$163)|0);
            if ($164) {
             HEAP32[$1>>2] = 0;
             $188 = 1;
            } else {
             $188 = 0;
            }
           }
           $165 = ($$pre$i4$i$i|0)==(0|0);
           do {
            if ($165) {
             label = 63;
            } else {
             $166 = ((($$pre$i4$i$i)) + 12|0);
             $167 = HEAP32[$166>>2]|0;
             $168 = ((($$pre$i4$i$i)) + 16|0);
             $169 = HEAP32[$168>>2]|0;
             $170 = ($167|0)==($169|0);
             if ($170) {
              $171 = HEAP32[$$pre$i4$i$i>>2]|0;
              $172 = ((($171)) + 36|0);
              $173 = HEAP32[$172>>2]|0;
              __THREW__ = 0;
              $174 = (invoke_ii($173|0,($$pre$i4$i$i|0))|0);
              $175 = __THREW__; __THREW__ = 0;
              $176 = $175&1;
              if ($176) {
               break L60;
              } else {
               $$0$i$i2$i$i = $174;
              }
             } else {
              $177 = HEAP32[$167>>2]|0;
              $178 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($177)|0);
              $$0$i$i2$i$i = $178;
             }
             $179 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
             $180 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$179)|0);
             if ($180) {
              HEAP32[$2>>2] = 0;
              label = 63;
              break;
             } else {
              if ($188) {
               break;
              } else {
               label = 65;
               break;
              }
             }
            }
           } while(0);
           if ((label|0) == 63) {
            if ($188) {
             label = 65;
            }
           }
           if ((label|0) == 65) {
            $181 = HEAP32[$4>>2]|0;
            $182 = $181 | 2;
            HEAP32[$4>>2] = $182;
           }
           $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
           STACKTOP = sp;return ($$sroa$0$0$copyload|0);
          }
         }
        }
       }
      } while(0);
      $183 = ___cxa_find_matching_catch_2()|0;
      $184 = tempRet0;
      $$2 = $183;$$230 = $184;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     $$3 = $$2;$$331 = $$230;
     break;
    }
   }
   $101 = ___cxa_find_matching_catch_2()|0;
   $102 = tempRet0;
   __ZNSt3__26localeD2Ev($8);
   $$0 = $101;$$028 = $102;
   label = 36;
  }
 } while(0);
 if ((label|0) == 36) {
  $$3 = $$0;$$331 = $$028;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    $45 = (15703 + ($43)|0);
    switch ($1|0) {
    case 10: case 8:  {
     $46 = ($43|0)<($1|0);
     if (!($46)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $47 = ($42|0)<(88);
     if (!($47)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $48 = $10;
      $49 = $2;
      $50 = (($48) - ($49))|0;
      $51 = ($50|0)<(3);
      if (!($51)) {
       $$1 = -1;
       break L6;
      }
      $52 = ((($10)) + -1|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = ($53<<24>>24)==(48);
      if (!($54)) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4>>2] = 0;
      $55 = HEAP8[$45>>0]|0;
      $56 = ((($10)) + 1|0);
      HEAP32[$3>>2] = $56;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = HEAP8[$45>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i44 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$182 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$152 = 0;$183 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$152 = 0;$183 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$152 = $182;$183 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($183) {
       $184 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($183) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $184 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $104 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = HEAP32[$7>>2]|0;
   $106 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $107 = (invoke_iiiiiiiiiiiii(452,($$0$i$i49|0),($15|0),($16|0),($$119|0),($11|0),($105|0),($106|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    break;
   }
   $110 = ($107|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i4$i$i = $184;
    label = 37;
    break;
   }
   $111 = HEAP32[$92>>2]|0;
   $112 = HEAP32[$94>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
     continue;
    }
   } else {
    $119 = ((($111)) + 4|0);
    HEAP32[$92>>2] = $119;
    $120 = HEAP32[$111>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($120)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $121 = ((($9)) + 11|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = ($122<<24>>24)<(0);
    $124 = ((($9)) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $122&255;
    $127 = $123 ? $125 : $126;
    $128 = ($127|0)==(0);
    $129 = HEAP8[$15>>0]|0;
    $130 = ($129<<24>>24)==(0);
    $or$cond = $128 | $130;
    if (!($or$cond)) {
     $131 = HEAP32[$13>>2]|0;
     $132 = $131;
     $133 = $12;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if ($135) {
      $136 = HEAP32[$14>>2]|0;
      $137 = ((($131)) + 4|0);
      HEAP32[$13>>2] = $137;
      HEAP32[$131>>2] = $136;
     }
    }
    $138 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $139 = (+invoke_diii(439,($$2|0),($138|0),($4|0)));
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if (!($141)) {
     HEAPF64[$5>>3] = $139;
     $142 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($142|0),($4|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      $145 = ($$pre$i$i$i|0)==(0|0);
      if ($145) {
       $185 = 1;
      } else {
       $146 = ((($$pre$i$i$i)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($$pre$i$i$i)) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$152>>2]|0;
        $153 = ((($151)) + 36|0);
        $154 = HEAP32[$153>>2]|0;
        __THREW__ = 0;
        $155 = (invoke_ii($154|0,($$pre$i$i$i|0))|0);
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         break;
        } else {
         $$0$i$i$i$i = $155;
        }
       } else {
        $158 = HEAP32[$147>>2]|0;
        $159 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($158)|0);
        $$0$i$i$i$i = $159;
       }
       $160 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$160)|0);
       if ($161) {
        HEAP32[$1>>2] = 0;
        $185 = 1;
       } else {
        $185 = 0;
       }
      }
      $162 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($162) {
        label = 54;
       } else {
        $163 = ((($$pre$i4$i$i)) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ((($$pre$i4$i$i)) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$$pre$i4$i$i>>2]|0;
         $169 = ((($168)) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         __THREW__ = 0;
         $171 = (invoke_ii($170|0,($$pre$i4$i$i|0))|0);
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         if ($173) {
          break L50;
         } else {
          $$0$i$i2$i$i = $171;
         }
        } else {
         $174 = HEAP32[$164>>2]|0;
         $175 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
         $$0$i$i2$i$i = $175;
        }
        $176 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $177 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$176)|0);
        if ($177) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($185) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $178 = HEAP32[$4>>2]|0;
       $179 = $178 | 2;
       HEAP32[$4>>2] = $179;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $180 = ___cxa_find_matching_catch_2()|0;
  $181 = tempRet0;
  $$1 = $180;$$121 = $181;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 __THREW__ = 0;
 $6 = (invoke_iii(354,($5|0),(20192|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(15703|0),((15735)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   $14 = (invoke_iii(354,($5|0),(20200|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP32[$3>>2] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     $26 = (invoke_ii($25|0,($14|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      HEAP32[$4>>2] = $26;
      $29 = HEAP32[$14>>2]|0;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      invoke_vii($31|0,($0|0),($14|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $34 = ___cxa_find_matching_catch_2()|0;
 $35 = tempRet0;
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($34|0);
 // unreachable;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 $13 = $8;
 L1: do {
  if ($12) {
   $14 = HEAP8[$1>>0]|0;
   $15 = ($14<<24>>24)==(0);
   if ($15) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ((($16)) + 1|0);
    HEAP32[$4>>2] = $17;
    HEAP8[$16>>0] = 46;
    $18 = ((($7)) + 11|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)<(0);
    $21 = ((($7)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $19&255;
    $24 = $20 ? $22 : $23;
    $25 = ($24|0)==(0);
    if ($25) {
     $$2 = 0;
    } else {
     $26 = HEAP32[$9>>2]|0;
     $27 = $26;
     $28 = (($27) - ($13))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($26)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$26>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = (($44) - ($13))|0;
     $46 = ($45|0)<(160);
     if (!($46)) {
      $$2 = 0;
      break;
     }
     $47 = HEAP32[$10>>2]|0;
     $48 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $48;
     HEAP32[$43>>2] = $47;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $49 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $50 = ($$0$i$idx|0)==(32);
    if ($50) {
     $$0$lcssa$i = $49;
     break;
    }
    $51 = HEAP32[$$0$i$ptr>>2]|0;
    $52 = ($51|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($52) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $53 = $$0$lcssa$i;
   $54 = $11;
   $55 = (($53) - ($54))|0;
   $56 = $55 >> 2;
   $57 = ($55|0)>(124);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (15703 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 & 95;
      $65 = HEAP8[$2>>0]|0;
      $66 = $65 & 127;
      $67 = ($64<<24>>24)==($66<<24>>24);
      if (!($67)) {
       $$2 = -1;
       break L1;
      }
     }
     $68 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $68;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $69 = $59 & 95;
     $70 = $69&255;
     $71 = HEAP8[$2>>0]|0;
     $72 = $71 << 24 >> 24;
     $73 = ($70|0)==($72|0);
     if ($73) {
      $74 = $70 | 128;
      $75 = $74&255;
      HEAP8[$2>>0] = $75;
      $76 = HEAP8[$1>>0]|0;
      $77 = ($76<<24>>24)==(0);
      if (!($77)) {
       HEAP8[$1>>0] = 0;
       $78 = ((($7)) + 11|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ($79<<24>>24)<(0);
       $81 = ((($7)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $79&255;
       $84 = $80 ? $82 : $83;
       $85 = ($84|0)==(0);
       if (!($85)) {
        $86 = HEAP32[$9>>2]|0;
        $87 = $86;
        $88 = (($87) - ($13))|0;
        $89 = ($88|0)<(160);
        if ($89) {
         $90 = HEAP32[$10>>2]|0;
         $91 = ((($86)) + 4|0);
         HEAP32[$9>>2] = $91;
         HEAP32[$86>>2] = $90;
        }
       }
      }
     }
    }
    }
    $92 = HEAP32[$4>>2]|0;
    $93 = ((($92)) + 1|0);
    HEAP32[$4>>2] = $93;
    HEAP8[$92>>0] = $59;
    $94 = ($55|0)>(84);
    if ($94) {
     $$2 = 0;
    } else {
     $95 = HEAP32[$10>>2]|0;
     $96 = (($95) + 1)|0;
     HEAP32[$10>>2] = $96;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i44 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$182 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$152 = 0;$183 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$152 = 0;$183 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$152 = $182;$183 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($183) {
       $184 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($183) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $184 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $104 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = HEAP32[$7>>2]|0;
   $106 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $107 = (invoke_iiiiiiiiiiiii(452,($$0$i$i49|0),($15|0),($16|0),($$119|0),($11|0),($105|0),($106|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    break;
   }
   $110 = ($107|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i4$i$i = $184;
    label = 37;
    break;
   }
   $111 = HEAP32[$92>>2]|0;
   $112 = HEAP32[$94>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
     continue;
    }
   } else {
    $119 = ((($111)) + 4|0);
    HEAP32[$92>>2] = $119;
    $120 = HEAP32[$111>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($120)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $121 = ((($9)) + 11|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = ($122<<24>>24)<(0);
    $124 = ((($9)) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $122&255;
    $127 = $123 ? $125 : $126;
    $128 = ($127|0)==(0);
    $129 = HEAP8[$15>>0]|0;
    $130 = ($129<<24>>24)==(0);
    $or$cond = $128 | $130;
    if (!($or$cond)) {
     $131 = HEAP32[$13>>2]|0;
     $132 = $131;
     $133 = $12;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if ($135) {
      $136 = HEAP32[$14>>2]|0;
      $137 = ((($131)) + 4|0);
      HEAP32[$13>>2] = $137;
      HEAP32[$131>>2] = $136;
     }
    }
    $138 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $139 = (+invoke_diii(441,($$2|0),($138|0),($4|0)));
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if (!($141)) {
     HEAPF64[$5>>3] = $139;
     $142 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($142|0),($4|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      $145 = ($$pre$i$i$i|0)==(0|0);
      if ($145) {
       $185 = 1;
      } else {
       $146 = ((($$pre$i$i$i)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($$pre$i$i$i)) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$152>>2]|0;
        $153 = ((($151)) + 36|0);
        $154 = HEAP32[$153>>2]|0;
        __THREW__ = 0;
        $155 = (invoke_ii($154|0,($$pre$i$i$i|0))|0);
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         break;
        } else {
         $$0$i$i$i$i = $155;
        }
       } else {
        $158 = HEAP32[$147>>2]|0;
        $159 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($158)|0);
        $$0$i$i$i$i = $159;
       }
       $160 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$160)|0);
       if ($161) {
        HEAP32[$1>>2] = 0;
        $185 = 1;
       } else {
        $185 = 0;
       }
      }
      $162 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($162) {
        label = 54;
       } else {
        $163 = ((($$pre$i4$i$i)) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ((($$pre$i4$i$i)) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$$pre$i4$i$i>>2]|0;
         $169 = ((($168)) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         __THREW__ = 0;
         $171 = (invoke_ii($170|0,($$pre$i4$i$i|0))|0);
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         if ($173) {
          break L50;
         } else {
          $$0$i$i2$i$i = $171;
         }
        } else {
         $174 = HEAP32[$164>>2]|0;
         $175 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
         $$0$i$i2$i$i = $175;
        }
        $176 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $177 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$176)|0);
        if ($177) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($185) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $178 = HEAP32[$4>>2]|0;
       $179 = $178 | 2;
       HEAP32[$4>>2] = $179;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $180 = ___cxa_find_matching_catch_2()|0;
  $181 = tempRet0;
  $$1 = $180;$$121 = $181;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i26 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i32 = 0, $$0$i$i49 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i28 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i44 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $6 = sp + 208|0;
 $7 = sp + 200|0;
 $8 = sp + 196|0;
 $9 = sp + 184|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 337|0;
 $16 = sp + 336|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = tempRet0;
  $$1 = $90;$$121 = $91;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$$pre$i$i$i28 = $$pre;$182 = $$pre;
  L11: while(1) {
   $34 = ($$pre$i$i$i28|0)==(0|0);
   if ($34) {
    $$pre$i$i$i = 0;$152 = 0;$183 = 1;
   } else {
    $35 = ((($$pre$i$i$i28)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($$pre$i$i$i28)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$$pre$i$i$i28>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($$pre$i$i$i28|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break;
     } else {
      $$0$i$i$i$i26 = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i26 = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i26,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$152 = 0;$183 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i28;$152 = $182;$183 = 0;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L11;
      } else {
       $$0$i$i2$i$i32 = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i32 = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i32,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($183) {
       $184 = $50;
       break;
      } else {
       $$2 = $$018;$$pre$i4$i$i = $50;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($183) {
     $$2 = $$018;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $184 = 0;
    }
   }
   $67 = HEAP32[$11>>2]|0;
   $68 = HEAP8[$19>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$32>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$018) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(379,($10|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     break;
    }
    $78 = HEAP8[$19>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$33>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i44 = (($81) + -1)|0;
     $82 = $phitmp$i44;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($10|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     break;
    }
    $85 = HEAP8[$19>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$10>>2]|0;
    $88 = $86 ? $87 : $10;
    $89 = (($88) + ($72)|0);
    HEAP32[$11>>2] = $89;
    $$119 = $88;
   } else {
    $$119 = $$018;
   }
   $92 = ((($$pre$i$i$i)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($$pre$i$i$i)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($93|0)==($95|0);
   if ($96) {
    $97 = HEAP32[$$pre$i$i$i>>2]|0;
    $98 = ((($97)) + 36|0);
    $99 = HEAP32[$98>>2]|0;
    __THREW__ = 0;
    $100 = (invoke_ii($99|0,($$pre$i$i$i|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    $102 = $101&1;
    if ($102) {
     break;
    } else {
     $$0$i$i49 = $100;
    }
   } else {
    $103 = HEAP32[$93>>2]|0;
    $104 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($103)|0);
    $$0$i$i49 = $104;
   }
   $105 = HEAP32[$7>>2]|0;
   $106 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $107 = (invoke_iiiiiiiiiiiii(452,($$0$i$i49|0),($15|0),($16|0),($$119|0),($11|0),($105|0),($106|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    break;
   }
   $110 = ($107|0)==(0);
   if (!($110)) {
    $$2 = $$119;$$pre$i4$i$i = $184;
    label = 37;
    break;
   }
   $111 = HEAP32[$92>>2]|0;
   $112 = HEAP32[$94>>2]|0;
   $113 = ($111|0)==($112|0);
   if ($113) {
    $114 = HEAP32[$$pre$i$i$i>>2]|0;
    $115 = ((($114)) + 40|0);
    $116 = HEAP32[$115>>2]|0;
    __THREW__ = 0;
    (invoke_ii($116|0,($$pre$i$i$i|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     break;
    } else {
     $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
     continue;
    }
   } else {
    $119 = ((($111)) + 4|0);
    HEAP32[$92>>2] = $119;
    $120 = HEAP32[$111>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($120)|0);
    $$018 = $$119;$$pre$i$i$i28 = $$pre$i$i$i;$182 = $152;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $121 = ((($9)) + 11|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = ($122<<24>>24)<(0);
    $124 = ((($9)) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $122&255;
    $127 = $123 ? $125 : $126;
    $128 = ($127|0)==(0);
    $129 = HEAP8[$15>>0]|0;
    $130 = ($129<<24>>24)==(0);
    $or$cond = $128 | $130;
    if (!($or$cond)) {
     $131 = HEAP32[$13>>2]|0;
     $132 = $131;
     $133 = $12;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if ($135) {
      $136 = HEAP32[$14>>2]|0;
      $137 = ((($131)) + 4|0);
      HEAP32[$13>>2] = $137;
      HEAP32[$131>>2] = $136;
     }
    }
    $138 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $139 = (+invoke_diii(442,($$2|0),($138|0),($4|0)));
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if (!($141)) {
     HEAPF32[$5>>2] = $139;
     $142 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($9|0),($12|0),($142|0),($4|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      $145 = ($$pre$i$i$i|0)==(0|0);
      if ($145) {
       $185 = 1;
      } else {
       $146 = ((($$pre$i$i$i)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($$pre$i$i$i)) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$152>>2]|0;
        $153 = ((($151)) + 36|0);
        $154 = HEAP32[$153>>2]|0;
        __THREW__ = 0;
        $155 = (invoke_ii($154|0,($$pre$i$i$i|0))|0);
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         break;
        } else {
         $$0$i$i$i$i = $155;
        }
       } else {
        $158 = HEAP32[$147>>2]|0;
        $159 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($158)|0);
        $$0$i$i$i$i = $159;
       }
       $160 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$160)|0);
       if ($161) {
        HEAP32[$1>>2] = 0;
        $185 = 1;
       } else {
        $185 = 0;
       }
      }
      $162 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($162) {
        label = 54;
       } else {
        $163 = ((($$pre$i4$i$i)) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ((($$pre$i4$i$i)) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$$pre$i4$i$i>>2]|0;
         $169 = ((($168)) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         __THREW__ = 0;
         $171 = (invoke_ii($170|0,($$pre$i4$i$i|0))|0);
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         if ($173) {
          break L50;
         } else {
          $$0$i$i2$i$i = $171;
         }
        } else {
         $174 = HEAP32[$164>>2]|0;
         $175 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
         $$0$i$i2$i$i = $175;
        }
        $176 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $177 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$176)|0);
        if ($177) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($185) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $178 = HEAP32[$4>>2]|0;
       $179 = $178 | 2;
       HEAP32[$4>>2] = $179;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $180 = ___cxa_find_matching_catch_2()|0;
  $181 = tempRet0;
  $$1 = $180;$$121 = $181;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$182 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$152 = 0;$183 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$152 = 0;$183 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$152 = $182;$183 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($183) {
       $184 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($183) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $184 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $184;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$182 = $152;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$182 = $152;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(443,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = tempRet0;
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     $138 = $5;
     $139 = $138;
     HEAP32[$139>>2] = $134;
     $140 = (($138) + 4)|0;
     $141 = $140;
     HEAP32[$141>>2] = $135;
     $142 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($142|0),($4|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      $145 = ($$pre$i$i$i|0)==(0|0);
      if ($145) {
       $185 = 1;
      } else {
       $146 = ((($$pre$i$i$i)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($$pre$i$i$i)) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$152>>2]|0;
        $153 = ((($151)) + 36|0);
        $154 = HEAP32[$153>>2]|0;
        __THREW__ = 0;
        $155 = (invoke_ii($154|0,($$pre$i$i$i|0))|0);
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         break;
        } else {
         $$0$i$i$i$i = $155;
        }
       } else {
        $158 = HEAP32[$147>>2]|0;
        $159 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($158)|0);
        $$0$i$i$i$i = $159;
       }
       $160 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$160)|0);
       if ($161) {
        HEAP32[$1>>2] = 0;
        $185 = 1;
       } else {
        $185 = 0;
       }
      }
      $162 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($162) {
        label = 54;
       } else {
        $163 = ((($$pre$i4$i$i)) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ((($$pre$i4$i$i)) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$$pre$i4$i$i>>2]|0;
         $169 = ((($168)) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         __THREW__ = 0;
         $171 = (invoke_ii($170|0,($$pre$i4$i$i|0))|0);
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         if ($173) {
          break L50;
         } else {
          $$0$i$i2$i$i = $171;
         }
        } else {
         $174 = HEAP32[$164>>2]|0;
         $175 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
         $$0$i$i2$i$i = $175;
        }
        $176 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $177 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$176)|0);
        if ($177) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($185) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $178 = HEAP32[$4>>2]|0;
       $179 = $178 | 2;
       HEAP32[$4>>2] = $179;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $180 = ___cxa_find_matching_catch_2()|0;
  $181 = tempRet0;
  $$1 = $180;$$127 = $181;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 __ZNKSt3__28ios_base6getlocEv($4,$1);
 __THREW__ = 0;
 $5 = (invoke_iii(354,($4|0),(20192|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = HEAP32[$5>>2]|0;
  $9 = ((($8)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($10|0,($5|0),(15703|0),((15729)|0),($2|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __THREW__ = 0;
   $13 = (invoke_iii(354,($4|0),(20200|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    $16 = HEAP32[$13>>2]|0;
    $17 = ((($16)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_ii($18|0,($13|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     HEAP32[$3>>2] = $19;
     $22 = HEAP32[$13>>2]|0;
     $23 = ((($22)) + 20|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     invoke_vii($24|0,($0|0),($13|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      __ZNSt3__26localeD2Ev($4);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2()|0;
 $28 = tempRet0;
 __ZNSt3__26localeD2Ev($4);
 ___resumeException($27|0);
 // unreachable;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$177 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$147 = 0;$178 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$147 = 0;$178 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$147 = $177;$178 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($178) {
       $179 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($178) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $179 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $179;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(444,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if (!($136)) {
     HEAP32[$5>>2] = $134;
     $137 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($137|0),($4|0));
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if (!($139)) {
      $140 = ($$pre$i$i$i|0)==(0|0);
      if ($140) {
       $180 = 1;
      } else {
       $141 = ((($$pre$i$i$i)) + 12|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($$pre$i$i$i)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($142|0)==($144|0);
       if ($145) {
        $146 = HEAP32[$147>>2]|0;
        $148 = ((($146)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         break;
        } else {
         $$0$i$i$i$i = $150;
        }
       } else {
        $153 = HEAP32[$142>>2]|0;
        $154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
        $$0$i$i$i$i = $154;
       }
       $155 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $156 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$155)|0);
       if ($156) {
        HEAP32[$1>>2] = 0;
        $180 = 1;
       } else {
        $180 = 0;
       }
      }
      $157 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($157) {
        label = 54;
       } else {
        $158 = ((($$pre$i4$i$i)) + 12|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ((($$pre$i4$i$i)) + 16|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($159|0)==($161|0);
        if ($162) {
         $163 = HEAP32[$$pre$i4$i$i>>2]|0;
         $164 = ((($163)) + 36|0);
         $165 = HEAP32[$164>>2]|0;
         __THREW__ = 0;
         $166 = (invoke_ii($165|0,($$pre$i4$i$i|0))|0);
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          break L50;
         } else {
          $$0$i$i2$i$i = $166;
         }
        } else {
         $169 = HEAP32[$159>>2]|0;
         $170 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($169)|0);
         $$0$i$i2$i$i = $170;
        }
        $171 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $172 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$171)|0);
        if ($172) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($180) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $173 = HEAP32[$4>>2]|0;
       $174 = $173 | 2;
       HEAP32[$4>>2] = $174;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $175 = ___cxa_find_matching_catch_2()|0;
  $176 = tempRet0;
  $$1 = $175;$$127 = $176;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$177 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$147 = 0;$178 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$147 = 0;$178 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$147 = $177;$178 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($178) {
       $179 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($178) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $179 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $179;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(445,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if (!($136)) {
     HEAP32[$5>>2] = $134;
     $137 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($137|0),($4|0));
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if (!($139)) {
      $140 = ($$pre$i$i$i|0)==(0|0);
      if ($140) {
       $180 = 1;
      } else {
       $141 = ((($$pre$i$i$i)) + 12|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($$pre$i$i$i)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($142|0)==($144|0);
       if ($145) {
        $146 = HEAP32[$147>>2]|0;
        $148 = ((($146)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         break;
        } else {
         $$0$i$i$i$i = $150;
        }
       } else {
        $153 = HEAP32[$142>>2]|0;
        $154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
        $$0$i$i$i$i = $154;
       }
       $155 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $156 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$155)|0);
       if ($156) {
        HEAP32[$1>>2] = 0;
        $180 = 1;
       } else {
        $180 = 0;
       }
      }
      $157 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($157) {
        label = 54;
       } else {
        $158 = ((($$pre$i4$i$i)) + 12|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ((($$pre$i4$i$i)) + 16|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($159|0)==($161|0);
        if ($162) {
         $163 = HEAP32[$$pre$i4$i$i>>2]|0;
         $164 = ((($163)) + 36|0);
         $165 = HEAP32[$164>>2]|0;
         __THREW__ = 0;
         $166 = (invoke_ii($165|0,($$pre$i4$i$i|0))|0);
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          break L50;
         } else {
          $$0$i$i2$i$i = $166;
         }
        } else {
         $169 = HEAP32[$159>>2]|0;
         $170 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($169)|0);
         $$0$i$i2$i$i = $170;
        }
        $171 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $172 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$171)|0);
        if ($172) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($180) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $173 = HEAP32[$4>>2]|0;
       $174 = $173 | 2;
       HEAP32[$4>>2] = $174;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $175 = ___cxa_find_matching_catch_2()|0;
  $176 = tempRet0;
  $$1 = $175;$$127 = $176;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$177 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$147 = 0;$178 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$147 = 0;$178 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$147 = $177;$178 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($178) {
       $179 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($178) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $179 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $179;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(446,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if (!($136)) {
     HEAP16[$5>>1] = $134;
     $137 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($137|0),($4|0));
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if (!($139)) {
      $140 = ($$pre$i$i$i|0)==(0|0);
      if ($140) {
       $180 = 1;
      } else {
       $141 = ((($$pre$i$i$i)) + 12|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($$pre$i$i$i)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($142|0)==($144|0);
       if ($145) {
        $146 = HEAP32[$147>>2]|0;
        $148 = ((($146)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         break;
        } else {
         $$0$i$i$i$i = $150;
        }
       } else {
        $153 = HEAP32[$142>>2]|0;
        $154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
        $$0$i$i$i$i = $154;
       }
       $155 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $156 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$155)|0);
       if ($156) {
        HEAP32[$1>>2] = 0;
        $180 = 1;
       } else {
        $180 = 0;
       }
      }
      $157 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($157) {
        label = 54;
       } else {
        $158 = ((($$pre$i4$i$i)) + 12|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ((($$pre$i4$i$i)) + 16|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($159|0)==($161|0);
        if ($162) {
         $163 = HEAP32[$$pre$i4$i$i>>2]|0;
         $164 = ((($163)) + 36|0);
         $165 = HEAP32[$164>>2]|0;
         __THREW__ = 0;
         $166 = (invoke_ii($165|0,($$pre$i4$i$i|0))|0);
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          break L50;
         } else {
          $$0$i$i2$i$i = $166;
         }
        } else {
         $169 = HEAP32[$159>>2]|0;
         $170 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($169)|0);
         $$0$i$i2$i$i = $170;
        }
        $171 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $172 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$171)|0);
        if ($172) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($180) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $173 = HEAP32[$4>>2]|0;
       $174 = $173 | 2;
       HEAP32[$4>>2] = $174;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $175 = ___cxa_find_matching_catch_2()|0;
  $176 = tempRet0;
  $$1 = $175;$$127 = $176;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$182 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$152 = 0;$183 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$152 = 0;$183 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$152 = $182;$183 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($183) {
       $184 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($183) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $184 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $184;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$182 = $152;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$182 = $152;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(447,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = tempRet0;
    $136 = __THREW__; __THREW__ = 0;
    $137 = $136&1;
    if (!($137)) {
     $138 = $5;
     $139 = $138;
     HEAP32[$139>>2] = $134;
     $140 = (($138) + 4)|0;
     $141 = $140;
     HEAP32[$141>>2] = $135;
     $142 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($142|0),($4|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      $145 = ($$pre$i$i$i|0)==(0|0);
      if ($145) {
       $185 = 1;
      } else {
       $146 = ((($$pre$i$i$i)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ((($$pre$i$i$i)) + 16|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ($147|0)==($149|0);
       if ($150) {
        $151 = HEAP32[$152>>2]|0;
        $153 = ((($151)) + 36|0);
        $154 = HEAP32[$153>>2]|0;
        __THREW__ = 0;
        $155 = (invoke_ii($154|0,($$pre$i$i$i|0))|0);
        $156 = __THREW__; __THREW__ = 0;
        $157 = $156&1;
        if ($157) {
         break;
        } else {
         $$0$i$i$i$i = $155;
        }
       } else {
        $158 = HEAP32[$147>>2]|0;
        $159 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($158)|0);
        $$0$i$i$i$i = $159;
       }
       $160 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$160)|0);
       if ($161) {
        HEAP32[$1>>2] = 0;
        $185 = 1;
       } else {
        $185 = 0;
       }
      }
      $162 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($162) {
        label = 54;
       } else {
        $163 = ((($$pre$i4$i$i)) + 12|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ((($$pre$i4$i$i)) + 16|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = ($164|0)==($166|0);
        if ($167) {
         $168 = HEAP32[$$pre$i4$i$i>>2]|0;
         $169 = ((($168)) + 36|0);
         $170 = HEAP32[$169>>2]|0;
         __THREW__ = 0;
         $171 = (invoke_ii($170|0,($$pre$i4$i$i|0))|0);
         $172 = __THREW__; __THREW__ = 0;
         $173 = $172&1;
         if ($173) {
          break L50;
         } else {
          $$0$i$i2$i$i = $171;
         }
        } else {
         $174 = HEAP32[$164>>2]|0;
         $175 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
         $$0$i$i2$i$i = $175;
        }
        $176 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $177 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$176)|0);
        if ($177) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($185) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($185) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $178 = HEAP32[$4>>2]|0;
       $179 = $178 | 2;
       HEAP32[$4>>2] = $179;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $180 = ___cxa_find_matching_catch_2()|0;
  $181 = tempRet0;
  $$1 = $180;$$127 = $181;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i31 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i37 = 0, $$0$i$i54 = 0, $$024 = 0, $$1 = 0, $$125 = 0, $$127 = 0, $$2 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i33 = 0, $$pre$i4$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 200|0;
 $7 = sp + 196|0;
 $8 = sp + 184|0;
 $9 = sp + 172|0;
 $10 = sp + 168|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($8,$3,$6,$7);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $15 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i) + 1)|0;
  $$0$i$i = $16;
 }
 $17 = ((($9)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = ((($9)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 2147483647;
  $phitmp$i = (($22) + -1)|0;
  $23 = $phitmp$i;
 } else {
  $23 = 10;
 }
 __THREW__ = 0;
 invoke_viii(379,($9|0),($23|0),0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $88 = ___cxa_find_matching_catch_2()|0;
  $89 = tempRet0;
  $$1 = $88;$$127 = $89;
 } else {
  $26 = HEAP8[$17>>0]|0;
  $27 = ($26<<24>>24)<(0);
  $28 = HEAP32[$9>>2]|0;
  $29 = $27 ? $28 : $9;
  HEAP32[$10>>2] = $29;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $30 = ((($9)) + 4|0);
  $31 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$024 = $29;$$pre$i$i$i33 = $$pre;$177 = $$pre;
  L11: while(1) {
   $32 = ($$pre$i$i$i33|0)==(0|0);
   if ($32) {
    $$pre$i$i$i = 0;$147 = 0;$178 = 1;
   } else {
    $33 = ((($$pre$i$i$i33)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$pre$i$i$i33)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if ($37) {
     $38 = HEAP32[$$pre$i$i$i33>>2]|0;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     __THREW__ = 0;
     $41 = (invoke_ii($40|0,($$pre$i$i$i33|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      break;
     } else {
      $$0$i$i$i$i31 = $41;
     }
    } else {
     $44 = HEAP32[$34>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i$i$i31 = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i31,$46)|0);
    if ($47) {
     HEAP32[$1>>2] = 0;
     $$pre$i$i$i = 0;$147 = 0;$178 = 1;
    } else {
     $$pre$i$i$i = $$pre$i$i$i33;$147 = $177;$178 = 0;
    }
   }
   $48 = HEAP32[$2>>2]|0;
   $49 = ($48|0)==(0|0);
   do {
    if ($49) {
     label = 20;
    } else {
     $50 = ((($48)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($48)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($51|0)==($53|0);
     if ($54) {
      $55 = HEAP32[$48>>2]|0;
      $56 = ((($55)) + 36|0);
      $57 = HEAP32[$56>>2]|0;
      __THREW__ = 0;
      $58 = (invoke_ii($57|0,($48|0))|0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break L11;
      } else {
       $$0$i$i2$i$i37 = $58;
      }
     } else {
      $61 = HEAP32[$51>>2]|0;
      $62 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
      $$0$i$i2$i$i37 = $62;
     }
     $63 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $64 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i37,$63)|0);
     if ($64) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($178) {
       $179 = $48;
       break;
      } else {
       $$2 = $$024;$$pre$i4$i$i = $48;
       label = 37;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($178) {
     $$2 = $$024;$$pre$i4$i$i = 0;
     label = 37;
     break;
    } else {
     $179 = 0;
    }
   }
   $65 = HEAP32[$10>>2]|0;
   $66 = HEAP8[$17>>0]|0;
   $67 = ($66<<24>>24)<(0);
   $68 = HEAP32[$30>>2]|0;
   $69 = $66&255;
   $70 = $67 ? $68 : $69;
   $71 = (($$024) + ($70)|0);
   $72 = ($65|0)==($71|0);
   if ($72) {
    $73 = $70 << 1;
    __THREW__ = 0;
    invoke_viii(379,($9|0),($73|0),0);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     break;
    }
    $76 = HEAP8[$17>>0]|0;
    $77 = ($76<<24>>24)<(0);
    if ($77) {
     $78 = HEAP32[$31>>2]|0;
     $79 = $78 & 2147483647;
     $phitmp$i49 = (($79) + -1)|0;
     $80 = $phitmp$i49;
    } else {
     $80 = 10;
    }
    __THREW__ = 0;
    invoke_viii(379,($9|0),($80|0),0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     break;
    }
    $83 = HEAP8[$17>>0]|0;
    $84 = ($83<<24>>24)<(0);
    $85 = HEAP32[$9>>2]|0;
    $86 = $84 ? $85 : $9;
    $87 = (($86) + ($70)|0);
    HEAP32[$10>>2] = $87;
    $$125 = $86;
   } else {
    $$125 = $$024;
   }
   $90 = ((($$pre$i$i$i)) + 12|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($$pre$i$i$i)) + 16|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($91|0)==($93|0);
   if ($94) {
    $95 = HEAP32[$$pre$i$i$i>>2]|0;
    $96 = ((($95)) + 36|0);
    $97 = HEAP32[$96>>2]|0;
    __THREW__ = 0;
    $98 = (invoke_ii($97|0,($$pre$i$i$i|0))|0);
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     break;
    } else {
     $$0$i$i54 = $98;
    }
   } else {
    $101 = HEAP32[$91>>2]|0;
    $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
    $$0$i$i54 = $102;
   }
   $103 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   $104 = (invoke_iiiiiiiiiii(451,($$0$i$i54|0),($14|0),($$125|0),($10|0),($13|0),($103|0),($8|0),($11|0),($12|0),($6|0))|0);
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    break;
   }
   $107 = ($104|0)==(0);
   if (!($107)) {
    $$2 = $$125;$$pre$i4$i$i = $179;
    label = 37;
    break;
   }
   $108 = HEAP32[$90>>2]|0;
   $109 = HEAP32[$92>>2]|0;
   $110 = ($108|0)==($109|0);
   if ($110) {
    $111 = HEAP32[$$pre$i$i$i>>2]|0;
    $112 = ((($111)) + 40|0);
    $113 = HEAP32[$112>>2]|0;
    __THREW__ = 0;
    (invoke_ii($113|0,($$pre$i$i$i|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
     continue;
    }
   } else {
    $116 = ((($108)) + 4|0);
    HEAP32[$90>>2] = $116;
    $117 = HEAP32[$108>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($117)|0);
    $$024 = $$125;$$pre$i$i$i33 = $$pre$i$i$i;$177 = $147;
    continue;
   }
  }
  L50: do {
   if ((label|0) == 37) {
    $118 = ((($8)) + 11|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)<(0);
    $121 = ((($8)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $119&255;
    $124 = $120 ? $122 : $123;
    $125 = ($124|0)==(0);
    if (!($125)) {
     $126 = HEAP32[$12>>2]|0;
     $127 = $126;
     $128 = $11;
     $129 = (($127) - ($128))|0;
     $130 = ($129|0)<(160);
     if ($130) {
      $131 = HEAP32[$13>>2]|0;
      $132 = ((($126)) + 4|0);
      HEAP32[$12>>2] = $132;
      HEAP32[$126>>2] = $131;
     }
    }
    $133 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    $134 = (invoke_iiiii(448,($$2|0),($133|0),($4|0),($14|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if (!($136)) {
     HEAP32[$5>>2] = $134;
     $137 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(440,($8|0),($11|0),($137|0),($4|0));
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if (!($139)) {
      $140 = ($$pre$i$i$i|0)==(0|0);
      if ($140) {
       $180 = 1;
      } else {
       $141 = ((($$pre$i$i$i)) + 12|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ((($$pre$i$i$i)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($142|0)==($144|0);
       if ($145) {
        $146 = HEAP32[$147>>2]|0;
        $148 = ((($146)) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($$pre$i$i$i|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         break;
        } else {
         $$0$i$i$i$i = $150;
        }
       } else {
        $153 = HEAP32[$142>>2]|0;
        $154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
        $$0$i$i$i$i = $154;
       }
       $155 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $156 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$155)|0);
       if ($156) {
        HEAP32[$1>>2] = 0;
        $180 = 1;
       } else {
        $180 = 0;
       }
      }
      $157 = ($$pre$i4$i$i|0)==(0|0);
      do {
       if ($157) {
        label = 54;
       } else {
        $158 = ((($$pre$i4$i$i)) + 12|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ((($$pre$i4$i$i)) + 16|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = ($159|0)==($161|0);
        if ($162) {
         $163 = HEAP32[$$pre$i4$i$i>>2]|0;
         $164 = ((($163)) + 36|0);
         $165 = HEAP32[$164>>2]|0;
         __THREW__ = 0;
         $166 = (invoke_ii($165|0,($$pre$i4$i$i|0))|0);
         $167 = __THREW__; __THREW__ = 0;
         $168 = $167&1;
         if ($168) {
          break L50;
         } else {
          $$0$i$i2$i$i = $166;
         }
        } else {
         $169 = HEAP32[$159>>2]|0;
         $170 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($169)|0);
         $$0$i$i2$i$i = $170;
        }
        $171 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $172 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$171)|0);
        if ($172) {
         HEAP32[$2>>2] = 0;
         label = 54;
         break;
        } else {
         if ($180) {
          break;
         } else {
          label = 56;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       if ($180) {
        label = 56;
       }
      }
      if ((label|0) == 56) {
       $173 = HEAP32[$4>>2]|0;
       $174 = $173 | 2;
       HEAP32[$4>>2] = $174;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   }
  } while(0);
  $175 = ___cxa_find_matching_catch_2()|0;
  $176 = tempRet0;
  $$1 = $175;$$127 = $176;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i143 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i149 = 0, $$0103 = 0, $$0104 = 0, $$0105$off0 = 0, $$0106 = 0, $$0107 = 0, $$0108 = 0, $$0109 = 0, $$0112 = 0, $$0116 = 0, $$0132 = 0, $$0133 = 0, $$0133197 = 0, $$1110 = 0, $$1113 = 0;
 var $$1117 = 0, $$2$off0 = 0, $$2111 = 0, $$2114 = 0, $$2118 = 0, $$3 = 0, $$3115 = 0, $$3119 = 0, $$5 = 0, $$5121 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i145 = 0, $$pre$i4$i$i151 = 0, $$sink140$sink141205$index = 0, $$sink140$sink141205$index5 = 0, $$sroa$0165$0 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i146 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(449);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch_2()|0;
     $18 = tempRet0;
     $$sink140$sink141205$index = $17;$$sink140$sink141205$index5 = $18;
     break;
    }
   }
   $19 = $13;
   $$0132 = $13;$$sroa$0165$0 = $19;
   label = 6;
  } else {
   $$0132 = $7;$$sroa$0165$0 = 0;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $$0108 = $2;$$0109 = $$0132;$$0112 = 0;$$0116 = $11;
  while(1) {
   $20 = ($$0108|0)==($3|0);
   if ($20) {
    break;
   }
   $21 = ((($$0108)) + 8|0);
   $22 = ((($21)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   if ($24) {
    $25 = ((($$0108)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $29 = $26;
   } else {
    $27 = $23&255;
    $29 = $27;
   }
   $28 = ($29|0)==(0);
   if ($28) {
    HEAP8[$$0109>>0] = 2;
    $30 = (($$0116) + -1)|0;
    $31 = (($$0112) + 1)|0;
    $$1113 = $31;$$1117 = $30;
   } else {
    HEAP8[$$0109>>0] = 1;
    $$1113 = $$0112;$$1117 = $$0116;
   }
   $32 = ((($$0108)) + 12|0);
   $33 = ((($$0109)) + 1|0);
   $$0108 = $32;$$0109 = $33;$$0112 = $$1113;$$0116 = $$1117;
  }
  $$0107 = 0;$$2114 = $$0112;$$2118 = $$0116;
  L21: while(1) {
   $34 = HEAP32[$0>>2]|0;
   $35 = ($34|0)==(0|0);
   do {
    if ($35) {
     $68 = 1;
    } else {
     $36 = ((($34)) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($34)) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37|0)==($39|0);
     if ($40) {
      $41 = HEAP32[$34>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_ii($43|0,($34|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break L21;
      } else {
       $$0$i$i$i$i = $44;
      }
     } else {
      $47 = HEAP32[$37>>2]|0;
      $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
      $$0$i$i$i$i = $48;
     }
     $49 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $50 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$49)|0);
     if ($50) {
      HEAP32[$0>>2] = 0;
      $68 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $68 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $51 = HEAP32[$1>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $$pre$i4$i$i151 = 0;$69 = 1;
   } else {
    $53 = ((($51)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($51)) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if ($57) {
     $58 = HEAP32[$51>>2]|0;
     $59 = ((($58)) + 36|0);
     $60 = HEAP32[$59>>2]|0;
     __THREW__ = 0;
     $61 = (invoke_ii($60|0,($51|0))|0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      break;
     } else {
      $$0$i$i2$i$i = $61;
     }
    } else {
     $64 = HEAP32[$54>>2]|0;
     $65 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($64)|0);
     $$0$i$i2$i$i = $65;
    }
    $66 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $67 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$66)|0);
    if ($67) {
     HEAP32[$1>>2] = 0;
     $$pre$i4$i$i151 = 0;$69 = 1;
    } else {
     $$pre$i4$i$i151 = $51;$69 = 0;
    }
   }
   $tmp$i$i = $68 ^ $69;
   $70 = ($$2118|0)!=(0);
   $71 = $70 & $tmp$i$i;
   $72 = HEAP32[$0>>2]|0;
   if (!($71)) {
    label = 30;
    break;
   }
   $105 = ((($72)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($72)) + 16|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($106|0)==($108|0);
   if ($109) {
    $110 = HEAP32[$72>>2]|0;
    $111 = ((($110)) + 36|0);
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    $113 = (invoke_ii($112|0,($72|0))|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    } else {
     $$0$i$i = $113;
    }
   } else {
    $116 = HEAP32[$106>>2]|0;
    $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
    $$0$i$i = $117;
   }
   if ($6) {
    $$0106 = $$0$i$i;
   } else {
    $118 = HEAP32[$4>>2]|0;
    $119 = ((($118)) + 28|0);
    $120 = HEAP32[$119>>2]|0;
    __THREW__ = 0;
    $121 = (invoke_iii($120|0,($4|0),($$0$i$i|0))|0);
    $122 = __THREW__; __THREW__ = 0;
    $123 = $122&1;
    if ($123) {
     break;
    } else {
     $$0106 = $121;
    }
   }
   $124 = (($$0107) + 1)|0;
   $$0104 = $2;$$0105$off0 = 0;$$1110 = $$0132;$$3115 = $$2114;$$3119 = $$2118;
   while(1) {
    $125 = ($$0104|0)==($3|0);
    if ($125) {
     break;
    }
    $126 = HEAP8[$$1110>>0]|0;
    $127 = ($126<<24>>24)==(1);
    do {
     if ($127) {
      $128 = ((($$0104)) + 8|0);
      $129 = ((($128)) + 3|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = ($130<<24>>24)<(0);
      if ($131) {
       $132 = HEAP32[$$0104>>2]|0;
       $134 = $132;
      } else {
       $134 = $$0104;
      }
      $133 = (($134) + ($$0107<<2)|0);
      $135 = HEAP32[$133>>2]|0;
      if ($6) {
       $$0103 = $135;
      } else {
       $136 = HEAP32[$4>>2]|0;
       $137 = ((($136)) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       __THREW__ = 0;
       $139 = (invoke_iii($138|0,($4|0),($135|0))|0);
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        break L21;
       } else {
        $$0103 = $139;
       }
      }
      $142 = ($$0106|0)==($$0103|0);
      $143 = (($$3119) + -1)|0;
      if (!($142)) {
       HEAP8[$$1110>>0] = 0;
       $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $143;
       break;
      }
      $144 = HEAP8[$129>>0]|0;
      $145 = ($144<<24>>24)<(0);
      if ($145) {
       $146 = ((($$0104)) + 4|0);
       $147 = HEAP32[$146>>2]|0;
       $150 = $147;
      } else {
       $148 = $144&255;
       $150 = $148;
      }
      $149 = ($150|0)==($124|0);
      if ($149) {
       $151 = (($$3115) + 1)|0;
       HEAP8[$$1110>>0] = 2;
       $$2$off0 = 1;$$5 = $151;$$5121 = $143;
      } else {
       $$2$off0 = 1;$$5 = $$3115;$$5121 = $$3119;
      }
     } else {
      $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $$3119;
     }
    } while(0);
    $152 = ((($$0104)) + 12|0);
    $153 = ((($$1110)) + 1|0);
    $$0104 = $152;$$0105$off0 = $$2$off0;$$1110 = $153;$$3115 = $$5;$$3119 = $$5121;
   }
   if (!($$0105$off0)) {
    $$0107 = $124;$$2114 = $$3115;$$2118 = $$3119;
    continue;
   }
   $154 = HEAP32[$0>>2]|0;
   $155 = ((($154)) + 12|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ((($154)) + 16|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($156|0)==($158|0);
   if ($159) {
    $160 = HEAP32[$154>>2]|0;
    $161 = ((($160)) + 40|0);
    $162 = HEAP32[$161>>2]|0;
    __THREW__ = 0;
    (invoke_ii($162|0,($154|0))|0);
    $163 = __THREW__; __THREW__ = 0;
    $164 = $163&1;
    if ($164) {
     break;
    }
   } else {
    $165 = ((($156)) + 4|0);
    HEAP32[$155>>2] = $165;
    $166 = HEAP32[$156>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($166)|0);
   }
   $167 = (($$3115) + ($$3119))|0;
   $168 = ($167>>>0)>(1);
   if ($168) {
    $$0 = $2;$$2111 = $$0132;$$6 = $$3115;
   } else {
    $$0107 = $124;$$2114 = $$3115;$$2118 = $$3119;
    continue;
   }
   while(1) {
    $169 = ($$0|0)==($3|0);
    if ($169) {
     $$0107 = $124;$$2114 = $$6;$$2118 = $$3119;
     continue L21;
    }
    $170 = HEAP8[$$2111>>0]|0;
    $171 = ($170<<24>>24)==(2);
    if ($171) {
     $172 = ((($$0)) + 8|0);
     $173 = ((($172)) + 3|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = ($174<<24>>24)<(0);
     if ($175) {
      $176 = ((($$0)) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $180 = $177;
     } else {
      $178 = $174&255;
      $180 = $178;
     }
     $179 = ($180|0)==($124|0);
     if ($179) {
      $$7 = $$6;
     } else {
      $181 = (($$6) + -1)|0;
      HEAP8[$$2111>>0] = 0;
      $$7 = $181;
     }
    } else {
     $$7 = $$6;
    }
    $182 = ((($$0)) + 12|0);
    $183 = ((($$2111)) + 1|0);
    $$0 = $182;$$2111 = $183;$$6 = $$7;
   }
  }
  L87: do {
   if ((label|0) == 30) {
    $73 = ($72|0)==(0|0);
    do {
     if ($73) {
      $199 = 1;
     } else {
      $74 = ((($72)) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($72)) + 16|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75|0)==($77|0);
      if ($78) {
       $79 = HEAP32[$72>>2]|0;
       $80 = ((($79)) + 36|0);
       $81 = HEAP32[$80>>2]|0;
       __THREW__ = 0;
       $82 = (invoke_ii($81|0,($72|0))|0);
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       if ($84) {
        break L87;
       } else {
        $$0$i$i$i$i143 = $82;
       }
      } else {
       $85 = HEAP32[$75>>2]|0;
       $86 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($85)|0);
       $$0$i$i$i$i143 = $86;
      }
      $87 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $88 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i143,$87)|0);
      if ($88) {
       HEAP32[$0>>2] = 0;
       $199 = 1;
       break;
      } else {
       $$pre$i$i$i145 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i146 = ($$pre$i$i$i145|0)==(0|0);
       $199 = $phitmp$i$i$i146;
       break;
      }
     }
    } while(0);
    $89 = ($$pre$i4$i$i151|0)==(0|0);
    do {
     if ($89) {
      label = 77;
     } else {
      $90 = ((($$pre$i4$i$i151)) + 12|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ((($$pre$i4$i$i151)) + 16|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ($91|0)==($93|0);
      if ($94) {
       $95 = HEAP32[$$pre$i4$i$i151>>2]|0;
       $96 = ((($95)) + 36|0);
       $97 = HEAP32[$96>>2]|0;
       __THREW__ = 0;
       $98 = (invoke_ii($97|0,($$pre$i4$i$i151|0))|0);
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if ($100) {
        break L87;
       } else {
        $$0$i$i2$i$i149 = $98;
       }
      } else {
       $101 = HEAP32[$91>>2]|0;
       $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
       $$0$i$i2$i$i149 = $102;
      }
      $103 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $104 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i149,$103)|0);
      if ($104) {
       HEAP32[$1>>2] = 0;
       label = 77;
       break;
      } else {
       if ($199) {
        $$0133 = $2;$$3 = $$0132;
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($199) {
      label = 79;
     } else {
      $$0133 = $2;$$3 = $$0132;
     }
    }
    if ((label|0) == 79) {
     $184 = HEAP32[$5>>2]|0;
     $185 = $184 | 2;
     HEAP32[$5>>2] = $185;
     $$0133 = $2;$$3 = $$0132;
    }
    while(1) {
     $186 = ($$0133|0)==($3|0);
     if ($186) {
      label = 83;
      break;
     }
     $187 = HEAP8[$$3>>0]|0;
     $188 = ($187<<24>>24)==(2);
     if ($188) {
      $$0133197 = $$0133;
      break;
     }
     $189 = ((($$0133)) + 12|0);
     $190 = ((($$3)) + 1|0);
     $$0133 = $189;$$3 = $190;
    }
    if ((label|0) == 83) {
     $191 = HEAP32[$5>>2]|0;
     $192 = $191 | 4;
     HEAP32[$5>>2] = $192;
     $$0133197 = $3;
    }
    $193 = ($$sroa$0165$0|0)==(0);
    if (!($193)) {
     $194 = $$sroa$0165$0;
     _free($194);
    }
    STACKTOP = sp;return ($$0133197|0);
   }
  } while(0);
  $195 = ___cxa_find_matching_catch_2()|0;
  $196 = tempRet0;
  $197 = ($$sroa$0165$0|0)==(0);
  if ($197) {
   $$sink140$sink141205$index = $195;$$sink140$sink141205$index5 = $196;
  } else {
   $198 = $$sroa$0165$0;
   _free($198);
   $$sink140$sink141205$index = $195;$$sink140$sink141205$index5 = $196;
  }
 }
 ___resumeException($$sink140$sink141205$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$pr = 0, $$pr$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$014$0 = 0, $$sroa$014$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $15;
   $16 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
   $$sroa$0$0 = $17;
  } else {
   __ZNKSt3__28ios_base6getlocEv($6,$2);
   __THREW__ = 0;
   $18 = (invoke_iii(354,($6|0),(20176|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   do {
    if ($20) {
     $40 = ___cxa_find_matching_catch_2()|0;
     $41 = tempRet0;
     __ZNSt3__26localeD2Ev($6);
     $$0 = $41;$$011 = $40;
    } else {
     __ZNSt3__26localeD2Ev($6);
     $21 = HEAP32[$18>>2]|0;
     if ($4) {
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      FUNCTION_TABLE_vii[$23 & 1023]($7,$18);
     } else {
      $24 = ((($21)) + 28|0);
      $25 = HEAP32[$24>>2]|0;
      FUNCTION_TABLE_vii[$25 & 1023]($7,$18);
     }
     $26 = ((($7)) + 11|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)<(0);
     if ($28) {
      $29 = HEAP32[$7>>2]|0;
      $$pr = $27;$$sroa$014$0$ph = $29;
      label = 9;
     } else {
      $$sroa$014$0 = $7;$31 = $27;
     }
     while(1) {
      if ((label|0) == 9) {
       label = 0;
       $$sroa$014$0 = $$sroa$014$0$ph;$31 = $$pr;
      }
      $30 = ($31<<24>>24)<(0);
      $32 = HEAP32[$7>>2]|0;
      $33 = ((($7)) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $31&255;
      $36 = $30 ? $32 : $7;
      $37 = $30 ? $34 : $35;
      $38 = (($36) + ($37)|0);
      $39 = ($$sroa$014$0|0)==($38|0);
      if ($39) {
       label = 11;
       break;
      }
      $42 = HEAP8[$$sroa$014$0>>0]|0;
      $43 = HEAP32[$1>>2]|0;
      $44 = ($43|0)==(0|0);
      if (!($44)) {
       $45 = ((($43)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ((($43)) + 28|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($46|0)==($48|0);
       if ($49) {
        $50 = HEAP32[$43>>2]|0;
        $51 = ((($50)) + 52|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
        __THREW__ = 0;
        $54 = (invoke_iii($52|0,($43|0),($53|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         label = 20;
         break;
        } else {
         $$0$i$i = $54;
        }
       } else {
        $57 = ((($46)) + 1|0);
        HEAP32[$45>>2] = $57;
        HEAP8[$46>>0] = $42;
        $58 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($42)|0);
        $$0$i$i = $58;
       }
       $59 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $60 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$59)|0);
       if ($60) {
        HEAP32[$1>>2] = 0;
       }
      }
      $61 = ((($$sroa$014$0)) + 1|0);
      $$pr$pre = HEAP8[$26>>0]|0;
      $$pr = $$pr$pre;$$sroa$014$0$ph = $61;
      label = 9;
     }
     if ((label|0) == 11) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 20) {
      $62 = ___cxa_find_matching_catch_2()|0;
      $63 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      $$0 = $63;$$011 = $62;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 47|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15957>>0]|0;HEAP8[$5+1>>0]=HEAP8[15957+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15957+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15957+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15957+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15957+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15963,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __THREW__ = 0;
 invoke_viiiiiii(453,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  __ZNSt3__26localeD2Ev($10);
  ___resumeException($25|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($10);
  $21 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $24 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$22,$23,$2,$3)|0);
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15954,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __THREW__ = 0;
 invoke_viiiiiii(453,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  __ZNSt3__26localeD2Ev($11);
  ___resumeException($34|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($11);
  $30 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $30;
  $31 = HEAP32[$9>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $33 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$31,$32,$2,$3)|0);
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $5 = sp + 60|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15957>>0]|0;HEAP8[$5+1>>0]=HEAP8[15957+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15957+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15957+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15957+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15957+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15963,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __THREW__ = 0;
 invoke_viiiiiii(453,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  __ZNSt3__26localeD2Ev($10);
  ___resumeException($25|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($10);
  $21 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $24 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$22,$23,$2,$3)|0);
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 79|0;
 $8 = sp + 36|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15954,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __THREW__ = 0;
 invoke_viiiiiii(453,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  __ZNSt3__26localeD2Ev($11);
  ___resumeException($34|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($11);
  $30 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $30;
  $31 = HEAP32[$9>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $33 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$31,$32,$2,$3)|0);
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24989 = 0, $$25288 = 0, $$45491 = 0, $$492 = 0, $$byval_copy = 0, $$pre = 0, $$pre81 = 0, $$pre82 = 0, $$pre82$pre = 0, $$pre8284 = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,23132,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(432)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(454,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(432)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(454,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8284 = $43;$$sroa$071$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(449);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8284 = $48;$$sroa$071$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45491 = $36;$$492 = $35;
  } else {
   $$pre81 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8284 = $$pre81;$$sroa$071$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8284) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8284,$49,$2)|0);
  $51 = ($$pre8284|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$060$0 = 0;$62 = $6;
    label = 22;
   } else {
    $52 = $$2 << 1;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(449);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24989 = $57;$$25288 = $58;
       break L22;
      } else {
       $$pre82$pre = HEAP32[$7>>2]|0;
       $$pre82 = $$pre82$pre;
       break;
      }
     } else {
      $$pre82 = $$pre8284;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$060$0 = $59;$62 = $$pre82;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(353,($11|0),($2|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   do {
    if ($61) {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $$047 = $75;$$050 = $76;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(455,($62|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $77 = ___cxa_find_matching_catch_2()|0;
      $78 = tempRet0;
      __ZNSt3__26localeD2Ev($11);
      $$047 = $77;$$050 = $78;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($11);
     $65 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $65;
     $66 = HEAP32[$9>>2]|0;
     $67 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $68 = (invoke_iiiiiii(383,($$byval_copy|0),($$046|0),($66|0),($67|0),($2|0),($3|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $$148 = $79;$$151 = $80;
      break;
     }
     HEAP32[$1>>2] = $68;
     $71 = ($$sroa$060$0|0)==(0);
     if (!($71)) {
      $72 = $$sroa$060$0;
      _free($72);
     }
     $73 = ($$sroa$071$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$071$0;
      _free($74);
     }
     STACKTOP = sp;return ($68|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $81 = ($$sroa$060$0|0)==(0);
   if ($81) {
    $$24989 = $$148;$$25288 = $$151;
   } else {
    $82 = $$sroa$060$0;
    _free($82);
    $$24989 = $$148;$$25288 = $$151;
   }
  }
  $83 = ($$sroa$071$0|0)==(0);
  if ($83) {
   $$45491 = $$25288;$$492 = $$24989;
  } else {
   $84 = $$sroa$071$0;
   _free($84);
   $$45491 = $$25288;$$492 = $$24989;
  }
 }
 ___resumeException($$492|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24989 = 0, $$25288 = 0, $$45491 = 0, $$492 = 0, $$byval_copy = 0, $$pre = 0, $$pre81 = 0, $$pre82 = 0, $$pre82$pre = 0, $$pre8284 = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 138|0;
 $7 = sp + 72|0;
 $8 = sp + 80|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,15952,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(432)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(454,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(432)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(454,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8284 = $43;$$sroa$071$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(449);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8284 = $48;$$sroa$071$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45491 = $36;$$492 = $35;
  } else {
   $$pre81 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8284 = $$pre81;$$sroa$071$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8284) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8284,$49,$2)|0);
  $51 = ($$pre8284|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$060$0 = 0;$62 = $6;
    label = 22;
   } else {
    $52 = $$2 << 1;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(449);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24989 = $57;$$25288 = $58;
       break L22;
      } else {
       $$pre82$pre = HEAP32[$7>>2]|0;
       $$pre82 = $$pre82$pre;
       break;
      }
     } else {
      $$pre82 = $$pre8284;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$060$0 = $59;$62 = $$pre82;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(353,($11|0),($2|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   do {
    if ($61) {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $$047 = $75;$$050 = $76;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(455,($62|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $77 = ___cxa_find_matching_catch_2()|0;
      $78 = tempRet0;
      __ZNSt3__26localeD2Ev($11);
      $$047 = $77;$$050 = $78;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($11);
     $65 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $65;
     $66 = HEAP32[$9>>2]|0;
     $67 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $68 = (invoke_iiiiiii(383,($$byval_copy|0),($$046|0),($66|0),($67|0),($2|0),($3|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $$148 = $79;$$151 = $80;
      break;
     }
     HEAP32[$1>>2] = $68;
     $71 = ($$sroa$060$0|0)==(0);
     if (!($71)) {
      $72 = $$sroa$060$0;
      _free($72);
     }
     $73 = ($$sroa$071$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$071$0;
      _free($74);
     }
     STACKTOP = sp;return ($68|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $81 = ($$sroa$060$0|0)==(0);
   if ($81) {
    $$24989 = $$148;$$25288 = $$151;
   } else {
    $82 = $$sroa$060$0;
    _free($82);
    $$24989 = $$148;$$25288 = $$151;
   }
  }
  $83 = ($$sroa$071$0|0)==(0);
  if ($83) {
   $$45491 = $$25288;$$492 = $$24989;
  } else {
   $84 = $$sroa$071$0;
   _free($84);
   $$45491 = $$25288;$$492 = $$24989;
  }
 }
 ___resumeException($$492|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $5 = sp + 76|0;
 $6 = sp + 56|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15946>>0]|0;HEAP8[$5+1>>0]=HEAP8[15946+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15946+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15946+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15946+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15946+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __THREW__ = 0;
 $14 = (invoke_iii(354,($8|0),(20160|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($28|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($8);
  $17 = HEAP32[$14>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  (FUNCTION_TABLE_iiiii[$19 & 511]($14,$6,$12,$7)|0);
  $20 = (($7) + ($11)|0);
  $21 = ($13|0)==($12|0);
  $22 = $6;
  $23 = $13;
  $24 = (($23) - ($22))|0;
  $25 = (($7) + ($24)|0);
  $$0 = $21 ? $20 : $25;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $26;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $27 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$20,$2,$3)|0);
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (___uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  __THREW__ = 0;
  (invoke_ii(435,($5|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch_3(0|0)|0;
   $11 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   $7 = ((($0)) + 1|0);
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = HEAP8[$7>>0]|0;
    switch ($13<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 6;
     break L1;
    }
    }
    $14 = ((($0)) + 2|0);
    $$0 = $14;
   } else {
    label = 6;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 6;
  }
  }
 } while(0);
 if ((label|0) == 6) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$027$off0$ph = 0, $$1 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $$sink1 = 0, $$sink1$sink = 0, $$sink2 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($10|0)!=(0);
 $12 = ($9|0)==(260);
 if ($12) {
  $$027$off0$ph = 0;$$2$ph = $$1;
 } else {
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $14 = ((($$1)) + 2|0);
  HEAP8[$13>>0] = 42;
  $$027$off0$ph = 1;$$2$ph = $14;
 }
 $$026 = $1;$$2 = $$2$ph;
 while(1) {
  $15 = HEAP8[$$026>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   break;
  }
  $17 = ((($$026)) + 1|0);
  $18 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $15;
  $$026 = $17;$$2 = $18;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $$sink = $11 ? 70 : 102;
   $$sink1$sink = $$sink;
   break;
  }
  case 256:  {
   $$sink1 = $11 ? 69 : 101;
   $$sink1$sink = $$sink1;
   break;
  }
  default: {
   if ($12) {
    $$sink2 = $11 ? 65 : 97;
    $$sink1$sink = $$sink2;
    break L14;
   } else {
    $$sink3 = $11 ? 71 : 103;
    $$sink1$sink = $$sink3;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$$2>>0] = $$sink1$sink;
 return ($$027$off0$ph|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 __THREW__ = 0;
 $5 = (invoke_iiii(456,($0|0),($2|0),($3|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  $15 = ($4|0)==(0|0);
  if (!($15)) {
   __THREW__ = 0;
   (invoke_ii(435,($4|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch_3(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
  }
  ___resumeException($13|0);
  // unreachable;
 } else {
  $8 = ($4|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(435,($4|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_3(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0108 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i130 = 0, $$0108 = 0, $$0109 = 0, $$0111 = 0, $$0113 = 0, $$07$i$i = 0, $$07$i$i129 = 0, $$1 = 0, $$1110 = 0, $$1112 = 0, $$1114 = 0, $$2 = 0, $$2115 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20160)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20176)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = HEAP32[$8>>2]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = ((($0)) + 1|0);
   $21 = HEAP32[$5>>2]|0;
   $22 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $22;
   HEAP8[$21>>0] = $17;
   $$0111 = $20;
   label = 4;
  }
  break;
 }
 default: {
  $$0111 = $0;
  label = 4;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $23 = $2;
   $24 = $$0111;
   $25 = (($23) - ($24))|0;
   $26 = ($25|0)>(1);
   L6: do {
    if ($26) {
     $27 = HEAP8[$$0111>>0]|0;
     $28 = ($27<<24>>24)==(48);
     if ($28) {
      $29 = ((($$0111)) + 1|0);
      $30 = HEAP8[$29>>0]|0;
      switch ($30<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$1114 = $$0111;
       label = 15;
       break L6;
      }
      }
      $31 = HEAP32[$8>>2]|0;
      $32 = ((($31)) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      $34 = (invoke_iii($33|0,($8|0),48)|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break L4;
      }
      $37 = HEAP32[$5>>2]|0;
      $38 = ((($37)) + 1|0);
      HEAP32[$5>>2] = $38;
      HEAP8[$37>>0] = $34;
      $39 = ((($$0111)) + 2|0);
      $40 = HEAP8[$29>>0]|0;
      $41 = HEAP32[$8>>2]|0;
      $42 = ((($41)) + 28|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_iii($43|0,($8|0),($40|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break L4;
      }
      $47 = HEAP32[$5>>2]|0;
      $48 = ((($47)) + 1|0);
      HEAP32[$5>>2] = $48;
      HEAP8[$47>>0] = $44;
      $$0113 = $39;
      while(1) {
       $49 = ($$0113>>>0)<($2>>>0);
       if (!($49)) {
        $$1112 = $39;$$2115 = $$0113;
        break L6;
       }
       $50 = HEAP8[$$0113>>0]|0;
       __THREW__ = 0;
       $51 = (invoke_i(432)|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break L4;
       }
       $54 = $50 << 24 >> 24;
       __THREW__ = 0;
       $55 = (invoke_iii(457,($54|0),($51|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        break L4;
       }
       $58 = ($55|0)==(0);
       if ($58) {
        $$1112 = $39;$$2115 = $$0113;
        break L6;
       }
       $59 = ((($$0113)) + 1|0);
       $$0113 = $59;
      }
     } else {
      $$1114 = $$0111;
      label = 15;
     }
    } else {
     $$1114 = $$0111;
     label = 15;
    }
   } while(0);
   L18: do {
    if ((label|0) == 15) {
     while(1) {
      label = 0;
      $60 = ($$1114>>>0)<($2>>>0);
      if (!($60)) {
       $$1112 = $$0111;$$2115 = $$1114;
       break L18;
      }
      $61 = HEAP8[$$1114>>0]|0;
      __THREW__ = 0;
      $62 = (invoke_i(432)|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L4;
      }
      $65 = $61 << 24 >> 24;
      __THREW__ = 0;
      $66 = (invoke_iii(458,($65|0),($62|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L4;
      }
      $69 = ($66|0)==(0);
      if ($69) {
       $$1112 = $$0111;$$2115 = $$1114;
       break L18;
      }
      $70 = ((($$1114)) + 1|0);
      $$1114 = $70;
      label = 15;
     }
    }
   } while(0);
   $71 = ((($7)) + 11|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = ((($7)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $72&255;
   $77 = $73 ? $75 : $76;
   $78 = ($77|0)==(0);
   $79 = $$1112;
   $80 = $0;
   L26: do {
    if ($78) {
     $81 = HEAP32[$5>>2]|0;
     $82 = HEAP32[$8>>2]|0;
     $83 = ((($82)) + 32|0);
     $84 = HEAP32[$83>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($84|0,($8|0),($$1112|0),($$2115|0),($81|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      break L4;
     }
     $87 = $$2115;
     $88 = (($87) - ($79))|0;
     $89 = HEAP32[$5>>2]|0;
     $90 = (($89) + ($88)|0);
     HEAP32[$5>>2] = $90;
     $$pre$phiZ2D = $8;
    } else {
     $91 = ($$1112|0)==($$2115|0);
     L30: do {
      if (!($91)) {
       $$0$i$i = $$2115;$$07$i$i = $$1112;
       while(1) {
        $92 = ((($$0$i$i)) + -1|0);
        $93 = ($$07$i$i>>>0)<($92>>>0);
        if (!($93)) {
         break L30;
        }
        $94 = HEAP8[$$07$i$i>>0]|0;
        $95 = HEAP8[$92>>0]|0;
        HEAP8[$$07$i$i>>0] = $95;
        HEAP8[$92>>0] = $94;
        $96 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $92;$$07$i$i = $96;
       }
      }
     } while(0);
     $97 = HEAP32[$9>>2]|0;
     $98 = ((($97)) + 16|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($9|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      break L4;
     }
     $$0 = $$1112;$$0108 = 0;$$0109 = 0;
     while(1) {
      $103 = ($$0>>>0)<($$2115>>>0);
      if (!($103)) {
       break;
      }
      $113 = HEAP8[$71>>0]|0;
      $114 = ($113<<24>>24)<(0);
      $115 = HEAP32[$7>>2]|0;
      $116 = $114 ? $115 : $7;
      $117 = (($116) + ($$0108)|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = ($118<<24>>24)>(0);
      $120 = $118 << 24 >> 24;
      $121 = ($$0109|0)==($120|0);
      $or$cond = $119 & $121;
      if ($or$cond) {
       $122 = HEAP32[$5>>2]|0;
       $123 = ((($122)) + 1|0);
       HEAP32[$5>>2] = $123;
       HEAP8[$122>>0] = $100;
       $124 = HEAP8[$71>>0]|0;
       $125 = ($124<<24>>24)<(0);
       $126 = HEAP32[$74>>2]|0;
       $127 = $124&255;
       $128 = $125 ? $126 : $127;
       $129 = (($128) + -1)|0;
       $130 = ($$0108>>>0)<($129>>>0);
       $131 = $130&1;
       $$$0108 = (($131) + ($$0108))|0;
       $$1 = $$$0108;$$1110 = 0;
      } else {
       $$1 = $$0108;$$1110 = $$0109;
      }
      $132 = HEAP8[$$0>>0]|0;
      $133 = HEAP32[$8>>2]|0;
      $134 = ((($133)) + 28|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_iii($135|0,($8|0),($132|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break L4;
      }
      $139 = HEAP32[$5>>2]|0;
      $140 = ((($139)) + 1|0);
      HEAP32[$5>>2] = $140;
      HEAP8[$139>>0] = $136;
      $141 = (($$1110) + 1)|0;
      $142 = ((($$0)) + 1|0);
      $$0 = $142;$$0108 = $$1;$$0109 = $141;
     }
     $104 = (($79) - ($80))|0;
     $105 = (($3) + ($104)|0);
     $106 = HEAP32[$5>>2]|0;
     $107 = ($105|0)==($106|0);
     if ($107) {
      $$pre$phiZ2D = $8;
     } else {
      $$0$i$i130 = $106;$$07$i$i129 = $105;
      while(1) {
       $108 = ((($$0$i$i130)) + -1|0);
       $109 = ($$07$i$i129>>>0)<($108>>>0);
       if (!($109)) {
        $$pre$phiZ2D = $8;
        break L26;
       }
       $110 = HEAP8[$$07$i$i129>>0]|0;
       $111 = HEAP8[$108>>0]|0;
       HEAP8[$$07$i$i129>>0] = $111;
       HEAP8[$108>>0] = $110;
       $112 = ((($$07$i$i129)) + 1|0);
       $$0$i$i130 = $108;$$07$i$i129 = $112;
      }
     }
    }
   } while(0);
   $$2 = $$2115;
   while(1) {
    $143 = ($$2>>>0)<($2>>>0);
    if (!($143)) {
     $$3 = $$2;
     break;
    }
    $144 = HEAP8[$$2>>0]|0;
    $145 = ($144<<24>>24)==(46);
    $146 = ((($$2)) + 1|0);
    if ($145) {
     label = 39;
     break;
    }
    $155 = HEAP32[$$pre$phiZ2D>>2]|0;
    $156 = ((($155)) + 28|0);
    $157 = HEAP32[$156>>2]|0;
    __THREW__ = 0;
    $158 = (invoke_iii($157|0,($8|0),($144|0))|0);
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     break L4;
    }
    $161 = HEAP32[$5>>2]|0;
    $162 = ((($161)) + 1|0);
    HEAP32[$5>>2] = $162;
    HEAP8[$161>>0] = $158;
    $$2 = $146;
   }
   if ((label|0) == 39) {
    $147 = HEAP32[$9>>2]|0;
    $148 = ((($147)) + 12|0);
    $149 = HEAP32[$148>>2]|0;
    __THREW__ = 0;
    $150 = (invoke_ii($149|0,($9|0))|0);
    $151 = __THREW__; __THREW__ = 0;
    $152 = $151&1;
    if ($152) {
     break;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 1|0);
    HEAP32[$5>>2] = $154;
    HEAP8[$153>>0] = $150;
    $$3 = $146;
   }
   $163 = HEAP32[$5>>2]|0;
   $164 = HEAP32[$8>>2]|0;
   $165 = ((($164)) + 32|0);
   $166 = HEAP32[$165>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($166|0,($8|0),($$3|0),($2|0),($163|0))|0);
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   if (!($168)) {
    $169 = $$3;
    $170 = (($23) - ($169))|0;
    $171 = HEAP32[$5>>2]|0;
    $172 = (($171) + ($170)|0);
    HEAP32[$5>>2] = $172;
    $173 = ($1|0)==($2|0);
    $174 = $1;
    $175 = (($174) - ($80))|0;
    $176 = (($3) + ($175)|0);
    $storemerge = $173 ? $172 : $176;
    HEAP32[$4>>2] = $storemerge;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $177 = ___cxa_find_matching_catch_2()|0;
 $178 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($177|0);
 // unreachable;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$1 = 0, $$sink = 0, $$sink$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$014 = $1;$$1 = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$014 = $1;$$1 = $9;
 }
 while(1) {
  $10 = HEAP8[$$014>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$014)) + 1|0);
  $13 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = $10;
  $$014 = $12;$$1 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink$sink = 111;
  break;
 }
 case 8:  {
  $15 = $3 & 16384;
  $16 = ($15|0)!=(0);
  $$sink = $16 ? 88 : 120;
  $$sink$sink = $$sink;
  break;
 }
 default: {
  $$sink1 = $2 ? 100 : 117;
  $$sink$sink = $$sink1;
 }
 }
 HEAP8[$$1>>0] = $$sink$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$078 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i96 = 0, $$07$i$i = 0, $$07$i$i95 = 0, $$078 = 0, $$079 = 0, $$083 = 0, $$1 = 0, $$180 = 0, $$184 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20160)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20176)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 $21 = $2;
 $22 = $0;
 L1: do {
  if ($20) {
   $23 = HEAP32[$8>>2]|0;
   $24 = ((($23)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($25|0,($8|0),($0|0),($2|0),($3|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 28;
   } else {
    $28 = (($21) - ($22))|0;
    $29 = (($3) + ($28)|0);
    HEAP32[$5>>2] = $29;
    $122 = $29;
    label = 27;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $30 = HEAP8[$0>>0]|0;
   switch ($30<<24>>24) {
   case 43: case 45:  {
    $31 = HEAP32[$8>>2]|0;
    $32 = ((($31)) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    $34 = (invoke_iii($33|0,($8|0),($30|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 28;
     break L1;
    }
    $37 = ((($0)) + 1|0);
    $38 = HEAP32[$5>>2]|0;
    $39 = ((($38)) + 1|0);
    HEAP32[$5>>2] = $39;
    HEAP8[$38>>0] = $34;
    $$083 = $37;
    break;
   }
   default: {
    $$083 = $0;
   }
   }
   $40 = $$083;
   $41 = (($21) - ($40))|0;
   $42 = ($41|0)>(1);
   L9: do {
    if ($42) {
     $43 = HEAP8[$$083>>0]|0;
     $44 = ($43<<24>>24)==(48);
     if ($44) {
      $45 = ((($$083)) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      switch ($46<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$184 = $$083;
       break L9;
      }
      }
      $47 = HEAP32[$8>>2]|0;
      $48 = ((($47)) + 28|0);
      $49 = HEAP32[$48>>2]|0;
      __THREW__ = 0;
      $50 = (invoke_iii($49|0,($8|0),48)|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       label = 28;
       break L1;
      }
      $53 = HEAP32[$5>>2]|0;
      $54 = ((($53)) + 1|0);
      HEAP32[$5>>2] = $54;
      HEAP8[$53>>0] = $50;
      $55 = HEAP8[$45>>0]|0;
      $56 = HEAP32[$8>>2]|0;
      $57 = ((($56)) + 28|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      $59 = (invoke_iii($58|0,($8|0),($55|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 28;
       break L1;
      }
      $62 = ((($$083)) + 2|0);
      $63 = HEAP32[$5>>2]|0;
      $64 = ((($63)) + 1|0);
      HEAP32[$5>>2] = $64;
      HEAP8[$63>>0] = $59;
      $$184 = $62;
     } else {
      $$184 = $$083;
     }
    } else {
     $$184 = $$083;
    }
   } while(0);
   $65 = ($$184|0)==($2|0);
   L16: do {
    if (!($65)) {
     $$0$i$i = $2;$$07$i$i = $$184;
     while(1) {
      $66 = ((($$0$i$i)) + -1|0);
      $67 = ($$07$i$i>>>0)<($66>>>0);
      if (!($67)) {
       break L16;
      }
      $68 = HEAP8[$$07$i$i>>0]|0;
      $69 = HEAP8[$66>>0]|0;
      HEAP8[$$07$i$i>>0] = $69;
      HEAP8[$66>>0] = $68;
      $70 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $66;$$07$i$i = $70;
     }
    }
   } while(0);
   $71 = HEAP32[$9>>2]|0;
   $72 = ((($71)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   __THREW__ = 0;
   $74 = (invoke_ii($73|0,($9|0))|0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    label = 28;
   } else {
    $$0 = $$184;$$078 = 0;$$079 = 0;
    while(1) {
     $77 = ($$0>>>0)<($2>>>0);
     if (!($77)) {
      break;
     }
     $88 = HEAP8[$13>>0]|0;
     $89 = ($88<<24>>24)<(0);
     $90 = HEAP32[$7>>2]|0;
     $91 = $89 ? $90 : $7;
     $92 = (($91) + ($$078)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)!=(0);
     $95 = $93 << 24 >> 24;
     $96 = ($$079|0)==($95|0);
     $or$cond = $94 & $96;
     if ($or$cond) {
      $97 = HEAP32[$5>>2]|0;
      $98 = ((($97)) + 1|0);
      HEAP32[$5>>2] = $98;
      HEAP8[$97>>0] = $74;
      $99 = HEAP8[$13>>0]|0;
      $100 = ($99<<24>>24)<(0);
      $101 = HEAP32[$16>>2]|0;
      $102 = $99&255;
      $103 = $100 ? $101 : $102;
      $104 = (($103) + -1)|0;
      $105 = ($$078>>>0)<($104>>>0);
      $106 = $105&1;
      $$$078 = (($106) + ($$078))|0;
      $$1 = $$$078;$$180 = 0;
     } else {
      $$1 = $$078;$$180 = $$079;
     }
     $107 = HEAP8[$$0>>0]|0;
     $108 = HEAP32[$8>>2]|0;
     $109 = ((($108)) + 28|0);
     $110 = HEAP32[$109>>2]|0;
     __THREW__ = 0;
     $111 = (invoke_iii($110|0,($8|0),($107|0))|0);
     $112 = __THREW__; __THREW__ = 0;
     $113 = $112&1;
     if ($113) {
      label = 28;
      break L1;
     }
     $114 = HEAP32[$5>>2]|0;
     $115 = ((($114)) + 1|0);
     HEAP32[$5>>2] = $115;
     HEAP8[$114>>0] = $111;
     $116 = (($$180) + 1)|0;
     $117 = ((($$0)) + 1|0);
     $$0 = $117;$$078 = $$1;$$079 = $116;
    }
    $78 = $$184;
    $79 = (($78) - ($22))|0;
    $80 = (($3) + ($79)|0);
    $81 = HEAP32[$5>>2]|0;
    $82 = ($80|0)==($81|0);
    if ($82) {
     $122 = $80;
     label = 27;
    } else {
     $$0$i$i96 = $81;$$07$i$i95 = $80;
     while(1) {
      $83 = ((($$0$i$i96)) + -1|0);
      $84 = ($$07$i$i95>>>0)<($83>>>0);
      if (!($84)) {
       break;
      }
      $85 = HEAP8[$$07$i$i95>>0]|0;
      $86 = HEAP8[$83>>0]|0;
      HEAP8[$$07$i$i95>>0] = $86;
      HEAP8[$83>>0] = $85;
      $87 = ((($$07$i$i95)) + 1|0);
      $$0$i$i96 = $83;$$07$i$i95 = $87;
     }
     $$pre = HEAP32[$5>>2]|0;
     $122 = $$pre;
     label = 27;
    }
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $118 = ($1|0)==($2|0);
  $119 = $1;
  $120 = (($119) - ($22))|0;
  $121 = (($3) + ($120)|0);
  $storemerge = $118 ? $122 : $121;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  $123 = ___cxa_find_matching_catch_2()|0;
  $124 = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($123|0);
  // unreachable;
 }
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$014$0 = 0, $$sroa$014$0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $12 = HEAP32[$0>>2]|0;
   $13 = ((($12)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $15;
   $16 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $17 = (FUNCTION_TABLE_iiiiii[$14 & 511]($0,$$byval_copy,$2,$3,$16)|0);
   $$sroa$0$0 = $17;
  } else {
   __ZNKSt3__28ios_base6getlocEv($6,$2);
   __THREW__ = 0;
   $18 = (invoke_iii(354,($6|0),(20200|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   do {
    if ($20) {
     $41 = ___cxa_find_matching_catch_2()|0;
     $42 = tempRet0;
     __ZNSt3__26localeD2Ev($6);
     $$0 = $42;$$011 = $41;
    } else {
     __ZNSt3__26localeD2Ev($6);
     $21 = HEAP32[$18>>2]|0;
     if ($4) {
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      FUNCTION_TABLE_vii[$23 & 1023]($7,$18);
     } else {
      $24 = ((($21)) + 28|0);
      $25 = HEAP32[$24>>2]|0;
      FUNCTION_TABLE_vii[$25 & 1023]($7,$18);
     }
     $26 = ((($7)) + 8|0);
     $27 = ((($26)) + 3|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)<(0);
     $30 = HEAP32[$7>>2]|0;
     $$sroa$014$0$ph = $29 ? $30 : $7;
     $31 = ((($7)) + 4|0);
     $$sroa$014$0 = $$sroa$014$0$ph;$33 = $28;$37 = $30;
     while(1) {
      $32 = ($33<<24>>24)<(0);
      $34 = HEAP32[$31>>2]|0;
      $35 = $33&255;
      $36 = $32 ? $37 : $7;
      $38 = $32 ? $34 : $35;
      $39 = (($36) + ($38<<2)|0);
      $40 = ($$sroa$014$0|0)==($39|0);
      if ($40) {
       label = 9;
       break;
      }
      $43 = HEAP32[$$sroa$014$0>>2]|0;
      $44 = HEAP32[$1>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $46 = ((($44)) + 24|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ((($44)) + 28|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($47|0)==($49|0);
       if ($50) {
        $51 = HEAP32[$44>>2]|0;
        $52 = ((($51)) + 52|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
        __THREW__ = 0;
        $55 = (invoke_iii($53|0,($44|0),($54|0))|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 18;
         break;
        } else {
         $$0$i$i = $55;
        }
       } else {
        $58 = ((($47)) + 4|0);
        HEAP32[$46>>2] = $58;
        HEAP32[$47>>2] = $43;
        $59 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($43)|0);
        $$0$i$i = $59;
       }
       $60 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $61 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i,$60)|0);
       if ($61) {
        HEAP32[$1>>2] = 0;
       }
      }
      $62 = ((($$sroa$014$0)) + 4|0);
      $$pre = HEAP8[$27>>0]|0;
      $$pre19 = HEAP32[$7>>2]|0;
      $$sroa$014$0 = $62;$33 = $$pre;$37 = $$pre19;
     }
     if ((label|0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 18) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
      $$0 = $64;$$011 = $63;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 112|0;
 $vararg_buffer = sp;
 $5 = sp + 130|0;
 $6 = sp + 116|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15957>>0]|0;HEAP8[$5+1>>0]=HEAP8[15957+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15957+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15957+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15957+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15957+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15963,1,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,13,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __THREW__ = 0;
 invoke_viiiiiii(459,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  __ZNSt3__26localeD2Ev($10);
  ___resumeException($25|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($10);
  $21 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $24 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$22,$23,$2,$3)|0);
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15954,1,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __THREW__ = 0;
 invoke_viiiiiii(459,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  __ZNSt3__26localeD2Ev($11);
  ___resumeException($34|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($11);
  $30 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $30;
  $31 = HEAP32[$9>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $33 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$31,$32,$2,$3)|0);
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $5 = sp + 120|0;
 $6 = sp + 108|0;
 $7 = sp + 20|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15957>>0]|0;HEAP8[$5+1>>0]=HEAP8[15957+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15957+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15957+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15957+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15957+5>>0]|0;
 $12 = ((($5)) + 1|0);
 $13 = ((($2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($12,15963,0,$14);
 $15 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $16 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,12,$15,$5,$vararg_buffer)|0);
 $17 = (($6) + ($16)|0);
 $18 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$17,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($10,$2);
 __THREW__ = 0;
 invoke_viiiiiii(459,($6|0),($18|0),($17|0),($7|0),($8|0),($9|0),($10|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  __ZNSt3__26localeD2Ev($10);
  ___resumeException($25|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($10);
  $21 = HEAP32[$1>>2]|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP32[$9>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
  $24 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$22,$23,$2,$3)|0);
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $6 = sp;
 $7 = sp + 208|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($6)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($17,15954,0,$19);
 $20 = (__ZNSt3__26__clocEv()|0);
 $21 = $vararg_buffer;
 $22 = $21;
 HEAP32[$22>>2] = $4;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $5;
 $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($7,23,$20,$6,$vararg_buffer)|0);
 $26 = (($7) + ($25)|0);
 $27 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($7,$26,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($11,$2);
 __THREW__ = 0;
 invoke_viiiiiii(459,($7|0),($27|0),($26|0),($8|0),($9|0),($10|0),($11|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  __ZNSt3__26localeD2Ev($11);
  ___resumeException($34|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($11);
  $30 = HEAP32[$1>>2]|0;
  HEAP32[$12>>2] = $30;
  $31 = HEAP32[$9>>2]|0;
  $32 = HEAP32[$10>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $33 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$8,$31,$32,$2,$3)|0);
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24987 = 0, $$25286 = 0, $$45489 = 0, $$490 = 0, $$byval_copy = 0, $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre80$pre = 0, $$pre8082 = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,23132,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(432)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(454,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(432)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(454,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8082 = $43;$$sroa$069$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(449);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8082 = $48;$$sroa$069$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45489 = $36;$$490 = $35;
  } else {
   $$pre79 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8082 = $$pre79;$$sroa$069$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8082) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8082,$49,$2)|0);
  $51 = ($$pre8082|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$058$0 = 0;$62 = $6;
    label = 22;
   } else {
    $52 = $$2 << 3;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(449);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24987 = $57;$$25286 = $58;
       break L22;
      } else {
       $$pre80$pre = HEAP32[$7>>2]|0;
       $$pre80 = $$pre80$pre;
       break;
      }
     } else {
      $$pre80 = $$pre8082;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$058$0 = $59;$62 = $$pre80;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(353,($11|0),($2|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   do {
    if ($61) {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $$047 = $75;$$050 = $76;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(460,($62|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $77 = ___cxa_find_matching_catch_2()|0;
      $78 = tempRet0;
      __ZNSt3__26localeD2Ev($11);
      $$047 = $77;$$050 = $78;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($11);
     $65 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $65;
     $66 = HEAP32[$9>>2]|0;
     $67 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $68 = (invoke_iiiiiii(461,($$byval_copy|0),($$046|0),($66|0),($67|0),($2|0),($3|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $$148 = $79;$$151 = $80;
      break;
     }
     HEAP32[$1>>2] = $68;
     $71 = ($$sroa$058$0|0)==(0);
     if (!($71)) {
      $72 = $$sroa$058$0;
      _free($72);
     }
     $73 = ($$sroa$069$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$069$0;
      _free($74);
     }
     STACKTOP = sp;return ($68|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $81 = ($$sroa$058$0|0)==(0);
   if ($81) {
    $$24987 = $$148;$$25286 = $$151;
   } else {
    $82 = $$sroa$058$0;
    _free($82);
    $$24987 = $$148;$$25286 = $$151;
   }
  }
  $83 = ($$sroa$069$0|0)==(0);
  if ($83) {
   $$45489 = $$25286;$$490 = $$24987;
  } else {
   $84 = $$sroa$069$0;
   _free($84);
   $$45489 = $$25286;$$490 = $$24987;
  }
 }
 ___resumeException($$490|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$050 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24987 = 0, $$25286 = 0, $$45489 = 0, $$490 = 0, $$byval_copy = 0, $$pre = 0, $$pre79 = 0, $$pre80 = 0, $$pre80$pre = 0, $$pre8082 = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 304|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $5 = sp;
 $6 = sp + 308|0;
 $7 = sp + 300|0;
 $8 = sp + 72|0;
 $9 = sp + 68|0;
 $10 = sp + 64|0;
 $11 = sp + 60|0;
 $12 = sp + 56|0;
 $13 = $5;
 $14 = $13;
 HEAP32[$14>>2] = 37;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = 0;
 $17 = ((($5)) + 1|0);
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($17,15952,$19)|0);
 HEAP32[$7>>2] = $6;
 $21 = (__ZNSt3__26__clocEv()|0);
 if ($20) {
  $22 = ((($2)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer)|0);
  $$0 = $24;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $25 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,30,$21,$5,$vararg_buffer2)|0);
  $$0 = $25;
 }
 $26 = ($$0|0)>(29);
 do {
  if ($26) {
   if ($20) {
    __THREW__ = 0;
    $27 = (invoke_i(432)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = ((($2)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $31;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $32 = (invoke_iiiii(454,($7|0),($27|0),($5|0),($vararg_buffer5|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $$1 = $32;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $37 = (invoke_i(432)|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if (!($39)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $40 = (invoke_iiiii(454,($7|0),($37|0),($5|0),($vararg_buffer9|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if (!($42)) {
      $$1 = $40;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $43 = HEAP32[$7>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $45 = $43;
     $$2 = $$1;$$pre8082 = $43;$$sroa$069$0 = $45;
     label = 16;
     break;
    }
    __THREW__ = 0;
    invoke_v(449);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     $$pre = HEAP32[$7>>2]|0;
     $48 = $$pre;
     $$2 = $$1;$$pre8082 = $48;$$sroa$069$0 = $$pre;
     label = 16;
     break;
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   $$45489 = $36;$$490 = $35;
  } else {
   $$pre79 = HEAP32[$7>>2]|0;
   $$2 = $$0;$$pre8082 = $$pre79;$$sroa$069$0 = 0;
   label = 16;
  }
 } while(0);
 if ((label|0) == 16) {
  $49 = (($$pre8082) + ($$2)|0);
  $50 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($$pre8082,$49,$2)|0);
  $51 = ($$pre8082|0)==($6|0);
  L22: do {
   if ($51) {
    $$046 = $8;$$sroa$058$0 = 0;$62 = $6;
    label = 22;
   } else {
    $52 = $$2 << 3;
    $53 = (_malloc($52)|0);
    $54 = ($53|0)==(0|0);
    do {
     if ($54) {
      __THREW__ = 0;
      invoke_v(449);
      $55 = __THREW__; __THREW__ = 0;
      $56 = $55&1;
      if ($56) {
       $57 = ___cxa_find_matching_catch_2()|0;
       $58 = tempRet0;
       $$24987 = $57;$$25286 = $58;
       break L22;
      } else {
       $$pre80$pre = HEAP32[$7>>2]|0;
       $$pre80 = $$pre80$pre;
       break;
      }
     } else {
      $$pre80 = $$pre8082;
     }
    } while(0);
    $59 = $53;
    $$046 = $53;$$sroa$058$0 = $59;$62 = $$pre80;
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   __THREW__ = 0;
   invoke_vii(353,($11|0),($2|0));
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   do {
    if ($61) {
     $75 = ___cxa_find_matching_catch_2()|0;
     $76 = tempRet0;
     $$047 = $75;$$050 = $76;
     label = 32;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(460,($62|0),($50|0),($49|0),($$046|0),($9|0),($10|0),($11|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $77 = ___cxa_find_matching_catch_2()|0;
      $78 = tempRet0;
      __ZNSt3__26localeD2Ev($11);
      $$047 = $77;$$050 = $78;
      label = 32;
      break;
     }
     __ZNSt3__26localeD2Ev($11);
     $65 = HEAP32[$1>>2]|0;
     HEAP32[$12>>2] = $65;
     $66 = HEAP32[$9>>2]|0;
     $67 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
     $68 = (invoke_iiiiiii(461,($$byval_copy|0),($$046|0),($66|0),($67|0),($2|0),($3|0))|0);
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      $$148 = $79;$$151 = $80;
      break;
     }
     HEAP32[$1>>2] = $68;
     $71 = ($$sroa$058$0|0)==(0);
     if (!($71)) {
      $72 = $$sroa$058$0;
      _free($72);
     }
     $73 = ($$sroa$069$0|0)==(0);
     if (!($73)) {
      $74 = $$sroa$069$0;
      _free($74);
     }
     STACKTOP = sp;return ($68|0);
    }
   } while(0);
   if ((label|0) == 32) {
    $$148 = $$047;$$151 = $$050;
   }
   $81 = ($$sroa$058$0|0)==(0);
   if ($81) {
    $$24987 = $$148;$$25286 = $$151;
   } else {
    $82 = $$sroa$058$0;
    _free($82);
    $$24987 = $$148;$$25286 = $$151;
   }
  }
  $83 = ($$sroa$069$0|0)==(0);
  if ($83) {
   $$45489 = $$25286;$$490 = $$24987;
  } else {
   $84 = $$sroa$069$0;
   _free($84);
   $$45489 = $$25286;$$490 = $$24987;
  }
 }
 ___resumeException($$490|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $5 = sp + 184|0;
 $6 = sp + 164|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 ;HEAP8[$5>>0]=HEAP8[15946>>0]|0;HEAP8[$5+1>>0]=HEAP8[15946+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[15946+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[15946+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[15946+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[15946+5>>0]|0;
 $10 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $4;
 $11 = (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz($6,20,$10,$5,$vararg_buffer)|0);
 $12 = (($6) + ($11)|0);
 $13 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$12,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($8,$2);
 __THREW__ = 0;
 $14 = (invoke_iii(354,($8|0),(20192|0))|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($28|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($8);
  $17 = HEAP32[$14>>2]|0;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  (FUNCTION_TABLE_iiiii[$19 & 511]($14,$6,$12,$7)|0);
  $20 = (($7) + ($11<<2)|0);
  $21 = ($13|0)==($12|0);
  $22 = $6;
  $23 = $13;
  $24 = (($23) - ($22))|0;
  $25 = (($7) + ($24<<2)|0);
  $$0 = $21 ? $20 : $25;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $26;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $27 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$20,$2,$3)|0);
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$sroa$0$2 = 0;
  } else {
   $9 = $3;
   $10 = $1;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 2;
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($12|0);
   $16 = (($14) - ($12))|0;
   $$0 = $15 ? $16 : 0;
   $17 = $2;
   $18 = (($17) - ($10))|0;
   $19 = $18 >> 2;
   $20 = ($18|0)>(0);
   if ($20) {
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iiii[$23 & 1023]($7,$1,$19)|0);
    $25 = ($24|0)==($19|0);
    if (!($25)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $26 = ($$0|0)>(0);
   do {
    if ($26) {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($6,$$0,$5);
     $27 = ((($6)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$6>>2]|0;
     $32 = $30 ? $31 : $6;
     $33 = HEAP32[$7>>2]|0;
     $34 = ((($33)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iiii($35|0,($7|0),($32|0),($$0|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $40 = ___cxa_find_matching_catch_2()|0;
      $41 = tempRet0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      ___resumeException($40|0);
      // unreachable;
     }
     $39 = ($36|0)==($$0|0);
     if ($39) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $42 = (($9) - ($17))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(0);
   if ($44) {
    $45 = HEAP32[$7>>2]|0;
    $46 = ((($45)) + 48|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($7,$2,$43)|0);
    $49 = ($48|0)==($43|0);
    if (!($49)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$13>>2] = 0;
   $$sroa$0$2 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$0111 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i133 = 0, $$0111 = 0, $$0112 = 0, $$0114 = 0, $$0116 = 0, $$07$i$i = 0, $$07$i$i132 = 0, $$1 = 0, $$1113 = 0, $$1115 = 0, $$1117 = 0, $$2 = 0, $$2118 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20192)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20200)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 switch ($13<<24>>24) {
 case 43: case 45:  {
  $14 = HEAP32[$8>>2]|0;
  $15 = ((($14)) + 44|0);
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = ((($0)) + 1|0);
   $21 = HEAP32[$5>>2]|0;
   $22 = ((($21)) + 4|0);
   HEAP32[$5>>2] = $22;
   HEAP32[$21>>2] = $17;
   $$0114 = $20;
   label = 4;
  }
  break;
 }
 default: {
  $$0114 = $0;
  label = 4;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $23 = $2;
   $24 = $$0114;
   $25 = (($23) - ($24))|0;
   $26 = ($25|0)>(1);
   L6: do {
    if ($26) {
     $27 = HEAP8[$$0114>>0]|0;
     $28 = ($27<<24>>24)==(48);
     if ($28) {
      $29 = ((($$0114)) + 1|0);
      $30 = HEAP8[$29>>0]|0;
      switch ($30<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$1117 = $$0114;
       label = 15;
       break L6;
      }
      }
      $31 = HEAP32[$8>>2]|0;
      $32 = ((($31)) + 44|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      $34 = (invoke_iii($33|0,($8|0),48)|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       break L4;
      }
      $37 = HEAP32[$5>>2]|0;
      $38 = ((($37)) + 4|0);
      HEAP32[$5>>2] = $38;
      HEAP32[$37>>2] = $34;
      $39 = ((($$0114)) + 2|0);
      $40 = HEAP8[$29>>0]|0;
      $41 = HEAP32[$8>>2]|0;
      $42 = ((($41)) + 44|0);
      $43 = HEAP32[$42>>2]|0;
      __THREW__ = 0;
      $44 = (invoke_iii($43|0,($8|0),($40|0))|0);
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       break L4;
      }
      $47 = HEAP32[$5>>2]|0;
      $48 = ((($47)) + 4|0);
      HEAP32[$5>>2] = $48;
      HEAP32[$47>>2] = $44;
      $$0116 = $39;
      while(1) {
       $49 = ($$0116>>>0)<($2>>>0);
       if (!($49)) {
        $$1115 = $39;$$2118 = $$0116;
        break L6;
       }
       $50 = HEAP8[$$0116>>0]|0;
       __THREW__ = 0;
       $51 = (invoke_i(432)|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        break L4;
       }
       $54 = $50 << 24 >> 24;
       __THREW__ = 0;
       $55 = (invoke_iii(457,($54|0),($51|0))|0);
       $56 = __THREW__; __THREW__ = 0;
       $57 = $56&1;
       if ($57) {
        break L4;
       }
       $58 = ($55|0)==(0);
       if ($58) {
        $$1115 = $39;$$2118 = $$0116;
        break L6;
       }
       $59 = ((($$0116)) + 1|0);
       $$0116 = $59;
      }
     } else {
      $$1117 = $$0114;
      label = 15;
     }
    } else {
     $$1117 = $$0114;
     label = 15;
    }
   } while(0);
   L18: do {
    if ((label|0) == 15) {
     while(1) {
      label = 0;
      $60 = ($$1117>>>0)<($2>>>0);
      if (!($60)) {
       $$1115 = $$0114;$$2118 = $$1117;
       break L18;
      }
      $61 = HEAP8[$$1117>>0]|0;
      __THREW__ = 0;
      $62 = (invoke_i(432)|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L4;
      }
      $65 = $61 << 24 >> 24;
      __THREW__ = 0;
      $66 = (invoke_iii(458,($65|0),($62|0))|0);
      $67 = __THREW__; __THREW__ = 0;
      $68 = $67&1;
      if ($68) {
       break L4;
      }
      $69 = ($66|0)==(0);
      if ($69) {
       $$1115 = $$0114;$$2118 = $$1117;
       break L18;
      }
      $70 = ((($$1117)) + 1|0);
      $$1117 = $70;
      label = 15;
     }
    }
   } while(0);
   $71 = ((($7)) + 11|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)<(0);
   $74 = ((($7)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $72&255;
   $77 = $73 ? $75 : $76;
   $78 = ($77|0)==(0);
   $79 = $$1115;
   $80 = $0;
   L26: do {
    if ($78) {
     $81 = HEAP32[$5>>2]|0;
     $82 = HEAP32[$8>>2]|0;
     $83 = ((($82)) + 48|0);
     $84 = HEAP32[$83>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($84|0,($8|0),($$1115|0),($$2118|0),($81|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      break L4;
     }
     $87 = $$2118;
     $88 = (($87) - ($79))|0;
     $89 = HEAP32[$5>>2]|0;
     $90 = (($89) + ($88<<2)|0);
     HEAP32[$5>>2] = $90;
     $$pre$phiZ2D = $8;$177 = $90;
    } else {
     $91 = ($$1115|0)==($$2118|0);
     L30: do {
      if (!($91)) {
       $$0$i$i = $$2118;$$07$i$i = $$1115;
       while(1) {
        $92 = ((($$0$i$i)) + -1|0);
        $93 = ($$07$i$i>>>0)<($92>>>0);
        if (!($93)) {
         break L30;
        }
        $94 = HEAP8[$$07$i$i>>0]|0;
        $95 = HEAP8[$92>>0]|0;
        HEAP8[$$07$i$i>>0] = $95;
        HEAP8[$92>>0] = $94;
        $96 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $92;$$07$i$i = $96;
       }
      }
     } while(0);
     $97 = HEAP32[$9>>2]|0;
     $98 = ((($97)) + 16|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     $100 = (invoke_ii($99|0,($9|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      break L4;
     }
     $$0 = $$1115;$$0111 = 0;$$0112 = 0;
     while(1) {
      $103 = ($$0>>>0)<($$2118>>>0);
      if (!($103)) {
       break;
      }
      $113 = HEAP8[$71>>0]|0;
      $114 = ($113<<24>>24)<(0);
      $115 = HEAP32[$7>>2]|0;
      $116 = $114 ? $115 : $7;
      $117 = (($116) + ($$0111)|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = ($118<<24>>24)>(0);
      $120 = $118 << 24 >> 24;
      $121 = ($$0112|0)==($120|0);
      $or$cond = $119 & $121;
      if ($or$cond) {
       $122 = HEAP32[$5>>2]|0;
       $123 = ((($122)) + 4|0);
       HEAP32[$5>>2] = $123;
       HEAP32[$122>>2] = $100;
       $124 = HEAP32[$74>>2]|0;
       $125 = $113&255;
       $126 = $114 ? $124 : $125;
       $127 = (($126) + -1)|0;
       $128 = ($$0111>>>0)<($127>>>0);
       $129 = $128&1;
       $$$0111 = (($129) + ($$0111))|0;
       $$1 = $$$0111;$$1113 = 0;
      } else {
       $$1 = $$0111;$$1113 = $$0112;
      }
      $130 = HEAP8[$$0>>0]|0;
      $131 = HEAP32[$8>>2]|0;
      $132 = ((($131)) + 44|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_iii($133|0,($8|0),($130|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break L4;
      }
      $137 = HEAP32[$5>>2]|0;
      $138 = ((($137)) + 4|0);
      HEAP32[$5>>2] = $138;
      HEAP32[$137>>2] = $134;
      $139 = (($$1113) + 1)|0;
      $140 = ((($$0)) + 1|0);
      $$0 = $140;$$0111 = $$1;$$0112 = $139;
     }
     $104 = (($79) - ($80))|0;
     $105 = (($3) + ($104<<2)|0);
     $106 = HEAP32[$5>>2]|0;
     $107 = ($105|0)==($106|0);
     if ($107) {
      $$pre$phiZ2D = $8;$177 = $105;
     } else {
      $$0$i$i133 = $106;$$07$i$i132 = $105;
      while(1) {
       $108 = ((($$0$i$i133)) + -4|0);
       $109 = ($$07$i$i132>>>0)<($108>>>0);
       if (!($109)) {
        $$pre$phiZ2D = $8;$177 = $106;
        break L26;
       }
       $110 = HEAP32[$$07$i$i132>>2]|0;
       $111 = HEAP32[$108>>2]|0;
       HEAP32[$$07$i$i132>>2] = $111;
       HEAP32[$108>>2] = $110;
       $112 = ((($$07$i$i132)) + 4|0);
       $$0$i$i133 = $108;$$07$i$i132 = $112;
      }
     }
    }
   } while(0);
   $$2 = $$2118;$178 = $177;
   while(1) {
    $141 = ($$2>>>0)<($2>>>0);
    if (!($141)) {
     $$3 = $$2;$164 = $178;
     break;
    }
    $142 = HEAP8[$$2>>0]|0;
    $143 = ($142<<24>>24)==(46);
    $144 = ((($$2)) + 1|0);
    if ($143) {
     label = 39;
     break;
    }
    $153 = HEAP32[$$pre$phiZ2D>>2]|0;
    $154 = ((($153)) + 44|0);
    $155 = HEAP32[$154>>2]|0;
    __THREW__ = 0;
    $156 = (invoke_iii($155|0,($8|0),($142|0))|0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     break L4;
    }
    $159 = HEAP32[$5>>2]|0;
    $160 = ((($159)) + 4|0);
    HEAP32[$5>>2] = $160;
    HEAP32[$159>>2] = $156;
    $$2 = $144;$178 = $160;
   }
   if ((label|0) == 39) {
    $145 = HEAP32[$9>>2]|0;
    $146 = ((($145)) + 12|0);
    $147 = HEAP32[$146>>2]|0;
    __THREW__ = 0;
    $148 = (invoke_ii($147|0,($9|0))|0);
    $149 = __THREW__; __THREW__ = 0;
    $150 = $149&1;
    if ($150) {
     break;
    }
    $151 = HEAP32[$5>>2]|0;
    $152 = ((($151)) + 4|0);
    HEAP32[$5>>2] = $152;
    HEAP32[$151>>2] = $148;
    $$3 = $144;$164 = $152;
   }
   $161 = HEAP32[$8>>2]|0;
   $162 = ((($161)) + 48|0);
   $163 = HEAP32[$162>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($163|0,($8|0),($$3|0),($2|0),($164|0))|0);
   $165 = __THREW__; __THREW__ = 0;
   $166 = $165&1;
   if (!($166)) {
    $167 = $$3;
    $168 = (($23) - ($167))|0;
    $169 = HEAP32[$5>>2]|0;
    $170 = (($169) + ($168<<2)|0);
    HEAP32[$5>>2] = $170;
    $171 = ($1|0)==($2|0);
    $172 = $1;
    $173 = (($172) - ($80))|0;
    $174 = (($3) + ($173<<2)|0);
    $storemerge = $171 ? $170 : $174;
    HEAP32[$4>>2] = $storemerge;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $175 = ___cxa_find_matching_catch_2()|0;
 $176 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($175|0);
 // unreachable;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$081 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i99 = 0, $$07$i$i = 0, $$07$i$i98 = 0, $$081 = 0, $$082 = 0, $$086 = 0, $$1 = 0, $$183 = 0, $$187 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20192)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,20200)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 1023]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 $21 = $2;
 $22 = $0;
 L1: do {
  if ($20) {
   $23 = HEAP32[$8>>2]|0;
   $24 = ((($23)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($25|0,($8|0),($0|0),($2|0),($3|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 28;
   } else {
    $28 = (($21) - ($22))|0;
    $29 = (($3) + ($28<<2)|0);
    HEAP32[$5>>2] = $29;
    $120 = $29;
    label = 27;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $30 = HEAP8[$0>>0]|0;
   switch ($30<<24>>24) {
   case 43: case 45:  {
    $31 = HEAP32[$8>>2]|0;
    $32 = ((($31)) + 44|0);
    $33 = HEAP32[$32>>2]|0;
    __THREW__ = 0;
    $34 = (invoke_iii($33|0,($8|0),($30|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     label = 28;
     break L1;
    }
    $37 = ((($0)) + 1|0);
    $38 = HEAP32[$5>>2]|0;
    $39 = ((($38)) + 4|0);
    HEAP32[$5>>2] = $39;
    HEAP32[$38>>2] = $34;
    $$086 = $37;
    break;
   }
   default: {
    $$086 = $0;
   }
   }
   $40 = $$086;
   $41 = (($21) - ($40))|0;
   $42 = ($41|0)>(1);
   L9: do {
    if ($42) {
     $43 = HEAP8[$$086>>0]|0;
     $44 = ($43<<24>>24)==(48);
     if ($44) {
      $45 = ((($$086)) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      switch ($46<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       $$187 = $$086;
       break L9;
      }
      }
      $47 = HEAP32[$8>>2]|0;
      $48 = ((($47)) + 44|0);
      $49 = HEAP32[$48>>2]|0;
      __THREW__ = 0;
      $50 = (invoke_iii($49|0,($8|0),48)|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       label = 28;
       break L1;
      }
      $53 = HEAP32[$5>>2]|0;
      $54 = ((($53)) + 4|0);
      HEAP32[$5>>2] = $54;
      HEAP32[$53>>2] = $50;
      $55 = HEAP8[$45>>0]|0;
      $56 = HEAP32[$8>>2]|0;
      $57 = ((($56)) + 44|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      $59 = (invoke_iii($58|0,($8|0),($55|0))|0);
      $60 = __THREW__; __THREW__ = 0;
      $61 = $60&1;
      if ($61) {
       label = 28;
       break L1;
      }
      $62 = ((($$086)) + 2|0);
      $63 = HEAP32[$5>>2]|0;
      $64 = ((($63)) + 4|0);
      HEAP32[$5>>2] = $64;
      HEAP32[$63>>2] = $59;
      $$187 = $62;
     } else {
      $$187 = $$086;
     }
    } else {
     $$187 = $$086;
    }
   } while(0);
   $65 = ($$187|0)==($2|0);
   L16: do {
    if (!($65)) {
     $$0$i$i = $2;$$07$i$i = $$187;
     while(1) {
      $66 = ((($$0$i$i)) + -1|0);
      $67 = ($$07$i$i>>>0)<($66>>>0);
      if (!($67)) {
       break L16;
      }
      $68 = HEAP8[$$07$i$i>>0]|0;
      $69 = HEAP8[$66>>0]|0;
      HEAP8[$$07$i$i>>0] = $69;
      HEAP8[$66>>0] = $68;
      $70 = ((($$07$i$i)) + 1|0);
      $$0$i$i = $66;$$07$i$i = $70;
     }
    }
   } while(0);
   $71 = HEAP32[$9>>2]|0;
   $72 = ((($71)) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   __THREW__ = 0;
   $74 = (invoke_ii($73|0,($9|0))|0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    label = 28;
   } else {
    $$0 = $$187;$$081 = 0;$$082 = 0;
    while(1) {
     $77 = ($$0>>>0)<($2>>>0);
     if (!($77)) {
      break;
     }
     $88 = HEAP8[$13>>0]|0;
     $89 = ($88<<24>>24)<(0);
     $90 = HEAP32[$7>>2]|0;
     $91 = $89 ? $90 : $7;
     $92 = (($91) + ($$081)|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)!=(0);
     $95 = $93 << 24 >> 24;
     $96 = ($$082|0)==($95|0);
     $or$cond = $94 & $96;
     if ($or$cond) {
      $97 = HEAP32[$5>>2]|0;
      $98 = ((($97)) + 4|0);
      HEAP32[$5>>2] = $98;
      HEAP32[$97>>2] = $74;
      $99 = HEAP32[$16>>2]|0;
      $100 = $88&255;
      $101 = $89 ? $99 : $100;
      $102 = (($101) + -1)|0;
      $103 = ($$081>>>0)<($102>>>0);
      $104 = $103&1;
      $$$081 = (($104) + ($$081))|0;
      $$1 = $$$081;$$183 = 0;
     } else {
      $$1 = $$081;$$183 = $$082;
     }
     $105 = HEAP8[$$0>>0]|0;
     $106 = HEAP32[$8>>2]|0;
     $107 = ((($106)) + 44|0);
     $108 = HEAP32[$107>>2]|0;
     __THREW__ = 0;
     $109 = (invoke_iii($108|0,($8|0),($105|0))|0);
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if ($111) {
      label = 28;
      break L1;
     }
     $112 = HEAP32[$5>>2]|0;
     $113 = ((($112)) + 4|0);
     HEAP32[$5>>2] = $113;
     HEAP32[$112>>2] = $109;
     $114 = (($$183) + 1)|0;
     $115 = ((($$0)) + 1|0);
     $$0 = $115;$$081 = $$1;$$082 = $114;
    }
    $78 = $$187;
    $79 = (($78) - ($22))|0;
    $80 = (($3) + ($79<<2)|0);
    $81 = HEAP32[$5>>2]|0;
    $82 = ($80|0)==($81|0);
    if ($82) {
     $120 = $80;
     label = 27;
    } else {
     $$0$i$i99 = $81;$$07$i$i98 = $80;
     while(1) {
      $83 = ((($$0$i$i99)) + -4|0);
      $84 = ($$07$i$i98>>>0)<($83>>>0);
      if (!($84)) {
       break;
      }
      $85 = HEAP32[$$07$i$i98>>2]|0;
      $86 = HEAP32[$83>>2]|0;
      HEAP32[$$07$i$i98>>2] = $86;
      HEAP32[$83>>2] = $85;
      $87 = ((($$07$i$i98)) + 4|0);
      $$0$i$i99 = $83;$$07$i$i98 = $87;
     }
     $$pre = HEAP32[$5>>2]|0;
     $120 = $$pre;
     label = 27;
    }
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $116 = ($1|0)==($2|0);
  $117 = $1;
  $118 = (($117) - ($22))|0;
  $119 = (($3) + ($118<<2)|0);
  $storemerge = $116 ? $120 : $119;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  $121 = ___cxa_find_matching_catch_2()|0;
  $122 = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($121|0);
  // unreachable;
 }
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,16482,(16490))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = $17 ? $18 : $12;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $16&255;
 $23 = $17 ? $21 : $22;
 $24 = (($19) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$19,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20160|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 24|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20160|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 16|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20160|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 20|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$097$0 = 0, $$sroa$097$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $40 = (invoke_iii(354,($8|0),(20160|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($49|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($8);
 $43 = $6 << 24 >> 24;
 $44 = ((($5)) + 16|0);
 $45 = ((($5)) + 8|0);
 $46 = ((($5)) + 20|0);
 $47 = ((($5)) + 24|0);
 $48 = ((($0)) + 8|0);
 do {
  switch ($43|0) {
  case 65: case 97:  {
   $51 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $51;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$47,$1,$$byval_copy,$4,$40);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $52;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 28;
   break;
  }
  case 99:  {
   $53 = HEAP32[$48>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($48)|0);
   $57 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $57;
   $58 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $58;
   $59 = ((($56)) + 11|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = ($60<<24>>24)<(0);
   $62 = HEAP32[$56>>2]|0;
   $63 = $61 ? $62 : $56;
   $64 = ((($56)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $60&255;
   $67 = $61 ? $65 : $66;
   $68 = (($63) + ($67)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $69 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$63,$68)|0);
   HEAP32[$1>>2] = $69;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $70 = ((($5)) + 12|0);
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $71;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$70,$1,$$byval_copy4,$4,$40);
   label = 28;
   break;
  }
  case 68:  {
   $72 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $72;
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $73;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $74 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,16442,(16450))|0);
   HEAP32[$1>>2] = $74;
   label = 28;
   break;
  }
  case 70:  {
   $75 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $75;
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $76;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $77 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,16450,(16458))|0);
   HEAP32[$1>>2] = $77;
   label = 28;
   break;
  }
  case 72:  {
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $78;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$45,$1,$$byval_copy9,$4,$40);
   label = 28;
   break;
  }
  case 73:  {
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $79;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$45,$1,$$byval_copy10,$4,$40);
   label = 28;
   break;
  }
  case 106:  {
   $80 = ((($5)) + 28|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $81;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$80,$1,$$byval_copy11,$4,$40);
   label = 28;
   break;
  }
  case 109:  {
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $82;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$44,$1,$$byval_copy12,$4,$40);
   label = 28;
   break;
  }
  case 77:  {
   $83 = ((($5)) + 4|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $84;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy13,$4,$40);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $85;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy14,$4,$40);
   label = 28;
   break;
  }
  case 112:  {
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $86;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$45,$1,$$byval_copy15,$4,$40);
   label = 28;
   break;
  }
  case 114:  {
   $87 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $87;
   $88 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $88;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $89 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,16458,(16469))|0);
   HEAP32[$1>>2] = $89;
   label = 28;
   break;
  }
  case 82:  {
   $90 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $90;
   $91 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $91;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $92 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,16469,(16474))|0);
   HEAP32[$1>>2] = $92;
   label = 28;
   break;
  }
  case 83:  {
   $93 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $93;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 28;
   break;
  }
  case 84:  {
   $94 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $94;
   $95 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $95;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $96 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,16474,(16482))|0);
   HEAP32[$1>>2] = $96;
   label = 28;
   break;
  }
  case 119:  {
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $97;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$47,$1,$$byval_copy23,$4,$40);
   label = 28;
   break;
  }
  case 120:  {
   $98 = HEAP32[$0>>2]|0;
   $99 = ((($98)) + 20|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $101;
   $102 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $102;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $103 = (FUNCTION_TABLE_iiiiiii[$100 & 511]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$097$0 = $103;
   break;
  }
  case 88:  {
   $104 = HEAP32[$48>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (FUNCTION_TABLE_ii[$106 & 1023]($48)|0);
   $108 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $108;
   $109 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $109;
   $110 = ((($107)) + 11|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = ($111<<24>>24)<(0);
   $113 = HEAP32[$107>>2]|0;
   $114 = $112 ? $113 : $107;
   $115 = ((($107)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $111&255;
   $118 = $112 ? $116 : $117;
   $119 = (($114) + ($118)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $120 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$114,$119)|0);
   HEAP32[$1>>2] = $120;
   label = 28;
   break;
  }
  case 121:  {
   $121 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $121;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$46,$1,$$byval_copy28,$4,$40);
   label = 28;
   break;
  }
  case 89:  {
   $122 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $122;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$46,$1,$$byval_copy29,$4,$40);
   label = 28;
   break;
  }
  case 37:  {
   $123 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $123;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$40);
   label = 28;
   break;
  }
  default: {
   $124 = HEAP32[$4>>2]|0;
   $125 = $124 | 4;
   HEAP32[$4>>2] = $125;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$097$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$097$0 = $$sroa$097$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$097$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18920]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18920)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(462);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5258] = 20864;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5258]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18904]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18904)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(463);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5215] = 20572;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5215]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18888]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18888)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(464);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5142] = 20280;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5142]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18880]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18880)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[20268>>2]=0|0;HEAP32[20268+4>>2]=0|0;HEAP32[20268+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(359,(16200|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(360,(20268|0),(16200|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((465|0),(20268|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (20268|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18872]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18872)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[20256>>2]=0|0;HEAP32[20256+4>>2]=0|0;HEAP32[20256+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(359,(16188|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(360,(20256|0),(16188|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((465|0),(20256|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (20256|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18864]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18864)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[20244>>2]=0|0;HEAP32[20244+4>>2]=0|0;HEAP32[20244+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(359,(16179|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(360,(20244|0),(16179|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((465|0),(20244|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (20244|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18856]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18856)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[20232>>2]=0|0;HEAP32[20232+4>>2]=0|0;HEAP32[20232+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(359,(16170|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(360,(20232|0),(16170|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((465|0),(20232|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (20232|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18896]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18896)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 20280;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((20568)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((466|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20280,16221)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20292),16224)|0);
 return;
}
function ___cxx_global_array_dtor_117($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (20568);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(20280|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18912]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18912)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 20572;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((20860)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((467|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20572,16227)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20584),16235)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20596),16244)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20608),16250)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20620),16256)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20632),16260)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20644),16265)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20656),16270)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20668),16277)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20680),16287)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20692),16295)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20704),16304)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20716),16313)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20728),16317)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20740),16321)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20752),16325)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20764),16256)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20776),16329)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20788),16333)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20800),16337)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20812),16341)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20824),16345)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20836),16349)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20848),16353)|0);
 return;
}
function ___cxx_global_array_dtor_69($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (20860);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(20572|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18928]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18928)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 20864;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21032)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((468|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(20864,16357)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20876),16364)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20888),16371)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20900),16379)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20912),16389)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20924),16398)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20936),16405)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20948),16414)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20960),16418)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20972),16422)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20984),16426)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((20996),16430)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21008),16434)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((21020),16438)|0);
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (21032);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $3 = ($1|0)==(20864|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i55 = 0, $$0$i$i$i$i71 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i61 = 0, $$0$i$i2$i$i77 = 0, $$0$i$i68 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$ph$sink = 0, $$051 = 0, $$052 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i57 = 0, $$pre$i$i$i73 = 0;
 var $$pre$i4$i$i63 = 0, $$pre$i4$i$i63100 = 0, $$pre$i4$i$i63101 = 0, $$pre$pre = 0, $$sroa$049$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $phitmp$i5$i$i64 = 0, $sext = 0, $tmp$i$i66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $11 = (invoke_iii(354,($8|0),(20160|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $50 = ___cxa_find_matching_catch_2()|0;
  $51 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($50|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $14 = ((($11)) + 8|0);
 $$0$ph = $6;$$pre = 0;
 L4: while(1) {
  $15 = ($$0$ph|0)!=($7|0);
  $17 = $$pre;
  while(1) {
   $16 = ($17|0)==(0);
   $or$cond = $15 & $16;
   $18 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i73 = $18;
    break L4;
   }
   $19 = ($18|0)==(0|0);
   $20 = $18;
   if ($19) {
    $156 = 0;$218 = 1;$75 = $20;
   } else {
    $21 = ((($18)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($18)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if ($25) {
     $26 = HEAP32[$18>>2]|0;
     $27 = ((($26)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_ii[$28 & 1023]($18)|0);
     $$0$i$i$i$i = $29;
    } else {
     $30 = HEAP8[$22>>0]|0;
     $31 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($30)|0);
     $$0$i$i$i$i = $31;
    }
    $32 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $33 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$32)|0);
    if ($33) {
     HEAP32[$1>>2] = 0;
     $156 = 0;$218 = 1;$75 = 0;
    } else {
     $156 = $18;$218 = 0;$75 = $20;
    }
   }
   $34 = HEAP32[$2>>2]|0;
   $35 = ($34|0)==(0|0);
   $36 = $34;
   do {
    if ($35) {
     $$ph = $36;
     label = 17;
    } else {
     $37 = ((($34)) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($34)) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($38|0)==($40|0);
     if ($41) {
      $42 = HEAP32[$34>>2]|0;
      $43 = ((($42)) + 36|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (FUNCTION_TABLE_ii[$44 & 1023]($34)|0);
      $$0$i$i2$i$i = $45;
     } else {
      $46 = HEAP8[$38>>0]|0;
      $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
      $$0$i$i2$i$i = $47;
     }
     $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$48)|0);
     if ($49) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($218) {
       $219 = $34;$76 = $36;
       break;
      } else {
       label = 63;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($218) {
     label = 63;
     break L4;
    } else {
     $219 = 0;$76 = $$ph;
    }
   }
   $52 = HEAP8[$$0$ph>>0]|0;
   $53 = HEAP32[$11>>2]|0;
   $54 = ((($53)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($11,$52,0)|0);
   $57 = ($56<<24>>24)==(37);
   if ($57) {
    label = 21;
    break;
   }
   $80 = HEAP8[$$0$ph>>0]|0;
   $81 = ($80<<24>>24)>(-1);
   if ($81) {
    $82 = $80 << 24 >> 24;
    $83 = HEAP32[$14>>2]|0;
    $84 = (($83) + ($82<<1)|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $85 & 8192;
    $87 = ($86<<16>>16)==(0);
    if (!($87)) {
     $$0$ph$sink = $$0$ph;
     label = 29;
     break;
    }
   }
   $155 = ((($156)) + 12|0);
   $157 = HEAP32[$155>>2]|0;
   $158 = ((($156)) + 16|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157|0)==($159|0);
   if ($160) {
    $161 = HEAP32[$156>>2]|0;
    $162 = ((($161)) + 36|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (FUNCTION_TABLE_ii[$163 & 1023]($156)|0);
    $$0$i$i68 = $164;
   } else {
    $165 = HEAP8[$157>>0]|0;
    $166 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($165)|0);
    $$0$i$i68 = $166;
   }
   $167 = $$0$i$i68&255;
   $168 = HEAP32[$11>>2]|0;
   $169 = ((($168)) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_iii[$170 & 511]($11,$167)|0);
   $172 = HEAP8[$$0$ph>>0]|0;
   $173 = HEAP32[$11>>2]|0;
   $174 = ((($173)) + 12|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (FUNCTION_TABLE_iii[$175 & 511]($11,$172)|0);
   $177 = ($171<<24>>24)==($176<<24>>24);
   if ($177) {
    label = 59;
    break;
   }
   HEAP32[$4>>2] = 4;
   $17 = 4;
  }
  L38: do {
   if ((label|0) == 21) {
    label = 0;
    $58 = ((($$0$ph)) + 1|0);
    $59 = ($58|0)==($7|0);
    if ($59) {
     label = 63;
     break L4;
    }
    $60 = HEAP8[$58>>0]|0;
    $61 = HEAP32[$11>>2]|0;
    $62 = ((($61)) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (FUNCTION_TABLE_iiii[$63 & 1023]($11,$60,0)|0);
    switch ($64<<24>>24) {
    case 48: case 69:  {
     $65 = ((($$0$ph)) + 2|0);
     $66 = ($65|0)==($7|0);
     if ($66) {
      label = 63;
      break L4;
     }
     $67 = HEAP8[$65>>0]|0;
     $68 = HEAP32[$11>>2]|0;
     $69 = ((($68)) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (FUNCTION_TABLE_iiii[$70 & 1023]($11,$67,0)|0);
     $$051 = $64;$$052 = $71;$79 = $58;
     break;
    }
    default: {
     $$051 = 0;$$052 = $64;$79 = $$0$ph;
    }
    }
    $72 = HEAP32[$0>>2]|0;
    $73 = ((($72)) + 36|0);
    $74 = HEAP32[$73>>2]|0;
    HEAP32[$9>>2] = $75;
    HEAP32[$10>>2] = $76;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $77 = (FUNCTION_TABLE_iiiiiiiii[$74 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$052,$$051)|0);
    HEAP32[$1>>2] = $77;
    $78 = ((($79)) + 2|0);
    $$0$ph$be = $78;
   }
   else if ((label|0) == 29) {
    while(1) {
     label = 0;
     $88 = ((($$0$ph$sink)) + 1|0);
     $89 = ($88|0)==($7|0);
     if ($89) {
      $$lcssa = $7;
      break;
     }
     $90 = HEAP8[$88>>0]|0;
     $91 = ($90<<24>>24)>(-1);
     if (!($91)) {
      $$lcssa = $88;
      break;
     }
     $92 = $90 << 24 >> 24;
     $93 = (($83) + ($92<<1)|0);
     $94 = HEAP16[$93>>1]|0;
     $95 = $94 & 8192;
     $96 = ($95<<16>>16)==(0);
     if ($96) {
      $$lcssa = $88;
      break;
     } else {
      $$0$ph$sink = $88;
      label = 29;
     }
    }
    $$pre$i$i$i57 = $156;$$pre$i4$i$i63 = $219;$112 = $219;
    while(1) {
     $97 = ($$pre$i$i$i57|0)==(0|0);
     if ($97) {
      $126 = 1;$128 = 0;
     } else {
      $98 = ((($$pre$i$i$i57)) + 12|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ((($$pre$i$i$i57)) + 16|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($99|0)==($101|0);
      if ($102) {
       $103 = HEAP32[$$pre$i$i$i57>>2]|0;
       $104 = ((($103)) + 36|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (FUNCTION_TABLE_ii[$105 & 1023]($$pre$i$i$i57)|0);
       $$0$i$i$i$i55 = $106;
      } else {
       $107 = HEAP8[$99>>0]|0;
       $108 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($107)|0);
       $$0$i$i$i$i55 = $108;
      }
      $109 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $110 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i55,$109)|0);
      if ($110) {
       HEAP32[$1>>2] = 0;
       $126 = 1;$128 = 0;
      } else {
       $126 = 0;$128 = $$pre$i$i$i57;
      }
     }
     $111 = ($112|0)==(0|0);
     do {
      if ($111) {
       $$pre$i4$i$i63101 = $$pre$i4$i$i63;
       label = 45;
      } else {
       $113 = ((($112)) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ((($112)) + 16|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($114|0)==($116|0);
       if ($117) {
        $118 = HEAP32[$112>>2]|0;
        $119 = ((($118)) + 36|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (FUNCTION_TABLE_ii[$120 & 1023]($112)|0);
        $$0$i$i2$i$i61 = $121;
       } else {
        $122 = HEAP8[$114>>0]|0;
        $123 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($122)|0);
        $$0$i$i2$i$i61 = $123;
       }
       $124 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $125 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i61,$124)|0);
       if ($125) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i63101 = 0;
        label = 45;
        break;
       } else {
        $phitmp$i5$i$i64 = ($$pre$i4$i$i63|0)==(0|0);
        $tmp$i$i66 = $126 ^ $phitmp$i5$i$i64;
        if ($tmp$i$i66) {
         $$pre$i4$i$i63100 = $$pre$i4$i$i63;$220 = $$pre$i4$i$i63;
         break;
        } else {
         $$0$ph$be = $$lcssa;
         break L38;
        }
       }
      }
     } while(0);
     if ((label|0) == 45) {
      label = 0;
      if ($126) {
       $$0$ph$be = $$lcssa;
       break L38;
      } else {
       $$pre$i4$i$i63100 = $$pre$i4$i$i63101;$220 = 0;
      }
     }
     $127 = ((($128)) + 12|0);
     $129 = HEAP32[$127>>2]|0;
     $130 = ((($128)) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$128>>2]|0;
      $134 = ((($133)) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (FUNCTION_TABLE_ii[$135 & 1023]($128)|0);
      $$0$i$i = $136;
     } else {
      $137 = HEAP8[$129>>0]|0;
      $138 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($137)|0);
      $$0$i$i = $138;
     }
     $139 = $$0$i$i&255;
     $140 = ($139<<24>>24)>(-1);
     if (!($140)) {
      $$0$ph$be = $$lcssa;
      break L38;
     }
     $sext = $$0$i$i << 24;
     $141 = $sext >> 24;
     $142 = HEAP32[$14>>2]|0;
     $143 = (($142) + ($141<<1)|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144 & 8192;
     $146 = ($145<<16>>16)==(0);
     if ($146) {
      $$0$ph$be = $$lcssa;
      break L38;
     }
     $147 = HEAP32[$127>>2]|0;
     $148 = HEAP32[$130>>2]|0;
     $149 = ($147|0)==($148|0);
     if ($149) {
      $150 = HEAP32[$128>>2]|0;
      $151 = ((($150)) + 40|0);
      $152 = HEAP32[$151>>2]|0;
      (FUNCTION_TABLE_ii[$152 & 1023]($128)|0);
      $$pre$i$i$i57 = $128;$$pre$i4$i$i63 = $$pre$i4$i$i63100;$112 = $220;
      continue;
     } else {
      $153 = ((($147)) + 1|0);
      HEAP32[$127>>2] = $153;
      $154 = HEAP8[$147>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($154)|0);
      $$pre$i$i$i57 = $128;$$pre$i4$i$i63 = $$pre$i4$i$i63100;$112 = $220;
      continue;
     }
    }
   }
   else if ((label|0) == 59) {
    label = 0;
    $178 = ((($$0$ph)) + 1|0);
    $179 = HEAP32[$155>>2]|0;
    $180 = HEAP32[$158>>2]|0;
    $181 = ($179|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$156>>2]|0;
     $183 = ((($182)) + 40|0);
     $184 = HEAP32[$183>>2]|0;
     (FUNCTION_TABLE_ii[$184 & 1023]($156)|0);
     $$0$ph$be = $178;
     break;
    } else {
     $185 = ((($179)) + 1|0);
     HEAP32[$155>>2] = $185;
     $186 = HEAP8[$179>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($186)|0);
     $$0$ph$be = $178;
     break;
    }
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 63) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i73 = $156;
 }
 $187 = ($$pre$i$i$i73|0)==(0|0);
 if ($187) {
  $$sroa$049$0$copyload = 0;$221 = 1;
 } else {
  $188 = ((($$pre$i$i$i73)) + 12|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ((($$pre$i$i$i73)) + 16|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($189|0)==($191|0);
  if ($192) {
   $193 = HEAP32[$$pre$i$i$i73>>2]|0;
   $194 = ((($193)) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (FUNCTION_TABLE_ii[$195 & 1023]($$pre$i$i$i73)|0);
   $$0$i$i$i$i71 = $196;
  } else {
   $197 = HEAP8[$189>>0]|0;
   $198 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($197)|0);
   $$0$i$i$i$i71 = $198;
  }
  $199 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $200 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i71,$199)|0);
  if ($200) {
   HEAP32[$1>>2] = 0;
   $$sroa$049$0$copyload = 0;$221 = 1;
  } else {
   $$sroa$049$0$copyload = $$pre$i$i$i73;$221 = 0;
  }
 }
 $201 = HEAP32[$2>>2]|0;
 $202 = ($201|0)==(0|0);
 do {
  if ($202) {
   label = 76;
  } else {
   $203 = ((($201)) + 12|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($201)) + 16|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($204|0)==($206|0);
   if ($207) {
    $208 = HEAP32[$201>>2]|0;
    $209 = ((($208)) + 36|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (FUNCTION_TABLE_ii[$210 & 1023]($201)|0);
    $$0$i$i2$i$i77 = $211;
   } else {
    $212 = HEAP8[$204>>0]|0;
    $213 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($212)|0);
    $$0$i$i2$i$i77 = $213;
   }
   $214 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $215 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i77,$214)|0);
   if ($215) {
    HEAP32[$2>>2] = 0;
    label = 76;
    break;
   } else {
    if ($221) {
     break;
    } else {
     label = 78;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 76) {
  if ($221) {
   label = 78;
  }
 }
 if ((label|0) == 78) {
  $216 = HEAP32[$4>>2]|0;
  $217 = $216 | 2;
  HEAP32[$4>>2] = $217;
 }
 STACKTOP = sp;return ($$sroa$049$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $98 = 1;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 1023]($6)|0);
     $$0$i$i$i$i = $16;
    } else {
     $17 = HEAP8[$9>>0]|0;
     $18 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
     $$0$i$i$i$i = $18;
    }
    $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $20 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$19)|0);
    if ($20) {
     HEAP32[$1>>2] = 0;
     $98 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $98 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    label = 15;
   } else {
    $23 = ((($21)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = ((($28)) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 1023]($21)|0);
     $$0$i$i2$i$i = $31;
    } else {
     $32 = HEAP8[$24>>0]|0;
     $33 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
     $$0$i$i2$i$i = $33;
    }
    $34 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $35 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$34)|0);
    if ($35) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($98) {
      $99 = $21;
      break;
     } else {
      $$pre$i4$i$i15 = $21;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($98) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $99 = 0;
   }
  }
  $36 = HEAP32[$1>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($36)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = HEAP32[$36>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_ii[$44 & 1023]($36)|0);
   $$0$i$i = $45;
  } else {
   $46 = HEAP8[$38>>0]|0;
   $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
   $$0$i$i = $47;
  }
  $48 = $$0$i$i&255;
  $49 = ($48<<24>>24)>(-1);
  if (!($49)) {
   $$pre$i4$i$i15 = $99;
   break;
  }
  $sext = $$0$i$i << 24;
  $50 = $sext >> 24;
  $51 = HEAP32[$5>>2]|0;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 & 8192;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   $$pre$i4$i$i15 = $99;
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($56)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($58|0)==($60|0);
  if ($61) {
   $62 = HEAP32[$56>>2]|0;
   $63 = ((($62)) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   (FUNCTION_TABLE_ii[$64 & 1023]($56)|0);
   continue;
  } else {
   $65 = ((($58)) + 1|0);
   HEAP32[$57>>2] = $65;
   $66 = HEAP8[$58>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
   continue;
  }
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ($67|0)==(0|0);
 do {
  if ($68) {
   $100 = 1;
  } else {
   $69 = ((($67)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($67)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$67>>2]|0;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (FUNCTION_TABLE_ii[$76 & 1023]($67)|0);
    $$0$i$i$i$i7 = $77;
   } else {
    $78 = HEAP8[$70>>0]|0;
    $79 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($78)|0);
    $$0$i$i$i$i7 = $79;
   }
   $80 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $81 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7,$80)|0);
   if ($81) {
    HEAP32[$1>>2] = 0;
    $100 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $100 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $82 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($82) {
   label = 38;
  } else {
   $83 = ((($$pre$i4$i$i15)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ((($$pre$i4$i$i15)) + 16|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($84|0)==($86|0);
   if ($87) {
    $88 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $89 = ((($88)) + 36|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (FUNCTION_TABLE_ii[$90 & 1023]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $91;
   } else {
    $92 = HEAP8[$84>>0]|0;
    $93 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($92)|0);
    $$0$i$i2$i$i13 = $93;
   }
   $94 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $95 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13,$94)|0);
   if ($95) {
    HEAP32[$2>>2] = 0;
    label = 38;
    break;
   } else {
    if ($100) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($100) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $96 = HEAP32[$3>>2]|0;
  $97 = $96 | 2;
  HEAP32[$3>>2] = $97;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $28 = $16;
 } else {
  $17 = $13&255;
  $28 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $27 = ($28|0)==($25|0);
 do {
  if ($27) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i4$i$i1925 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $95 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $95 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $95 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($95) {
     $$pre$i4$i$i1925 = $20;
     label = 16;
     break;
    } else {
     $$sink3 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($95) {
   $$sink3 = 6;
   label = 38;
  } else {
   $$pre$i4$i$i1925 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$1>>2]|0;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
    $$0$i$i = $44;
   } else {
    $45 = HEAP8[$37>>0]|0;
    $46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($45)|0);
    $$0$i$i = $46;
   }
   $47 = $$0$i$i&255;
   $48 = HEAP32[$4>>2]|0;
   $49 = ((($48)) + 36|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_iiii[$50 & 1023]($4,$47,0)|0);
   $52 = ($51<<24>>24)==(37);
   if ($52) {
    $53 = HEAP32[$1>>2]|0;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($53)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55|0)==($57|0);
    if ($58) {
     $59 = HEAP32[$53>>2]|0;
     $60 = ((($59)) + 40|0);
     $61 = HEAP32[$60>>2]|0;
     (FUNCTION_TABLE_ii[$61 & 1023]($53)|0);
    } else {
     $62 = ((($55)) + 1|0);
     HEAP32[$54>>2] = $62;
     $63 = HEAP8[$55>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
    }
    $64 = HEAP32[$1>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $96 = 1;
     } else {
      $66 = ((($64)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($64)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = ((($71)) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_ii[$73 & 1023]($64)|0);
       $$0$i$i$i$i11 = $74;
      } else {
       $75 = HEAP8[$67>>0]|0;
       $76 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
       $$0$i$i$i$i11 = $76;
      }
      $77 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $78 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i11,$77)|0);
      if ($78) {
       HEAP32[$1>>2] = 0;
       $96 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$1>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $96 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $79 = ($$pre$i4$i$i1925|0)==(0|0);
    do {
     if (!($79)) {
      $80 = ((($$pre$i4$i$i1925)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($$pre$i4$i$i1925)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if ($84) {
       $85 = HEAP32[$$pre$i4$i$i1925>>2]|0;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (FUNCTION_TABLE_ii[$87 & 1023]($$pre$i4$i$i1925)|0);
       $$0$i$i2$i$i17 = $88;
      } else {
       $89 = HEAP8[$81>>0]|0;
       $90 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($89)|0);
       $$0$i$i2$i$i17 = $90;
      }
      $91 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $92 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i17,$91)|0);
      if ($92) {
       HEAP32[$2>>2] = 0;
       break;
      } else {
       if ($96) {
        break L22;
       } else {
        $$sink3 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($96) {
     $$sink3 = 2;
     label = 38;
    }
   } else {
    $$sink3 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $93 = HEAP32[$3>>2]|0;
  $94 = $93 | $$sink3;
  HEAP32[$3>>2] = $94;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i37 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i$i$i43 = 0, $$pre$i4$i$i33 = 0, $$pre$i4$i$i49 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i28 = 0, $phitmp$i$i$i44 = 0, $phitmp$i5$i$i34 = 0, $sext = 0;
 var $sext54 = 0, $tmp$i$i36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $178 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $178 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $178 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($178) {
     $179 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($178) {
   label = 16;
  } else {
   $179 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = ($49<<24>>24)>(-1);
   if ($50) {
    $sext = $$0$i$i << 24;
    $51 = $sext >> 24;
    $52 = ((($3)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 & 2048;
    $57 = ($56<<16>>16)==(0);
    if (!($57)) {
     $60 = HEAP32[$3>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iiii[$62 & 1023]($3,$49,0)|0);
     $64 = $63 << 24 >> 24;
     $65 = HEAP32[$0>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      (FUNCTION_TABLE_ii[$73 & 1023]($65)|0);
      $$0$in = $64;$$023$in = $4;$$pre$i4$i$i33 = $179;$92 = $179;
     } else {
      $74 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $74;
      $75 = HEAP8[$67>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
      $$0$in = $64;$$023$in = $4;$$pre$i4$i$i33 = $179;$92 = $179;
     }
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(0|0);
      do {
       if ($77) {
        $106 = 1;
       } else {
        $78 = ((($76)) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ((($76)) + 16|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($79|0)==($81|0);
        if ($82) {
         $83 = HEAP32[$76>>2]|0;
         $84 = ((($83)) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (FUNCTION_TABLE_ii[$85 & 1023]($76)|0);
         $$0$i$i$i$i25 = $86;
        } else {
         $87 = HEAP8[$79>>0]|0;
         $88 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
         $$0$i$i$i$i25 = $88;
        }
        $89 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $90 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$89)|0);
        if ($90) {
         HEAP32[$0>>2] = 0;
         $106 = 1;
         break;
        } else {
         $$pre$i$i$i27 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i28 = ($$pre$i$i$i27|0)==(0|0);
         $106 = $phitmp$i$i$i28;
         break;
        }
       }
      } while(0);
      $91 = ($92|0)==(0|0);
      do {
       if ($91) {
        $$pre$i4$i$i49 = $$pre$i4$i$i33;$107 = 1;$180 = 0;
       } else {
        $93 = ((($92)) + 12|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ((($92)) + 16|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($94|0)==($96|0);
        if ($97) {
         $98 = HEAP32[$92>>2]|0;
         $99 = ((($98)) + 36|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
         $$0$i$i2$i$i31 = $101;
        } else {
         $102 = HEAP8[$94>>0]|0;
         $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
         $$0$i$i2$i$i31 = $103;
        }
        $104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$104)|0);
        if ($105) {
         HEAP32[$1>>2] = 0;
         $$pre$i4$i$i49 = 0;$107 = 1;$180 = 0;
         break;
        } else {
         $phitmp$i5$i$i34 = ($$pre$i4$i$i33|0)==(0|0);
         $$pre$i4$i$i49 = $$pre$i4$i$i33;$107 = $phitmp$i5$i$i34;$180 = $$pre$i4$i$i33;
         break;
        }
       }
      } while(0);
      $tmp$i$i36 = $106 ^ $107;
      $108 = ($$023$in|0)>(1);
      $109 = $108 & $tmp$i$i36;
      $110 = HEAP32[$0>>2]|0;
      if (!($109)) {
       break;
      }
      $111 = ((($110)) + 12|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ((($110)) + 16|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($112|0)==($114|0);
      if ($115) {
       $116 = HEAP32[$110>>2]|0;
       $117 = ((($116)) + 36|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (FUNCTION_TABLE_ii[$118 & 1023]($110)|0);
       $$0$i$i37 = $119;
      } else {
       $120 = HEAP8[$112>>0]|0;
       $121 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($120)|0);
       $$0$i$i37 = $121;
      }
      $122 = $$0$i$i37&255;
      $123 = ($122<<24>>24)>(-1);
      if (!($123)) {
       $$2 = $$0;
       break L22;
      }
      $sext54 = $$0$i$i37 << 24;
      $124 = $sext54 >> 24;
      $125 = HEAP32[$52>>2]|0;
      $126 = (($125) + ($124<<1)|0);
      $127 = HEAP16[$126>>1]|0;
      $128 = $127 & 2048;
      $129 = ($128<<16>>16)==(0);
      if ($129) {
       $$2 = $$0;
       break L22;
      }
      $130 = ($$0*10)|0;
      $131 = HEAP32[$3>>2]|0;
      $132 = ((($131)) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (FUNCTION_TABLE_iiii[$133 & 1023]($3,$122,0)|0);
      $135 = $134 << 24 >> 24;
      $136 = (($135) + ($130))|0;
      $137 = HEAP32[$0>>2]|0;
      $138 = ((($137)) + 12|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($137)) + 16|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)==($141|0);
      if ($142) {
       $143 = HEAP32[$137>>2]|0;
       $144 = ((($143)) + 40|0);
       $145 = HEAP32[$144>>2]|0;
       (FUNCTION_TABLE_ii[$145 & 1023]($137)|0);
       $$0$in = $136;$$023$in = $$023;$$pre$i4$i$i33 = $$pre$i4$i$i49;$92 = $180;
       continue;
      } else {
       $146 = ((($139)) + 1|0);
       HEAP32[$138>>2] = $146;
       $147 = HEAP8[$139>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($147)|0);
       $$0$in = $136;$$023$in = $$023;$$pre$i4$i$i33 = $$pre$i4$i$i49;$92 = $180;
       continue;
      }
     }
     $148 = ($110|0)==(0|0);
     do {
      if ($148) {
       $181 = 1;
      } else {
       $149 = ((($110)) + 12|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ((($110)) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($150|0)==($152|0);
       if ($153) {
        $154 = HEAP32[$110>>2]|0;
        $155 = ((($154)) + 36|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = (FUNCTION_TABLE_ii[$156 & 1023]($110)|0);
        $$0$i$i$i$i41 = $157;
       } else {
        $158 = HEAP8[$150>>0]|0;
        $159 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($158)|0);
        $$0$i$i$i$i41 = $159;
       }
       $160 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $161 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i41,$160)|0);
       if ($161) {
        HEAP32[$0>>2] = 0;
        $181 = 1;
        break;
       } else {
        $$pre$i$i$i43 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i44 = ($$pre$i$i$i43|0)==(0|0);
        $181 = $phitmp$i$i$i44;
        break;
       }
      }
     } while(0);
     $162 = ($$pre$i4$i$i49|0)==(0|0);
     do {
      if ($162) {
       label = 62;
      } else {
       $163 = ((($$pre$i4$i$i49)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ((($$pre$i4$i$i49)) + 16|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($164|0)==($166|0);
       if ($167) {
        $168 = HEAP32[$$pre$i4$i$i49>>2]|0;
        $169 = ((($168)) + 36|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i4$i$i49)|0);
        $$0$i$i2$i$i47 = $171;
       } else {
        $172 = HEAP8[$164>>0]|0;
        $173 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($172)|0);
        $$0$i$i2$i$i47 = $173;
       }
       $174 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $175 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i47,$174)|0);
       if ($175) {
        HEAP32[$1>>2] = 0;
        label = 62;
        break;
       } else {
        if ($181) {
         $$2 = $$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 62) {
      if (!($181)) {
       $$2 = $$0;
       break;
      }
     }
     $176 = HEAP32[$2>>2]|0;
     $177 = $176 | 2;
     HEAP32[$2>>2] = $177;
     $$2 = $$0;
     break;
    }
   }
   $58 = HEAP32[$2>>2]|0;
   $59 = $58 | 4;
   HEAP32[$2>>2] = $59;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,8408,(8440))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 1023]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = $18 ? $19 : $12;
 $21 = ((($12)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $17&255;
 $24 = $18 ? $22 : $23;
 $25 = (($20) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$20,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20192|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 24|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20192|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 16|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $8 = (invoke_iii(354,($6|0),(20192|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  __ZNSt3__26localeD2Ev($6);
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($6);
  $11 = ((($5)) + 20|0);
  $12 = HEAP32[$2>>2]|0;
  HEAP32[$7>>2] = $12;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$11,$1,$$byval_copy,$4,$8);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$sroa$097$0 = 0, $$sroa$097$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy30 = sp + 248|0;
 $$byval_copy29 = sp + 244|0;
 $$byval_copy28 = sp + 240|0;
 $$byval_copy27 = sp + 236|0;
 $$byval_copy26 = sp + 232|0;
 $$byval_copy25 = sp + 228|0;
 $$byval_copy24 = sp + 224|0;
 $$byval_copy23 = sp + 220|0;
 $$byval_copy22 = sp + 216|0;
 $$byval_copy21 = sp + 212|0;
 $$byval_copy20 = sp + 208|0;
 $$byval_copy19 = sp + 204|0;
 $$byval_copy18 = sp + 200|0;
 $$byval_copy17 = sp + 196|0;
 $$byval_copy16 = sp + 192|0;
 $$byval_copy15 = sp + 188|0;
 $$byval_copy14 = sp + 184|0;
 $$byval_copy13 = sp + 180|0;
 $$byval_copy12 = sp + 176|0;
 $$byval_copy11 = sp + 172|0;
 $$byval_copy10 = sp + 168|0;
 $$byval_copy9 = sp + 164|0;
 $$byval_copy8 = sp + 160|0;
 $$byval_copy7 = sp + 156|0;
 $$byval_copy6 = sp + 152|0;
 $$byval_copy5 = sp + 148|0;
 $$byval_copy4 = sp + 144|0;
 $$byval_copy3 = sp + 140|0;
 $$byval_copy2 = sp + 136|0;
 $$byval_copy1 = sp + 132|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $40 = (invoke_iii(354,($8|0),(20192|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($49|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($8);
 $43 = $6 << 24 >> 24;
 $44 = ((($5)) + 16|0);
 $45 = ((($5)) + 8|0);
 $46 = ((($5)) + 20|0);
 $47 = ((($5)) + 24|0);
 $48 = ((($0)) + 8|0);
 do {
  switch ($43|0) {
  case 65: case 97:  {
   $51 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $51;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$47,$1,$$byval_copy,$4,$40);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $52 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = $52;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$44,$1,$$byval_copy1,$4,$40);
   label = 28;
   break;
  }
  case 99:  {
   $53 = HEAP32[$48>>2]|0;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($48)|0);
   $57 = HEAP32[$1>>2]|0;
   HEAP32[$11>>2] = $57;
   $58 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $58;
   $59 = ((($56)) + 8|0);
   $60 = ((($59)) + 3|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = ($61<<24>>24)<(0);
   $63 = HEAP32[$56>>2]|0;
   $64 = $62 ? $63 : $56;
   $65 = ((($56)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $61&255;
   $68 = $62 ? $66 : $67;
   $69 = (($64) + ($68<<2)|0);
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$11>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$12>>2]|0;
   $70 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy2,$$byval_copy3,$3,$4,$5,$64,$69)|0);
   HEAP32[$1>>2] = $70;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $71 = ((($5)) + 12|0);
   $72 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $72;
   ;HEAP32[$$byval_copy4>>2]=HEAP32[$13>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$71,$1,$$byval_copy4,$4,$40);
   label = 28;
   break;
  }
  case 68:  {
   $73 = HEAP32[$1>>2]|0;
   HEAP32[$14>>2] = $73;
   $74 = HEAP32[$2>>2]|0;
   HEAP32[$15>>2] = $74;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
   ;HEAP32[$$byval_copy6>>2]=HEAP32[$15>>2]|0;
   $75 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy5,$$byval_copy6,$3,$4,$5,8248,(8280))|0);
   HEAP32[$1>>2] = $75;
   label = 28;
   break;
  }
  case 70:  {
   $76 = HEAP32[$1>>2]|0;
   HEAP32[$16>>2] = $76;
   $77 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $77;
   ;HEAP32[$$byval_copy7>>2]=HEAP32[$16>>2]|0;
   ;HEAP32[$$byval_copy8>>2]=HEAP32[$17>>2]|0;
   $78 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy7,$$byval_copy8,$3,$4,$5,8280,(8312))|0);
   HEAP32[$1>>2] = $78;
   label = 28;
   break;
  }
  case 72:  {
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $79;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$45,$1,$$byval_copy9,$4,$40);
   label = 28;
   break;
  }
  case 73:  {
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $80;
   ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$45,$1,$$byval_copy10,$4,$40);
   label = 28;
   break;
  }
  case 106:  {
   $81 = ((($5)) + 28|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $82;
   ;HEAP32[$$byval_copy11>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$81,$1,$$byval_copy11,$4,$40);
   label = 28;
   break;
  }
  case 109:  {
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $83;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$44,$1,$$byval_copy12,$4,$40);
   label = 28;
   break;
  }
  case 77:  {
   $84 = ((($5)) + 4|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $85;
   ;HEAP32[$$byval_copy13>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy13,$4,$40);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $86;
   ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy14,$4,$40);
   label = 28;
   break;
  }
  case 112:  {
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$24>>2] = $87;
   ;HEAP32[$$byval_copy15>>2]=HEAP32[$24>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$45,$1,$$byval_copy15,$4,$40);
   label = 28;
   break;
  }
  case 114:  {
   $88 = HEAP32[$1>>2]|0;
   HEAP32[$25>>2] = $88;
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$26>>2] = $89;
   ;HEAP32[$$byval_copy16>>2]=HEAP32[$25>>2]|0;
   ;HEAP32[$$byval_copy17>>2]=HEAP32[$26>>2]|0;
   $90 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy16,$$byval_copy17,$3,$4,$5,8312,(8356))|0);
   HEAP32[$1>>2] = $90;
   label = 28;
   break;
  }
  case 82:  {
   $91 = HEAP32[$1>>2]|0;
   HEAP32[$27>>2] = $91;
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $92;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$27>>2]|0;
   ;HEAP32[$$byval_copy19>>2]=HEAP32[$28>>2]|0;
   $93 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy18,$$byval_copy19,$3,$4,$5,8356,(8376))|0);
   HEAP32[$1>>2] = $93;
   label = 28;
   break;
  }
  case 83:  {
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$29>>2] = $94;
   ;HEAP32[$$byval_copy20>>2]=HEAP32[$29>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy20,$4,$40);
   label = 28;
   break;
  }
  case 84:  {
   $95 = HEAP32[$1>>2]|0;
   HEAP32[$30>>2] = $95;
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $96;
   ;HEAP32[$$byval_copy21>>2]=HEAP32[$30>>2]|0;
   ;HEAP32[$$byval_copy22>>2]=HEAP32[$31>>2]|0;
   $97 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy21,$$byval_copy22,$3,$4,$5,8376,(8408))|0);
   HEAP32[$1>>2] = $97;
   label = 28;
   break;
  }
  case 119:  {
   $98 = HEAP32[$2>>2]|0;
   HEAP32[$32>>2] = $98;
   ;HEAP32[$$byval_copy23>>2]=HEAP32[$32>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$47,$1,$$byval_copy23,$4,$40);
   label = 28;
   break;
  }
  case 120:  {
   $99 = HEAP32[$0>>2]|0;
   $100 = ((($99)) + 20|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[$1>>2]|0;
   HEAP32[$33>>2] = $102;
   $103 = HEAP32[$2>>2]|0;
   HEAP32[$34>>2] = $103;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$33>>2]|0;
   ;HEAP32[$$byval_copy25>>2]=HEAP32[$34>>2]|0;
   $104 = (FUNCTION_TABLE_iiiiiii[$101 & 511]($0,$$byval_copy24,$$byval_copy25,$3,$4,$5)|0);
   $$sroa$097$0 = $104;
   break;
  }
  case 88:  {
   $105 = HEAP32[$48>>2]|0;
   $106 = ((($105)) + 24|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (FUNCTION_TABLE_ii[$107 & 1023]($48)|0);
   $109 = HEAP32[$1>>2]|0;
   HEAP32[$35>>2] = $109;
   $110 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $110;
   $111 = ((($108)) + 8|0);
   $112 = ((($111)) + 3|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = ($113<<24>>24)<(0);
   $115 = HEAP32[$108>>2]|0;
   $116 = $114 ? $115 : $108;
   $117 = ((($108)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $113&255;
   $120 = $114 ? $118 : $119;
   $121 = (($116) + ($120<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$35>>2]|0;
   ;HEAP32[$$byval_copy27>>2]=HEAP32[$36>>2]|0;
   $122 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy27,$3,$4,$5,$116,$121)|0);
   HEAP32[$1>>2] = $122;
   label = 28;
   break;
  }
  case 121:  {
   $123 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $123;
   ;HEAP32[$$byval_copy28>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$46,$1,$$byval_copy28,$4,$40);
   label = 28;
   break;
  }
  case 89:  {
   $124 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $124;
   ;HEAP32[$$byval_copy29>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$46,$1,$$byval_copy29,$4,$40);
   label = 28;
   break;
  }
  case 37:  {
   $125 = HEAP32[$2>>2]|0;
   HEAP32[$39>>2] = $125;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$39>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$40);
   label = 28;
   break;
  }
  default: {
   $126 = HEAP32[$4>>2]|0;
   $127 = $126 | 4;
   HEAP32[$4>>2] = $127;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$097$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$097$0 = $$sroa$097$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$097$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[19000]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(19000)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(469);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5461] = 21676;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5461]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18984]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18984)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(470);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5418] = 21384;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5418]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18968]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18968)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(471);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = tempRet0;
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[5345] = 21092;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[5345]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18960]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18960)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[21080>>2]=0|0;HEAP32[21080+4>>2]=0|0;HEAP32[21080+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(472,(7280|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(473,(21080|0),(7280|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((474|0),(21080|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (21080|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18952]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18952)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[21068>>2]=0|0;HEAP32[21068+4>>2]=0|0;HEAP32[21068+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(472,(7232|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(473,(21068|0),(7232|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((474|0),(21068|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (21068|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18944]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18944)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[21056>>2]=0|0;HEAP32[21056+4>>2]=0|0;HEAP32[21056+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(472,(7196|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(473,(21056|0),(7196|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((474|0),(21056|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (21056|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[18936]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(18936)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[21044>>2]=0|0;HEAP32[21044+4>>2]=0|0;HEAP32[21044+8>>2]=0|0;
    __THREW__ = 0;
    $5 = (invoke_ii(472,(7160|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     __THREW__ = 0;
     invoke_viii(473,(21044|0),(7160|0),($5|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      (___cxa_atexit((474|0),(21044|0),(___dso_handle|0))|0);
      break;
     }
    }
    $10 = ___cxa_find_matching_catch_2()|0;
    $11 = tempRet0;
    ___resumeException($10|0);
    // unreachable;
   }
  }
 } while(0);
 return (21044|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($0)|0);
 return ($1|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18976]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18976)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21092;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21380)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((475|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21092,7364)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21104),7376)|0);
 return;
}
function ___cxx_global_array_dtor_120($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (21380);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(21092|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18992]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(18992)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21384;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21672)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((476|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21384,7388)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21396),7420)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21408),7456)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21420),7480)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21432),7504)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21444),7520)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21456),7540)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21468),7560)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21480),7588)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21492),7628)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21504),7660)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21516),7696)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21528),7732)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21540),7748)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21552),7764)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21564),7780)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21576),7504)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21588),7796)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21600),7812)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21612),7828)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21624),7844)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21636),7860)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21648),7876)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21660),7892)|0);
 return;
}
function ___cxx_global_array_dtor_93($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (21672);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(21384|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19008]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(19008)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 21676;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((21844)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
   (___cxa_atexit((477|0),(0|0),(___dso_handle|0))|0);
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(21676,7908)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21688),7936)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21700),7964)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21712),7996)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21724),8036)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21736),8072)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21748),8100)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21760),8136)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21772),8152)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21784),8168)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21796),8184)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21808),8200)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21820),8216)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((21832),8232)|0);
 return;
}
function ___cxx_global_array_dtor_54($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (21844);
 while(1) {
  $1 = ((($2)) + -12|0);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $3 = ($1|0)==(21676|0);
  if ($3) {
   break;
  } else {
   $2 = $1;
  }
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 1023]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i54 = 0, $$0$i$i$i$i69 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i60 = 0, $$0$i$i2$i$i75 = 0, $$0$i$i66 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$ph$sink = 0, $$051 = 0, $$052 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i56 = 0, $$pre$i$i$i71 = 0;
 var $$pre$i4$i$i62 = 0, $$pre$i4$i$i62100 = 0, $$pre$i4$i$i62101 = 0, $$pre$pre = 0, $$sroa$049$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp$i5$i$i63 = 0, $tmp$i$i65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $11 = (invoke_iii(354,($8|0),(20192|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  ___resumeException($49|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($8);
 HEAP32[$4>>2] = 0;
 $$0$ph = $6;$$pre = 0;
 L4: while(1) {
  $14 = ($$0$ph|0)!=($7|0);
  $16 = $$pre;
  while(1) {
   $15 = ($16|0)==(0);
   $or$cond = $14 & $15;
   $17 = HEAP32[$1>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i71 = $17;
    break L4;
   }
   $18 = ($17|0)==(0|0);
   $19 = $17;
   if ($18) {
    $146 = 0;$207 = 1;$74 = $19;
   } else {
    $20 = ((($17)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($17)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)==($23|0);
    if ($24) {
     $25 = HEAP32[$17>>2]|0;
     $26 = ((($25)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_ii[$27 & 1023]($17)|0);
     $$0$i$i$i$i = $28;
    } else {
     $29 = HEAP32[$21>>2]|0;
     $30 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($29)|0);
     $$0$i$i$i$i = $30;
    }
    $31 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $32 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$31)|0);
    if ($32) {
     HEAP32[$1>>2] = 0;
     $146 = 0;$207 = 1;$74 = 0;
    } else {
     $146 = $17;$207 = 0;$74 = $19;
    }
   }
   $33 = HEAP32[$2>>2]|0;
   $34 = ($33|0)==(0|0);
   $35 = $33;
   do {
    if ($34) {
     $$ph = $35;
     label = 17;
    } else {
     $36 = ((($33)) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($33)) + 16|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37|0)==($39|0);
     if ($40) {
      $41 = HEAP32[$33>>2]|0;
      $42 = ((($41)) + 36|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_ii[$43 & 1023]($33)|0);
      $$0$i$i2$i$i = $44;
     } else {
      $45 = HEAP32[$37>>2]|0;
      $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
      $$0$i$i2$i$i = $46;
     }
     $47 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $48 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$47)|0);
     if ($48) {
      HEAP32[$2>>2] = 0;
      $$ph = 0;
      label = 17;
      break;
     } else {
      if ($207) {
       $208 = $33;$75 = $35;
       break;
      } else {
       label = 60;
       break L4;
      }
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    if ($207) {
     label = 60;
     break L4;
    } else {
     $208 = 0;$75 = $$ph;
    }
   }
   $51 = HEAP32[$$0$ph>>2]|0;
   $52 = HEAP32[$11>>2]|0;
   $53 = ((($52)) + 52|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_iiii[$54 & 1023]($11,$51,0)|0);
   $56 = ($55<<24>>24)==(37);
   if ($56) {
    label = 21;
    break;
   }
   $79 = HEAP32[$$0$ph>>2]|0;
   $80 = HEAP32[$11>>2]|0;
   $81 = ((($80)) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (FUNCTION_TABLE_iiii[$82 & 1023]($11,8192,$79)|0);
   if ($83) {
    $$0$ph$sink = $$0$ph;
    label = 28;
    break;
   }
   $145 = ((($146)) + 12|0);
   $147 = HEAP32[$145>>2]|0;
   $148 = ((($146)) + 16|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($147|0)==($149|0);
   if ($150) {
    $151 = HEAP32[$146>>2]|0;
    $152 = ((($151)) + 36|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (FUNCTION_TABLE_ii[$153 & 1023]($146)|0);
    $$0$i$i66 = $154;
   } else {
    $155 = HEAP32[$147>>2]|0;
    $156 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($155)|0);
    $$0$i$i66 = $156;
   }
   $157 = HEAP32[$11>>2]|0;
   $158 = ((($157)) + 28|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (FUNCTION_TABLE_iii[$159 & 511]($11,$$0$i$i66)|0);
   $161 = HEAP32[$$0$ph>>2]|0;
   $162 = HEAP32[$11>>2]|0;
   $163 = ((($162)) + 28|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (FUNCTION_TABLE_iii[$164 & 511]($11,$161)|0);
   $166 = ($160|0)==($165|0);
   if ($166) {
    label = 56;
    break;
   }
   HEAP32[$4>>2] = 4;
   $16 = 4;
  }
  L36: do {
   if ((label|0) == 21) {
    label = 0;
    $57 = ((($$0$ph)) + 4|0);
    $58 = ($57|0)==($7|0);
    if ($58) {
     label = 60;
     break L4;
    }
    $59 = HEAP32[$57>>2]|0;
    $60 = HEAP32[$11>>2]|0;
    $61 = ((($60)) + 52|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (FUNCTION_TABLE_iiii[$62 & 1023]($11,$59,0)|0);
    switch ($63<<24>>24) {
    case 48: case 69:  {
     $64 = ((($$0$ph)) + 8|0);
     $65 = ($64|0)==($7|0);
     if ($65) {
      label = 60;
      break L4;
     }
     $66 = HEAP32[$64>>2]|0;
     $67 = HEAP32[$11>>2]|0;
     $68 = ((($67)) + 52|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($11,$66,0)|0);
     $$051 = $63;$$052 = $70;$78 = $57;
     break;
    }
    default: {
     $$051 = 0;$$052 = $63;$78 = $$0$ph;
    }
    }
    $71 = HEAP32[$0>>2]|0;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    HEAP32[$9>>2] = $74;
    HEAP32[$10>>2] = $75;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$10>>2]|0;
    $76 = (FUNCTION_TABLE_iiiiiiiii[$73 & 511]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$052,$$051)|0);
    HEAP32[$1>>2] = $76;
    $77 = ((($78)) + 8|0);
    $$0$ph$be = $77;
   }
   else if ((label|0) == 28) {
    while(1) {
     label = 0;
     $84 = ((($$0$ph$sink)) + 4|0);
     $85 = ($84|0)==($7|0);
     if ($85) {
      $$lcssa = $7;
      break;
     }
     $86 = HEAP32[$84>>2]|0;
     $87 = HEAP32[$11>>2]|0;
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (FUNCTION_TABLE_iiii[$89 & 1023]($11,8192,$86)|0);
     if ($90) {
      $$0$ph$sink = $84;
      label = 28;
     } else {
      $$lcssa = $84;
      break;
     }
    }
    $$pre$i$i$i56 = $146;$$pre$i4$i$i62 = $208;$106 = $208;
    while(1) {
     $91 = ($$pre$i$i$i56|0)==(0|0);
     if ($91) {
      $120 = 1;$122 = 0;
     } else {
      $92 = ((($$pre$i$i$i56)) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ((($$pre$i$i$i56)) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93|0)==($95|0);
      if ($96) {
       $97 = HEAP32[$$pre$i$i$i56>>2]|0;
       $98 = ((($97)) + 36|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (FUNCTION_TABLE_ii[$99 & 1023]($$pre$i$i$i56)|0);
       $$0$i$i$i$i54 = $100;
      } else {
       $101 = HEAP32[$93>>2]|0;
       $102 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($101)|0);
       $$0$i$i$i$i54 = $102;
      }
      $103 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $104 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i54,$103)|0);
      if ($104) {
       HEAP32[$1>>2] = 0;
       $120 = 1;$122 = 0;
      } else {
       $120 = 0;$122 = $$pre$i$i$i56;
      }
     }
     $105 = ($106|0)==(0|0);
     do {
      if ($105) {
       $$pre$i4$i$i62101 = $$pre$i4$i$i62;
       label = 43;
      } else {
       $107 = ((($106)) + 12|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($106)) + 16|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($108|0)==($110|0);
       if ($111) {
        $112 = HEAP32[$106>>2]|0;
        $113 = ((($112)) + 36|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (FUNCTION_TABLE_ii[$114 & 1023]($106)|0);
        $$0$i$i2$i$i60 = $115;
       } else {
        $116 = HEAP32[$108>>2]|0;
        $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
        $$0$i$i2$i$i60 = $117;
       }
       $118 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $119 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i60,$118)|0);
       if ($119) {
        HEAP32[$2>>2] = 0;
        $$pre$i4$i$i62101 = 0;
        label = 43;
        break;
       } else {
        $phitmp$i5$i$i63 = ($$pre$i4$i$i62|0)==(0|0);
        $tmp$i$i65 = $120 ^ $phitmp$i5$i$i63;
        if ($tmp$i$i65) {
         $$pre$i4$i$i62100 = $$pre$i4$i$i62;$209 = $$pre$i4$i$i62;
         break;
        } else {
         $$0$ph$be = $$lcssa;
         break L36;
        }
       }
      }
     } while(0);
     if ((label|0) == 43) {
      label = 0;
      if ($120) {
       $$0$ph$be = $$lcssa;
       break L36;
      } else {
       $$pre$i4$i$i62100 = $$pre$i4$i$i62101;$209 = 0;
      }
     }
     $121 = ((($122)) + 12|0);
     $123 = HEAP32[$121>>2]|0;
     $124 = ((($122)) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($123|0)==($125|0);
     if ($126) {
      $127 = HEAP32[$122>>2]|0;
      $128 = ((($127)) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 1023]($122)|0);
      $$0$i$i = $130;
     } else {
      $131 = HEAP32[$123>>2]|0;
      $132 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($131)|0);
      $$0$i$i = $132;
     }
     $133 = HEAP32[$11>>2]|0;
     $134 = ((($133)) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (FUNCTION_TABLE_iiii[$135 & 1023]($11,8192,$$0$i$i)|0);
     if (!($136)) {
      $$0$ph$be = $$lcssa;
      break L36;
     }
     $137 = HEAP32[$121>>2]|0;
     $138 = HEAP32[$124>>2]|0;
     $139 = ($137|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$122>>2]|0;
      $141 = ((($140)) + 40|0);
      $142 = HEAP32[$141>>2]|0;
      (FUNCTION_TABLE_ii[$142 & 1023]($122)|0);
      $$pre$i$i$i56 = $122;$$pre$i4$i$i62 = $$pre$i4$i$i62100;$106 = $209;
      continue;
     } else {
      $143 = ((($137)) + 4|0);
      HEAP32[$121>>2] = $143;
      $144 = HEAP32[$137>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($144)|0);
      $$pre$i$i$i56 = $122;$$pre$i4$i$i62 = $$pre$i4$i$i62100;$106 = $209;
      continue;
     }
    }
   }
   else if ((label|0) == 56) {
    label = 0;
    $167 = ((($$0$ph)) + 4|0);
    $168 = HEAP32[$145>>2]|0;
    $169 = HEAP32[$148>>2]|0;
    $170 = ($168|0)==($169|0);
    if ($170) {
     $171 = HEAP32[$146>>2]|0;
     $172 = ((($171)) + 40|0);
     $173 = HEAP32[$172>>2]|0;
     (FUNCTION_TABLE_ii[$173 & 1023]($146)|0);
     $$0$ph$be = $167;
     break;
    } else {
     $174 = ((($168)) + 4|0);
     HEAP32[$145>>2] = $174;
     $175 = HEAP32[$168>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($175)|0);
     $$0$ph$be = $167;
     break;
    }
   }
  } while(0);
  $$pre$pre = HEAP32[$4>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 60) {
  HEAP32[$4>>2] = 4;
  $$pre$i$i$i71 = $146;
 }
 $176 = ($$pre$i$i$i71|0)==(0|0);
 if ($176) {
  $$sroa$049$0$copyload = 0;$210 = 1;
 } else {
  $177 = ((($$pre$i$i$i71)) + 12|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($$pre$i$i$i71)) + 16|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($178|0)==($180|0);
  if ($181) {
   $182 = HEAP32[$$pre$i$i$i71>>2]|0;
   $183 = ((($182)) + 36|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (FUNCTION_TABLE_ii[$184 & 1023]($$pre$i$i$i71)|0);
   $$0$i$i$i$i69 = $185;
  } else {
   $186 = HEAP32[$178>>2]|0;
   $187 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($186)|0);
   $$0$i$i$i$i69 = $187;
  }
  $188 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $189 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i69,$188)|0);
  if ($189) {
   HEAP32[$1>>2] = 0;
   $$sroa$049$0$copyload = 0;$210 = 1;
  } else {
   $$sroa$049$0$copyload = $$pre$i$i$i71;$210 = 0;
  }
 }
 $190 = HEAP32[$2>>2]|0;
 $191 = ($190|0)==(0|0);
 do {
  if ($191) {
   label = 73;
  } else {
   $192 = ((($190)) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($190)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($193|0)==($195|0);
   if ($196) {
    $197 = HEAP32[$190>>2]|0;
    $198 = ((($197)) + 36|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (FUNCTION_TABLE_ii[$199 & 1023]($190)|0);
    $$0$i$i2$i$i75 = $200;
   } else {
    $201 = HEAP32[$193>>2]|0;
    $202 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($201)|0);
    $$0$i$i2$i$i75 = $202;
   }
   $203 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $204 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i75,$203)|0);
   if ($204) {
    HEAP32[$2>>2] = 0;
    label = 73;
    break;
   } else {
    if ($210) {
     break;
    } else {
     label = 75;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($210) {
   label = 75;
  }
 }
 if ((label|0) == 75) {
  $205 = HEAP32[$4>>2]|0;
  $206 = $205 | 2;
  HEAP32[$4>>2] = $206;
 }
 STACKTOP = sp;return ($$sroa$049$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $$pre$i4$i$i15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $93 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
     $$0$i$i$i$i = $17;
    }
    $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
    if ($19) {
     HEAP32[$1>>2] = 0;
     $93 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $93 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 15;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
     $$0$i$i2$i$i = $30;
    } else {
     $31 = HEAP32[$23>>2]|0;
     $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
     $$0$i$i2$i$i = $32;
    }
    $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
    if ($34) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($93) {
      $94 = $20;
      break;
     } else {
      $$pre$i4$i$i15 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($93) {
    $$pre$i4$i$i15 = 0;
    break;
   } else {
    $94 = 0;
   }
  }
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($35)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)==($39|0);
  if ($40) {
   $41 = HEAP32[$35>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$37>>2]|0;
   $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
   $$0$i$i = $46;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiii[$49 & 1023]($4,8192,$$0$i$i)|0);
  if (!($50)) {
   $$pre$i4$i$i15 = $94;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 1023]($51)|0);
   continue;
  } else {
   $60 = ((($53)) + 4|0);
   HEAP32[$52>>2] = $60;
   $61 = HEAP32[$53>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
   continue;
  }
 }
 $62 = HEAP32[$1>>2]|0;
 $63 = ($62|0)==(0|0);
 do {
  if ($63) {
   $95 = 1;
  } else {
   $64 = ((($62)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($62)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   if ($68) {
    $69 = HEAP32[$62>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 1023]($62)|0);
    $$0$i$i$i$i7 = $72;
   } else {
    $73 = HEAP32[$65>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i$i$i7 = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7,$75)|0);
   if ($76) {
    HEAP32[$1>>2] = 0;
    $95 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $95 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $77 = ($$pre$i4$i$i15|0)==(0|0);
 do {
  if ($77) {
   label = 37;
  } else {
   $78 = ((($$pre$i4$i$i15)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($$pre$i4$i$i15)) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($79|0)==($81|0);
   if ($82) {
    $83 = HEAP32[$$pre$i4$i$i15>>2]|0;
    $84 = ((($83)) + 36|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (FUNCTION_TABLE_ii[$85 & 1023]($$pre$i4$i$i15)|0);
    $$0$i$i2$i$i13 = $86;
   } else {
    $87 = HEAP32[$79>>2]|0;
    $88 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($87)|0);
    $$0$i$i2$i$i13 = $88;
   }
   $89 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $90 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13,$89)|0);
   if ($90) {
    HEAP32[$2>>2] = 0;
    label = 37;
    break;
   } else {
    if ($95) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($95) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $91 = HEAP32[$3>>2]|0;
  $92 = $91 | 2;
  HEAP32[$3>>2] = $92;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $29 = $17;
 } else {
  $18 = $14&255;
  $29 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $28 = ($29|0)==($26|0);
 do {
  if ($28) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $$ = $14 ? $15 : $8;
   $$0 = $$;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i17 = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i4$i$i1925 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $94 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $94 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $94 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($94) {
     $$pre$i4$i$i1925 = $20;
     label = 16;
     break;
    } else {
     $$sink3 = 6;
     label = 38;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($94) {
   $$sink3 = 6;
   label = 38;
  } else {
   $$pre$i4$i$i1925 = 0;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$1>>2]|0;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($35)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$35>>2]|0;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 1023]($35)|0);
    $$0$i$i = $44;
   } else {
    $45 = HEAP32[$37>>2]|0;
    $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
    $$0$i$i = $46;
   }
   $47 = HEAP32[$4>>2]|0;
   $48 = ((($47)) + 52|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_iiii[$49 & 1023]($4,$$0$i$i,0)|0);
   $51 = ($50<<24>>24)==(37);
   if ($51) {
    $52 = HEAP32[$1>>2]|0;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($52)) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if ($57) {
     $58 = HEAP32[$52>>2]|0;
     $59 = ((($58)) + 40|0);
     $60 = HEAP32[$59>>2]|0;
     (FUNCTION_TABLE_ii[$60 & 1023]($52)|0);
    } else {
     $61 = ((($54)) + 4|0);
     HEAP32[$53>>2] = $61;
     $62 = HEAP32[$54>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($62)|0);
    }
    $63 = HEAP32[$1>>2]|0;
    $64 = ($63|0)==(0|0);
    do {
     if ($64) {
      $95 = 1;
     } else {
      $65 = ((($63)) + 12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ((($63)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($66|0)==($68|0);
      if ($69) {
       $70 = HEAP32[$63>>2]|0;
       $71 = ((($70)) + 36|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (FUNCTION_TABLE_ii[$72 & 1023]($63)|0);
       $$0$i$i$i$i11 = $73;
      } else {
       $74 = HEAP32[$66>>2]|0;
       $75 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($74)|0);
       $$0$i$i$i$i11 = $75;
      }
      $76 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $77 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i11,$76)|0);
      if ($77) {
       HEAP32[$1>>2] = 0;
       $95 = 1;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$1>>2]|0;
       $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
       $95 = $phitmp$i$i$i14;
       break;
      }
     }
    } while(0);
    $78 = ($$pre$i4$i$i1925|0)==(0|0);
    do {
     if (!($78)) {
      $79 = ((($$pre$i4$i$i1925)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($$pre$i4$i$i1925)) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$$pre$i4$i$i1925>>2]|0;
       $85 = ((($84)) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (FUNCTION_TABLE_ii[$86 & 1023]($$pre$i4$i$i1925)|0);
       $$0$i$i2$i$i17 = $87;
      } else {
       $88 = HEAP32[$80>>2]|0;
       $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
       $$0$i$i2$i$i17 = $89;
      }
      $90 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $91 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i17,$90)|0);
      if ($91) {
       HEAP32[$2>>2] = 0;
       break;
      } else {
       if ($95) {
        break L22;
       } else {
        $$sink3 = 2;
        label = 38;
        break L22;
       }
      }
     }
    } while(0);
    if ($95) {
     $$sink3 = 2;
     label = 38;
    }
   } else {
    $$sink3 = 4;
    label = 38;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  $92 = HEAP32[$3>>2]|0;
  $93 = $92 | $$sink3;
  HEAP32[$3>>2] = $93;
 }
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i42 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i48 = 0, $$0$i$i39 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i44 = 0, $$pre$i4$i$i35 = 0, $$pre$i4$i$i50 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i45 = 0, $phitmp$i5$i$i36 = 0, $tmp$i$i38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $169 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 1023]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $169 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $169 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 1023]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($169) {
     $170 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($169) {
   label = 16;
  } else {
   $170 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 1023]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$3>>2]|0;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($3,2048,$$0$i$i)|0);
   if (!($52)) {
    $53 = HEAP32[$2>>2]|0;
    $54 = $53 | 4;
    HEAP32[$2>>2] = $54;
    $$2 = 0;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$57 & 1023]($3,$$0$i$i,0)|0);
   $59 = $58 << 24 >> 24;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($60)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)==($64|0);
   if ($65) {
    $66 = HEAP32[$60>>2]|0;
    $67 = ((($66)) + 40|0);
    $68 = HEAP32[$67>>2]|0;
    (FUNCTION_TABLE_ii[$68 & 1023]($60)|0);
    $$0$in = $59;$$025$in = $4;$$pre$i4$i$i35 = $170;$87 = $170;
   } else {
    $69 = ((($62)) + 4|0);
    HEAP32[$61>>2] = $69;
    $70 = HEAP32[$62>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($70)|0);
    $$0$in = $59;$$025$in = $4;$$pre$i4$i$i35 = $170;$87 = $170;
   }
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ($71|0)==(0|0);
    do {
     if ($72) {
      $101 = 1;
     } else {
      $73 = ((($71)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($71)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$71>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (FUNCTION_TABLE_ii[$80 & 1023]($71)|0);
       $$0$i$i$i$i27 = $81;
      } else {
       $82 = HEAP32[$74>>2]|0;
       $83 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($82)|0);
       $$0$i$i$i$i27 = $83;
      }
      $84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27,$84)|0);
      if ($85) {
       HEAP32[$0>>2] = 0;
       $101 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $101 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $86 = ($87|0)==(0|0);
    do {
     if ($86) {
      $$pre$i4$i$i50 = $$pre$i4$i$i35;$102 = 1;$171 = 0;
     } else {
      $88 = ((($87)) + 12|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($87)) + 16|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($89|0)==($91|0);
      if ($92) {
       $93 = HEAP32[$87>>2]|0;
       $94 = ((($93)) + 36|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (FUNCTION_TABLE_ii[$95 & 1023]($87)|0);
       $$0$i$i2$i$i33 = $96;
      } else {
       $97 = HEAP32[$89>>2]|0;
       $98 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($97)|0);
       $$0$i$i2$i$i33 = $98;
      }
      $99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33,$99)|0);
      if ($100) {
       HEAP32[$1>>2] = 0;
       $$pre$i4$i$i50 = 0;$102 = 1;$171 = 0;
       break;
      } else {
       $phitmp$i5$i$i36 = ($$pre$i4$i$i35|0)==(0|0);
       $$pre$i4$i$i50 = $$pre$i4$i$i35;$102 = $phitmp$i5$i$i36;$171 = $$pre$i4$i$i35;
       break;
      }
     }
    } while(0);
    $tmp$i$i38 = $101 ^ $102;
    $103 = ($$025$in|0)>(1);
    $104 = $103 & $tmp$i$i38;
    $105 = HEAP32[$0>>2]|0;
    if (!($104)) {
     break;
    }
    $106 = ((($105)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ((($105)) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($107|0)==($109|0);
    if ($110) {
     $111 = HEAP32[$105>>2]|0;
     $112 = ((($111)) + 36|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (FUNCTION_TABLE_ii[$113 & 1023]($105)|0);
     $$0$i$i39 = $114;
    } else {
     $115 = HEAP32[$107>>2]|0;
     $116 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($115)|0);
     $$0$i$i39 = $116;
    }
    $117 = HEAP32[$3>>2]|0;
    $118 = ((($117)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (FUNCTION_TABLE_iiii[$119 & 1023]($3,2048,$$0$i$i39)|0);
    if (!($120)) {
     $$2 = $$0;
     break L22;
    }
    $121 = ($$0*10)|0;
    $122 = HEAP32[$3>>2]|0;
    $123 = ((($122)) + 52|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (FUNCTION_TABLE_iiii[$124 & 1023]($3,$$0$i$i39,0)|0);
    $126 = $125 << 24 >> 24;
    $127 = (($126) + ($121))|0;
    $128 = HEAP32[$0>>2]|0;
    $129 = ((($128)) + 12|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ((($128)) + 16|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($130|0)==($132|0);
    if ($133) {
     $134 = HEAP32[$128>>2]|0;
     $135 = ((($134)) + 40|0);
     $136 = HEAP32[$135>>2]|0;
     (FUNCTION_TABLE_ii[$136 & 1023]($128)|0);
     $$0$in = $127;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$87 = $171;
     continue;
    } else {
     $137 = ((($130)) + 4|0);
     HEAP32[$129>>2] = $137;
     $138 = HEAP32[$130>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($138)|0);
     $$0$in = $127;$$025$in = $$025;$$pre$i4$i$i35 = $$pre$i4$i$i50;$87 = $171;
     continue;
    }
   }
   $139 = ($105|0)==(0|0);
   do {
    if ($139) {
     $172 = 1;
    } else {
     $140 = ((($105)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ((($105)) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($141|0)==($143|0);
     if ($144) {
      $145 = HEAP32[$105>>2]|0;
      $146 = ((($145)) + 36|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (FUNCTION_TABLE_ii[$147 & 1023]($105)|0);
      $$0$i$i$i$i42 = $148;
     } else {
      $149 = HEAP32[$141>>2]|0;
      $150 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($149)|0);
      $$0$i$i$i$i42 = $150;
     }
     $151 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $152 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i42,$151)|0);
     if ($152) {
      HEAP32[$0>>2] = 0;
      $172 = 1;
      break;
     } else {
      $$pre$i$i$i44 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i45 = ($$pre$i$i$i44|0)==(0|0);
      $172 = $phitmp$i$i$i45;
      break;
     }
    }
   } while(0);
   $153 = ($$pre$i4$i$i50|0)==(0|0);
   do {
    if ($153) {
     label = 60;
    } else {
     $154 = ((($$pre$i4$i$i50)) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($$pre$i4$i$i50)) + 16|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($155|0)==($157|0);
     if ($158) {
      $159 = HEAP32[$$pre$i4$i$i50>>2]|0;
      $160 = ((($159)) + 36|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (FUNCTION_TABLE_ii[$161 & 1023]($$pre$i4$i$i50)|0);
      $$0$i$i2$i$i48 = $162;
     } else {
      $163 = HEAP32[$155>>2]|0;
      $164 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($163)|0);
      $$0$i$i2$i$i48 = $164;
     }
     $165 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $166 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i48,$165)|0);
     if ($166) {
      HEAP32[$1>>2] = 0;
      label = 60;
      break;
     } else {
      if ($172) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($172)) {
     $$2 = $$0;
     break;
    }
   }
   $167 = HEAP32[$2>>2]|0;
   $168 = $167 | 2;
   HEAP32[$2>>2] = $168;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 4|0;
 $8 = sp;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 1|0);
    HEAP32[$16>>2] = $26;
    HEAP8[$17>>0] = $14;
    $27 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$28)|0);
   $$$sroa$04$0$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $30 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($1,$11)|0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (_strftime_l(($1|0),($12|0),($6|0),($3|0),($13|0))|0);
 $15 = (($1) + ($14)|0);
 HEAP32[$2>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(432)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(478,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch_3(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$sroa$04$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 511]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $26;
    HEAP32[$17>>2] = $14;
    $27 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$28)|0);
   $$$sroa$04$0$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $$$sroa$04$0$i;
  }
  $30 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = sp + 8|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = (__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($1,$15)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (___uselocale($17)|0);
 __THREW__ = 0;
 $19 = (invoke_iiiii(479,($1|0),($9|0),($16|0),($8|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  $29 = ($18|0)==(0|0);
  if (!($29)) {
   __THREW__ = 0;
   (invoke_ii(435,($18|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch_3(0|0)|0;
    $33 = tempRet0;
    ___clang_call_terminate($32);
    // unreachable;
   }
  }
  ___resumeException($27|0);
  // unreachable;
 }
 $22 = ($18|0)==(0|0);
 if (!($22)) {
  __THREW__ = 0;
  (invoke_ii(435,($18|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch_3(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  }
 }
 $34 = ($19|0)==(-1);
 if ($34) {
  __ZNSt3__221__throw_runtime_errorEPKc(16805);
  // unreachable;
 } else {
  $35 = (($1) + ($19<<2)|0);
  HEAP32[$2>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(480,($1|0),($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),(1920|0),(333|0));
  // unreachable;
 }
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33859 = 0, $$33860 = 0, $$361 = 0, $$362 = 0, $$byval_copy = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre63 = 0, $$sroa$0$0$copyload = 0, $$sroa$044$0 = 0, $$sroa$044$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 140|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 138|0;
 $12 = sp + 4|0;
 $13 = sp + 128|0;
 $14 = sp + 28|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (481);
 $17 = ((($7)) + 100|0);
 __THREW__ = 0;
 invoke_vii(353,($10|0),($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $44 = ___cxa_find_matching_catch_2()|0;
  $45 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$33859 = $45;$$361 = $44;$125 = 481;$126 = $7;
  label = 54;
 } else {
  __THREW__ = 0;
  $20 = (invoke_iii(354,($10|0),(20160|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $46 = ___cxa_find_matching_catch_2()|0;
   $47 = tempRet0;
   $$234 = $46;$$237 = $47;
  } else {
   HEAP8[$11>>0] = 0;
   $23 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $23;
   $24 = ((($4)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $26 = (invoke_iiiiiiiiiiii(482,($1|0),($$byval_copy|0),($3|0),($10|0),($25|0),($5|0),($11|0),($20|0),($8|0),($9|0),($17|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   L7: do {
    if ($28) {
     label = 11;
    } else {
     L9: do {
      if ($26) {
       $29 = HEAP32[$20>>2]|0;
       $30 = ((($29)) + 32|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($31|0,($20|0),(17028|0),((17038)|0),($13|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        $50 = ___cxa_find_matching_catch_2()|0;
        $51 = tempRet0;
        $$032 = $50;$$035 = $51;
       } else {
        $34 = HEAP32[$9>>2]|0;
        $35 = HEAP32[$8>>2]|0;
        $36 = (($34) - ($35))|0;
        $37 = ($36|0)>(98);
        if ($37) {
         $38 = (($36) + 2)|0;
         $39 = (_malloc($38)|0);
         $40 = $39;
         $41 = ($39|0)==(0|0);
         if ($41) {
          __THREW__ = 0;
          invoke_v(449);
          $42 = __THREW__; __THREW__ = 0;
          $43 = $42&1;
          if ($43) {
           $$sroa$044$0 = $40;
          } else {
           $$031 = 0;$$sroa$044$1 = $40;
           label = 16;
          }
         } else {
          $$031 = $39;$$sroa$044$1 = $40;
          label = 16;
         }
        } else {
         $$031 = $14;$$sroa$044$1 = 0;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $56 = HEAP8[$11>>0]|0;
          $57 = ($56<<24>>24)==(0);
          if ($57) {
           $$1 = $$031;
          } else {
           $58 = ((($$031)) + 1|0);
           HEAP8[$$031>>0] = 45;
           $$1 = $58;
          }
          $59 = HEAP32[$8>>2]|0;
          $60 = ((($13)) + 10|0);
          $61 = $13;
          $$0 = $59;$$2 = $$1;
          while(1) {
           $62 = HEAP32[$9>>2]|0;
           $63 = ($$0>>>0)<($62>>>0);
           if (!($63)) {
            break;
           }
           $66 = HEAP8[$$0>>0]|0;
           $$0$i = $13;
           while(1) {
            $67 = ($$0$i|0)==($60|0);
            if ($67) {
             $$0$lcssa$i = $60;
             break;
            }
            $68 = HEAP8[$$0$i>>0]|0;
            $69 = ($68<<24>>24)==($66<<24>>24);
            if ($69) {
             $$0$lcssa$i = $$0$i;
             break;
            }
            $70 = ((($$0$i)) + 1|0);
            $$0$i = $70;
           }
           $71 = $$0$lcssa$i;
           $72 = (($71) - ($61))|0;
           $73 = (17028 + ($72)|0);
           $74 = HEAP8[$73>>0]|0;
           HEAP8[$$2>>0] = $74;
           $75 = ((($$0)) + 1|0);
           $76 = ((($$2)) + 1|0);
           $$0 = $75;$$2 = $76;
          }
          HEAP8[$$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $6;
          $64 = (_sscanf($14,17039,$vararg_buffer)|0);
          $65 = ($64|0)==(1);
          if (!($65)) {
           __THREW__ = 0;
           invoke_vi(483,(17043|0));
           $77 = __THREW__; __THREW__ = 0;
           $78 = $77&1;
           if ($78) {
            $$sroa$044$0 = $$sroa$044$1;
            break;
           }
          }
          $79 = ($$sroa$044$1|0)==(0);
          if (!($79)) {
           $80 = $$sroa$044$1;
           _free($80);
          }
          break L9;
         }
        } while(0);
        $52 = ___cxa_find_matching_catch_2()|0;
        $53 = tempRet0;
        $54 = ($$sroa$044$0|0)==(0);
        if (!($54)) {
         $55 = $$sroa$044$0;
         _free($55);
        }
        $$032 = $52;$$035 = $53;
       }
       $$133 = $$032;$$136 = $$035;
       break L7;
      }
     } while(0);
     $81 = HEAP32[$1>>2]|0;
     $82 = ($81|0)==(0|0);
     do {
      if ($82) {
       $131 = 1;
      } else {
       $83 = ((($81)) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($81)) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)==($86|0);
       if ($87) {
        $88 = HEAP32[$81>>2]|0;
        $89 = ((($88)) + 36|0);
        $90 = HEAP32[$89>>2]|0;
        __THREW__ = 0;
        $91 = (invoke_ii($90|0,($81|0))|0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         label = 11;
         break L7;
        } else {
         $$0$i$i$i$i = $91;
        }
       } else {
        $94 = HEAP8[$84>>0]|0;
        $95 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($94)|0);
        $$0$i$i$i$i = $95;
       }
       $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $97 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$96)|0);
       if ($97) {
        HEAP32[$1>>2] = 0;
        $131 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $131 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $98 = HEAP32[$2>>2]|0;
     $99 = ($98|0)==(0|0);
     do {
      if ($99) {
       label = 44;
      } else {
       $100 = ((($98)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($98)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($101|0)==($103|0);
       if ($104) {
        $105 = HEAP32[$98>>2]|0;
        $106 = ((($105)) + 36|0);
        $107 = HEAP32[$106>>2]|0;
        __THREW__ = 0;
        $108 = (invoke_ii($107|0,($98|0))|0);
        $109 = __THREW__; __THREW__ = 0;
        $110 = $109&1;
        if ($110) {
         label = 11;
         break L7;
        } else {
         $$0$i$i2$i$i = $108;
        }
       } else {
        $111 = HEAP8[$101>>0]|0;
        $112 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($111)|0);
        $$0$i$i2$i$i = $112;
       }
       $113 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $114 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$113)|0);
       if ($114) {
        HEAP32[$2>>2] = 0;
        label = 44;
        break;
       } else {
        if ($131) {
         break;
        } else {
         label = 46;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 44) {
      if ($131) {
       label = 46;
      }
     }
     if ((label|0) == 46) {
      $115 = HEAP32[$5>>2]|0;
      $116 = $115 | 2;
      HEAP32[$5>>2] = $116;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__26localeD2Ev($10);
     $117 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $118 = ($117|0)==(0|0);
     if (!($118)) {
      $119 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($119|0,($117|0));
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       $122 = ___cxa_find_matching_catch_3(0|0)|0;
       $123 = tempRet0;
       ___clang_call_terminate($122);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $$133 = $48;$$136 = $49;
   }
   $$234 = $$133;$$237 = $$136;
  }
  __ZNSt3__26localeD2Ev($10);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $124 = ($$pre|0)==(0|0);
  if ($124) {
   $$33860 = $$237;$$362 = $$234;
  } else {
   $$pre63 = HEAP32[$16>>2]|0;
   $$33859 = $$237;$$361 = $$234;$125 = $$pre63;$126 = $$pre;
   label = 54;
  }
 }
 if ((label|0) == 54) {
  __THREW__ = 0;
  invoke_vi($125|0,($126|0));
  $127 = __THREW__; __THREW__ = 0;
  $128 = $127&1;
  if ($128) {
   $129 = ___cxa_find_matching_catch_3(0|0)|0;
   $130 = tempRet0;
   ___clang_call_terminate($129);
   // unreachable;
  } else {
   $$33860 = $$33859;$$362 = $$361;
  }
 }
 ___resumeException($$362|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$1 = 0, $$132 = 0, $$23343 = 0, $$23344 = 0, $$245 = 0, $$246 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy = sp + 24|0;
 $7 = sp + 133|0;
 $8 = sp + 132|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp + 28|0;
 $14 = sp;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (481);
 $17 = ((($9)) + 100|0);
 __THREW__ = 0;
 invoke_vii(353,($12|0),($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  HEAP32[$10>>2] = 0;
  $$23343 = $46;$$245 = $45;$111 = $9;
  label = 41;
 } else {
  __THREW__ = 0;
  $20 = (invoke_iii(354,($12|0),(20160|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   $$1 = $47;$$132 = $48;
  } else {
   HEAP8[$13>>0] = 0;
   $23 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $23;
   $24 = ((($4)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $23;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
   $27 = (invoke_iiiiiiiiiiii(482,($1|0),($$byval_copy|0),($3|0),($12|0),($25|0),($5|0),($13|0),($20|0),($10|0),($11|0),($17|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   L7: do {
    if (!($29)) {
     if ($27) {
      $30 = ((($6)) + 11|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)<(0);
      if ($32) {
       $33 = HEAP32[$6>>2]|0;
       HEAP8[$7>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($33,$7);
       $34 = ((($6)) + 4|0);
       HEAP32[$34>>2] = 0;
      } else {
       HEAP8[$8>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($6,$8);
       HEAP8[$30>>0] = 0;
      }
      $35 = HEAP8[$13>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if (!($36)) {
       $37 = HEAP32[$20>>2]|0;
       $38 = ((($37)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_iii($39|0,($20|0),45)|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(356,($6|0),($40|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        break;
       }
      }
      $49 = HEAP32[$20>>2]|0;
      $50 = ((($49)) + 28|0);
      $51 = HEAP32[$50>>2]|0;
      __THREW__ = 0;
      $52 = (invoke_iii($51|0,($20|0),48)|0);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       break;
      }
      $55 = HEAP32[$10>>2]|0;
      $56 = HEAP32[$11>>2]|0;
      $57 = ((($56)) + -1|0);
      $$0 = $55;
      while(1) {
       $58 = ($$0>>>0)<($57>>>0);
       if (!($58)) {
        break;
       }
       $59 = HEAP8[$$0>>0]|0;
       $60 = ($59<<24>>24)==($52<<24>>24);
       if (!($60)) {
        break;
       }
       $61 = ((($$0)) + 1|0);
       $$0 = $61;
      }
      __THREW__ = 0;
      (invoke_iiii(484,($6|0),($$0|0),($56|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       break;
      }
     }
     $64 = HEAP32[$1>>2]|0;
     $65 = ($64|0)==(0|0);
     do {
      if ($65) {
       $116 = 1;
      } else {
       $66 = ((($64)) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ((($64)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = HEAP32[$64>>2]|0;
        $72 = ((($71)) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        __THREW__ = 0;
        $74 = (invoke_ii($73|0,($64|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         break L7;
        } else {
         $$0$i$i$i$i = $74;
        }
       } else {
        $77 = HEAP8[$67>>0]|0;
        $78 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($77)|0);
        $$0$i$i$i$i = $78;
       }
       $79 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $80 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$79)|0);
       if ($80) {
        HEAP32[$1>>2] = 0;
        $116 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $116 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $81 = ($23|0)==(0);
     do {
      if ($81) {
       label = 32;
      } else {
       $82 = ((($26)) + 12|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ((($26)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($83|0)==($85|0);
       if ($86) {
        $87 = $23;
        $88 = HEAP32[$87>>2]|0;
        $89 = ((($88)) + 36|0);
        $90 = HEAP32[$89>>2]|0;
        __THREW__ = 0;
        $91 = (invoke_ii($90|0,($26|0))|0);
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         break L7;
        } else {
         $$0$i$i2$i$i = $91;
        }
       } else {
        $94 = HEAP8[$83>>0]|0;
        $95 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($94)|0);
        $$0$i$i2$i$i = $95;
       }
       $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $97 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$96)|0);
       if ($97) {
        HEAP32[$2>>2] = 0;
        label = 32;
        break;
       } else {
        if ($116) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($116) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $98 = HEAP32[$5>>2]|0;
      $99 = $98 | 2;
      HEAP32[$5>>2] = $99;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__26localeD2Ev($12);
     $100 = HEAP32[$10>>2]|0;
     HEAP32[$10>>2] = 0;
     $101 = ($100|0)==(0|0);
     if (!($101)) {
      $102 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($102|0,($100|0));
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       $105 = ___cxa_find_matching_catch_3(0|0)|0;
       $106 = tempRet0;
       ___clang_call_terminate($105);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $107 = ___cxa_find_matching_catch_2()|0;
   $108 = tempRet0;
   $$1 = $107;$$132 = $108;
  }
  __ZNSt3__26localeD2Ev($12);
  $$pre = HEAP32[$10>>2]|0;
  HEAP32[$10>>2] = 0;
  $109 = ($$pre|0)==(0|0);
  if ($109) {
   $$23344 = $$132;$$246 = $$1;
  } else {
   $$23343 = $$132;$$245 = $$1;$111 = $$pre;
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $110 = HEAP32[$16>>2]|0;
  __THREW__ = 0;
  invoke_vi($110|0,($111|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$23344 = $$23343;$$246 = $$245;
  }
 }
 ___resumeException($$246|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0149 = 0, $$$0149159 = 0, $$$0149160 = 0, $$$0149161 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i190 = 0, $$0$i$i$i$i247 = 0, $$0$i$i$i$i269 = 0, $$0$i$i$i$i290 = 0, $$0$i$i$i$i312 = 0, $$0$i$i$i$i332 = 0, $$0$i$i169 = 0, $$0$i$i172 = 0, $$0$i$i175 = 0, $$0$i$i178 = 0, $$0$i$i181 = 0, $$0$i$i185 = 0, $$0$i$i188 = 0;
 var $$0$i$i2$i$i = 0, $$0$i$i2$i$i196 = 0, $$0$i$i2$i$i253 = 0, $$0$i$i2$i$i275 = 0, $$0$i$i2$i$i296 = 0, $$0$i$i2$i$i318 = 0, $$0$i$i2$i$i338 = 0, $$0$i$i205 = 0, $$0$i$i209 = 0, $$0$i$i216 = 0, $$0$i$i222 = 0, $$0$i$i229 = 0, $$0$i$i236 = 0, $$0$i$i284 = 0, $$0$i$i305 = 0, $$0$i$i327 = 0, $$0$i$i347 = 0, $$0$i$i351 = 0, $$0132 = 0, $$0149 = 0;
 var $$0158 = 0, $$10 = 0, $$1150 = 0, $$2134$ph = 0, $$5142 = 0, $$5148 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i192 = 0, $$pre$i$i$i249 = 0, $$pre$i$i$i271 = 0, $$pre$i$i$i292 = 0, $$pre$i$i$i314 = 0, $$pre$i$i$i334 = 0, $$pre$i4$i$i198 = 0, $$pre$i4$i$i198512 = 0, $$pre$i4$i$i198514 = 0, $$pre$i4$i$i277 = 0, $$pre$i4$i$i277509 = 0;
 var $$pre$i4$i$i277510 = 0, $$pre$i4$i$i298 = 0, $$pre$i4$i$i298498 = 0, $$pre$i4$i$i298500 = 0, $$pre$i4$i$i320 = 0, $$pre$i4$i$i340 = 0, $$pre$i4$i$i340505$ph = 0, $$pre$i4$i$i340505518 = 0, $$pre502 = 0, $$pre504 = 0, $$pre507 = 0, $$pre508 = 0, $$sink = 0, $$sroa$0360$0 = 0, $$sroa$0381$0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond$i$i = 0, $exitcond$i$i170 = 0, $exitcond$i$i173 = 0, $exitcond$i$i176 = 0;
 var $exitcond$i$i179 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond164 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i193 = 0, $phitmp$i$i$i250 = 0, $phitmp$i$i$i272 = 0, $phitmp$i$i$i293 = 0, $phitmp$i$i$i315 = 0, $phitmp$i$i$i335 = 0, $phitmp$i5$i$i199 = 0, $phitmp$i5$i$i278 = 0, $phitmp$i5$i$i299 = 0, $phitmp$i5$i$i341 = 0, $sext = 0, $sext421 = 0, $sext422 = 0, $sext423 = 0;
 var $switch = 0, $tmp$i$i201 = 0, $tmp$i$i280 = 0, $tmp$i$i301 = 0, $tmp$i$i343 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 488|0;
 $12 = sp + 88|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 496|0;
 $17 = sp + 493|0;
 $18 = sp + 492|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (481);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i169 = 0;
 while(1) {
  $exitcond$i$i170 = ($$0$i$i169|0)==(3);
  if ($exitcond$i$i170) {
   break;
  }
  $31 = (($20) + ($$0$i$i169<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i169) + 1)|0;
  $$0$i$i169 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i172 = 0;
 while(1) {
  $exitcond$i$i173 = ($$0$i$i172|0)==(3);
  if ($exitcond$i$i173) {
   break;
  }
  $33 = (($21) + ($$0$i$i172<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i172) + 1)|0;
  $$0$i$i172 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i175 = 0;
 while(1) {
  $exitcond$i$i176 = ($$0$i$i175|0)==(3);
  if ($exitcond$i$i176) {
   break;
  }
  $35 = (($22) + ($$0$i$i175<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i175) + 1)|0;
  $$0$i$i175 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i178 = 0;
 while(1) {
  $exitcond$i$i179 = ($$0$i$i178|0)==(3);
  if ($exitcond$i$i179) {
   break;
  }
  $37 = (($23) + ($$0$i$i178<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i178) + 1)|0;
  $$0$i$i178 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(485,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = tempRet0;
   $$5142 = $92;$$5148 = $93;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($7)) + 8|0);
   $43 = ((($21)) + 11|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 11|0);
   $46 = ((($22)) + 4|0);
   $47 = $4 & 512;
   $48 = ($47|0)!=(0);
   $49 = ((($20)) + 11|0);
   $50 = ((($20)) + 4|0);
   $51 = ((($23)) + 11|0);
   $52 = ((($23)) + 4|0);
   $53 = ((($16)) + 3|0);
   $54 = ((($19)) + 11|0);
   $55 = ((($19)) + 4|0);
   $$0149 = 0;$$0158 = 0;
   L24: while(1) {
    $56 = ($$0158>>>0)<(4);
    $57 = ($$0149|0)!=(0|0);
    if (!($56)) {
     label = 246;
     break;
    }
    $58 = HEAP32[$0>>2]|0;
    $59 = ($58|0)==(0|0);
    do {
     if ($59) {
      $902 = 1;
     } else {
      $60 = ((($58)) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ((($58)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($61|0)==($63|0);
      if ($64) {
       $65 = HEAP32[$58>>2]|0;
       $66 = ((($65)) + 36|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = (invoke_ii($67|0,($58|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        label = 35;
        break L24;
       } else {
        $$0$i$i$i$i = $68;
       }
      } else {
       $71 = HEAP8[$61>>0]|0;
       $72 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($71)|0);
       $$0$i$i$i$i = $72;
      }
      $73 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $74 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$73)|0);
      if ($74) {
       HEAP32[$0>>2] = 0;
       $902 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$0>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $902 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $75 = HEAP32[$1>>2]|0;
    $76 = ($75|0)==(0|0);
    do {
     if ($76) {
      label = 32;
     } else {
      $77 = ((($75)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($75)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if ($81) {
       $82 = HEAP32[$75>>2]|0;
       $83 = ((($82)) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_ii($84|0,($75|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 35;
        break L24;
       } else {
        $$0$i$i2$i$i = $85;
       }
      } else {
       $88 = HEAP8[$78>>0]|0;
       $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
       $$0$i$i2$i$i = $89;
      }
      $90 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $91 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$90)|0);
      if ($91) {
       HEAP32[$1>>2] = 0;
       label = 32;
       break;
      } else {
       if ($902) {
        $903 = $75;
        break;
       } else {
        label = 246;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($902) {
      label = 246;
      break;
     } else {
      $903 = 0;
     }
    }
    $96 = (($16) + ($$0158)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97 << 24 >> 24;
    $99 = ($$0158|0)!=(3);
    L49: do {
     switch ($98|0) {
     case 1:  {
      if ($99) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($100)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if ($105) {
        $106 = HEAP32[$100>>2]|0;
        $107 = ((($106)) + 36|0);
        $108 = HEAP32[$107>>2]|0;
        __THREW__ = 0;
        $109 = (invoke_ii($108|0,($100|0))|0);
        $110 = __THREW__; __THREW__ = 0;
        $111 = $110&1;
        if ($111) {
         label = 35;
         break L24;
        } else {
         $$0$i$i185 = $109;
        }
       } else {
        $112 = HEAP8[$102>>0]|0;
        $113 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($112)|0);
        $$0$i$i185 = $113;
       }
       $114 = $$0$i$i185&255;
       $115 = ($114<<24>>24)>(-1);
       if (!($115)) {
        label = 47;
        break L24;
       }
       $sext423 = $$0$i$i185 << 24;
       $116 = $sext423 >> 24;
       $117 = HEAP32[$42>>2]|0;
       $118 = (($117) + ($116<<1)|0);
       $119 = HEAP16[$118>>1]|0;
       $120 = $119 & 8192;
       $121 = ($120<<16>>16)==(0);
       if ($121) {
        label = 47;
        break L24;
       }
       $122 = HEAP32[$0>>2]|0;
       $123 = ((($122)) + 12|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ((($122)) + 16|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($124|0)==($126|0);
       if ($127) {
        $128 = HEAP32[$122>>2]|0;
        $129 = ((($128)) + 40|0);
        $130 = HEAP32[$129>>2]|0;
        __THREW__ = 0;
        $131 = (invoke_ii($130|0,($122|0))|0);
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         label = 35;
         break L24;
        } else {
         $$0$i$i188 = $131;
        }
       } else {
        $134 = ((($124)) + 1|0);
        HEAP32[$123>>2] = $134;
        $135 = HEAP8[$124>>0]|0;
        $136 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($135)|0);
        $$0$i$i188 = $136;
       }
       $137 = $$0$i$i188&255;
       __THREW__ = 0;
       invoke_vii(356,($23|0),($137|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        label = 35;
        break L24;
       } else {
        $$pre$i4$i$i198 = $903;$160 = $903;
        label = 49;
       }
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     case 0:  {
      if ($99) {
       $$pre$i4$i$i198 = $903;$160 = $903;
       label = 49;
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     case 3:  {
      $217 = HEAP8[$43>>0]|0;
      $218 = ($217<<24>>24)<(0);
      $219 = HEAP32[$44>>2]|0;
      $220 = $217&255;
      $221 = $218 ? $219 : $220;
      $222 = HEAP8[$45>>0]|0;
      $223 = ($222<<24>>24)<(0);
      $224 = HEAP32[$46>>2]|0;
      $225 = $222&255;
      $226 = $223 ? $224 : $225;
      $227 = (0 - ($226))|0;
      $228 = ($221|0)==($227|0);
      if ($228) {
       $$1150 = $$0149;
      } else {
       $229 = ($221|0)==(0);
       if ($229) {
        $271 = HEAP32[$0>>2]|0;
        $272 = ((($271)) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ((($271)) + 16|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ($273|0)==($275|0);
        if ($276) {
         $277 = HEAP32[$271>>2]|0;
         $278 = ((($277)) + 36|0);
         $279 = HEAP32[$278>>2]|0;
         __THREW__ = 0;
         $280 = (invoke_ii($279|0,($271|0))|0);
         $281 = __THREW__; __THREW__ = 0;
         $282 = $281&1;
         if ($282) {
          label = 35;
          break L24;
         } else {
          $$0$i$i222 = $280;
         }
        } else {
         $283 = HEAP8[$273>>0]|0;
         $284 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($283)|0);
         $$0$i$i222 = $284;
        }
        $285 = $$0$i$i222&255;
        $286 = HEAP8[$45>>0]|0;
        $287 = ($286<<24>>24)<(0);
        $288 = HEAP32[$22>>2]|0;
        $289 = $287 ? $288 : $22;
        $290 = HEAP8[$289>>0]|0;
        $291 = ($285<<24>>24)==($290<<24>>24);
        if (!($291)) {
         $$1150 = $$0149;
         break L49;
        }
        $292 = HEAP32[$0>>2]|0;
        $293 = ((($292)) + 12|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ((($292)) + 16|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($294|0)==($296|0);
        if ($297) {
         $298 = HEAP32[$292>>2]|0;
         $299 = ((($298)) + 40|0);
         $300 = HEAP32[$299>>2]|0;
         __THREW__ = 0;
         (invoke_ii($300|0,($292|0))|0);
         $301 = __THREW__; __THREW__ = 0;
         $302 = $301&1;
         if ($302) {
          label = 35;
          break L24;
         }
        } else {
         $303 = ((($294)) + 1|0);
         HEAP32[$293>>2] = $303;
         $304 = HEAP8[$294>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($304)|0);
        }
        HEAP8[$6>>0] = 1;
        $305 = HEAP8[$45>>0]|0;
        $306 = ($305<<24>>24)<(0);
        $307 = HEAP32[$46>>2]|0;
        $308 = $305&255;
        $309 = $306 ? $307 : $308;
        $310 = ($309>>>0)>(1);
        $$$0149159 = $310 ? $22 : $$0149;
        $$1150 = $$$0149159;
        break L49;
       }
       $230 = ($226|0)==(0);
       $231 = HEAP32[$0>>2]|0;
       $232 = ((($231)) + 12|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ((($231)) + 16|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = ($233|0)==($235|0);
       if ($230) {
        if ($236) {
         $237 = HEAP32[$231>>2]|0;
         $238 = ((($237)) + 36|0);
         $239 = HEAP32[$238>>2]|0;
         __THREW__ = 0;
         $240 = (invoke_ii($239|0,($231|0))|0);
         $241 = __THREW__; __THREW__ = 0;
         $242 = $241&1;
         if ($242) {
          label = 35;
          break L24;
         } else {
          $$0$i$i216 = $240;
         }
        } else {
         $243 = HEAP8[$233>>0]|0;
         $244 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($243)|0);
         $$0$i$i216 = $244;
        }
        $245 = $$0$i$i216&255;
        $246 = HEAP8[$43>>0]|0;
        $247 = ($246<<24>>24)<(0);
        $248 = HEAP32[$21>>2]|0;
        $249 = $247 ? $248 : $21;
        $250 = HEAP8[$249>>0]|0;
        $251 = ($245<<24>>24)==($250<<24>>24);
        if (!($251)) {
         HEAP8[$6>>0] = 1;
         $$1150 = $$0149;
         break L49;
        }
        $252 = HEAP32[$0>>2]|0;
        $253 = ((($252)) + 12|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ((($252)) + 16|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ($254|0)==($256|0);
        if ($257) {
         $258 = HEAP32[$252>>2]|0;
         $259 = ((($258)) + 40|0);
         $260 = HEAP32[$259>>2]|0;
         __THREW__ = 0;
         (invoke_ii($260|0,($252|0))|0);
         $261 = __THREW__; __THREW__ = 0;
         $262 = $261&1;
         if ($262) {
          label = 35;
          break L24;
         }
        } else {
         $263 = ((($254)) + 1|0);
         HEAP32[$253>>2] = $263;
         $264 = HEAP8[$254>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($264)|0);
        }
        $265 = HEAP8[$43>>0]|0;
        $266 = ($265<<24>>24)<(0);
        $267 = HEAP32[$44>>2]|0;
        $268 = $265&255;
        $269 = $266 ? $267 : $268;
        $270 = ($269>>>0)>(1);
        $$$0149 = $270 ? $21 : $$0149;
        $$1150 = $$$0149;
        break L49;
       }
       if ($236) {
        $311 = HEAP32[$231>>2]|0;
        $312 = ((($311)) + 36|0);
        $313 = HEAP32[$312>>2]|0;
        __THREW__ = 0;
        $314 = (invoke_ii($313|0,($231|0))|0);
        $315 = __THREW__; __THREW__ = 0;
        $316 = $315&1;
        if ($316) {
         label = 35;
         break L24;
        } else {
         $$0$i$i229 = $314;
        }
       } else {
        $317 = HEAP8[$233>>0]|0;
        $318 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($317)|0);
        $$0$i$i229 = $318;
       }
       $319 = $$0$i$i229&255;
       $320 = HEAP8[$43>>0]|0;
       $321 = ($320<<24>>24)<(0);
       $322 = HEAP32[$21>>2]|0;
       $323 = $321 ? $322 : $21;
       $324 = HEAP8[$323>>0]|0;
       $325 = ($319<<24>>24)==($324<<24>>24);
       $326 = HEAP32[$0>>2]|0;
       $327 = ((($326)) + 12|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($326)) + 16|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($328|0)==($330|0);
       if ($325) {
        if ($331) {
         $332 = HEAP32[$326>>2]|0;
         $333 = ((($332)) + 40|0);
         $334 = HEAP32[$333>>2]|0;
         __THREW__ = 0;
         (invoke_ii($334|0,($326|0))|0);
         $335 = __THREW__; __THREW__ = 0;
         $336 = $335&1;
         if ($336) {
          label = 35;
          break L24;
         }
        } else {
         $337 = ((($328)) + 1|0);
         HEAP32[$327>>2] = $337;
         $338 = HEAP8[$328>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($338)|0);
        }
        $339 = HEAP8[$43>>0]|0;
        $340 = ($339<<24>>24)<(0);
        $341 = HEAP32[$44>>2]|0;
        $342 = $339&255;
        $343 = $340 ? $341 : $342;
        $344 = ($343>>>0)>(1);
        $$$0149160 = $344 ? $21 : $$0149;
        $$1150 = $$$0149160;
        break L49;
       }
       if ($331) {
        $345 = HEAP32[$326>>2]|0;
        $346 = ((($345)) + 36|0);
        $347 = HEAP32[$346>>2]|0;
        __THREW__ = 0;
        $348 = (invoke_ii($347|0,($326|0))|0);
        $349 = __THREW__; __THREW__ = 0;
        $350 = $349&1;
        if ($350) {
         label = 35;
         break L24;
        } else {
         $$0$i$i236 = $348;
        }
       } else {
        $351 = HEAP8[$328>>0]|0;
        $352 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($351)|0);
        $$0$i$i236 = $352;
       }
       $353 = $$0$i$i236&255;
       $354 = HEAP8[$45>>0]|0;
       $355 = ($354<<24>>24)<(0);
       $356 = HEAP32[$22>>2]|0;
       $357 = $355 ? $356 : $22;
       $358 = HEAP8[$357>>0]|0;
       $359 = ($353<<24>>24)==($358<<24>>24);
       if (!($359)) {
        label = 109;
        break L24;
       }
       $360 = HEAP32[$0>>2]|0;
       $361 = ((($360)) + 12|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = ((($360)) + 16|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = ($362|0)==($364|0);
       if ($365) {
        $366 = HEAP32[$360>>2]|0;
        $367 = ((($366)) + 40|0);
        $368 = HEAP32[$367>>2]|0;
        __THREW__ = 0;
        (invoke_ii($368|0,($360|0))|0);
        $369 = __THREW__; __THREW__ = 0;
        $370 = $369&1;
        if ($370) {
         label = 35;
         break L24;
        }
       } else {
        $371 = ((($362)) + 1|0);
        HEAP32[$361>>2] = $371;
        $372 = HEAP8[$362>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($372)|0);
       }
       HEAP8[$6>>0] = 1;
       $373 = HEAP8[$45>>0]|0;
       $374 = ($373<<24>>24)<(0);
       $375 = HEAP32[$46>>2]|0;
       $376 = $373&255;
       $377 = $374 ? $375 : $376;
       $378 = ($377>>>0)>(1);
       $$$0149161 = $378 ? $22 : $$0149;
       $$1150 = $$$0149161;
      }
      break;
     }
     case 2:  {
      $381 = ($$0158>>>0)<(2);
      $or$cond = $381 | $57;
      if (!($or$cond)) {
       $382 = ($$0158|0)==(2);
       $383 = HEAP8[$53>>0]|0;
       $384 = ($383<<24>>24)!=(0);
       $385 = $382 & $384;
       $brmerge = $48 | $385;
       if (!($brmerge)) {
        $$1150 = 0;
        break L49;
       }
      }
      $386 = HEAP8[$49>>0]|0;
      $387 = ($386<<24>>24)<(0);
      $388 = HEAP32[$20>>2]|0;
      $389 = $387 ? $388 : $20;
      $390 = $389;
      $391 = ($$0158|0)==(0);
      L115: do {
       if ($391) {
        $$pre$i4$i$i277 = $903;$$sroa$0360$0 = $390;$431 = $386;$435 = $388;$458 = $903;
       } else {
        $392 = (($$0158) + -1)|0;
        $393 = (($16) + ($392)|0);
        $394 = HEAP8[$393>>0]|0;
        $switch = ($394&255)<(2);
        if ($switch) {
         $395 = HEAP32[$50>>2]|0;
         $396 = $386&255;
         $397 = $387 ? $395 : $396;
         $398 = (($389) + ($397)|0);
         $$sroa$0381$0 = $390;
         while(1) {
          $399 = $$sroa$0381$0;
          $400 = ($399|0)==($398|0);
          if ($400) {
           break;
          }
          $401 = HEAP8[$399>>0]|0;
          $402 = ($401<<24>>24)>(-1);
          if (!($402)) {
           break;
          }
          $403 = $401 << 24 >> 24;
          $404 = HEAP32[$42>>2]|0;
          $405 = (($404) + ($403<<1)|0);
          $406 = HEAP16[$405>>1]|0;
          $407 = $406 & 8192;
          $408 = ($407<<16>>16)==(0);
          if ($408) {
           break;
          }
          $409 = ((($399)) + 1|0);
          $410 = $409;
          $$sroa$0381$0 = $410;
         }
         $411 = (($$sroa$0381$0) - ($390))|0;
         $412 = HEAP8[$51>>0]|0;
         $413 = ($412<<24>>24)<(0);
         $414 = HEAP32[$52>>2]|0;
         $415 = $412&255;
         $416 = $413 ? $414 : $415;
         $417 = ($411>>>0)>($416>>>0);
         if ($417) {
          $$pre$i4$i$i277 = $903;$$sroa$0360$0 = $390;$431 = $386;$435 = $388;$458 = $903;
         } else {
          $418 = HEAP32[$23>>2]|0;
          $419 = $413 ? $418 : $23;
          $420 = (($419) + ($416)|0);
          $421 = (0 - ($411))|0;
          $422 = (($420) + ($421)|0);
          $$sink = $389;$424 = $422;
          while(1) {
           $423 = ($424|0)==($420|0);
           if ($423) {
            $$pre$i4$i$i277 = $903;$$sroa$0360$0 = $$sroa$0381$0;$431 = $386;$435 = $388;$458 = $903;
            break L115;
           }
           $425 = HEAP8[$424>>0]|0;
           $426 = HEAP8[$$sink>>0]|0;
           $427 = ($425<<24>>24)==($426<<24>>24);
           if (!($427)) {
            $$pre$i4$i$i277 = $903;$$sroa$0360$0 = $390;$431 = $386;$435 = $388;$458 = $903;
            break L115;
           }
           $428 = ((($424)) + 1|0);
           $429 = ((($$sink)) + 1|0);
           $$sink = $429;$424 = $428;
          }
         }
        } else {
         $$pre$i4$i$i277 = $903;$$sroa$0360$0 = $390;$431 = $386;$435 = $388;$458 = $903;
        }
       }
      } while(0);
      L129: while(1) {
       $430 = ($431<<24>>24)<(0);
       $432 = HEAP32[$50>>2]|0;
       $433 = $431&255;
       $434 = $430 ? $435 : $20;
       $436 = $430 ? $432 : $433;
       $437 = (($434) + ($436)|0);
       $438 = $$sroa$0360$0;
       $439 = ($438|0)==($437|0);
       if ($439) {
        $$lcssa = $437;
        break;
       }
       $440 = HEAP32[$0>>2]|0;
       $441 = ($440|0)==(0|0);
       do {
        if ($441) {
         $474 = 1;
        } else {
         $442 = ((($440)) + 12|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ((($440)) + 16|0);
         $445 = HEAP32[$444>>2]|0;
         $446 = ($443|0)==($445|0);
         if ($446) {
          $447 = HEAP32[$440>>2]|0;
          $448 = ((($447)) + 36|0);
          $449 = HEAP32[$448>>2]|0;
          __THREW__ = 0;
          $450 = (invoke_ii($449|0,($440|0))|0);
          $451 = __THREW__; __THREW__ = 0;
          $452 = $451&1;
          if ($452) {
           label = 148;
           break L24;
          } else {
           $$0$i$i$i$i269 = $450;
          }
         } else {
          $453 = HEAP8[$443>>0]|0;
          $454 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($453)|0);
          $$0$i$i$i$i269 = $454;
         }
         $455 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $456 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i269,$455)|0);
         if ($456) {
          HEAP32[$0>>2] = 0;
          $474 = 1;
          break;
         } else {
          $$pre$i$i$i271 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i272 = ($$pre$i$i$i271|0)==(0|0);
          $474 = $phitmp$i$i$i272;
          break;
         }
        }
       } while(0);
       $457 = ($458|0)==(0|0);
       do {
        if ($457) {
         $$pre$i4$i$i277510 = $$pre$i4$i$i277;
         label = 138;
        } else {
         $459 = ((($458)) + 12|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = ((($458)) + 16|0);
         $462 = HEAP32[$461>>2]|0;
         $463 = ($460|0)==($462|0);
         if ($463) {
          $464 = HEAP32[$458>>2]|0;
          $465 = ((($464)) + 36|0);
          $466 = HEAP32[$465>>2]|0;
          __THREW__ = 0;
          $467 = (invoke_ii($466|0,($458|0))|0);
          $468 = __THREW__; __THREW__ = 0;
          $469 = $468&1;
          if ($469) {
           label = 148;
           break L24;
          } else {
           $$0$i$i2$i$i275 = $467;
          }
         } else {
          $470 = HEAP8[$460>>0]|0;
          $471 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($470)|0);
          $$0$i$i2$i$i275 = $471;
         }
         $472 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $473 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i275,$472)|0);
         if ($473) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i277510 = 0;
          label = 138;
          break;
         } else {
          $phitmp$i5$i$i278 = ($$pre$i4$i$i277|0)==(0|0);
          $tmp$i$i280 = $474 ^ $phitmp$i5$i$i278;
          if ($tmp$i$i280) {
           $$pre$i4$i$i277509 = $$pre$i4$i$i277;$905 = $$pre$i4$i$i277;
           break;
          } else {
           $$lcssa = $438;
           break L129;
          }
         }
        }
       } while(0);
       if ((label|0) == 138) {
        label = 0;
        if ($474) {
         $$lcssa = $438;
         break;
        } else {
         $$pre$i4$i$i277509 = $$pre$i4$i$i277510;$905 = 0;
        }
       }
       $475 = HEAP32[$0>>2]|0;
       $476 = ((($475)) + 12|0);
       $477 = HEAP32[$476>>2]|0;
       $478 = ((($475)) + 16|0);
       $479 = HEAP32[$478>>2]|0;
       $480 = ($477|0)==($479|0);
       if ($480) {
        $481 = HEAP32[$475>>2]|0;
        $482 = ((($481)) + 36|0);
        $483 = HEAP32[$482>>2]|0;
        __THREW__ = 0;
        $484 = (invoke_ii($483|0,($475|0))|0);
        $485 = __THREW__; __THREW__ = 0;
        $486 = $485&1;
        if ($486) {
         label = 148;
         break L24;
        } else {
         $$0$i$i284 = $484;
        }
       } else {
        $487 = HEAP8[$477>>0]|0;
        $488 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($487)|0);
        $$0$i$i284 = $488;
       }
       $489 = $$0$i$i284&255;
       $490 = HEAP8[$438>>0]|0;
       $491 = ($489<<24>>24)==($490<<24>>24);
       if (!($491)) {
        $$lcssa = $438;
        break;
       }
       $492 = HEAP32[$0>>2]|0;
       $493 = ((($492)) + 12|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ((($492)) + 16|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = ($494|0)==($496|0);
       if ($497) {
        $498 = HEAP32[$492>>2]|0;
        $499 = ((($498)) + 40|0);
        $500 = HEAP32[$499>>2]|0;
        __THREW__ = 0;
        (invoke_ii($500|0,($492|0))|0);
        $501 = __THREW__; __THREW__ = 0;
        $502 = $501&1;
        if ($502) {
         label = 149;
         break L24;
        }
       } else {
        $503 = ((($494)) + 1|0);
        HEAP32[$493>>2] = $503;
        $504 = HEAP8[$494>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($504)|0);
       }
       $505 = ((($438)) + 1|0);
       $506 = $505;
       $$pre507 = HEAP8[$49>>0]|0;
       $$pre508 = HEAP32[$20>>2]|0;
       $$pre$i4$i$i277 = $$pre$i4$i$i277509;$$sroa$0360$0 = $506;$431 = $$pre507;$435 = $$pre508;$458 = $905;
      }
      if ($48) {
       $511 = HEAP8[$49>>0]|0;
       $512 = ($511<<24>>24)<(0);
       $513 = HEAP32[$20>>2]|0;
       $514 = HEAP32[$50>>2]|0;
       $515 = $511&255;
       $516 = $512 ? $513 : $20;
       $517 = $512 ? $514 : $515;
       $518 = (($516) + ($517)|0);
       $519 = ($$lcssa|0)==($518|0);
       if ($519) {
        $$1150 = $$0149;
       } else {
        label = 152;
        break L24;
       }
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     case 4:  {
      $$0132 = 0;$$pre$i4$i$i298 = $903;$540 = $903;
      L165: while(1) {
       $522 = HEAP32[$0>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $556 = 1;
        } else {
         $524 = ((($522)) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ((($522)) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = ((($529)) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 244;
           break L24;
          } else {
           $$0$i$i$i$i290 = $532;
          }
         } else {
          $535 = HEAP8[$525>>0]|0;
          $536 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($535)|0);
          $$0$i$i$i$i290 = $536;
         }
         $537 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $538 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i290,$537)|0);
         if ($538) {
          HEAP32[$0>>2] = 0;
          $556 = 1;
          break;
         } else {
          $$pre$i$i$i292 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i293 = ($$pre$i$i$i292|0)==(0|0);
          $556 = $phitmp$i$i$i293;
          break;
         }
        }
       } while(0);
       $539 = ($540|0)==(0|0);
       do {
        if ($539) {
         $$pre$i4$i$i298498 = $$pre$i4$i$i298;
         label = 166;
        } else {
         $541 = ((($540)) + 12|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = ((($540)) + 16|0);
         $544 = HEAP32[$543>>2]|0;
         $545 = ($542|0)==($544|0);
         if ($545) {
          $546 = HEAP32[$540>>2]|0;
          $547 = ((($546)) + 36|0);
          $548 = HEAP32[$547>>2]|0;
          __THREW__ = 0;
          $549 = (invoke_ii($548|0,($540|0))|0);
          $550 = __THREW__; __THREW__ = 0;
          $551 = $550&1;
          if ($551) {
           label = 244;
           break L24;
          } else {
           $$0$i$i2$i$i296 = $549;
          }
         } else {
          $552 = HEAP8[$542>>0]|0;
          $553 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($552)|0);
          $$0$i$i2$i$i296 = $553;
         }
         $554 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $555 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i296,$554)|0);
         if ($555) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i298498 = 0;
          label = 166;
          break;
         } else {
          $phitmp$i5$i$i299 = ($$pre$i4$i$i298|0)==(0|0);
          $tmp$i$i301 = $556 ^ $phitmp$i5$i$i299;
          if ($tmp$i$i301) {
           $$pre$i4$i$i298500 = $$pre$i4$i$i298;$906 = $$pre$i4$i$i298;
           break;
          } else {
           $$pre$i4$i$i320 = $$pre$i4$i$i298;
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 166) {
        label = 0;
        if ($556) {
         $$pre$i4$i$i320 = $$pre$i4$i$i298498;
         break;
        } else {
         $$pre$i4$i$i298500 = $$pre$i4$i$i298498;$906 = 0;
        }
       }
       $557 = HEAP32[$0>>2]|0;
       $558 = ((($557)) + 12|0);
       $559 = HEAP32[$558>>2]|0;
       $560 = ((($557)) + 16|0);
       $561 = HEAP32[$560>>2]|0;
       $562 = ($559|0)==($561|0);
       if ($562) {
        $563 = HEAP32[$557>>2]|0;
        $564 = ((($563)) + 36|0);
        $565 = HEAP32[$564>>2]|0;
        __THREW__ = 0;
        $566 = (invoke_ii($565|0,($557|0))|0);
        $567 = __THREW__; __THREW__ = 0;
        $568 = $567&1;
        if ($568) {
         label = 244;
         break L24;
        } else {
         $$0$i$i305 = $566;
        }
       } else {
        $569 = HEAP8[$559>>0]|0;
        $570 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($569)|0);
        $$0$i$i305 = $570;
       }
       $571 = $$0$i$i305&255;
       $572 = ($571<<24>>24)>(-1);
       if ($572) {
        $sext421 = $$0$i$i305 << 24;
        $573 = $sext421 >> 24;
        $574 = HEAP32[$42>>2]|0;
        $575 = (($574) + ($573<<1)|0);
        $576 = HEAP16[$575>>1]|0;
        $577 = $576 & 2048;
        $578 = ($577<<16>>16)==(0);
        if ($578) {
         label = 177;
        } else {
         $579 = HEAP32[$9>>2]|0;
         $580 = HEAP32[$11>>2]|0;
         $581 = ($579|0)==($580|0);
         if ($581) {
          __THREW__ = 0;
          invoke_viii(486,($8|0),($9|0),($11|0));
          $582 = __THREW__; __THREW__ = 0;
          $583 = $582&1;
          if ($583) {
           label = 244;
           break L24;
          }
          $$pre = HEAP32[$9>>2]|0;
          $585 = $$pre;
         } else {
          $585 = $579;
         }
         $584 = ((($585)) + 1|0);
         HEAP32[$9>>2] = $584;
         HEAP8[$585>>0] = $571;
         $586 = (($$0132) + 1)|0;
         $$2134$ph = $586;
        }
       } else {
        label = 177;
       }
       if ((label|0) == 177) {
        label = 0;
        $587 = HEAP8[$54>>0]|0;
        $588 = ($587<<24>>24)<(0);
        $589 = HEAP32[$55>>2]|0;
        $590 = $587&255;
        $591 = $588 ? $589 : $590;
        $592 = ($591|0)!=(0);
        $593 = ($$0132|0)!=(0);
        $or$cond13 = $593 & $592;
        $594 = HEAP8[$18>>0]|0;
        $595 = ($571<<24>>24)==($594<<24>>24);
        $or$cond164 = $595 & $or$cond13;
        if (!($or$cond164)) {
         $$pre$i4$i$i320 = $$pre$i4$i$i298500;
         break;
        }
        $596 = HEAP32[$14>>2]|0;
        $597 = HEAP32[$15>>2]|0;
        $598 = ($596|0)==($597|0);
        if ($598) {
         __THREW__ = 0;
         invoke_viii(487,($13|0),($14|0),($15|0));
         $599 = __THREW__; __THREW__ = 0;
         $600 = $599&1;
         if ($600) {
          label = 244;
          break L24;
         }
         $$pre502 = HEAP32[$14>>2]|0;
         $602 = $$pre502;
        } else {
         $602 = $596;
        }
        $601 = ((($602)) + 4|0);
        HEAP32[$14>>2] = $601;
        HEAP32[$602>>2] = $$0132;
        $$2134$ph = 0;
       }
       $603 = HEAP32[$0>>2]|0;
       $604 = ((($603)) + 12|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ((($603)) + 16|0);
       $607 = HEAP32[$606>>2]|0;
       $608 = ($605|0)==($607|0);
       if ($608) {
        $609 = HEAP32[$603>>2]|0;
        $610 = ((($609)) + 40|0);
        $611 = HEAP32[$610>>2]|0;
        __THREW__ = 0;
        (invoke_ii($611|0,($603|0))|0);
        $612 = __THREW__; __THREW__ = 0;
        $613 = $612&1;
        if ($613) {
         label = 244;
         break L24;
        } else {
         $$0132 = $$2134$ph;$$pre$i4$i$i298 = $$pre$i4$i$i298500;$540 = $906;
         continue;
        }
       } else {
        $614 = ((($605)) + 1|0);
        HEAP32[$604>>2] = $614;
        $615 = HEAP8[$605>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($615)|0);
        $$0132 = $$2134$ph;$$pre$i4$i$i298 = $$pre$i4$i$i298500;$540 = $906;
        continue;
       }
      }
      $616 = HEAP32[$13>>2]|0;
      $617 = HEAP32[$14>>2]|0;
      $618 = ($616|0)!=($617|0);
      $619 = ($$0132|0)!=(0);
      $or$cond15 = $619 & $618;
      if ($or$cond15) {
       $620 = HEAP32[$15>>2]|0;
       $621 = ($617|0)==($620|0);
       if ($621) {
        __THREW__ = 0;
        invoke_viii(487,($13|0),($14|0),($15|0));
        $622 = __THREW__; __THREW__ = 0;
        $623 = $622&1;
        if ($623) {
         label = 244;
         break L24;
        }
        $$pre504 = HEAP32[$14>>2]|0;
        $625 = $$pre504;
       } else {
        $625 = $617;
       }
       $624 = ((($625)) + 4|0);
       HEAP32[$14>>2] = $624;
       HEAP32[$625>>2] = $$0132;
      }
      $626 = HEAP32[$24>>2]|0;
      $627 = ($626|0)>(0);
      L219: do {
       if ($627) {
        $628 = HEAP32[$0>>2]|0;
        $629 = ($628|0)==(0|0);
        do {
         if ($629) {
          $907 = 1;
         } else {
          $630 = ((($628)) + 12|0);
          $631 = HEAP32[$630>>2]|0;
          $632 = ((($628)) + 16|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($631|0)==($633|0);
          if ($634) {
           $635 = HEAP32[$628>>2]|0;
           $636 = ((($635)) + 36|0);
           $637 = HEAP32[$636>>2]|0;
           __THREW__ = 0;
           $638 = (invoke_ii($637|0,($628|0))|0);
           $639 = __THREW__; __THREW__ = 0;
           $640 = $639&1;
           if ($640) {
            label = 244;
            break L24;
           } else {
            $$0$i$i$i$i312 = $638;
           }
          } else {
           $641 = HEAP8[$631>>0]|0;
           $642 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($641)|0);
           $$0$i$i$i$i312 = $642;
          }
          $643 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $644 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i312,$643)|0);
          if ($644) {
           HEAP32[$0>>2] = 0;
           $907 = 1;
           break;
          } else {
           $$pre$i$i$i314 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i315 = ($$pre$i$i$i314|0)==(0|0);
           $907 = $phitmp$i$i$i315;
           break;
          }
         }
        } while(0);
        $645 = ($$pre$i4$i$i320|0)==(0|0);
        do {
         if ($645) {
          label = 204;
         } else {
          $646 = ((($$pre$i4$i$i320)) + 12|0);
          $647 = HEAP32[$646>>2]|0;
          $648 = ((($$pre$i4$i$i320)) + 16|0);
          $649 = HEAP32[$648>>2]|0;
          $650 = ($647|0)==($649|0);
          if ($650) {
           $651 = HEAP32[$$pre$i4$i$i320>>2]|0;
           $652 = ((($651)) + 36|0);
           $653 = HEAP32[$652>>2]|0;
           __THREW__ = 0;
           $654 = (invoke_ii($653|0,($$pre$i4$i$i320|0))|0);
           $655 = __THREW__; __THREW__ = 0;
           $656 = $655&1;
           if ($656) {
            label = 244;
            break L24;
           } else {
            $$0$i$i2$i$i318 = $654;
           }
          } else {
           $657 = HEAP8[$647>>0]|0;
           $658 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($657)|0);
           $$0$i$i2$i$i318 = $658;
          }
          $659 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $660 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i318,$659)|0);
          if ($660) {
           HEAP32[$1>>2] = 0;
           label = 204;
           break;
          } else {
           if ($907) {
            $908 = $$pre$i4$i$i320;
            break;
           } else {
            label = 243;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 204) {
         label = 0;
         if ($907) {
          label = 243;
          break L24;
         } else {
          $908 = 0;
         }
        }
        $661 = HEAP32[$0>>2]|0;
        $662 = ((($661)) + 12|0);
        $663 = HEAP32[$662>>2]|0;
        $664 = ((($661)) + 16|0);
        $665 = HEAP32[$664>>2]|0;
        $666 = ($663|0)==($665|0);
        if ($666) {
         $667 = HEAP32[$661>>2]|0;
         $668 = ((($667)) + 36|0);
         $669 = HEAP32[$668>>2]|0;
         __THREW__ = 0;
         $670 = (invoke_ii($669|0,($661|0))|0);
         $671 = __THREW__; __THREW__ = 0;
         $672 = $671&1;
         if ($672) {
          label = 244;
          break L24;
         } else {
          $$0$i$i327 = $670;
         }
        } else {
         $673 = HEAP8[$663>>0]|0;
         $674 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($673)|0);
         $$0$i$i327 = $674;
        }
        $675 = $$0$i$i327&255;
        $676 = HEAP8[$17>>0]|0;
        $677 = ($675<<24>>24)==($676<<24>>24);
        if (!($677)) {
         label = 243;
         break L24;
        }
        $678 = HEAP32[$0>>2]|0;
        $679 = ((($678)) + 12|0);
        $680 = HEAP32[$679>>2]|0;
        $681 = ((($678)) + 16|0);
        $682 = HEAP32[$681>>2]|0;
        $683 = ($680|0)==($682|0);
        if ($683) {
         $684 = HEAP32[$678>>2]|0;
         $685 = ((($684)) + 40|0);
         $686 = HEAP32[$685>>2]|0;
         __THREW__ = 0;
         (invoke_ii($686|0,($678|0))|0);
         $687 = __THREW__; __THREW__ = 0;
         $688 = $687&1;
         if ($688) {
          label = 244;
          break L24;
         } else {
          $$pre$i4$i$i340 = $908;$711 = $908;
         }
        } else {
         $689 = ((($680)) + 1|0);
         HEAP32[$679>>2] = $689;
         $690 = HEAP8[$680>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($690)|0);
         $$pre$i4$i$i340 = $908;$711 = $908;
        }
        while(1) {
         $691 = HEAP32[$24>>2]|0;
         $692 = ($691|0)>(0);
         if (!($692)) {
          break L219;
         }
         $693 = HEAP32[$0>>2]|0;
         $694 = ($693|0)==(0|0);
         do {
          if ($694) {
           $727 = 1;
          } else {
           $695 = ((($693)) + 12|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($693)) + 16|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($696|0)==($698|0);
           if ($699) {
            $700 = HEAP32[$693>>2]|0;
            $701 = ((($700)) + 36|0);
            $702 = HEAP32[$701>>2]|0;
            __THREW__ = 0;
            $703 = (invoke_ii($702|0,($693|0))|0);
            $704 = __THREW__; __THREW__ = 0;
            $705 = $704&1;
            if ($705) {
             label = 244;
             break L24;
            } else {
             $$0$i$i$i$i332 = $703;
            }
           } else {
            $706 = HEAP8[$696>>0]|0;
            $707 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($706)|0);
            $$0$i$i$i$i332 = $707;
           }
           $708 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $709 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i332,$708)|0);
           if ($709) {
            HEAP32[$0>>2] = 0;
            $727 = 1;
            break;
           } else {
            $$pre$i$i$i334 = HEAP32[$0>>2]|0;
            $phitmp$i$i$i335 = ($$pre$i$i$i334|0)==(0|0);
            $727 = $phitmp$i$i$i335;
            break;
           }
          }
         } while(0);
         $710 = ($711|0)==(0|0);
         do {
          if ($710) {
           $$pre$i4$i$i340505$ph = $$pre$i4$i$i340;
           label = 227;
          } else {
           $712 = ((($711)) + 12|0);
           $713 = HEAP32[$712>>2]|0;
           $714 = ((($711)) + 16|0);
           $715 = HEAP32[$714>>2]|0;
           $716 = ($713|0)==($715|0);
           if ($716) {
            $717 = HEAP32[$711>>2]|0;
            $718 = ((($717)) + 36|0);
            $719 = HEAP32[$718>>2]|0;
            __THREW__ = 0;
            $720 = (invoke_ii($719|0,($711|0))|0);
            $721 = __THREW__; __THREW__ = 0;
            $722 = $721&1;
            if ($722) {
             label = 244;
             break L24;
            } else {
             $$0$i$i2$i$i338 = $720;
            }
           } else {
            $723 = HEAP8[$713>>0]|0;
            $724 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($723)|0);
            $$0$i$i2$i$i338 = $724;
           }
           $725 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $726 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i338,$725)|0);
           if ($726) {
            HEAP32[$1>>2] = 0;
            $$pre$i4$i$i340505$ph = 0;
            label = 227;
            break;
           } else {
            $phitmp$i5$i$i341 = ($$pre$i4$i$i340|0)==(0|0);
            $tmp$i$i343 = $727 ^ $phitmp$i5$i$i341;
            if ($tmp$i$i343) {
             $$pre$i4$i$i340505518 = $$pre$i4$i$i340;$909 = $$pre$i4$i$i340;
             break;
            } else {
             label = 243;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 227) {
          label = 0;
          if ($727) {
           label = 243;
           break L24;
          } else {
           $$pre$i4$i$i340505518 = $$pre$i4$i$i340505$ph;$909 = 0;
          }
         }
         $728 = HEAP32[$0>>2]|0;
         $729 = ((($728)) + 12|0);
         $730 = HEAP32[$729>>2]|0;
         $731 = ((($728)) + 16|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = ($730|0)==($732|0);
         if ($733) {
          $734 = HEAP32[$728>>2]|0;
          $735 = ((($734)) + 36|0);
          $736 = HEAP32[$735>>2]|0;
          __THREW__ = 0;
          $737 = (invoke_ii($736|0,($728|0))|0);
          $738 = __THREW__; __THREW__ = 0;
          $739 = $738&1;
          if ($739) {
           label = 244;
           break L24;
          } else {
           $$0$i$i347 = $737;
          }
         } else {
          $740 = HEAP8[$730>>0]|0;
          $741 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($740)|0);
          $$0$i$i347 = $741;
         }
         $742 = $$0$i$i347&255;
         $743 = ($742<<24>>24)>(-1);
         if (!($743)) {
          label = 243;
          break L24;
         }
         $sext = $$0$i$i347 << 24;
         $744 = $sext >> 24;
         $745 = HEAP32[$42>>2]|0;
         $746 = (($745) + ($744<<1)|0);
         $747 = HEAP16[$746>>1]|0;
         $748 = $747 & 2048;
         $749 = ($748<<16>>16)==(0);
         if ($749) {
          label = 243;
          break L24;
         }
         $750 = HEAP32[$9>>2]|0;
         $751 = HEAP32[$11>>2]|0;
         $752 = ($750|0)==($751|0);
         if ($752) {
          __THREW__ = 0;
          invoke_viii(486,($8|0),($9|0),($11|0));
          $753 = __THREW__; __THREW__ = 0;
          $754 = $753&1;
          if ($754) {
           label = 244;
           break L24;
          }
         }
         $755 = HEAP32[$0>>2]|0;
         $756 = ((($755)) + 12|0);
         $757 = HEAP32[$756>>2]|0;
         $758 = ((($755)) + 16|0);
         $759 = HEAP32[$758>>2]|0;
         $760 = ($757|0)==($759|0);
         if ($760) {
          $761 = HEAP32[$755>>2]|0;
          $762 = ((($761)) + 36|0);
          $763 = HEAP32[$762>>2]|0;
          __THREW__ = 0;
          $764 = (invoke_ii($763|0,($755|0))|0);
          $765 = __THREW__; __THREW__ = 0;
          $766 = $765&1;
          if ($766) {
           label = 244;
           break L24;
          } else {
           $$0$i$i351 = $764;
          }
         } else {
          $767 = HEAP8[$757>>0]|0;
          $768 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($767)|0);
          $$0$i$i351 = $768;
         }
         $769 = $$0$i$i351&255;
         $770 = HEAP32[$9>>2]|0;
         $771 = ((($770)) + 1|0);
         HEAP32[$9>>2] = $771;
         HEAP8[$770>>0] = $769;
         $772 = HEAP32[$24>>2]|0;
         $773 = (($772) + -1)|0;
         HEAP32[$24>>2] = $773;
         $774 = HEAP32[$0>>2]|0;
         $775 = ((($774)) + 12|0);
         $776 = HEAP32[$775>>2]|0;
         $777 = ((($774)) + 16|0);
         $778 = HEAP32[$777>>2]|0;
         $779 = ($776|0)==($778|0);
         if ($779) {
          $780 = HEAP32[$774>>2]|0;
          $781 = ((($780)) + 40|0);
          $782 = HEAP32[$781>>2]|0;
          __THREW__ = 0;
          (invoke_ii($782|0,($774|0))|0);
          $783 = __THREW__; __THREW__ = 0;
          $784 = $783&1;
          if ($784) {
           label = 244;
           break L24;
          } else {
           $$pre$i4$i$i340 = $$pre$i4$i$i340505518;$711 = $909;
           continue;
          }
         } else {
          $785 = ((($776)) + 1|0);
          HEAP32[$775>>2] = $785;
          $786 = HEAP8[$776>>0]|0;
          (__ZNSt3__211char_traitsIcE11to_int_typeEc($786)|0);
          $$pre$i4$i$i340 = $$pre$i4$i$i340505518;$711 = $909;
          continue;
         }
        }
       }
      } while(0);
      $787 = HEAP32[$9>>2]|0;
      $788 = HEAP32[$8>>2]|0;
      $789 = ($787|0)==($788|0);
      if ($789) {
       label = 243;
       break L24;
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     default: {
      $$1150 = $$0149;
     }
     }
    } while(0);
    L293: do {
     if ((label|0) == 49) {
      while(1) {
       label = 0;
       $142 = HEAP32[$0>>2]|0;
       $143 = ($142|0)==(0|0);
       do {
        if ($143) {
         $176 = 1;
        } else {
         $144 = ((($142)) + 12|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ((($142)) + 16|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = ($145|0)==($147|0);
         if ($148) {
          $149 = HEAP32[$142>>2]|0;
          $150 = ((($149)) + 36|0);
          $151 = HEAP32[$150>>2]|0;
          __THREW__ = 0;
          $152 = (invoke_ii($151|0,($142|0))|0);
          $153 = __THREW__; __THREW__ = 0;
          $154 = $153&1;
          if ($154) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i190 = $152;
          }
         } else {
          $155 = HEAP8[$145>>0]|0;
          $156 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($155)|0);
          $$0$i$i$i$i190 = $156;
         }
         $157 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $158 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i190,$157)|0);
         if ($158) {
          HEAP32[$0>>2] = 0;
          $176 = 1;
          break;
         } else {
          $$pre$i$i$i192 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i193 = ($$pre$i$i$i192|0)==(0|0);
          $176 = $phitmp$i$i$i193;
          break;
         }
        }
       } while(0);
       $159 = ($160|0)==(0|0);
       do {
        if ($159) {
         $$pre$i4$i$i198512 = $$pre$i4$i$i198;
         label = 62;
        } else {
         $161 = ((($160)) + 12|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ((($160)) + 16|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ($162|0)==($164|0);
         if ($165) {
          $166 = HEAP32[$160>>2]|0;
          $167 = ((($166)) + 36|0);
          $168 = HEAP32[$167>>2]|0;
          __THREW__ = 0;
          $169 = (invoke_ii($168|0,($160|0))|0);
          $170 = __THREW__; __THREW__ = 0;
          $171 = $170&1;
          if ($171) {
           label = 35;
           break L24;
          } else {
           $$0$i$i2$i$i196 = $169;
          }
         } else {
          $172 = HEAP8[$162>>0]|0;
          $173 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($172)|0);
          $$0$i$i2$i$i196 = $173;
         }
         $174 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $175 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i196,$174)|0);
         if ($175) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i198512 = 0;
          label = 62;
          break;
         } else {
          $phitmp$i5$i$i199 = ($$pre$i4$i$i198|0)==(0|0);
          $tmp$i$i201 = $176 ^ $phitmp$i5$i$i199;
          if ($tmp$i$i201) {
           $$pre$i4$i$i198514 = $$pre$i4$i$i198;$904 = $$pre$i4$i$i198;
           break;
          } else {
           $$1150 = $$0149;
           break L293;
          }
         }
        }
       } while(0);
       if ((label|0) == 62) {
        label = 0;
        if ($176) {
         $$1150 = $$0149;
         break L293;
        } else {
         $$pre$i4$i$i198514 = $$pre$i4$i$i198512;$904 = 0;
        }
       }
       $177 = HEAP32[$0>>2]|0;
       $178 = ((($177)) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($177)) + 16|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($179|0)==($181|0);
       if ($182) {
        $183 = HEAP32[$177>>2]|0;
        $184 = ((($183)) + 36|0);
        $185 = HEAP32[$184>>2]|0;
        __THREW__ = 0;
        $186 = (invoke_ii($185|0,($177|0))|0);
        $187 = __THREW__; __THREW__ = 0;
        $188 = $187&1;
        if ($188) {
         label = 35;
         break L24;
        } else {
         $$0$i$i205 = $186;
        }
       } else {
        $189 = HEAP8[$179>>0]|0;
        $190 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($189)|0);
        $$0$i$i205 = $190;
       }
       $191 = $$0$i$i205&255;
       $192 = ($191<<24>>24)>(-1);
       if (!($192)) {
        $$1150 = $$0149;
        break L293;
       }
       $sext422 = $$0$i$i205 << 24;
       $193 = $sext422 >> 24;
       $194 = HEAP32[$42>>2]|0;
       $195 = (($194) + ($193<<1)|0);
       $196 = HEAP16[$195>>1]|0;
       $197 = $196 & 8192;
       $198 = ($197<<16>>16)==(0);
       if ($198) {
        $$1150 = $$0149;
        break L293;
       }
       $199 = HEAP32[$0>>2]|0;
       $200 = ((($199)) + 12|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ((($199)) + 16|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($201|0)==($203|0);
       if ($204) {
        $205 = HEAP32[$199>>2]|0;
        $206 = ((($205)) + 40|0);
        $207 = HEAP32[$206>>2]|0;
        __THREW__ = 0;
        $208 = (invoke_ii($207|0,($199|0))|0);
        $209 = __THREW__; __THREW__ = 0;
        $210 = $209&1;
        if ($210) {
         label = 35;
         break L24;
        } else {
         $$0$i$i209 = $208;
        }
       } else {
        $211 = ((($201)) + 1|0);
        HEAP32[$200>>2] = $211;
        $212 = HEAP8[$201>>0]|0;
        $213 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($212)|0);
        $$0$i$i209 = $213;
       }
       $214 = $$0$i$i209&255;
       __THREW__ = 0;
       invoke_vii(356,($23|0),($214|0));
       $215 = __THREW__; __THREW__ = 0;
       $216 = $215&1;
       if ($216) {
        label = 35;
        break L24;
       } else {
        $$pre$i4$i$i198 = $$pre$i4$i$i198514;$160 = $904;
        label = 49;
       }
      }
     }
    } while(0);
    $794 = (($$0158) + 1)|0;
    $$0149 = $$1150;$$0158 = $794;
   }
   L329: do {
    if ((label|0) == 35) {
     $94 = ___cxa_find_matching_catch_2()|0;
     $95 = tempRet0;
     $$5142 = $94;$$5148 = $95;
     break L21;
    }
    else if ((label|0) == 47) {
     $140 = HEAP32[$5>>2]|0;
     $141 = $140 | 4;
     HEAP32[$5>>2] = $141;
     $$10 = 0;
    }
    else if ((label|0) == 109) {
     $379 = HEAP32[$5>>2]|0;
     $380 = $379 | 4;
     HEAP32[$5>>2] = $380;
     $$10 = 0;
    }
    else if ((label|0) == 148) {
     $507 = ___cxa_find_matching_catch_2()|0;
     $508 = tempRet0;
     $$5142 = $507;$$5148 = $508;
     break L21;
    }
    else if ((label|0) == 149) {
     $509 = ___cxa_find_matching_catch_2()|0;
     $510 = tempRet0;
     $$5142 = $509;$$5148 = $510;
     break L21;
    }
    else if ((label|0) == 152) {
     $520 = HEAP32[$5>>2]|0;
     $521 = $520 | 4;
     HEAP32[$5>>2] = $521;
     $$10 = 0;
    }
    else if ((label|0) == 243) {
     $790 = HEAP32[$5>>2]|0;
     $791 = $790 | 4;
     HEAP32[$5>>2] = $791;
     $$10 = 0;
    }
    else if ((label|0) == 244) {
     $792 = ___cxa_find_matching_catch_2()|0;
     $793 = tempRet0;
     $$5142 = $792;$$5148 = $793;
     break L21;
    }
    else if ((label|0) == 246) {
     L331: do {
      if ($57) {
       $795 = ((($$0149)) + 11|0);
       $796 = ((($$0149)) + 4|0);
       $$0 = 1;
       L333: while(1) {
        $797 = HEAP8[$795>>0]|0;
        $798 = ($797<<24>>24)<(0);
        if ($798) {
         $799 = HEAP32[$796>>2]|0;
         $802 = $799;
        } else {
         $800 = $797&255;
         $802 = $800;
        }
        $801 = ($$0>>>0)<($802>>>0);
        if (!($801)) {
         break L331;
        }
        $803 = HEAP32[$0>>2]|0;
        $804 = ($803|0)==(0|0);
        do {
         if ($804) {
          $910 = 1;
         } else {
          $805 = ((($803)) + 12|0);
          $806 = HEAP32[$805>>2]|0;
          $807 = ((($803)) + 16|0);
          $808 = HEAP32[$807>>2]|0;
          $809 = ($806|0)==($808|0);
          if ($809) {
           $810 = HEAP32[$803>>2]|0;
           $811 = ((($810)) + 36|0);
           $812 = HEAP32[$811>>2]|0;
           __THREW__ = 0;
           $813 = (invoke_ii($812|0,($803|0))|0);
           $814 = __THREW__; __THREW__ = 0;
           $815 = $814&1;
           if ($815) {
            label = 274;
            break L333;
           } else {
            $$0$i$i$i$i247 = $813;
           }
          } else {
           $816 = HEAP8[$806>>0]|0;
           $817 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($816)|0);
           $$0$i$i$i$i247 = $817;
          }
          $818 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $819 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i247,$818)|0);
          if ($819) {
           HEAP32[$0>>2] = 0;
           $910 = 1;
           break;
          } else {
           $$pre$i$i$i249 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i250 = ($$pre$i$i$i249|0)==(0|0);
           $910 = $phitmp$i$i$i250;
           break;
          }
         }
        } while(0);
        $820 = HEAP32[$1>>2]|0;
        $821 = ($820|0)==(0|0);
        do {
         if ($821) {
          label = 265;
         } else {
          $822 = ((($820)) + 12|0);
          $823 = HEAP32[$822>>2]|0;
          $824 = ((($820)) + 16|0);
          $825 = HEAP32[$824>>2]|0;
          $826 = ($823|0)==($825|0);
          if ($826) {
           $827 = HEAP32[$820>>2]|0;
           $828 = ((($827)) + 36|0);
           $829 = HEAP32[$828>>2]|0;
           __THREW__ = 0;
           $830 = (invoke_ii($829|0,($820|0))|0);
           $831 = __THREW__; __THREW__ = 0;
           $832 = $831&1;
           if ($832) {
            label = 274;
            break L333;
           } else {
            $$0$i$i2$i$i253 = $830;
           }
          } else {
           $833 = HEAP8[$823>>0]|0;
           $834 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($833)|0);
           $$0$i$i2$i$i253 = $834;
          }
          $835 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $836 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i253,$835)|0);
          if ($836) {
           HEAP32[$1>>2] = 0;
           label = 265;
           break;
          } else {
           if ($910) {
            break;
           } else {
            label = 273;
            break L333;
           }
          }
         }
        } while(0);
        if ((label|0) == 265) {
         label = 0;
         if ($910) {
          label = 273;
          break;
         }
        }
        $837 = HEAP32[$0>>2]|0;
        $838 = ((($837)) + 12|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = ((($837)) + 16|0);
        $841 = HEAP32[$840>>2]|0;
        $842 = ($839|0)==($841|0);
        if ($842) {
         $843 = HEAP32[$837>>2]|0;
         $844 = ((($843)) + 36|0);
         $845 = HEAP32[$844>>2]|0;
         __THREW__ = 0;
         $846 = (invoke_ii($845|0,($837|0))|0);
         $847 = __THREW__; __THREW__ = 0;
         $848 = $847&1;
         if ($848) {
          label = 274;
          break;
         } else {
          $$0$i$i181 = $846;
         }
        } else {
         $849 = HEAP8[$839>>0]|0;
         $850 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($849)|0);
         $$0$i$i181 = $850;
        }
        $851 = $$0$i$i181&255;
        $852 = HEAP8[$795>>0]|0;
        $853 = ($852<<24>>24)<(0);
        if ($853) {
         $854 = HEAP32[$$0149>>2]|0;
         $856 = $854;
        } else {
         $856 = $$0149;
        }
        $855 = (($856) + ($$0)|0);
        $857 = HEAP8[$855>>0]|0;
        $858 = ($851<<24>>24)==($857<<24>>24);
        if (!($858)) {
         label = 273;
         break;
        }
        $863 = (($$0) + 1)|0;
        $864 = HEAP32[$0>>2]|0;
        $865 = ((($864)) + 12|0);
        $866 = HEAP32[$865>>2]|0;
        $867 = ((($864)) + 16|0);
        $868 = HEAP32[$867>>2]|0;
        $869 = ($866|0)==($868|0);
        if ($869) {
         $870 = HEAP32[$864>>2]|0;
         $871 = ((($870)) + 40|0);
         $872 = HEAP32[$871>>2]|0;
         __THREW__ = 0;
         (invoke_ii($872|0,($864|0))|0);
         $873 = __THREW__; __THREW__ = 0;
         $874 = $873&1;
         if ($874) {
          label = 274;
          break;
         } else {
          $$0 = $863;
          continue;
         }
        } else {
         $875 = ((($866)) + 1|0);
         HEAP32[$865>>2] = $875;
         $876 = HEAP8[$866>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($876)|0);
         $$0 = $863;
         continue;
        }
       }
       if ((label|0) == 273) {
        $859 = HEAP32[$5>>2]|0;
        $860 = $859 | 4;
        HEAP32[$5>>2] = $860;
        $$10 = 0;
        break L329;
       }
       else if ((label|0) == 274) {
        $861 = ___cxa_find_matching_catch_2()|0;
        $862 = tempRet0;
        $$5142 = $861;$$5148 = $862;
        break L21;
       }
      }
     } while(0);
     $877 = HEAP32[$13>>2]|0;
     $878 = HEAP32[$14>>2]|0;
     $879 = ($877|0)==($878|0);
     if ($879) {
      $$10 = 1;
     } else {
      HEAP32[$25>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(440,($19|0),($877|0),($878|0),($25|0));
      $880 = __THREW__; __THREW__ = 0;
      $881 = $880&1;
      if ($881) {
       $886 = ___cxa_find_matching_catch_2()|0;
       $887 = tempRet0;
       $$5142 = $886;$$5148 = $887;
       break L21;
      }
      $882 = HEAP32[$25>>2]|0;
      $883 = ($882|0)==(0);
      if ($883) {
       $$10 = 1;
       break;
      } else {
       $884 = HEAP32[$5>>2]|0;
       $885 = $884 | 4;
       HEAP32[$5>>2] = $885;
       $$10 = 0;
       break;
      }
     }
    }
   } while(0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
   $888 = HEAP32[$13>>2]|0;
   HEAP32[$13>>2] = 0;
   $889 = ($888|0)==(0|0);
   if (!($889)) {
    $890 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    invoke_vi($890|0,($888|0));
    $891 = __THREW__; __THREW__ = 0;
    $892 = $891&1;
    if ($892) {
     $893 = ___cxa_find_matching_catch_3(0|0)|0;
     $894 = tempRet0;
     ___clang_call_terminate($893);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $895 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $896 = ($895|0)==(0|0);
 if (!($896)) {
  $897 = HEAP32[$27>>2]|0;
  __THREW__ = 0;
  invoke_vi($897|0,($895|0));
  $898 = __THREW__; __THREW__ = 0;
  $899 = $898&1;
  if ($899) {
   $900 = ___cxa_find_matching_catch_3(0|0)|0;
   $901 = tempRet0;
   ___clang_call_terminate($900);
   // unreachable;
  }
 }
 ___resumeException($$5142|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep29 = 0, $scevgep30 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $18 = $phitmp$i;$19 = $10;
 } else {
  $8 = $6&255;
  $18 = 10;$19 = $8;
 }
 $14 = $2;
 $15 = (($14) - ($3))|0;
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   $17 = (($18) - ($19))|0;
   $20 = ($17>>>0)<($15>>>0);
   $21 = (($19) + ($15))|0;
   if ($20) {
    $22 = (($21) - ($18))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$18,$22,$19,$19,0,0);
    $$pre = HEAP8[$5>>0]|0;
    $24 = $$pre;
   } else {
    $24 = $6;
   }
   $23 = ($24<<24>>24)<(0);
   if ($23) {
    $25 = HEAP32[$0>>2]|0;
    $27 = $25;
   } else {
    $27 = $0;
   }
   $26 = (($27) + ($19)|0);
   $28 = (($19) - ($3))|0;
   $scevgep = (($2) + ($28)|0);
   $scevgep29 = $scevgep;
   $$0 = $26;$$028 = $1;
   while(1) {
    $29 = ($$028|0)==($2|0);
    if ($29) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$028);
    $30 = ((($$0)) + 1|0);
    $31 = ((($$028)) + 1|0);
    $$0 = $30;$$028 = $31;
   }
   $scevgep30 = (($27) + ($scevgep29)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep30,$4);
   $32 = HEAP8[$5>>0]|0;
   $33 = ($32<<24>>24)<(0);
   if ($33) {
    $34 = ((($0)) + 4|0);
    HEAP32[$34>>2] = $21;
    break;
   } else {
    $35 = $21&255;
    HEAP8[$5>>0] = $35;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i61 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i71 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 119|0;
 $11 = sp + 118|0;
 $12 = sp + 117|0;
 $13 = sp + 116|0;
 $14 = sp + 115|0;
 $15 = sp + 114|0;
 $16 = sp + 113|0;
 $17 = sp + 112|0;
 $18 = sp + 111|0;
 $19 = sp + 110|0;
 $20 = sp + 109|0;
 $21 = sp + 108|0;
 $22 = sp + 107|0;
 $23 = sp + 106|0;
 $24 = sp + 105|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,21880)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 1023]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 1023]($27,$36);
  $44 = ((($8)) + 11|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)<(0);
  if ($46) {
   $47 = HEAP32[$8>>2]|0;
   HEAP8[$24>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($47,$24);
   $48 = ((($8)) + 4|0);
   HEAP32[$48>>2] = 0;
  } else {
   HEAP8[$25>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
   HEAP8[$44>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($8|0),0);
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   $51 = ___cxa_find_matching_catch_3(0|0)|0;
   $52 = tempRet0;
   ___clang_call_terminate($51);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $53 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$53>>2] = 0;
   $54 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $54;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
  $55 = HEAP32[$36>>2]|0;
  $56 = ((($55)) + 28|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vii[$57 & 1023]($28,$36);
  $58 = ((($7)) + 11|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)<(0);
  if ($60) {
   $61 = HEAP32[$7>>2]|0;
   HEAP8[$22>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($61,$22);
   $62 = ((($7)) + 4|0);
   HEAP32[$62>>2] = 0;
  } else {
   HEAP8[$23>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$23);
   HEAP8[$58>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($7|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch_3(0|0)|0;
   $66 = tempRet0;
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$28>>2]|0;HEAP32[$7+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $67 = (($28) + ($$0$i$i$i40<<2)|0);
   HEAP32[$67>>2] = 0;
   $68 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $68;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
  $69 = HEAP32[$36>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_ii[$71 & 1023]($36)|0);
  HEAP8[$3>>0] = $72;
  $73 = HEAP32[$36>>2]|0;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (FUNCTION_TABLE_ii[$75 & 1023]($36)|0);
  HEAP8[$4>>0] = $76;
  $77 = HEAP32[$36>>2]|0;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 1023]($29,$36);
  $80 = ((($5)) + 11|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = ($81<<24>>24)<(0);
  if ($82) {
   $83 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($83,$20);
   $84 = ((($5)) + 4|0);
   HEAP32[$84>>2] = 0;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$80>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($5|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch_3(0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$29>>2]|0;HEAP32[$5+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $89 = (($29) + ($$0$i$i$i45<<2)|0);
   HEAP32[$89>>2] = 0;
   $90 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $90;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $91 = HEAP32[$36>>2]|0;
  $92 = ((($91)) + 24|0);
  $93 = HEAP32[$92>>2]|0;
  FUNCTION_TABLE_vii[$93 & 1023]($30,$36);
  $94 = ((($6)) + 11|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ($95<<24>>24)<(0);
  if ($96) {
   $97 = HEAP32[$6>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($97,$18);
   $98 = ((($6)) + 4|0);
   HEAP32[$98>>2] = 0;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$19);
   HEAP8[$94>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch_3(0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i50 = 0;
  while(1) {
   $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
   if ($exitcond$i$i$i51) {
    break;
   }
   $103 = (($30) + ($$0$i$i$i50<<2)|0);
   HEAP32[$103>>2] = 0;
   $104 = (($$0$i$i$i50) + 1)|0;
   $$0$i$i$i50 = $104;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $105 = HEAP32[$36>>2]|0;
  $106 = ((($105)) + 36|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_ii[$107 & 1023]($36)|0);
  $storemerge = $108;
 } else {
  $109 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,21872)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 44|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 1023]($31,$109);
  $113 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$113&255;HEAP8[$2+1>>0]=($113>>8)&255;HEAP8[$2+2>>0]=($113>>16)&255;HEAP8[$2+3>>0]=$113>>24;
  $114 = HEAP32[$109>>2]|0;
  $115 = ((($114)) + 32|0);
  $116 = HEAP32[$115>>2]|0;
  FUNCTION_TABLE_vii[$116 & 1023]($32,$109);
  $117 = ((($8)) + 11|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = ($118<<24>>24)<(0);
  if ($119) {
   $120 = HEAP32[$8>>2]|0;
   HEAP8[$16>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($120,$16);
   $121 = ((($8)) + 4|0);
   HEAP32[$121>>2] = 0;
  } else {
   HEAP8[$17>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
   HEAP8[$117>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($8|0),0);
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if ($123) {
   $124 = ___cxa_find_matching_catch_3(0|0)|0;
   $125 = tempRet0;
   ___clang_call_terminate($124);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$32>>2]|0;HEAP32[$8+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $126 = (($32) + ($$0$i$i$i55<<2)|0);
   HEAP32[$126>>2] = 0;
   $127 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $127;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
  $128 = HEAP32[$109>>2]|0;
  $129 = ((($128)) + 28|0);
  $130 = HEAP32[$129>>2]|0;
  FUNCTION_TABLE_vii[$130 & 1023]($33,$109);
  $131 = ((($7)) + 11|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = ($132<<24>>24)<(0);
  if ($133) {
   $134 = HEAP32[$7>>2]|0;
   HEAP8[$14>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($134,$14);
   $135 = ((($7)) + 4|0);
   HEAP32[$135>>2] = 0;
  } else {
   HEAP8[$15>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$15);
   HEAP8[$131>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($7|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch_3(0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$33>>2]|0;HEAP32[$7+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i60 = 0;
  while(1) {
   $exitcond$i$i$i61 = ($$0$i$i$i60|0)==(3);
   if ($exitcond$i$i$i61) {
    break;
   }
   $140 = (($33) + ($$0$i$i$i60<<2)|0);
   HEAP32[$140>>2] = 0;
   $141 = (($$0$i$i$i60) + 1)|0;
   $$0$i$i$i60 = $141;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
  $142 = HEAP32[$109>>2]|0;
  $143 = ((($142)) + 12|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (FUNCTION_TABLE_ii[$144 & 1023]($109)|0);
  HEAP8[$3>>0] = $145;
  $146 = HEAP32[$109>>2]|0;
  $147 = ((($146)) + 16|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (FUNCTION_TABLE_ii[$148 & 1023]($109)|0);
  HEAP8[$4>>0] = $149;
  $150 = HEAP32[$109>>2]|0;
  $151 = ((($150)) + 20|0);
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_vii[$152 & 1023]($34,$109);
  $153 = ((($5)) + 11|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = ($154<<24>>24)<(0);
  if ($155) {
   $156 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($156,$12);
   $157 = ((($5)) + 4|0);
   HEAP32[$157>>2] = 0;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$153>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($5|0),0);
  $158 = __THREW__; __THREW__ = 0;
  $159 = $158&1;
  if ($159) {
   $160 = ___cxa_find_matching_catch_3(0|0)|0;
   $161 = tempRet0;
   ___clang_call_terminate($160);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$34>>2]|0;HEAP32[$5+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $162 = (($34) + ($$0$i$i$i65<<2)|0);
   HEAP32[$162>>2] = 0;
   $163 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $163;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $164 = HEAP32[$109>>2]|0;
  $165 = ((($164)) + 24|0);
  $166 = HEAP32[$165>>2]|0;
  FUNCTION_TABLE_vii[$166 & 1023]($35,$109);
  $167 = ((($6)) + 11|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = ($168<<24>>24)<(0);
  if ($169) {
   $170 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($170,$10);
   $171 = ((($6)) + 4|0);
   HEAP32[$171>>2] = 0;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$11);
   HEAP8[$167>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch_3(0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$35>>2]|0;HEAP32[$6+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $176 = (($35) + ($$0$i$i$i70<<2)|0);
   HEAP32[$176>>2] = 0;
   $177 = (($$0$i$i$i70) + 1)|0;
   $$0$i$i$i70 = $177;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
  $178 = HEAP32[$109>>2]|0;
  $179 = ((($178)) + 36|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (FUNCTION_TABLE_ii[$180 & 1023]($109)|0);
  $storemerge = $181;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(481|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 1 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = $7;
 $14 = (($12) - ($7))|0;
 $15 = $5 ? $13 : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $27 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $27 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (488);
 $26 = (($27) + ($14)|0);
 HEAP32[$1>>2] = $26;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($$)|0);
 HEAP32[$2>>2] = $29;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(481|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $28 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $28 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $28 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (488);
 $26 = $$ >>> 2;
 $27 = (($28) + ($14<<2)|0);
 HEAP32[$1>>2] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 HEAP32[$2>>2] = $30;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33858 = 0, $$33859 = 0, $$360 = 0, $$361 = 0, $$byval_copy = 0, $$pre = 0;
 var $$pre$i$i$i = 0, $$pre62 = 0, $$sroa$0$0$copyload = 0, $$sroa$043$0 = 0, $$sroa$043$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $7 = sp + 72|0;
 $8 = sp + 64|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 576|0;
 $12 = sp + 48|0;
 $13 = sp + 8|0;
 $14 = sp + 476|0;
 $15 = $7;
 HEAP32[$8>>2] = $15;
 $16 = ((($8)) + 4|0);
 HEAP32[$16>>2] = (481);
 $17 = ((($7)) + 400|0);
 __THREW__ = 0;
 invoke_vii(353,($10|0),($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = tempRet0;
  HEAP32[$8>>2] = 0;
  $$33858 = $46;$$360 = $45;$127 = 481;$128 = $7;
  label = 54;
 } else {
  __THREW__ = 0;
  $20 = (invoke_iii(354,($10|0),(20192|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $47 = ___cxa_find_matching_catch_2()|0;
   $48 = tempRet0;
   $$234 = $47;$$237 = $48;
  } else {
   HEAP8[$11>>0] = 0;
   $23 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $23;
   $24 = ((($4)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
   $26 = (invoke_iiiiiiiiiiii(489,($1|0),($$byval_copy|0),($3|0),($10|0),($25|0),($5|0),($11|0),($20|0),($8|0),($9|0),($17|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   L7: do {
    if ($28) {
     label = 11;
    } else {
     L9: do {
      if ($26) {
       $29 = HEAP32[$20>>2]|0;
       $30 = ((($29)) + 48|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($31|0,($20|0),(17154|0),((17164)|0),($13|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        $51 = ___cxa_find_matching_catch_2()|0;
        $52 = tempRet0;
        $$032 = $51;$$035 = $52;
       } else {
        $34 = HEAP32[$9>>2]|0;
        $35 = HEAP32[$8>>2]|0;
        $36 = (($34) - ($35))|0;
        $37 = ($36|0)>(392);
        if ($37) {
         $38 = $36 >>> 2;
         $39 = (($38) + 2)|0;
         $40 = (_malloc($39)|0);
         $41 = $40;
         $42 = ($40|0)==(0|0);
         if ($42) {
          __THREW__ = 0;
          invoke_v(449);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if ($44) {
           $$sroa$043$0 = $41;
          } else {
           $$031 = 0;$$sroa$043$1 = $41;
           label = 16;
          }
         } else {
          $$031 = $40;$$sroa$043$1 = $41;
          label = 16;
         }
        } else {
         $$031 = $14;$$sroa$043$1 = 0;
         label = 16;
        }
        do {
         if ((label|0) == 16) {
          $57 = HEAP8[$11>>0]|0;
          $58 = ($57<<24>>24)==(0);
          if ($58) {
           $$1 = $$031;
          } else {
           $59 = ((($$031)) + 1|0);
           HEAP8[$$031>>0] = 45;
           $$1 = $59;
          }
          $60 = HEAP32[$8>>2]|0;
          $61 = ((($13)) + 40|0);
          $62 = $13;
          $$0 = $60;$$2 = $$1;
          while(1) {
           $63 = HEAP32[$9>>2]|0;
           $64 = ($$0>>>0)<($63>>>0);
           if (!($64)) {
            break;
           }
           $67 = HEAP32[$$0>>2]|0;
           $$0$i = $13;
           while(1) {
            $68 = ($$0$i|0)==($61|0);
            if ($68) {
             $$0$lcssa$i = $61;
             break;
            }
            $69 = HEAP32[$$0$i>>2]|0;
            $70 = ($69|0)==($67|0);
            if ($70) {
             $$0$lcssa$i = $$0$i;
             break;
            }
            $71 = ((($$0$i)) + 4|0);
            $$0$i = $71;
           }
           $72 = $$0$lcssa$i;
           $73 = (($72) - ($62))|0;
           $74 = $73 >> 2;
           $75 = (17154 + ($74)|0);
           $76 = HEAP8[$75>>0]|0;
           HEAP8[$$2>>0] = $76;
           $77 = ((($$0)) + 4|0);
           $78 = ((($$2)) + 1|0);
           $$0 = $77;$$2 = $78;
          }
          HEAP8[$$2>>0] = 0;
          HEAP32[$vararg_buffer>>2] = $6;
          $65 = (_sscanf($14,17039,$vararg_buffer)|0);
          $66 = ($65|0)==(1);
          if (!($66)) {
           __THREW__ = 0;
           invoke_vi(483,(17043|0));
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if ($80) {
            $$sroa$043$0 = $$sroa$043$1;
            break;
           }
          }
          $81 = ($$sroa$043$1|0)==(0);
          if (!($81)) {
           $82 = $$sroa$043$1;
           _free($82);
          }
          break L9;
         }
        } while(0);
        $53 = ___cxa_find_matching_catch_2()|0;
        $54 = tempRet0;
        $55 = ($$sroa$043$0|0)==(0);
        if (!($55)) {
         $56 = $$sroa$043$0;
         _free($56);
        }
        $$032 = $53;$$035 = $54;
       }
       $$133 = $$032;$$136 = $$035;
       break L7;
      }
     } while(0);
     $83 = HEAP32[$1>>2]|0;
     $84 = ($83|0)==(0|0);
     do {
      if ($84) {
       $133 = 1;
      } else {
       $85 = ((($83)) + 12|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ((($83)) + 16|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($86|0)==($88|0);
       if ($89) {
        $90 = HEAP32[$83>>2]|0;
        $91 = ((($90)) + 36|0);
        $92 = HEAP32[$91>>2]|0;
        __THREW__ = 0;
        $93 = (invoke_ii($92|0,($83|0))|0);
        $94 = __THREW__; __THREW__ = 0;
        $95 = $94&1;
        if ($95) {
         label = 11;
         break L7;
        } else {
         $$0$i$i$i$i = $93;
        }
       } else {
        $96 = HEAP32[$86>>2]|0;
        $97 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($96)|0);
        $$0$i$i$i$i = $97;
       }
       $98 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $99 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$98)|0);
       if ($99) {
        HEAP32[$1>>2] = 0;
        $133 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $133 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ($100|0)==(0|0);
     do {
      if ($101) {
       label = 44;
      } else {
       $102 = ((($100)) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ((($100)) + 16|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($103|0)==($105|0);
       if ($106) {
        $107 = HEAP32[$100>>2]|0;
        $108 = ((($107)) + 36|0);
        $109 = HEAP32[$108>>2]|0;
        __THREW__ = 0;
        $110 = (invoke_ii($109|0,($100|0))|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         label = 11;
         break L7;
        } else {
         $$0$i$i2$i$i = $110;
        }
       } else {
        $113 = HEAP32[$103>>2]|0;
        $114 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($113)|0);
        $$0$i$i2$i$i = $114;
       }
       $115 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $116 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$115)|0);
       if ($116) {
        HEAP32[$2>>2] = 0;
        label = 44;
        break;
       } else {
        if ($133) {
         break;
        } else {
         label = 46;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 44) {
      if ($133) {
       label = 46;
      }
     }
     if ((label|0) == 46) {
      $117 = HEAP32[$5>>2]|0;
      $118 = $117 | 2;
      HEAP32[$5>>2] = $118;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__26localeD2Ev($10);
     $119 = HEAP32[$8>>2]|0;
     HEAP32[$8>>2] = 0;
     $120 = ($119|0)==(0|0);
     if (!($120)) {
      $121 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($121|0,($119|0));
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if ($123) {
       $124 = ___cxa_find_matching_catch_3(0|0)|0;
       $125 = tempRet0;
       ___clang_call_terminate($124);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   if ((label|0) == 11) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    $$133 = $49;$$136 = $50;
   }
   $$234 = $$133;$$237 = $$136;
  }
  __ZNSt3__26localeD2Ev($10);
  $$pre = HEAP32[$8>>2]|0;
  HEAP32[$8>>2] = 0;
  $126 = ($$pre|0)==(0|0);
  if ($126) {
   $$33859 = $$237;$$361 = $$234;
  } else {
   $$pre62 = HEAP32[$16>>2]|0;
   $$33858 = $$237;$$360 = $$234;$127 = $$pre62;$128 = $$pre;
   label = 54;
  }
 }
 if ((label|0) == 54) {
  __THREW__ = 0;
  invoke_vi($127|0,($128|0));
  $129 = __THREW__; __THREW__ = 0;
  $130 = $129&1;
  if ($130) {
   $131 = ___cxa_find_matching_catch_3(0|0)|0;
   $132 = tempRet0;
   ___clang_call_terminate($131);
   // unreachable;
  } else {
   $$33859 = $$33858;$$361 = $$360;
  }
 }
 ___resumeException($$361|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$1 = 0, $$135 = 0, $$23646 = 0, $$23647 = 0, $$248 = 0, $$249 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $$byval_copy = sp + 432|0;
 $7 = sp + 428|0;
 $8 = sp + 424|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 8|0;
 $12 = sp + 4|0;
 $13 = sp + 436|0;
 $14 = sp;
 $15 = $9;
 HEAP32[$10>>2] = $15;
 $16 = ((($10)) + 4|0);
 HEAP32[$16>>2] = (481);
 $17 = ((($9)) + 400|0);
 __THREW__ = 0;
 invoke_vii(353,($12|0),($4|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  HEAP32[$10>>2] = 0;
  $$23646 = $47;$$248 = $46;$112 = $9;
  label = 41;
 } else {
  __THREW__ = 0;
  $20 = (invoke_iii(354,($12|0),(20192|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $$1 = $48;$$135 = $49;
  } else {
   HEAP8[$13>>0] = 0;
   $23 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $23;
   $24 = ((($4)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $23;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$14>>2]|0;
   $27 = (invoke_iiiiiiiiiiii(489,($1|0),($$byval_copy|0),($3|0),($12|0),($25|0),($5|0),($13|0),($20|0),($10|0),($11|0),($17|0))|0);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   L7: do {
    if (!($29)) {
     if ($27) {
      $30 = ((($6)) + 8|0);
      $31 = ((($30)) + 3|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)<(0);
      if ($33) {
       $34 = HEAP32[$6>>2]|0;
       HEAP32[$7>>2] = 0;
       __ZNSt3__211char_traitsIwE6assignERwRKw($34,$7);
       $35 = ((($6)) + 4|0);
       HEAP32[$35>>2] = 0;
      } else {
       HEAP32[$8>>2] = 0;
       __ZNSt3__211char_traitsIwE6assignERwRKw($6,$8);
       HEAP8[$31>>0] = 0;
      }
      $36 = HEAP8[$13>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if (!($37)) {
       $38 = HEAP32[$20>>2]|0;
       $39 = ((($38)) + 44|0);
       $40 = HEAP32[$39>>2]|0;
       __THREW__ = 0;
       $41 = (invoke_iii($40|0,($20|0),45)|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(490,($6|0),($41|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        break;
       }
      }
      $50 = HEAP32[$20>>2]|0;
      $51 = ((($50)) + 44|0);
      $52 = HEAP32[$51>>2]|0;
      __THREW__ = 0;
      $53 = (invoke_iii($52|0,($20|0),48)|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       break;
      }
      $56 = HEAP32[$10>>2]|0;
      $57 = HEAP32[$11>>2]|0;
      $58 = ((($57)) + -4|0);
      $$0 = $56;
      while(1) {
       $59 = ($$0>>>0)<($58>>>0);
       if (!($59)) {
        break;
       }
       $60 = HEAP32[$$0>>2]|0;
       $61 = ($60|0)==($53|0);
       if (!($61)) {
        break;
       }
       $62 = ((($$0)) + 4|0);
       $$0 = $62;
      }
      __THREW__ = 0;
      (invoke_iiii(491,($6|0),($$0|0),($57|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break;
      }
     }
     $65 = HEAP32[$1>>2]|0;
     $66 = ($65|0)==(0|0);
     do {
      if ($66) {
       $117 = 1;
      } else {
       $67 = ((($65)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ((($65)) + 16|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = HEAP32[$65>>2]|0;
        $73 = ((($72)) + 36|0);
        $74 = HEAP32[$73>>2]|0;
        __THREW__ = 0;
        $75 = (invoke_ii($74|0,($65|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         break L7;
        } else {
         $$0$i$i$i$i = $75;
        }
       } else {
        $78 = HEAP32[$68>>2]|0;
        $79 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
        $$0$i$i$i$i = $79;
       }
       $80 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $81 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$80)|0);
       if ($81) {
        HEAP32[$1>>2] = 0;
        $117 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$1>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $117 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $82 = ($23|0)==(0);
     do {
      if ($82) {
       label = 32;
      } else {
       $83 = ((($26)) + 12|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ((($26)) + 16|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($84|0)==($86|0);
       if ($87) {
        $88 = $23;
        $89 = HEAP32[$88>>2]|0;
        $90 = ((($89)) + 36|0);
        $91 = HEAP32[$90>>2]|0;
        __THREW__ = 0;
        $92 = (invoke_ii($91|0,($26|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         break L7;
        } else {
         $$0$i$i2$i$i = $92;
        }
       } else {
        $95 = HEAP32[$84>>2]|0;
        $96 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($95)|0);
        $$0$i$i2$i$i = $96;
       }
       $97 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $98 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$97)|0);
       if ($98) {
        HEAP32[$2>>2] = 0;
        label = 32;
        break;
       } else {
        if ($117) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($117) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $99 = HEAP32[$5>>2]|0;
      $100 = $99 | 2;
      HEAP32[$5>>2] = $100;
     }
     $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
     __ZNSt3__26localeD2Ev($12);
     $101 = HEAP32[$10>>2]|0;
     HEAP32[$10>>2] = 0;
     $102 = ($101|0)==(0|0);
     if (!($102)) {
      $103 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      invoke_vi($103|0,($101|0));
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $106 = ___cxa_find_matching_catch_3(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
     }
     STACKTOP = sp;return ($$sroa$0$0$copyload|0);
    }
   } while(0);
   $108 = ___cxa_find_matching_catch_2()|0;
   $109 = tempRet0;
   $$1 = $108;$$135 = $109;
  }
  __ZNSt3__26localeD2Ev($12);
  $$pre = HEAP32[$10>>2]|0;
  HEAP32[$10>>2] = 0;
  $110 = ($$pre|0)==(0|0);
  if ($110) {
   $$23647 = $$135;$$249 = $$1;
  } else {
   $$23646 = $$135;$$248 = $$1;$112 = $$pre;
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $111 = HEAP32[$16>>2]|0;
  __THREW__ = 0;
  invoke_vi($111|0,($112|0));
  $113 = __THREW__; __THREW__ = 0;
  $114 = $113&1;
  if ($114) {
   $115 = ___cxa_find_matching_catch_3(0|0)|0;
   $116 = tempRet0;
   ___clang_call_terminate($115);
   // unreachable;
  } else {
   $$23647 = $$23646;$$249 = $$248;
  }
 }
 ___resumeException($$249|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$$0152 = 0, $$$0152162 = 0, $$$0152163 = 0, $$$0152164 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i193 = 0, $$0$i$i$i$i254 = 0, $$0$i$i$i$i271 = 0, $$0$i$i$i$i292 = 0, $$0$i$i$i$i314 = 0, $$0$i$i$i$i334 = 0, $$0$i$i172 = 0, $$0$i$i174 = 0, $$0$i$i177 = 0, $$0$i$i180 = 0, $$0$i$i183 = 0, $$0$i$i187 = 0, $$0$i$i191 = 0;
 var $$0$i$i2$i$i = 0, $$0$i$i2$i$i199 = 0, $$0$i$i2$i$i260 = 0, $$0$i$i2$i$i277 = 0, $$0$i$i2$i$i298 = 0, $$0$i$i2$i$i320 = 0, $$0$i$i2$i$i340 = 0, $$0$i$i208 = 0, $$0$i$i213 = 0, $$0$i$i220 = 0, $$0$i$i226 = 0, $$0$i$i233 = 0, $$0$i$i240 = 0, $$0$i$i286 = 0, $$0$i$i307 = 0, $$0$i$i329 = 0, $$0$i$i349 = 0, $$0$i$i354 = 0, $$0135 = 0, $$0152 = 0;
 var $$0161 = 0, $$10 = 0, $$1153 = 0, $$2137$ph = 0, $$5145 = 0, $$5151 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i195 = 0, $$pre$i$i$i256 = 0, $$pre$i$i$i273 = 0, $$pre$i$i$i294 = 0, $$pre$i$i$i316 = 0, $$pre$i$i$i336 = 0, $$pre$i4$i$i201 = 0, $$pre$i4$i$i201527 = 0, $$pre$i4$i$i201529 = 0, $$pre$i4$i$i279 = 0, $$pre$i4$i$i279524 = 0;
 var $$pre$i4$i$i279525 = 0, $$pre$i4$i$i300 = 0, $$pre$i4$i$i300509 = 0, $$pre$i4$i$i300511 = 0, $$pre$i4$i$i322 = 0, $$pre$i4$i$i342 = 0, $$pre$i4$i$i342516$ph = 0, $$pre$i4$i$i342516533 = 0, $$pre513 = 0, $$pre515 = 0, $$pre518 = 0, $$pre519 = 0, $$pre520 = 0, $$pre521 = 0, $$pre522 = 0, $$pre523 = 0, $$sink = 0, $$sroa$0366$0 = 0, $$sroa$0388$0 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond$i$i = 0, $exitcond$i$i173 = 0, $exitcond$i$i175 = 0;
 var $exitcond$i$i178 = 0, $exitcond$i$i181 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond167 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i196 = 0, $phitmp$i$i$i257 = 0, $phitmp$i$i$i274 = 0, $phitmp$i$i$i295 = 0, $phitmp$i$i$i317 = 0, $phitmp$i$i$i337 = 0, $phitmp$i5$i$i202 = 0, $phitmp$i5$i$i280 = 0, $phitmp$i5$i$i301 = 0, $phitmp$i5$i$i343 = 0, $switch = 0, $tmp$i$i204 = 0, $tmp$i$i282 = 0;
 var $tmp$i$i303 = 0, $tmp$i$i345 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 496|0;
 $12 = sp + 96|0;
 $13 = sp + 88|0;
 $14 = sp + 80|0;
 $15 = sp + 76|0;
 $16 = sp + 500|0;
 $17 = sp + 72|0;
 $18 = sp + 68|0;
 $19 = sp + 56|0;
 $20 = sp + 44|0;
 $21 = sp + 32|0;
 $22 = sp + 20|0;
 $23 = sp + 8|0;
 $24 = sp + 4|0;
 $25 = sp;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (481);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i172 = 0;
 while(1) {
  $exitcond$i$i173 = ($$0$i$i172|0)==(3);
  if ($exitcond$i$i173) {
   break;
  }
  $31 = (($20) + ($$0$i$i172<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i172) + 1)|0;
  $$0$i$i172 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i174 = 0;
 while(1) {
  $exitcond$i$i175 = ($$0$i$i174|0)==(3);
  if ($exitcond$i$i175) {
   break;
  }
  $33 = (($21) + ($$0$i$i174<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i174) + 1)|0;
  $$0$i$i174 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i177 = 0;
 while(1) {
  $exitcond$i$i178 = ($$0$i$i177|0)==(3);
  if ($exitcond$i$i178) {
   break;
  }
  $35 = (($22) + ($$0$i$i177<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i177) + 1)|0;
  $$0$i$i177 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i180 = 0;
 while(1) {
  $exitcond$i$i181 = ($$0$i$i180|0)==(3);
  if ($exitcond$i$i181) {
   break;
  }
  $37 = (($23) + ($$0$i$i180<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i180) + 1)|0;
  $$0$i$i180 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(492,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = tempRet0;
   $$5145 = $95;$$5151 = $96;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($21)) + 8|0);
   $43 = ((($42)) + 3|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 8|0);
   $46 = ((($45)) + 3|0);
   $47 = ((($22)) + 4|0);
   $48 = $4 & 512;
   $49 = ($48|0)!=(0);
   $50 = ((($20)) + 8|0);
   $51 = ((($50)) + 3|0);
   $52 = ((($20)) + 4|0);
   $53 = ((($23)) + 8|0);
   $54 = ((($53)) + 3|0);
   $55 = ((($23)) + 4|0);
   $56 = ((($16)) + 3|0);
   $57 = ((($19)) + 11|0);
   $58 = ((($19)) + 4|0);
   $$0152 = 0;$$0161 = 0;
   L24: while(1) {
    $59 = ($$0161>>>0)<(4);
    $60 = ($$0152|0)!=(0|0);
    if (!($59)) {
     label = 247;
     break;
    }
    $61 = HEAP32[$0>>2]|0;
    $62 = ($61|0)==(0|0);
    do {
     if ($62) {
      $899 = 1;
     } else {
      $63 = ((($61)) + 12|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ((($61)) + 16|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($64|0)==($66|0);
      if ($67) {
       $68 = HEAP32[$61>>2]|0;
       $69 = ((($68)) + 36|0);
       $70 = HEAP32[$69>>2]|0;
       __THREW__ = 0;
       $71 = (invoke_ii($70|0,($61|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        label = 35;
        break L24;
       } else {
        $$0$i$i$i$i = $71;
       }
      } else {
       $74 = HEAP32[$64>>2]|0;
       $75 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($74)|0);
       $$0$i$i$i$i = $75;
      }
      $76 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $77 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$76)|0);
      if ($77) {
       HEAP32[$0>>2] = 0;
       $899 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$0>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $899 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $78 = HEAP32[$1>>2]|0;
    $79 = ($78|0)==(0|0);
    do {
     if ($79) {
      label = 32;
     } else {
      $80 = ((($78)) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ((($78)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)==($83|0);
      if ($84) {
       $85 = HEAP32[$78>>2]|0;
       $86 = ((($85)) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       __THREW__ = 0;
       $88 = (invoke_ii($87|0,($78|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        label = 35;
        break L24;
       } else {
        $$0$i$i2$i$i = $88;
       }
      } else {
       $91 = HEAP32[$81>>2]|0;
       $92 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($91)|0);
       $$0$i$i2$i$i = $92;
      }
      $93 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $94 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$93)|0);
      if ($94) {
       HEAP32[$1>>2] = 0;
       label = 32;
       break;
      } else {
       if ($899) {
        $900 = $78;
        break;
       } else {
        label = 247;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($899) {
      label = 247;
      break;
     } else {
      $900 = 0;
     }
    }
    $99 = (($16) + ($$0161)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $102 = ($$0161|0)!=(3);
    L49: do {
     switch ($101|0) {
     case 1:  {
      if ($102) {
       $103 = HEAP32[$0>>2]|0;
       $104 = ((($103)) + 12|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ((($103)) + 16|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($105|0)==($107|0);
       if ($108) {
        $109 = HEAP32[$103>>2]|0;
        $110 = ((($109)) + 36|0);
        $111 = HEAP32[$110>>2]|0;
        __THREW__ = 0;
        $112 = (invoke_ii($111|0,($103|0))|0);
        $113 = __THREW__; __THREW__ = 0;
        $114 = $113&1;
        if ($114) {
         label = 35;
         break L24;
        } else {
         $$0$i$i187 = $112;
        }
       } else {
        $115 = HEAP32[$105>>2]|0;
        $116 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($115)|0);
        $$0$i$i187 = $116;
       }
       $117 = HEAP32[$7>>2]|0;
       $118 = ((($117)) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       __THREW__ = 0;
       $120 = (invoke_iiii($119|0,($7|0),8192,($$0$i$i187|0))|0);
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        label = 35;
        break L24;
       }
       if (!($120)) {
        label = 47;
        break L24;
       }
       $123 = HEAP32[$0>>2]|0;
       $124 = ((($123)) + 12|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ((($123)) + 16|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ($125|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$123>>2]|0;
        $130 = ((($129)) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        __THREW__ = 0;
        $132 = (invoke_ii($131|0,($123|0))|0);
        $133 = __THREW__; __THREW__ = 0;
        $134 = $133&1;
        if ($134) {
         label = 35;
         break L24;
        } else {
         $$0$i$i191 = $132;
        }
       } else {
        $135 = ((($125)) + 4|0);
        HEAP32[$124>>2] = $135;
        $136 = HEAP32[$125>>2]|0;
        $137 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($136)|0);
        $$0$i$i191 = $137;
       }
       __THREW__ = 0;
       invoke_vii(490,($23|0),($$0$i$i191|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        label = 35;
        break L24;
       } else {
        $$pre$i4$i$i201 = $900;$160 = $900;
        label = 49;
       }
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     case 0:  {
      if ($102) {
       $$pre$i4$i$i201 = $900;$160 = $900;
       label = 49;
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     case 3:  {
      $214 = HEAP8[$43>>0]|0;
      $215 = ($214<<24>>24)<(0);
      $216 = HEAP32[$44>>2]|0;
      $217 = $214&255;
      $218 = $215 ? $216 : $217;
      $219 = HEAP8[$46>>0]|0;
      $220 = ($219<<24>>24)<(0);
      $221 = HEAP32[$47>>2]|0;
      $222 = $219&255;
      $223 = $220 ? $221 : $222;
      $224 = (0 - ($223))|0;
      $225 = ($218|0)==($224|0);
      if ($225) {
       $$1153 = $$0152;
      } else {
       $226 = ($218|0)==(0);
       if ($226) {
        $267 = HEAP32[$0>>2]|0;
        $268 = ((($267)) + 12|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ((($267)) + 16|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ($269|0)==($271|0);
        if ($272) {
         $273 = HEAP32[$267>>2]|0;
         $274 = ((($273)) + 36|0);
         $275 = HEAP32[$274>>2]|0;
         __THREW__ = 0;
         $276 = (invoke_ii($275|0,($267|0))|0);
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if ($278) {
          label = 35;
          break L24;
         } else {
          $$0$i$i226 = $276;
         }
        } else {
         $279 = HEAP32[$269>>2]|0;
         $280 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($279)|0);
         $$0$i$i226 = $280;
        }
        $281 = HEAP8[$46>>0]|0;
        $282 = ($281<<24>>24)<(0);
        $283 = HEAP32[$22>>2]|0;
        $284 = $282 ? $283 : $22;
        $285 = HEAP32[$284>>2]|0;
        $286 = ($$0$i$i226|0)==($285|0);
        if (!($286)) {
         $$1153 = $$0152;
         break L49;
        }
        $287 = HEAP32[$0>>2]|0;
        $288 = ((($287)) + 12|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = ((($287)) + 16|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = ($289|0)==($291|0);
        if ($292) {
         $293 = HEAP32[$287>>2]|0;
         $294 = ((($293)) + 40|0);
         $295 = HEAP32[$294>>2]|0;
         __THREW__ = 0;
         (invoke_ii($295|0,($287|0))|0);
         $296 = __THREW__; __THREW__ = 0;
         $297 = $296&1;
         if ($297) {
          label = 35;
          break L24;
         }
        } else {
         $298 = ((($289)) + 4|0);
         HEAP32[$288>>2] = $298;
         $299 = HEAP32[$289>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($299)|0);
        }
        HEAP8[$6>>0] = 1;
        $300 = HEAP8[$46>>0]|0;
        $301 = ($300<<24>>24)<(0);
        $302 = HEAP32[$47>>2]|0;
        $303 = $300&255;
        $304 = $301 ? $302 : $303;
        $305 = ($304>>>0)>(1);
        $$$0152162 = $305 ? $22 : $$0152;
        $$1153 = $$$0152162;
        break L49;
       }
       $227 = ($223|0)==(0);
       $228 = HEAP32[$0>>2]|0;
       $229 = ((($228)) + 12|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ((($228)) + 16|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = ($230|0)==($232|0);
       if ($227) {
        if ($233) {
         $234 = HEAP32[$228>>2]|0;
         $235 = ((($234)) + 36|0);
         $236 = HEAP32[$235>>2]|0;
         __THREW__ = 0;
         $237 = (invoke_ii($236|0,($228|0))|0);
         $238 = __THREW__; __THREW__ = 0;
         $239 = $238&1;
         if ($239) {
          label = 35;
          break L24;
         } else {
          $$0$i$i220 = $237;
         }
        } else {
         $240 = HEAP32[$230>>2]|0;
         $241 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($240)|0);
         $$0$i$i220 = $241;
        }
        $242 = HEAP8[$43>>0]|0;
        $243 = ($242<<24>>24)<(0);
        $244 = HEAP32[$21>>2]|0;
        $245 = $243 ? $244 : $21;
        $246 = HEAP32[$245>>2]|0;
        $247 = ($$0$i$i220|0)==($246|0);
        if (!($247)) {
         HEAP8[$6>>0] = 1;
         $$1153 = $$0152;
         break L49;
        }
        $248 = HEAP32[$0>>2]|0;
        $249 = ((($248)) + 12|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($248)) + 16|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ($250|0)==($252|0);
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = ((($254)) + 40|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         (invoke_ii($256|0,($248|0))|0);
         $257 = __THREW__; __THREW__ = 0;
         $258 = $257&1;
         if ($258) {
          label = 35;
          break L24;
         }
        } else {
         $259 = ((($250)) + 4|0);
         HEAP32[$249>>2] = $259;
         $260 = HEAP32[$250>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($260)|0);
        }
        $261 = HEAP8[$43>>0]|0;
        $262 = ($261<<24>>24)<(0);
        $263 = HEAP32[$44>>2]|0;
        $264 = $261&255;
        $265 = $262 ? $263 : $264;
        $266 = ($265>>>0)>(1);
        $$$0152 = $266 ? $21 : $$0152;
        $$1153 = $$$0152;
        break L49;
       }
       if ($233) {
        $306 = HEAP32[$228>>2]|0;
        $307 = ((($306)) + 36|0);
        $308 = HEAP32[$307>>2]|0;
        __THREW__ = 0;
        $309 = (invoke_ii($308|0,($228|0))|0);
        $310 = __THREW__; __THREW__ = 0;
        $311 = $310&1;
        if ($311) {
         label = 35;
         break L24;
        } else {
         $$0$i$i233 = $309;
        }
       } else {
        $312 = HEAP32[$230>>2]|0;
        $313 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($312)|0);
        $$0$i$i233 = $313;
       }
       $314 = HEAP8[$43>>0]|0;
       $315 = ($314<<24>>24)<(0);
       $316 = HEAP32[$21>>2]|0;
       $317 = $315 ? $316 : $21;
       $318 = HEAP32[$317>>2]|0;
       $319 = ($$0$i$i233|0)==($318|0);
       $320 = HEAP32[$0>>2]|0;
       $321 = ((($320)) + 12|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = ((($320)) + 16|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ($322|0)==($324|0);
       if ($319) {
        if ($325) {
         $326 = HEAP32[$320>>2]|0;
         $327 = ((($326)) + 40|0);
         $328 = HEAP32[$327>>2]|0;
         __THREW__ = 0;
         (invoke_ii($328|0,($320|0))|0);
         $329 = __THREW__; __THREW__ = 0;
         $330 = $329&1;
         if ($330) {
          label = 35;
          break L24;
         }
        } else {
         $331 = ((($322)) + 4|0);
         HEAP32[$321>>2] = $331;
         $332 = HEAP32[$322>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($332)|0);
        }
        $333 = HEAP8[$43>>0]|0;
        $334 = ($333<<24>>24)<(0);
        $335 = HEAP32[$44>>2]|0;
        $336 = $333&255;
        $337 = $334 ? $335 : $336;
        $338 = ($337>>>0)>(1);
        $$$0152163 = $338 ? $21 : $$0152;
        $$1153 = $$$0152163;
        break L49;
       }
       if ($325) {
        $339 = HEAP32[$320>>2]|0;
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        __THREW__ = 0;
        $342 = (invoke_ii($341|0,($320|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 35;
         break L24;
        } else {
         $$0$i$i240 = $342;
        }
       } else {
        $345 = HEAP32[$322>>2]|0;
        $346 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($345)|0);
        $$0$i$i240 = $346;
       }
       $347 = HEAP8[$46>>0]|0;
       $348 = ($347<<24>>24)<(0);
       $349 = HEAP32[$22>>2]|0;
       $350 = $348 ? $349 : $22;
       $351 = HEAP32[$350>>2]|0;
       $352 = ($$0$i$i240|0)==($351|0);
       if (!($352)) {
        label = 109;
        break L24;
       }
       $353 = HEAP32[$0>>2]|0;
       $354 = ((($353)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ((($353)) + 16|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ($355|0)==($357|0);
       if ($358) {
        $359 = HEAP32[$353>>2]|0;
        $360 = ((($359)) + 40|0);
        $361 = HEAP32[$360>>2]|0;
        __THREW__ = 0;
        (invoke_ii($361|0,($353|0))|0);
        $362 = __THREW__; __THREW__ = 0;
        $363 = $362&1;
        if ($363) {
         label = 35;
         break L24;
        }
       } else {
        $364 = ((($355)) + 4|0);
        HEAP32[$354>>2] = $364;
        $365 = HEAP32[$355>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($365)|0);
       }
       HEAP8[$6>>0] = 1;
       $366 = HEAP8[$46>>0]|0;
       $367 = ($366<<24>>24)<(0);
       $368 = HEAP32[$47>>2]|0;
       $369 = $366&255;
       $370 = $367 ? $368 : $369;
       $371 = ($370>>>0)>(1);
       $$$0152164 = $371 ? $22 : $$0152;
       $$1153 = $$$0152164;
      }
      break;
     }
     case 2:  {
      $374 = ($$0161>>>0)<(2);
      $or$cond = $374 | $60;
      if (!($or$cond)) {
       $375 = ($$0161|0)==(2);
       $376 = HEAP8[$56>>0]|0;
       $377 = ($376<<24>>24)!=(0);
       $378 = $375 & $377;
       $brmerge = $49 | $378;
       if (!($brmerge)) {
        $$1153 = 0;
        break L49;
       }
      }
      $379 = HEAP8[$51>>0]|0;
      $380 = ($379<<24>>24)<(0);
      $381 = HEAP32[$20>>2]|0;
      $382 = $380 ? $381 : $20;
      $383 = $382;
      $384 = ($$0161|0)==(0);
      L115: do {
       if ($384) {
        $$pre$i4$i$i279 = $900;$$sroa$0366$0 = $383;$435 = $379;$439 = $381;$462 = $900;
       } else {
        $385 = (($$0161) + -1)|0;
        $386 = (($16) + ($385)|0);
        $387 = HEAP8[$386>>0]|0;
        $switch = ($387&255)<(2);
        if ($switch) {
         $$sroa$0388$0 = $383;$389 = $379;$393 = $381;
         while(1) {
          $388 = ($389<<24>>24)<(0);
          $390 = HEAP32[$52>>2]|0;
          $391 = $389&255;
          $392 = $388 ? $393 : $20;
          $394 = $388 ? $390 : $391;
          $395 = (($392) + ($394<<2)|0);
          $396 = $$sroa$0388$0;
          $397 = ($396|0)==($395|0);
          if ($397) {
           $410 = $389;$412 = $393;
           break;
          }
          $398 = HEAP32[$396>>2]|0;
          $399 = HEAP32[$7>>2]|0;
          $400 = ((($399)) + 12|0);
          $401 = HEAP32[$400>>2]|0;
          __THREW__ = 0;
          $402 = (invoke_iiii($401|0,($7|0),8192,($398|0))|0);
          $403 = __THREW__; __THREW__ = 0;
          $404 = $403&1;
          if ($404) {
           label = 119;
           break L24;
          }
          if (!($402)) {
           label = 117;
           break;
          }
          $405 = ((($396)) + 4|0);
          $406 = $405;
          $$pre518 = HEAP8[$51>>0]|0;
          $$pre519 = HEAP32[$20>>2]|0;
          $$sroa$0388$0 = $406;$389 = $$pre518;$393 = $$pre519;
         }
         if ((label|0) == 117) {
          label = 0;
          $$pre520 = HEAP8[$51>>0]|0;
          $$pre521 = HEAP32[$20>>2]|0;
          $410 = $$pre520;$412 = $$pre521;
         }
         $409 = ($410<<24>>24)<(0);
         $411 = $409 ? $412 : $20;
         $413 = $411;
         $414 = (($$sroa$0388$0) - ($413))|0;
         $415 = $414 >> 2;
         $416 = HEAP8[$54>>0]|0;
         $417 = ($416<<24>>24)<(0);
         $418 = HEAP32[$55>>2]|0;
         $419 = $416&255;
         $420 = $417 ? $418 : $419;
         $421 = ($415>>>0)>($420>>>0);
         if ($421) {
          $$pre$i4$i$i279 = $900;$$sroa$0366$0 = $413;$435 = $410;$439 = $412;$462 = $900;
         } else {
          $422 = HEAP32[$23>>2]|0;
          $423 = $417 ? $422 : $23;
          $424 = (($423) + ($420<<2)|0);
          $425 = (0 - ($415))|0;
          $426 = (($424) + ($425<<2)|0);
          $$sink = $411;$428 = $426;
          while(1) {
           $427 = ($428|0)==($424|0);
           if ($427) {
            $$pre$i4$i$i279 = $900;$$sroa$0366$0 = $$sroa$0388$0;$435 = $410;$439 = $412;$462 = $900;
            break L115;
           }
           $429 = HEAP32[$428>>2]|0;
           $430 = HEAP32[$$sink>>2]|0;
           $431 = ($429|0)==($430|0);
           if (!($431)) {
            $$pre$i4$i$i279 = $900;$$sroa$0366$0 = $413;$435 = $410;$439 = $412;$462 = $900;
            break L115;
           }
           $432 = ((($428)) + 4|0);
           $433 = ((($$sink)) + 4|0);
           $$sink = $433;$428 = $432;
          }
         }
        } else {
         $$pre$i4$i$i279 = $900;$$sroa$0366$0 = $383;$435 = $379;$439 = $381;$462 = $900;
        }
       }
      } while(0);
      L130: while(1) {
       $434 = ($435<<24>>24)<(0);
       $436 = HEAP32[$52>>2]|0;
       $437 = $435&255;
       $438 = $434 ? $439 : $20;
       $440 = $434 ? $436 : $437;
       $441 = (($438) + ($440<<2)|0);
       $442 = $$sroa$0366$0;
       $443 = ($442|0)==($441|0);
       if ($443) {
        $$lcssa = $441;
        break;
       }
       $444 = HEAP32[$0>>2]|0;
       $445 = ($444|0)==(0|0);
       do {
        if ($445) {
         $478 = 1;
        } else {
         $446 = ((($444)) + 12|0);
         $447 = HEAP32[$446>>2]|0;
         $448 = ((($444)) + 16|0);
         $449 = HEAP32[$448>>2]|0;
         $450 = ($447|0)==($449|0);
         if ($450) {
          $451 = HEAP32[$444>>2]|0;
          $452 = ((($451)) + 36|0);
          $453 = HEAP32[$452>>2]|0;
          __THREW__ = 0;
          $454 = (invoke_ii($453|0,($444|0))|0);
          $455 = __THREW__; __THREW__ = 0;
          $456 = $455&1;
          if ($456) {
           label = 149;
           break L24;
          } else {
           $$0$i$i$i$i271 = $454;
          }
         } else {
          $457 = HEAP32[$447>>2]|0;
          $458 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($457)|0);
          $$0$i$i$i$i271 = $458;
         }
         $459 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $460 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i271,$459)|0);
         if ($460) {
          HEAP32[$0>>2] = 0;
          $478 = 1;
          break;
         } else {
          $$pre$i$i$i273 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i274 = ($$pre$i$i$i273|0)==(0|0);
          $478 = $phitmp$i$i$i274;
          break;
         }
        }
       } while(0);
       $461 = ($462|0)==(0|0);
       do {
        if ($461) {
         $$pre$i4$i$i279525 = $$pre$i4$i$i279;
         label = 139;
        } else {
         $463 = ((($462)) + 12|0);
         $464 = HEAP32[$463>>2]|0;
         $465 = ((($462)) + 16|0);
         $466 = HEAP32[$465>>2]|0;
         $467 = ($464|0)==($466|0);
         if ($467) {
          $468 = HEAP32[$462>>2]|0;
          $469 = ((($468)) + 36|0);
          $470 = HEAP32[$469>>2]|0;
          __THREW__ = 0;
          $471 = (invoke_ii($470|0,($462|0))|0);
          $472 = __THREW__; __THREW__ = 0;
          $473 = $472&1;
          if ($473) {
           label = 149;
           break L24;
          } else {
           $$0$i$i2$i$i277 = $471;
          }
         } else {
          $474 = HEAP32[$464>>2]|0;
          $475 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($474)|0);
          $$0$i$i2$i$i277 = $475;
         }
         $476 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $477 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i277,$476)|0);
         if ($477) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i279525 = 0;
          label = 139;
          break;
         } else {
          $phitmp$i5$i$i280 = ($$pre$i4$i$i279|0)==(0|0);
          $tmp$i$i282 = $478 ^ $phitmp$i5$i$i280;
          if ($tmp$i$i282) {
           $$pre$i4$i$i279524 = $$pre$i4$i$i279;$902 = $$pre$i4$i$i279;
           break;
          } else {
           $$lcssa = $442;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 139) {
        label = 0;
        if ($478) {
         $$lcssa = $442;
         break;
        } else {
         $$pre$i4$i$i279524 = $$pre$i4$i$i279525;$902 = 0;
        }
       }
       $479 = HEAP32[$0>>2]|0;
       $480 = ((($479)) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = ((($479)) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = ((($485)) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        __THREW__ = 0;
        $488 = (invoke_ii($487|0,($479|0))|0);
        $489 = __THREW__; __THREW__ = 0;
        $490 = $489&1;
        if ($490) {
         label = 149;
         break L24;
        } else {
         $$0$i$i286 = $488;
        }
       } else {
        $491 = HEAP32[$481>>2]|0;
        $492 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($491)|0);
        $$0$i$i286 = $492;
       }
       $493 = HEAP32[$442>>2]|0;
       $494 = ($$0$i$i286|0)==($493|0);
       if (!($494)) {
        $$lcssa = $442;
        break;
       }
       $495 = HEAP32[$0>>2]|0;
       $496 = ((($495)) + 12|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = ((($495)) + 16|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = ($497|0)==($499|0);
       if ($500) {
        $501 = HEAP32[$495>>2]|0;
        $502 = ((($501)) + 40|0);
        $503 = HEAP32[$502>>2]|0;
        __THREW__ = 0;
        (invoke_ii($503|0,($495|0))|0);
        $504 = __THREW__; __THREW__ = 0;
        $505 = $504&1;
        if ($505) {
         label = 150;
         break L24;
        }
       } else {
        $506 = ((($497)) + 4|0);
        HEAP32[$496>>2] = $506;
        $507 = HEAP32[$497>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($507)|0);
       }
       $508 = ((($442)) + 4|0);
       $509 = $508;
       $$pre522 = HEAP8[$51>>0]|0;
       $$pre523 = HEAP32[$20>>2]|0;
       $$pre$i4$i$i279 = $$pre$i4$i$i279524;$$sroa$0366$0 = $509;$435 = $$pre522;$439 = $$pre523;$462 = $902;
      }
      if ($49) {
       $514 = HEAP8[$51>>0]|0;
       $515 = ($514<<24>>24)<(0);
       $516 = HEAP32[$20>>2]|0;
       $517 = HEAP32[$52>>2]|0;
       $518 = $514&255;
       $519 = $515 ? $516 : $20;
       $520 = $515 ? $517 : $518;
       $521 = (($519) + ($520<<2)|0);
       $522 = ($$lcssa|0)==($521|0);
       if ($522) {
        $$1153 = $$0152;
       } else {
        label = 153;
        break L24;
       }
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     case 4:  {
      $$0135 = 0;$$pre$i4$i$i300 = $900;$543 = $900;
      L166: while(1) {
       $525 = HEAP32[$0>>2]|0;
       $526 = ($525|0)==(0|0);
       do {
        if ($526) {
         $559 = 1;
        } else {
         $527 = ((($525)) + 12|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = ((($525)) + 16|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = ($528|0)==($530|0);
         if ($531) {
          $532 = HEAP32[$525>>2]|0;
          $533 = ((($532)) + 36|0);
          $534 = HEAP32[$533>>2]|0;
          __THREW__ = 0;
          $535 = (invoke_ii($534|0,($525|0))|0);
          $536 = __THREW__; __THREW__ = 0;
          $537 = $536&1;
          if ($537) {
           label = 245;
           break L24;
          } else {
           $$0$i$i$i$i292 = $535;
          }
         } else {
          $538 = HEAP32[$528>>2]|0;
          $539 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($538)|0);
          $$0$i$i$i$i292 = $539;
         }
         $540 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $541 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i292,$540)|0);
         if ($541) {
          HEAP32[$0>>2] = 0;
          $559 = 1;
          break;
         } else {
          $$pre$i$i$i294 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i295 = ($$pre$i$i$i294|0)==(0|0);
          $559 = $phitmp$i$i$i295;
          break;
         }
        }
       } while(0);
       $542 = ($543|0)==(0|0);
       do {
        if ($542) {
         $$pre$i4$i$i300509 = $$pre$i4$i$i300;
         label = 167;
        } else {
         $544 = ((($543)) + 12|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ((($543)) + 16|0);
         $547 = HEAP32[$546>>2]|0;
         $548 = ($545|0)==($547|0);
         if ($548) {
          $549 = HEAP32[$543>>2]|0;
          $550 = ((($549)) + 36|0);
          $551 = HEAP32[$550>>2]|0;
          __THREW__ = 0;
          $552 = (invoke_ii($551|0,($543|0))|0);
          $553 = __THREW__; __THREW__ = 0;
          $554 = $553&1;
          if ($554) {
           label = 245;
           break L24;
          } else {
           $$0$i$i2$i$i298 = $552;
          }
         } else {
          $555 = HEAP32[$545>>2]|0;
          $556 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($555)|0);
          $$0$i$i2$i$i298 = $556;
         }
         $557 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $558 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i298,$557)|0);
         if ($558) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i300509 = 0;
          label = 167;
          break;
         } else {
          $phitmp$i5$i$i301 = ($$pre$i4$i$i300|0)==(0|0);
          $tmp$i$i303 = $559 ^ $phitmp$i5$i$i301;
          if ($tmp$i$i303) {
           $$pre$i4$i$i300511 = $$pre$i4$i$i300;$903 = $$pre$i4$i$i300;
           break;
          } else {
           $$pre$i4$i$i322 = $$pre$i4$i$i300;
           break L166;
          }
         }
        }
       } while(0);
       if ((label|0) == 167) {
        label = 0;
        if ($559) {
         $$pre$i4$i$i322 = $$pre$i4$i$i300509;
         break;
        } else {
         $$pre$i4$i$i300511 = $$pre$i4$i$i300509;$903 = 0;
        }
       }
       $560 = HEAP32[$0>>2]|0;
       $561 = ((($560)) + 12|0);
       $562 = HEAP32[$561>>2]|0;
       $563 = ((($560)) + 16|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = ($562|0)==($564|0);
       if ($565) {
        $566 = HEAP32[$560>>2]|0;
        $567 = ((($566)) + 36|0);
        $568 = HEAP32[$567>>2]|0;
        __THREW__ = 0;
        $569 = (invoke_ii($568|0,($560|0))|0);
        $570 = __THREW__; __THREW__ = 0;
        $571 = $570&1;
        if ($571) {
         label = 245;
         break L24;
        } else {
         $$0$i$i307 = $569;
        }
       } else {
        $572 = HEAP32[$562>>2]|0;
        $573 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($572)|0);
        $$0$i$i307 = $573;
       }
       $574 = HEAP32[$7>>2]|0;
       $575 = ((($574)) + 12|0);
       $576 = HEAP32[$575>>2]|0;
       __THREW__ = 0;
       $577 = (invoke_iiii($576|0,($7|0),2048,($$0$i$i307|0))|0);
       $578 = __THREW__; __THREW__ = 0;
       $579 = $578&1;
       if ($579) {
        label = 245;
        break L24;
       }
       if ($577) {
        $580 = HEAP32[$9>>2]|0;
        $581 = HEAP32[$11>>2]|0;
        $582 = ($580|0)==($581|0);
        if ($582) {
         __THREW__ = 0;
         invoke_viii(493,($8|0),($9|0),($11|0));
         $583 = __THREW__; __THREW__ = 0;
         $584 = $583&1;
         if ($584) {
          label = 245;
          break L24;
         }
         $$pre513 = HEAP32[$9>>2]|0;
         $586 = $$pre513;
        } else {
         $586 = $580;
        }
        $585 = ((($586)) + 4|0);
        HEAP32[$9>>2] = $585;
        HEAP32[$586>>2] = $$0$i$i307;
        $587 = (($$0135) + 1)|0;
        $$2137$ph = $587;
       } else {
        $588 = HEAP8[$57>>0]|0;
        $589 = ($588<<24>>24)<(0);
        $590 = HEAP32[$58>>2]|0;
        $591 = $588&255;
        $592 = $589 ? $590 : $591;
        $593 = ($592|0)!=(0);
        $594 = ($$0135|0)!=(0);
        $or$cond13 = $594 & $593;
        $595 = HEAP32[$18>>2]|0;
        $596 = ($$0$i$i307|0)==($595|0);
        $or$cond167 = $596 & $or$cond13;
        if (!($or$cond167)) {
         $$pre$i4$i$i322 = $$pre$i4$i$i300511;
         break;
        }
        $597 = HEAP32[$14>>2]|0;
        $598 = HEAP32[$15>>2]|0;
        $599 = ($597|0)==($598|0);
        if ($599) {
         __THREW__ = 0;
         invoke_viii(487,($13|0),($14|0),($15|0));
         $600 = __THREW__; __THREW__ = 0;
         $601 = $600&1;
         if ($601) {
          label = 245;
          break L24;
         }
         $$pre = HEAP32[$14>>2]|0;
         $603 = $$pre;
        } else {
         $603 = $597;
        }
        $602 = ((($603)) + 4|0);
        HEAP32[$14>>2] = $602;
        HEAP32[$603>>2] = $$0135;
        $$2137$ph = 0;
       }
       $604 = HEAP32[$0>>2]|0;
       $605 = ((($604)) + 12|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = ((($604)) + 16|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($606|0)==($608|0);
       if ($609) {
        $610 = HEAP32[$604>>2]|0;
        $611 = ((($610)) + 40|0);
        $612 = HEAP32[$611>>2]|0;
        __THREW__ = 0;
        (invoke_ii($612|0,($604|0))|0);
        $613 = __THREW__; __THREW__ = 0;
        $614 = $613&1;
        if ($614) {
         label = 245;
         break L24;
        } else {
         $$0135 = $$2137$ph;$$pre$i4$i$i300 = $$pre$i4$i$i300511;$543 = $903;
         continue;
        }
       } else {
        $615 = ((($606)) + 4|0);
        HEAP32[$605>>2] = $615;
        $616 = HEAP32[$606>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($616)|0);
        $$0135 = $$2137$ph;$$pre$i4$i$i300 = $$pre$i4$i$i300511;$543 = $903;
        continue;
       }
      }
      $617 = HEAP32[$13>>2]|0;
      $618 = HEAP32[$14>>2]|0;
      $619 = ($617|0)!=($618|0);
      $620 = ($$0135|0)!=(0);
      $or$cond15 = $620 & $619;
      if ($or$cond15) {
       $621 = HEAP32[$15>>2]|0;
       $622 = ($618|0)==($621|0);
       if ($622) {
        __THREW__ = 0;
        invoke_viii(487,($13|0),($14|0),($15|0));
        $623 = __THREW__; __THREW__ = 0;
        $624 = $623&1;
        if ($624) {
         label = 245;
         break L24;
        }
        $$pre515 = HEAP32[$14>>2]|0;
        $626 = $$pre515;
       } else {
        $626 = $618;
       }
       $625 = ((($626)) + 4|0);
       HEAP32[$14>>2] = $625;
       HEAP32[$626>>2] = $$0135;
      }
      $627 = HEAP32[$24>>2]|0;
      $628 = ($627|0)>(0);
      L219: do {
       if ($628) {
        $629 = HEAP32[$0>>2]|0;
        $630 = ($629|0)==(0|0);
        do {
         if ($630) {
          $904 = 1;
         } else {
          $631 = ((($629)) + 12|0);
          $632 = HEAP32[$631>>2]|0;
          $633 = ((($629)) + 16|0);
          $634 = HEAP32[$633>>2]|0;
          $635 = ($632|0)==($634|0);
          if ($635) {
           $636 = HEAP32[$629>>2]|0;
           $637 = ((($636)) + 36|0);
           $638 = HEAP32[$637>>2]|0;
           __THREW__ = 0;
           $639 = (invoke_ii($638|0,($629|0))|0);
           $640 = __THREW__; __THREW__ = 0;
           $641 = $640&1;
           if ($641) {
            label = 245;
            break L24;
           } else {
            $$0$i$i$i$i314 = $639;
           }
          } else {
           $642 = HEAP32[$632>>2]|0;
           $643 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($642)|0);
           $$0$i$i$i$i314 = $643;
          }
          $644 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $645 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i314,$644)|0);
          if ($645) {
           HEAP32[$0>>2] = 0;
           $904 = 1;
           break;
          } else {
           $$pre$i$i$i316 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i317 = ($$pre$i$i$i316|0)==(0|0);
           $904 = $phitmp$i$i$i317;
           break;
          }
         }
        } while(0);
        $646 = ($$pre$i4$i$i322|0)==(0|0);
        do {
         if ($646) {
          label = 205;
         } else {
          $647 = ((($$pre$i4$i$i322)) + 12|0);
          $648 = HEAP32[$647>>2]|0;
          $649 = ((($$pre$i4$i$i322)) + 16|0);
          $650 = HEAP32[$649>>2]|0;
          $651 = ($648|0)==($650|0);
          if ($651) {
           $652 = HEAP32[$$pre$i4$i$i322>>2]|0;
           $653 = ((($652)) + 36|0);
           $654 = HEAP32[$653>>2]|0;
           __THREW__ = 0;
           $655 = (invoke_ii($654|0,($$pre$i4$i$i322|0))|0);
           $656 = __THREW__; __THREW__ = 0;
           $657 = $656&1;
           if ($657) {
            label = 245;
            break L24;
           } else {
            $$0$i$i2$i$i320 = $655;
           }
          } else {
           $658 = HEAP32[$648>>2]|0;
           $659 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($658)|0);
           $$0$i$i2$i$i320 = $659;
          }
          $660 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $661 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i320,$660)|0);
          if ($661) {
           HEAP32[$1>>2] = 0;
           label = 205;
           break;
          } else {
           if ($904) {
            $905 = $$pre$i4$i$i322;
            break;
           } else {
            label = 244;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 205) {
         label = 0;
         if ($904) {
          label = 244;
          break L24;
         } else {
          $905 = 0;
         }
        }
        $662 = HEAP32[$0>>2]|0;
        $663 = ((($662)) + 12|0);
        $664 = HEAP32[$663>>2]|0;
        $665 = ((($662)) + 16|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = ($664|0)==($666|0);
        if ($667) {
         $668 = HEAP32[$662>>2]|0;
         $669 = ((($668)) + 36|0);
         $670 = HEAP32[$669>>2]|0;
         __THREW__ = 0;
         $671 = (invoke_ii($670|0,($662|0))|0);
         $672 = __THREW__; __THREW__ = 0;
         $673 = $672&1;
         if ($673) {
          label = 245;
          break L24;
         } else {
          $$0$i$i329 = $671;
         }
        } else {
         $674 = HEAP32[$664>>2]|0;
         $675 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($674)|0);
         $$0$i$i329 = $675;
        }
        $676 = HEAP32[$17>>2]|0;
        $677 = ($$0$i$i329|0)==($676|0);
        if (!($677)) {
         label = 244;
         break L24;
        }
        $678 = HEAP32[$0>>2]|0;
        $679 = ((($678)) + 12|0);
        $680 = HEAP32[$679>>2]|0;
        $681 = ((($678)) + 16|0);
        $682 = HEAP32[$681>>2]|0;
        $683 = ($680|0)==($682|0);
        if ($683) {
         $684 = HEAP32[$678>>2]|0;
         $685 = ((($684)) + 40|0);
         $686 = HEAP32[$685>>2]|0;
         __THREW__ = 0;
         (invoke_ii($686|0,($678|0))|0);
         $687 = __THREW__; __THREW__ = 0;
         $688 = $687&1;
         if ($688) {
          label = 245;
          break L24;
         } else {
          $$pre$i4$i$i342 = $905;$711 = $905;
         }
        } else {
         $689 = ((($680)) + 4|0);
         HEAP32[$679>>2] = $689;
         $690 = HEAP32[$680>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($690)|0);
         $$pre$i4$i$i342 = $905;$711 = $905;
        }
        while(1) {
         $691 = HEAP32[$24>>2]|0;
         $692 = ($691|0)>(0);
         if (!($692)) {
          break L219;
         }
         $693 = HEAP32[$0>>2]|0;
         $694 = ($693|0)==(0|0);
         do {
          if ($694) {
           $727 = 1;
          } else {
           $695 = ((($693)) + 12|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($693)) + 16|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($696|0)==($698|0);
           if ($699) {
            $700 = HEAP32[$693>>2]|0;
            $701 = ((($700)) + 36|0);
            $702 = HEAP32[$701>>2]|0;
            __THREW__ = 0;
            $703 = (invoke_ii($702|0,($693|0))|0);
            $704 = __THREW__; __THREW__ = 0;
            $705 = $704&1;
            if ($705) {
             label = 245;
             break L24;
            } else {
             $$0$i$i$i$i334 = $703;
            }
           } else {
            $706 = HEAP32[$696>>2]|0;
            $707 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($706)|0);
            $$0$i$i$i$i334 = $707;
           }
           $708 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $709 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i334,$708)|0);
           if ($709) {
            HEAP32[$0>>2] = 0;
            $727 = 1;
            break;
           } else {
            $$pre$i$i$i336 = HEAP32[$0>>2]|0;
            $phitmp$i$i$i337 = ($$pre$i$i$i336|0)==(0|0);
            $727 = $phitmp$i$i$i337;
            break;
           }
          }
         } while(0);
         $710 = ($711|0)==(0|0);
         do {
          if ($710) {
           $$pre$i4$i$i342516$ph = $$pre$i4$i$i342;
           label = 228;
          } else {
           $712 = ((($711)) + 12|0);
           $713 = HEAP32[$712>>2]|0;
           $714 = ((($711)) + 16|0);
           $715 = HEAP32[$714>>2]|0;
           $716 = ($713|0)==($715|0);
           if ($716) {
            $717 = HEAP32[$711>>2]|0;
            $718 = ((($717)) + 36|0);
            $719 = HEAP32[$718>>2]|0;
            __THREW__ = 0;
            $720 = (invoke_ii($719|0,($711|0))|0);
            $721 = __THREW__; __THREW__ = 0;
            $722 = $721&1;
            if ($722) {
             label = 245;
             break L24;
            } else {
             $$0$i$i2$i$i340 = $720;
            }
           } else {
            $723 = HEAP32[$713>>2]|0;
            $724 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($723)|0);
            $$0$i$i2$i$i340 = $724;
           }
           $725 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $726 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i340,$725)|0);
           if ($726) {
            HEAP32[$1>>2] = 0;
            $$pre$i4$i$i342516$ph = 0;
            label = 228;
            break;
           } else {
            $phitmp$i5$i$i343 = ($$pre$i4$i$i342|0)==(0|0);
            $tmp$i$i345 = $727 ^ $phitmp$i5$i$i343;
            if ($tmp$i$i345) {
             $$pre$i4$i$i342516533 = $$pre$i4$i$i342;$906 = $$pre$i4$i$i342;
             break;
            } else {
             label = 244;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 228) {
          label = 0;
          if ($727) {
           label = 244;
           break L24;
          } else {
           $$pre$i4$i$i342516533 = $$pre$i4$i$i342516$ph;$906 = 0;
          }
         }
         $728 = HEAP32[$0>>2]|0;
         $729 = ((($728)) + 12|0);
         $730 = HEAP32[$729>>2]|0;
         $731 = ((($728)) + 16|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = ($730|0)==($732|0);
         if ($733) {
          $734 = HEAP32[$728>>2]|0;
          $735 = ((($734)) + 36|0);
          $736 = HEAP32[$735>>2]|0;
          __THREW__ = 0;
          $737 = (invoke_ii($736|0,($728|0))|0);
          $738 = __THREW__; __THREW__ = 0;
          $739 = $738&1;
          if ($739) {
           label = 245;
           break L24;
          } else {
           $$0$i$i349 = $737;
          }
         } else {
          $740 = HEAP32[$730>>2]|0;
          $741 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($740)|0);
          $$0$i$i349 = $741;
         }
         $742 = HEAP32[$7>>2]|0;
         $743 = ((($742)) + 12|0);
         $744 = HEAP32[$743>>2]|0;
         __THREW__ = 0;
         $745 = (invoke_iiii($744|0,($7|0),2048,($$0$i$i349|0))|0);
         $746 = __THREW__; __THREW__ = 0;
         $747 = $746&1;
         if ($747) {
          label = 245;
          break L24;
         }
         if (!($745)) {
          label = 244;
          break L24;
         }
         $748 = HEAP32[$9>>2]|0;
         $749 = HEAP32[$11>>2]|0;
         $750 = ($748|0)==($749|0);
         if ($750) {
          __THREW__ = 0;
          invoke_viii(493,($8|0),($9|0),($11|0));
          $751 = __THREW__; __THREW__ = 0;
          $752 = $751&1;
          if ($752) {
           label = 245;
           break L24;
          }
         }
         $753 = HEAP32[$0>>2]|0;
         $754 = ((($753)) + 12|0);
         $755 = HEAP32[$754>>2]|0;
         $756 = ((($753)) + 16|0);
         $757 = HEAP32[$756>>2]|0;
         $758 = ($755|0)==($757|0);
         if ($758) {
          $759 = HEAP32[$753>>2]|0;
          $760 = ((($759)) + 36|0);
          $761 = HEAP32[$760>>2]|0;
          __THREW__ = 0;
          $762 = (invoke_ii($761|0,($753|0))|0);
          $763 = __THREW__; __THREW__ = 0;
          $764 = $763&1;
          if ($764) {
           label = 245;
           break L24;
          } else {
           $$0$i$i354 = $762;
          }
         } else {
          $765 = HEAP32[$755>>2]|0;
          $766 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($765)|0);
          $$0$i$i354 = $766;
         }
         $767 = HEAP32[$9>>2]|0;
         $768 = ((($767)) + 4|0);
         HEAP32[$9>>2] = $768;
         HEAP32[$767>>2] = $$0$i$i354;
         $769 = HEAP32[$24>>2]|0;
         $770 = (($769) + -1)|0;
         HEAP32[$24>>2] = $770;
         $771 = HEAP32[$0>>2]|0;
         $772 = ((($771)) + 12|0);
         $773 = HEAP32[$772>>2]|0;
         $774 = ((($771)) + 16|0);
         $775 = HEAP32[$774>>2]|0;
         $776 = ($773|0)==($775|0);
         if ($776) {
          $777 = HEAP32[$771>>2]|0;
          $778 = ((($777)) + 40|0);
          $779 = HEAP32[$778>>2]|0;
          __THREW__ = 0;
          (invoke_ii($779|0,($771|0))|0);
          $780 = __THREW__; __THREW__ = 0;
          $781 = $780&1;
          if ($781) {
           label = 245;
           break L24;
          } else {
           $$pre$i4$i$i342 = $$pre$i4$i$i342516533;$711 = $906;
           continue;
          }
         } else {
          $782 = ((($773)) + 4|0);
          HEAP32[$772>>2] = $782;
          $783 = HEAP32[$773>>2]|0;
          (__ZNSt3__211char_traitsIwE11to_int_typeEw($783)|0);
          $$pre$i4$i$i342 = $$pre$i4$i$i342516533;$711 = $906;
          continue;
         }
        }
       }
      } while(0);
      $784 = HEAP32[$9>>2]|0;
      $785 = HEAP32[$8>>2]|0;
      $786 = ($784|0)==($785|0);
      if ($786) {
       label = 244;
       break L24;
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     default: {
      $$1153 = $$0152;
     }
     }
    } while(0);
    L293: do {
     if ((label|0) == 49) {
      while(1) {
       label = 0;
       $142 = HEAP32[$0>>2]|0;
       $143 = ($142|0)==(0|0);
       do {
        if ($143) {
         $176 = 1;
        } else {
         $144 = ((($142)) + 12|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = ((($142)) + 16|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = ($145|0)==($147|0);
         if ($148) {
          $149 = HEAP32[$142>>2]|0;
          $150 = ((($149)) + 36|0);
          $151 = HEAP32[$150>>2]|0;
          __THREW__ = 0;
          $152 = (invoke_ii($151|0,($142|0))|0);
          $153 = __THREW__; __THREW__ = 0;
          $154 = $153&1;
          if ($154) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i193 = $152;
          }
         } else {
          $155 = HEAP32[$145>>2]|0;
          $156 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($155)|0);
          $$0$i$i$i$i193 = $156;
         }
         $157 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $158 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i193,$157)|0);
         if ($158) {
          HEAP32[$0>>2] = 0;
          $176 = 1;
          break;
         } else {
          $$pre$i$i$i195 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i196 = ($$pre$i$i$i195|0)==(0|0);
          $176 = $phitmp$i$i$i196;
          break;
         }
        }
       } while(0);
       $159 = ($160|0)==(0|0);
       do {
        if ($159) {
         $$pre$i4$i$i201527 = $$pre$i4$i$i201;
         label = 62;
        } else {
         $161 = ((($160)) + 12|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ((($160)) + 16|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = ($162|0)==($164|0);
         if ($165) {
          $166 = HEAP32[$160>>2]|0;
          $167 = ((($166)) + 36|0);
          $168 = HEAP32[$167>>2]|0;
          __THREW__ = 0;
          $169 = (invoke_ii($168|0,($160|0))|0);
          $170 = __THREW__; __THREW__ = 0;
          $171 = $170&1;
          if ($171) {
           label = 35;
           break L24;
          } else {
           $$0$i$i2$i$i199 = $169;
          }
         } else {
          $172 = HEAP32[$162>>2]|0;
          $173 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($172)|0);
          $$0$i$i2$i$i199 = $173;
         }
         $174 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $175 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i199,$174)|0);
         if ($175) {
          HEAP32[$1>>2] = 0;
          $$pre$i4$i$i201527 = 0;
          label = 62;
          break;
         } else {
          $phitmp$i5$i$i202 = ($$pre$i4$i$i201|0)==(0|0);
          $tmp$i$i204 = $176 ^ $phitmp$i5$i$i202;
          if ($tmp$i$i204) {
           $$pre$i4$i$i201529 = $$pre$i4$i$i201;$901 = $$pre$i4$i$i201;
           break;
          } else {
           $$1153 = $$0152;
           break L293;
          }
         }
        }
       } while(0);
       if ((label|0) == 62) {
        label = 0;
        if ($176) {
         $$1153 = $$0152;
         break L293;
        } else {
         $$pre$i4$i$i201529 = $$pre$i4$i$i201527;$901 = 0;
        }
       }
       $177 = HEAP32[$0>>2]|0;
       $178 = ((($177)) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($177)) + 16|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($179|0)==($181|0);
       if ($182) {
        $183 = HEAP32[$177>>2]|0;
        $184 = ((($183)) + 36|0);
        $185 = HEAP32[$184>>2]|0;
        __THREW__ = 0;
        $186 = (invoke_ii($185|0,($177|0))|0);
        $187 = __THREW__; __THREW__ = 0;
        $188 = $187&1;
        if ($188) {
         label = 35;
         break L24;
        } else {
         $$0$i$i208 = $186;
        }
       } else {
        $189 = HEAP32[$179>>2]|0;
        $190 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($189)|0);
        $$0$i$i208 = $190;
       }
       $191 = HEAP32[$7>>2]|0;
       $192 = ((($191)) + 12|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iiii($193|0,($7|0),8192,($$0$i$i208|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        label = 35;
        break L24;
       }
       if (!($194)) {
        $$1153 = $$0152;
        break L293;
       }
       $197 = HEAP32[$0>>2]|0;
       $198 = ((($197)) + 12|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = ((($197)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($199|0)==($201|0);
       if ($202) {
        $203 = HEAP32[$197>>2]|0;
        $204 = ((($203)) + 40|0);
        $205 = HEAP32[$204>>2]|0;
        __THREW__ = 0;
        $206 = (invoke_ii($205|0,($197|0))|0);
        $207 = __THREW__; __THREW__ = 0;
        $208 = $207&1;
        if ($208) {
         label = 35;
         break L24;
        } else {
         $$0$i$i213 = $206;
        }
       } else {
        $209 = ((($199)) + 4|0);
        HEAP32[$198>>2] = $209;
        $210 = HEAP32[$199>>2]|0;
        $211 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($210)|0);
        $$0$i$i213 = $211;
       }
       __THREW__ = 0;
       invoke_vii(490,($23|0),($$0$i$i213|0));
       $212 = __THREW__; __THREW__ = 0;
       $213 = $212&1;
       if ($213) {
        label = 35;
        break L24;
       } else {
        $$pre$i4$i$i201 = $$pre$i4$i$i201529;$160 = $901;
        label = 49;
       }
      }
     }
    } while(0);
    $791 = (($$0161) + 1)|0;
    $$0152 = $$1153;$$0161 = $791;
   }
   L329:    switch (label|0) {
    case 35: {
     $97 = ___cxa_find_matching_catch_2()|0;
     $98 = tempRet0;
     $$5145 = $97;$$5151 = $98;
     break L21;
     break;
    }
    case 47: {
     $140 = HEAP32[$5>>2]|0;
     $141 = $140 | 4;
     HEAP32[$5>>2] = $141;
     $$10 = 0;
     break;
    }
    case 109: {
     $372 = HEAP32[$5>>2]|0;
     $373 = $372 | 4;
     HEAP32[$5>>2] = $373;
     $$10 = 0;
     break;
    }
    case 119: {
     $407 = ___cxa_find_matching_catch_2()|0;
     $408 = tempRet0;
     $$5145 = $407;$$5151 = $408;
     break L21;
     break;
    }
    case 149: {
     $510 = ___cxa_find_matching_catch_2()|0;
     $511 = tempRet0;
     $$5145 = $510;$$5151 = $511;
     break L21;
     break;
    }
    case 150: {
     $512 = ___cxa_find_matching_catch_2()|0;
     $513 = tempRet0;
     $$5145 = $512;$$5151 = $513;
     break L21;
     break;
    }
    case 153: {
     $523 = HEAP32[$5>>2]|0;
     $524 = $523 | 4;
     HEAP32[$5>>2] = $524;
     $$10 = 0;
     break;
    }
    case 244: {
     $787 = HEAP32[$5>>2]|0;
     $788 = $787 | 4;
     HEAP32[$5>>2] = $788;
     $$10 = 0;
     break;
    }
    case 245: {
     $789 = ___cxa_find_matching_catch_2()|0;
     $790 = tempRet0;
     $$5145 = $789;$$5151 = $790;
     break L21;
     break;
    }
    case 247: {
     L331: do {
      if ($60) {
       $792 = ((($$0152)) + 8|0);
       $793 = ((($792)) + 3|0);
       $794 = ((($$0152)) + 4|0);
       $$0 = 1;
       L333: while(1) {
        $795 = HEAP8[$793>>0]|0;
        $796 = ($795<<24>>24)<(0);
        if ($796) {
         $797 = HEAP32[$794>>2]|0;
         $800 = $797;
        } else {
         $798 = $795&255;
         $800 = $798;
        }
        $799 = ($$0>>>0)<($800>>>0);
        if (!($799)) {
         break L331;
        }
        $801 = HEAP32[$0>>2]|0;
        $802 = ($801|0)==(0|0);
        do {
         if ($802) {
          $907 = 1;
         } else {
          $803 = ((($801)) + 12|0);
          $804 = HEAP32[$803>>2]|0;
          $805 = ((($801)) + 16|0);
          $806 = HEAP32[$805>>2]|0;
          $807 = ($804|0)==($806|0);
          if ($807) {
           $808 = HEAP32[$801>>2]|0;
           $809 = ((($808)) + 36|0);
           $810 = HEAP32[$809>>2]|0;
           __THREW__ = 0;
           $811 = (invoke_ii($810|0,($801|0))|0);
           $812 = __THREW__; __THREW__ = 0;
           $813 = $812&1;
           if ($813) {
            label = 275;
            break L333;
           } else {
            $$0$i$i$i$i254 = $811;
           }
          } else {
           $814 = HEAP32[$804>>2]|0;
           $815 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($814)|0);
           $$0$i$i$i$i254 = $815;
          }
          $816 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $817 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i254,$816)|0);
          if ($817) {
           HEAP32[$0>>2] = 0;
           $907 = 1;
           break;
          } else {
           $$pre$i$i$i256 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i257 = ($$pre$i$i$i256|0)==(0|0);
           $907 = $phitmp$i$i$i257;
           break;
          }
         }
        } while(0);
        $818 = HEAP32[$1>>2]|0;
        $819 = ($818|0)==(0|0);
        do {
         if ($819) {
          label = 266;
         } else {
          $820 = ((($818)) + 12|0);
          $821 = HEAP32[$820>>2]|0;
          $822 = ((($818)) + 16|0);
          $823 = HEAP32[$822>>2]|0;
          $824 = ($821|0)==($823|0);
          if ($824) {
           $825 = HEAP32[$818>>2]|0;
           $826 = ((($825)) + 36|0);
           $827 = HEAP32[$826>>2]|0;
           __THREW__ = 0;
           $828 = (invoke_ii($827|0,($818|0))|0);
           $829 = __THREW__; __THREW__ = 0;
           $830 = $829&1;
           if ($830) {
            label = 275;
            break L333;
           } else {
            $$0$i$i2$i$i260 = $828;
           }
          } else {
           $831 = HEAP32[$821>>2]|0;
           $832 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($831)|0);
           $$0$i$i2$i$i260 = $832;
          }
          $833 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $834 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i260,$833)|0);
          if ($834) {
           HEAP32[$1>>2] = 0;
           label = 266;
           break;
          } else {
           if ($907) {
            break;
           } else {
            label = 274;
            break L333;
           }
          }
         }
        } while(0);
        if ((label|0) == 266) {
         label = 0;
         if ($907) {
          label = 274;
          break;
         }
        }
        $835 = HEAP32[$0>>2]|0;
        $836 = ((($835)) + 12|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = ((($835)) + 16|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = ($837|0)==($839|0);
        if ($840) {
         $841 = HEAP32[$835>>2]|0;
         $842 = ((($841)) + 36|0);
         $843 = HEAP32[$842>>2]|0;
         __THREW__ = 0;
         $844 = (invoke_ii($843|0,($835|0))|0);
         $845 = __THREW__; __THREW__ = 0;
         $846 = $845&1;
         if ($846) {
          label = 275;
          break;
         } else {
          $$0$i$i183 = $844;
         }
        } else {
         $847 = HEAP32[$837>>2]|0;
         $848 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($847)|0);
         $$0$i$i183 = $848;
        }
        $849 = HEAP8[$793>>0]|0;
        $850 = ($849<<24>>24)<(0);
        if ($850) {
         $851 = HEAP32[$$0152>>2]|0;
         $853 = $851;
        } else {
         $853 = $$0152;
        }
        $852 = (($853) + ($$0<<2)|0);
        $854 = HEAP32[$852>>2]|0;
        $855 = ($$0$i$i183|0)==($854|0);
        if (!($855)) {
         label = 274;
         break;
        }
        $860 = (($$0) + 1)|0;
        $861 = HEAP32[$0>>2]|0;
        $862 = ((($861)) + 12|0);
        $863 = HEAP32[$862>>2]|0;
        $864 = ((($861)) + 16|0);
        $865 = HEAP32[$864>>2]|0;
        $866 = ($863|0)==($865|0);
        if ($866) {
         $867 = HEAP32[$861>>2]|0;
         $868 = ((($867)) + 40|0);
         $869 = HEAP32[$868>>2]|0;
         __THREW__ = 0;
         (invoke_ii($869|0,($861|0))|0);
         $870 = __THREW__; __THREW__ = 0;
         $871 = $870&1;
         if ($871) {
          label = 275;
          break;
         } else {
          $$0 = $860;
          continue;
         }
        } else {
         $872 = ((($863)) + 4|0);
         HEAP32[$862>>2] = $872;
         $873 = HEAP32[$863>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($873)|0);
         $$0 = $860;
         continue;
        }
       }
       if ((label|0) == 274) {
        $856 = HEAP32[$5>>2]|0;
        $857 = $856 | 4;
        HEAP32[$5>>2] = $857;
        $$10 = 0;
        break L329;
       }
       else if ((label|0) == 275) {
        $858 = ___cxa_find_matching_catch_2()|0;
        $859 = tempRet0;
        $$5145 = $858;$$5151 = $859;
        break L21;
       }
      }
     } while(0);
     $874 = HEAP32[$13>>2]|0;
     $875 = HEAP32[$14>>2]|0;
     $876 = ($874|0)==($875|0);
     if ($876) {
      $$10 = 1;
     } else {
      HEAP32[$25>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(440,($19|0),($874|0),($875|0),($25|0));
      $877 = __THREW__; __THREW__ = 0;
      $878 = $877&1;
      if ($878) {
       $883 = ___cxa_find_matching_catch_2()|0;
       $884 = tempRet0;
       $$5145 = $883;$$5151 = $884;
       break L21;
      }
      $879 = HEAP32[$25>>2]|0;
      $880 = ($879|0)==(0);
      if ($880) {
       $$10 = 1;
       break;
      } else {
       $881 = HEAP32[$5>>2]|0;
       $882 = $881 | 4;
       HEAP32[$5>>2] = $882;
       $$10 = 0;
       break;
      }
     }
     break;
    }
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
   $885 = HEAP32[$13>>2]|0;
   HEAP32[$13>>2] = 0;
   $886 = ($885|0)==(0|0);
   if (!($886)) {
    $887 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    invoke_vi($887|0,($885|0));
    $888 = __THREW__; __THREW__ = 0;
    $889 = $888&1;
    if ($889) {
     $890 = ___cxa_find_matching_catch_3(0|0)|0;
     $891 = tempRet0;
     ___clang_call_terminate($890);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$10|0);
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $892 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $893 = ($892|0)==(0|0);
 if (!($893)) {
  $894 = HEAP32[$27>>2]|0;
  __THREW__ = 0;
  invoke_vi($894|0,($892|0));
  $895 = __THREW__; __THREW__ = 0;
  $896 = $895&1;
  if ($896) {
   $897 = ___cxa_find_matching_catch_3(0|0)|0;
   $898 = tempRet0;
   ___clang_call_terminate($897);
   // unreachable;
  }
 }
 ___resumeException($$5145|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $19 = $phitmp$i;$20 = $10;
 } else {
  $8 = $6&255;
  $19 = 1;$20 = $8;
 }
 $13 = $2;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16|0)==(0);
 do {
  if (!($17)) {
   $18 = (($19) - ($20))|0;
   $21 = ($18>>>0)<($16>>>0);
   $22 = (($20) + ($16))|0;
   if ($21) {
    $23 = (($22) - ($19))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$19,$23,$20,$20,0,0);
    $$pre = HEAP8[$5>>0]|0;
    $25 = $$pre;
   } else {
    $25 = $6;
   }
   $24 = ($25<<24>>24)<(0);
   if ($24) {
    $26 = HEAP32[$0>>2]|0;
    $28 = $26;
   } else {
    $28 = $0;
   }
   $27 = (($28) + ($20<<2)|0);
   $$0 = $27;$$028 = $1;
   while(1) {
    $29 = ($$028|0)==($2|0);
    if ($29) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$$028);
    $30 = ((($$0)) + 4|0);
    $31 = ((($$028)) + 4|0);
    $$0 = $30;$$028 = $31;
   }
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$3);
   $32 = HEAP8[$5>>0]|0;
   $33 = ($32<<24>>24)<(0);
   if ($33) {
    $34 = ((($0)) + 4|0);
    HEAP32[$34>>2] = $22;
    break;
   } else {
    $35 = $22&255;
    HEAP8[$5>>0] = $35;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i43 = 0, $$0$i$i$i47 = 0, $$0$i$i$i52 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i67 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i44 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i53 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i63 = 0, $exitcond$i$i$i68 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = sp + 148|0;
 $11 = sp + 144|0;
 $12 = sp + 155|0;
 $13 = sp + 154|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $17 = sp + 128|0;
 $18 = sp + 124|0;
 $19 = sp + 120|0;
 $20 = sp + 153|0;
 $21 = sp + 152|0;
 $22 = sp + 116|0;
 $23 = sp + 112|0;
 $24 = sp + 108|0;
 $25 = sp + 104|0;
 $26 = sp + 100|0;
 $27 = sp + 88|0;
 $28 = sp + 76|0;
 $29 = sp + 64|0;
 $30 = sp + 52|0;
 $31 = sp + 48|0;
 $32 = sp + 36|0;
 $33 = sp + 24|0;
 $34 = sp + 12|0;
 $35 = sp;
 if ($0) {
  $36 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,21896)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 1023]($26,$36);
  $40 = HEAP32[$26>>2]|0;
  HEAP8[$2>>0]=$40&255;HEAP8[$2+1>>0]=($40>>8)&255;HEAP8[$2+2>>0]=($40>>16)&255;HEAP8[$2+3>>0]=$40>>24;
  $41 = HEAP32[$36>>2]|0;
  $42 = ((($41)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_vii[$43 & 1023]($27,$36);
  $44 = ((($8)) + 8|0);
  $45 = ((($44)) + 3|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = ($46<<24>>24)<(0);
  if ($47) {
   $48 = HEAP32[$8>>2]|0;
   HEAP32[$24>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($48,$24);
   $49 = ((($8)) + 4|0);
   HEAP32[$49>>2] = 0;
  } else {
   HEAP32[$25>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
   HEAP8[$45>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($8|0),0);
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if ($51) {
   $52 = ___cxa_find_matching_catch_3(0|0)|0;
   $53 = tempRet0;
   ___clang_call_terminate($52);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $54 = (($27) + ($$0$i$i$i<<2)|0);
   HEAP32[$54>>2] = 0;
   $55 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $55;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  $56 = HEAP32[$36>>2]|0;
  $57 = ((($56)) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($28,$36);
  $59 = ((($7)) + 8|0);
  $60 = ((($59)) + 3|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  if ($62) {
   $63 = HEAP32[$7>>2]|0;
   HEAP32[$22>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($63,$22);
   $64 = ((($7)) + 4|0);
   HEAP32[$64>>2] = 0;
  } else {
   HEAP32[$23>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$23);
   HEAP8[$60>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($7|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = tempRet0;
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$28>>2]|0;HEAP32[$7+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$28+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $69 = (($28) + ($$0$i$i$i40<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $70;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($28);
  $71 = HEAP32[$36>>2]|0;
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 1023]($36)|0);
  HEAP32[$3>>2] = $74;
  $75 = HEAP32[$36>>2]|0;
  $76 = ((($75)) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (FUNCTION_TABLE_ii[$77 & 1023]($36)|0);
  HEAP32[$4>>2] = $78;
  $79 = HEAP32[$36>>2]|0;
  $80 = ((($79)) + 20|0);
  $81 = HEAP32[$80>>2]|0;
  FUNCTION_TABLE_vii[$81 & 1023]($29,$36);
  $82 = ((($5)) + 11|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)<(0);
  if ($84) {
   $85 = HEAP32[$5>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($85,$20);
   $86 = ((($5)) + 4|0);
   HEAP32[$86>>2] = 0;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$21);
   HEAP8[$82>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($5|0),0);
  $87 = __THREW__; __THREW__ = 0;
  $88 = $87&1;
  if ($88) {
   $89 = ___cxa_find_matching_catch_3(0|0)|0;
   $90 = tempRet0;
   ___clang_call_terminate($89);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$29>>2]|0;HEAP32[$5+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$29+8>>2]|0;
  $$0$i$i$i43 = 0;
  while(1) {
   $exitcond$i$i$i44 = ($$0$i$i$i43|0)==(3);
   if ($exitcond$i$i$i44) {
    break;
   }
   $91 = (($29) + ($$0$i$i$i43<<2)|0);
   HEAP32[$91>>2] = 0;
   $92 = (($$0$i$i$i43) + 1)|0;
   $$0$i$i$i43 = $92;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
  $93 = HEAP32[$36>>2]|0;
  $94 = ((($93)) + 24|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vii[$95 & 1023]($30,$36);
  $96 = ((($6)) + 8|0);
  $97 = ((($96)) + 3|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = ($98<<24>>24)<(0);
  if ($99) {
   $100 = HEAP32[$6>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($100,$18);
   $101 = ((($6)) + 4|0);
   HEAP32[$101>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$19);
   HEAP8[$97>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($6|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch_3(0|0)|0;
   $105 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $106 = (($30) + ($$0$i$i$i47<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $107;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($30);
  $108 = HEAP32[$36>>2]|0;
  $109 = ((($108)) + 36|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (FUNCTION_TABLE_ii[$110 & 1023]($36)|0);
  $storemerge = $111;
 } else {
  $112 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,21888)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($113)) + 44|0);
  $115 = HEAP32[$114>>2]|0;
  FUNCTION_TABLE_vii[$115 & 1023]($31,$112);
  $116 = HEAP32[$31>>2]|0;
  HEAP8[$2>>0]=$116&255;HEAP8[$2+1>>0]=($116>>8)&255;HEAP8[$2+2>>0]=($116>>16)&255;HEAP8[$2+3>>0]=$116>>24;
  $117 = HEAP32[$112>>2]|0;
  $118 = ((($117)) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  FUNCTION_TABLE_vii[$119 & 1023]($32,$112);
  $120 = ((($8)) + 8|0);
  $121 = ((($120)) + 3|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = ($122<<24>>24)<(0);
  if ($123) {
   $124 = HEAP32[$8>>2]|0;
   HEAP32[$16>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($124,$16);
   $125 = ((($8)) + 4|0);
   HEAP32[$125>>2] = 0;
  } else {
   HEAP32[$17>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
   HEAP8[$121>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($8|0),0);
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch_3(0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$32>>2]|0;HEAP32[$8+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$32+8>>2]|0;
  $$0$i$i$i52 = 0;
  while(1) {
   $exitcond$i$i$i53 = ($$0$i$i$i52|0)==(3);
   if ($exitcond$i$i$i53) {
    break;
   }
   $130 = (($32) + ($$0$i$i$i52<<2)|0);
   HEAP32[$130>>2] = 0;
   $131 = (($$0$i$i$i52) + 1)|0;
   $$0$i$i$i52 = $131;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($32);
  $132 = HEAP32[$112>>2]|0;
  $133 = ((($132)) + 28|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($33,$112);
  $135 = ((($7)) + 8|0);
  $136 = ((($135)) + 3|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = ($137<<24>>24)<(0);
  if ($138) {
   $139 = HEAP32[$7>>2]|0;
   HEAP32[$14>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($139,$14);
   $140 = ((($7)) + 4|0);
   HEAP32[$140>>2] = 0;
  } else {
   HEAP32[$15>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$15);
   HEAP8[$136>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($7|0),0);
  $141 = __THREW__; __THREW__ = 0;
  $142 = $141&1;
  if ($142) {
   $143 = ___cxa_find_matching_catch_3(0|0)|0;
   $144 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$33>>2]|0;HEAP32[$7+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$33+8>>2]|0;
  $$0$i$i$i57 = 0;
  while(1) {
   $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
   if ($exitcond$i$i$i58) {
    break;
   }
   $145 = (($33) + ($$0$i$i$i57<<2)|0);
   HEAP32[$145>>2] = 0;
   $146 = (($$0$i$i$i57) + 1)|0;
   $$0$i$i$i57 = $146;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  $147 = HEAP32[$112>>2]|0;
  $148 = ((($147)) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (FUNCTION_TABLE_ii[$149 & 1023]($112)|0);
  HEAP32[$3>>2] = $150;
  $151 = HEAP32[$112>>2]|0;
  $152 = ((($151)) + 16|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (FUNCTION_TABLE_ii[$153 & 1023]($112)|0);
  HEAP32[$4>>2] = $154;
  $155 = HEAP32[$112>>2]|0;
  $156 = ((($155)) + 20|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 1023]($34,$112);
  $158 = ((($5)) + 11|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = ($159<<24>>24)<(0);
  if ($160) {
   $161 = HEAP32[$5>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($161,$12);
   $162 = ((($5)) + 4|0);
   HEAP32[$162>>2] = 0;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$13);
   HEAP8[$158>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($5|0),0);
  $163 = __THREW__; __THREW__ = 0;
  $164 = $163&1;
  if ($164) {
   $165 = ___cxa_find_matching_catch_3(0|0)|0;
   $166 = tempRet0;
   ___clang_call_terminate($165);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$34>>2]|0;HEAP32[$5+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$34+8>>2]|0;
  $$0$i$i$i62 = 0;
  while(1) {
   $exitcond$i$i$i63 = ($$0$i$i$i62|0)==(3);
   if ($exitcond$i$i$i63) {
    break;
   }
   $167 = (($34) + ($$0$i$i$i62<<2)|0);
   HEAP32[$167>>2] = 0;
   $168 = (($$0$i$i$i62) + 1)|0;
   $$0$i$i$i62 = $168;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  $169 = HEAP32[$112>>2]|0;
  $170 = ((($169)) + 24|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 1023]($35,$112);
  $172 = ((($6)) + 8|0);
  $173 = ((($172)) + 3|0);
  $174 = HEAP8[$173>>0]|0;
  $175 = ($174<<24>>24)<(0);
  if ($175) {
   $176 = HEAP32[$6>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($176,$10);
   $177 = ((($6)) + 4|0);
   HEAP32[$177>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$11);
   HEAP8[$173>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($6|0),0);
  $178 = __THREW__; __THREW__ = 0;
  $179 = $178&1;
  if ($179) {
   $180 = ___cxa_find_matching_catch_3(0|0)|0;
   $181 = tempRet0;
   ___clang_call_terminate($180);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$35>>2]|0;HEAP32[$6+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$35+8>>2]|0;
  $$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $182 = (($35) + ($$0$i$i$i67<<2)|0);
   HEAP32[$182>>2] = 0;
   $183 = (($$0$i$i$i67) + 1)|0;
   $$0$i$i$i67 = $183;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  $184 = HEAP32[$112>>2]|0;
  $185 = ((($184)) + 36|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (FUNCTION_TABLE_ii[$186 & 1023]($112)|0);
  $storemerge = $187;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$34 = 0, $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(481|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<(2147483647);
 $10 = $8 << 1;
 $$34 = $9 ? $10 : -1;
 $11 = ($$34|0)==(0);
 $$ = $11 ? 4 : $$34;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) - ($7))|0;
 $14 = $13 >> 2;
 $phitmp = $7;
 $15 = $5 ? $phitmp : 0;
 $16 = (_realloc($15,$$)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $28 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $28 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = tempRet0;
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $28 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (488);
 $26 = $$ >>> 2;
 $27 = (($28) + ($14<<2)|0);
 HEAP32[$1>>2] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = (($29) + ($26<<2)|0);
 HEAP32[$2>>2] = $30;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$049 = 0, $$1 = 0, $$150 = 0, $$3 = 0, $$352 = 0, $$4 = 0, $$453 = 0, $$byval_copy = 0, $$pre = 0, $$pre105 = 0, $$sink = 0, $$sink1 = 0, $$sink108 = 0;
 var $$sink109 = 0, $$sroa$071$0 = 0, $$sroa$071$1 = 0, $$sroa$083$0 = 0, $$sroa$083$1 = 0, $$sroa$083$2 = 0, $$sroa$096$0 = 0, $$sroa$096$1 = 0, $$sroa$096$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i57 = 0, $exitcond$i$i60 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 288|0;
 $7 = sp + 72|0;
 $8 = sp + 188|0;
 $9 = sp + 68|0;
 $10 = sp + 184|0;
 $11 = sp + 181|0;
 $12 = sp + 180|0;
 $13 = sp + 56|0;
 $14 = sp + 44|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 80|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,17260,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(432)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $$sroa$083$0 = 0;$$sroa$096$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $5;
    $26 = (invoke_iiiii(454,($7|0),($23|0),(17260|0),($vararg_buffer1|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $$sroa$083$0 = 0;$$sroa$096$0 = 0;
     label = 8;
    } else {
     $29 = HEAP32[$7>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(449);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $$sroa$083$0 = 0;$$sroa$096$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$7>>2]|0;
      $143 = $$pre;
     } else {
      $31 = $29;
      $143 = $31;
     }
     $36 = (_malloc($26)|0);
     $37 = $36;
     $38 = ($36|0)==(0|0);
     if ($38) {
      __THREW__ = 0;
      invoke_v(449);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       $$sroa$083$0 = $37;$$sroa$096$0 = $143;
       label = 8;
      } else {
       $$0 = 0;$$047 = $26;$$sroa$083$1 = $37;$$sroa$096$1 = $143;
       label = 11;
      }
     } else {
      $$0 = $36;$$047 = $26;$$sroa$083$1 = $37;$$sroa$096$1 = $143;
      label = 11;
     }
    }
   }
  } else {
   $$0 = $8;$$047 = $21;$$sroa$083$1 = 0;$$sroa$096$1 = 0;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  invoke_vii(353,($9|0),($3|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $$sroa$083$0 = $$sroa$083$1;$$sroa$096$0 = $$sroa$096$1;
   label = 8;
  } else {
   __THREW__ = 0;
   $43 = (invoke_iii(354,($9|0),(20160|0))|0);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   do {
    if ($45) {
     $107 = ___cxa_find_matching_catch_2()|0;
     $108 = tempRet0;
     $$3 = $107;$$352 = $108;
    } else {
     $46 = HEAP32[$7>>2]|0;
     $47 = (($46) + ($$047)|0);
     $48 = HEAP32[$43>>2]|0;
     $49 = ((($48)) + 32|0);
     $50 = HEAP32[$49>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($50|0,($43|0),($46|0),($47|0),($$0|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $109 = ___cxa_find_matching_catch_2()|0;
      $110 = tempRet0;
      $$3 = $109;$$352 = $110;
      break;
     }
     $53 = ($$047|0)==(0);
     if ($53) {
      $63 = 0;
     } else {
      $54 = HEAP32[$7>>2]|0;
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)==(45);
      $63 = $56;
     }
     ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $57 = (($13) + ($$0$i$i<<2)|0);
      HEAP32[$57>>2] = 0;
      $58 = (($$0$i$i) + 1)|0;
      $$0$i$i = $58;
     }
     ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $$0$i$i56 = 0;
     while(1) {
      $exitcond$i$i57 = ($$0$i$i56|0)==(3);
      if ($exitcond$i$i57) {
       break;
      }
      $59 = (($14) + ($$0$i$i56<<2)|0);
      HEAP32[$59>>2] = 0;
      $60 = (($$0$i$i56) + 1)|0;
      $$0$i$i56 = $60;
     }
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $$0$i$i59 = 0;
     while(1) {
      $exitcond$i$i60 = ($$0$i$i59|0)==(3);
      if ($exitcond$i$i60) {
       break;
      }
      $61 = (($15) + ($$0$i$i59<<2)|0);
      HEAP32[$61>>2] = 0;
      $62 = (($$0$i$i59) + 1)|0;
      $$0$i$i59 = $62;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(495,($2|0),($63|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      $111 = ___cxa_find_matching_catch_2()|0;
      $112 = tempRet0;
      $$1 = $111;$$150 = $112;
     } else {
      $66 = HEAP32[$16>>2]|0;
      $67 = ($$047|0)>($66|0);
      if ($67) {
       $68 = (($$047) - ($66))|0;
       $69 = $68 << 1;
       $70 = ((($15)) + 11|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)<(0);
       $73 = ((($15)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = $71&255;
       $76 = $72 ? $74 : $75;
       $77 = (($76) + ($69))|0;
       $78 = ((($14)) + 11|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ($79<<24>>24)<(0);
       $81 = ((($14)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $79&255;
       $84 = $80 ? $82 : $83;
       $$sink1 = 1;$$sink108 = $77;$$sink109 = $84;
      } else {
       $85 = ((($15)) + 11|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = ($86<<24>>24)<(0);
       $88 = ((($15)) + 4|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = $86&255;
       $91 = $87 ? $89 : $90;
       $92 = ((($14)) + 11|0);
       $93 = HEAP8[$92>>0]|0;
       $94 = ($93<<24>>24)<(0);
       $95 = ((($14)) + 4|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = $93&255;
       $98 = $94 ? $96 : $97;
       $$sink1 = 2;$$sink108 = $98;$$sink109 = $91;
      }
      $99 = (($$sink109) + ($66))|0;
      $$sink = (($99) + ($$sink108))|0;
      $100 = (($$sink) + ($$sink1))|0;
      $101 = ($100>>>0)>(100);
      do {
       if ($101) {
        $102 = (_malloc($100)|0);
        $103 = $102;
        $104 = ($102|0)==(0|0);
        if ($104) {
         __THREW__ = 0;
         invoke_v(449);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         if ($106) {
          $113 = ___cxa_find_matching_catch_2()|0;
          $114 = tempRet0;
          $$048 = $113;$$049 = $114;$$sroa$071$1 = $103;
          break;
         } else {
          $$pre105 = HEAP32[$16>>2]|0;
          $$046 = 0;$$sroa$071$0 = $103;$120 = $$pre105;
          label = 37;
          break;
         }
        } else {
         $$046 = $102;$$sroa$071$0 = $103;$120 = $66;
         label = 37;
        }
       } else {
        $$046 = $17;$$sroa$071$0 = 0;$120 = $66;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $115 = ((($3)) + 4|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($$0) + ($$047)|0);
       $118 = HEAP8[$11>>0]|0;
       $119 = HEAP8[$12>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(496,($$046|0),($18|0),($19|0),($116|0),($$0|0),($117|0),($43|0),($63|0),($10|0),($118|0),($119|0),($13|0),($14|0),($15|0),($120|0));
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if (!($122)) {
        $123 = HEAP32[$1>>2]|0;
        HEAP32[$20>>2] = $123;
        $124 = HEAP32[$18>>2]|0;
        $125 = HEAP32[$19>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
        $126 = (invoke_iiiiiii(383,($$byval_copy|0),($$046|0),($124|0),($125|0),($3|0),($4|0))|0);
        $127 = __THREW__; __THREW__ = 0;
        $128 = $127&1;
        if (!($128)) {
         $129 = ($$sroa$071$0|0)==(0);
         if (!($129)) {
          $130 = $$sroa$071$0;
          _free($130);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
         __ZNSt3__26localeD2Ev($9);
         $131 = ($$sroa$083$1|0)==(0);
         if (!($131)) {
          $132 = $$sroa$083$1;
          _free($132);
         }
         $133 = ($$sroa$096$1|0)==(0);
         if (!($133)) {
          $134 = $$sroa$096$1;
          _free($134);
         }
         STACKTOP = sp;return ($126|0);
        }
       }
       $135 = ___cxa_find_matching_catch_2()|0;
       $136 = tempRet0;
       $$048 = $135;$$049 = $136;$$sroa$071$1 = $$sroa$071$0;
      }
      $137 = ($$sroa$071$1|0)==(0);
      if (!($137)) {
       $138 = $$sroa$071$1;
       _free($138);
      }
      $$1 = $$048;$$150 = $$049;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
     $$3 = $$1;$$352 = $$150;
    }
   } while(0);
   __ZNSt3__26localeD2Ev($9);
   $$4 = $$3;$$453 = $$352;$$sroa$083$2 = $$sroa$083$1;$$sroa$096$2 = $$sroa$096$1;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $$4 = $34;$$453 = $35;$$sroa$083$2 = $$sroa$083$0;$$sroa$096$2 = $$sroa$096$0;
 }
 $139 = ($$sroa$083$2|0)==(0);
 if (!($139)) {
  $140 = $$sroa$083$2;
  _free($140);
 }
 $141 = ($$sroa$096$2|0)==(0);
 if (!($141)) {
  $142 = $$sroa$096$2;
  _free($142);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i37 = 0, $$0$i$i40 = 0, $$032 = 0, $$033 = 0, $$1 = 0, $$134 = 0, $$3 = 0, $$336 = 0, $$byval_copy = 0, $$pre = 0, $$pre63 = 0, $$pre64 = 0, $$sink = 0, $$sink1 = 0, $$sink65 = 0, $$sink66 = 0, $$sroa$053$0 = 0, $$sroa$053$1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i38 = 0, $exitcond$i$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 40|0;
 $11 = sp + 28|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 60|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $18 = (invoke_iii(354,($6|0),(20160|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L1: do {
  if ($20) {
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = tempRet0;
   $$3 = $94;$$336 = $95;
  } else {
   $21 = ((($5)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   $24 = ((($5)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $22&255;
   $27 = $23 ? $25 : $26;
   $28 = ($27|0)==(0);
   do {
    if ($28) {
     $45 = 0;
    } else {
     $29 = HEAP32[$5>>2]|0;
     $30 = $23 ? $29 : $5;
     $31 = HEAP8[$30>>0]|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = ((($32)) + 28|0);
     $34 = HEAP32[$33>>2]|0;
     __THREW__ = 0;
     $35 = (invoke_iii($34|0,($18|0),45)|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $96 = ___cxa_find_matching_catch_2()|0;
      $97 = tempRet0;
      $$3 = $96;$$336 = $97;
      break L1;
     } else {
      $38 = ($31<<24>>24)==($35<<24>>24);
      $45 = $38;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $39 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$39>>2] = 0;
    $40 = (($$0$i$i) + 1)|0;
    $$0$i$i = $40;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i37 = 0;
   while(1) {
    $exitcond$i$i38 = ($$0$i$i37|0)==(3);
    if ($exitcond$i$i38) {
     break;
    }
    $41 = (($11) + ($$0$i$i37<<2)|0);
    HEAP32[$41>>2] = 0;
    $42 = (($$0$i$i37) + 1)|0;
    $$0$i$i37 = $42;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i40 = 0;
   while(1) {
    $exitcond$i$i41 = ($$0$i$i40|0)==(3);
    if ($exitcond$i$i41) {
     break;
    }
    $43 = (($12) + ($$0$i$i40<<2)|0);
    HEAP32[$43>>2] = 0;
    $44 = (($$0$i$i40) + 1)|0;
    $$0$i$i40 = $44;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(495,($2|0),($45|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $98 = ___cxa_find_matching_catch_2()|0;
    $99 = tempRet0;
    $$1 = $98;$$134 = $99;
   } else {
    $48 = HEAP8[$21>>0]|0;
    $49 = ($48<<24>>24)<(0);
    $50 = HEAP32[$24>>2]|0;
    $51 = $48&255;
    $52 = $49 ? $50 : $51;
    $53 = HEAP32[$13>>2]|0;
    $54 = ($52|0)>($53|0);
    if ($54) {
     $55 = (($52) - ($53))|0;
     $56 = $55 << 1;
     $57 = ((($12)) + 11|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($58<<24>>24)<(0);
     $60 = ((($12)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $58&255;
     $63 = $59 ? $61 : $62;
     $64 = (($63) + ($56))|0;
     $65 = ((($11)) + 11|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = ($66<<24>>24)<(0);
     $68 = ((($11)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $66&255;
     $71 = $67 ? $69 : $70;
     $$sink1 = 1;$$sink65 = $64;$$sink66 = $71;
    } else {
     $72 = ((($12)) + 11|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)<(0);
     $75 = ((($12)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $73&255;
     $78 = $74 ? $76 : $77;
     $79 = ((($11)) + 11|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = ($80<<24>>24)<(0);
     $82 = ((($11)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $80&255;
     $85 = $81 ? $83 : $84;
     $$sink1 = 2;$$sink65 = $85;$$sink66 = $78;
    }
    $86 = (($$sink66) + ($53))|0;
    $$sink = (($86) + ($$sink65))|0;
    $87 = (($$sink) + ($$sink1))|0;
    $88 = ($87>>>0)>(100);
    do {
     if ($88) {
      $89 = (_malloc($87)|0);
      $90 = $89;
      $91 = ($89|0)==(0|0);
      if ($91) {
       __THREW__ = 0;
       invoke_v(449);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        $100 = ___cxa_find_matching_catch_2()|0;
        $101 = tempRet0;
        $$0 = $100;$$033 = $101;$$sroa$053$1 = $90;
        break;
       } else {
        $$pre = HEAP8[$21>>0]|0;
        $$pre63 = HEAP32[$24>>2]|0;
        $$pre64 = HEAP32[$13>>2]|0;
        $$032 = 0;$$sroa$053$0 = $90;$105 = $$pre;$110 = $$pre63;$114 = $$pre64;
        label = 26;
        break;
       }
      } else {
       $$032 = $89;$$sroa$053$0 = $90;$105 = $48;$110 = $50;$114 = $53;
       label = 26;
      }
     } else {
      $$032 = $14;$$sroa$053$0 = 0;$105 = $48;$110 = $50;$114 = $53;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $102 = ((($3)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($105<<24>>24)<(0);
     $106 = HEAP32[$5>>2]|0;
     $107 = $104 ? $106 : $5;
     $108 = $105&255;
     $109 = $104 ? $110 : $108;
     $111 = (($107) + ($109)|0);
     $112 = HEAP8[$8>>0]|0;
     $113 = HEAP8[$9>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(496,($$032|0),($15|0),($16|0),($103|0),($107|0),($111|0),($18|0),($45|0),($7|0),($112|0),($113|0),($10|0),($11|0),($12|0),($114|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if (!($116)) {
      $117 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $117;
      $118 = HEAP32[$15>>2]|0;
      $119 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $120 = (invoke_iiiiiii(383,($$byval_copy|0),($$032|0),($118|0),($119|0),($3|0),($4|0))|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($$sroa$053$0|0)==(0);
       if (!($123)) {
        $124 = $$sroa$053$0;
        _free($124);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       __ZNSt3__26localeD2Ev($6);
       STACKTOP = sp;return ($120|0);
      }
     }
     $125 = ___cxa_find_matching_catch_2()|0;
     $126 = tempRet0;
     $$0 = $125;$$033 = $126;$$sroa$053$1 = $$sroa$053$0;
    }
    $127 = ($$sroa$053$1|0)==(0);
    if (!($127)) {
     $128 = $$sroa$053$1;
     _free($128);
    }
    $$1 = $$0;$$134 = $$033;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$336 = $$134;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$pre$phi81Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i49 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i64 = 0, $exitcond$i$i$i69 = 0, $exitcond$i$i$i74 = 0, $exitcond$i$i$i79 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $10 = sp + 127|0;
 $11 = sp + 126|0;
 $12 = sp + 125|0;
 $13 = sp + 124|0;
 $14 = sp + 123|0;
 $15 = sp + 122|0;
 $16 = sp + 121|0;
 $17 = sp + 120|0;
 $18 = sp + 119|0;
 $19 = sp + 118|0;
 $20 = sp + 117|0;
 $21 = sp + 116|0;
 $22 = sp + 115|0;
 $23 = sp + 114|0;
 $24 = sp + 113|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,21880)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 1023]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 1023]($27,$38);
   $46 = ((($8)) + 11|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)<(0);
   if ($48) {
    $49 = HEAP32[$8>>2]|0;
    HEAP8[$24>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($49,$24);
    $50 = ((($8)) + 4|0);
    HEAP32[$50>>2] = 0;
   } else {
    HEAP8[$25>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$25);
    HEAP8[$46>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(413,($8|0),0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch_3(0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $55 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$55>>2] = 0;
    $56 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $56;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
   $$pre$phiZ2D = $38;
  } else {
   $57 = HEAP32[$38>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   FUNCTION_TABLE_vii[$59 & 1023]($28,$38);
   $60 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$60&255;HEAP8[$3+1>>0]=($60>>8)&255;HEAP8[$3+2>>0]=($60>>16)&255;HEAP8[$3+3>>0]=$60>>24;
   $61 = HEAP32[$38>>2]|0;
   $62 = ((($61)) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   FUNCTION_TABLE_vii[$63 & 1023]($29,$38);
   $64 = ((($8)) + 11|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = ($65<<24>>24)<(0);
   if ($66) {
    $67 = HEAP32[$8>>2]|0;
    HEAP8[$22>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($67,$22);
    $68 = ((($8)) + 4|0);
    HEAP32[$68>>2] = 0;
   } else {
    HEAP8[$23>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$23);
    HEAP8[$64>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(413,($8|0),0);
   $69 = __THREW__; __THREW__ = 0;
   $70 = $69&1;
   if ($70) {
    $71 = ___cxa_find_matching_catch_3(0|0)|0;
    $72 = tempRet0;
    ___clang_call_terminate($71);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$29>>2]|0;HEAP32[$8+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i48 = 0;
   while(1) {
    $exitcond$i$i$i49 = ($$0$i$i$i48|0)==(3);
    if ($exitcond$i$i$i49) {
     break;
    }
    $73 = (($29) + ($$0$i$i$i48<<2)|0);
    HEAP32[$73>>2] = 0;
    $74 = (($$0$i$i$i48) + 1)|0;
    $$0$i$i$i48 = $74;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
   $$pre$phiZ2D = $38;
  }
  $75 = HEAP32[$38>>2]|0;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (FUNCTION_TABLE_ii[$77 & 1023]($38)|0);
  HEAP8[$4>>0] = $78;
  $79 = HEAP32[$38>>2]|0;
  $80 = ((($79)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($38)|0);
  HEAP8[$5>>0] = $82;
  $83 = HEAP32[$$pre$phiZ2D>>2]|0;
  $84 = ((($83)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_vii[$85 & 1023]($30,$38);
  $86 = ((($6)) + 11|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = ($87<<24>>24)<(0);
  if ($88) {
   $89 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($89,$20);
   $90 = ((($6)) + 4|0);
   HEAP32[$90>>2] = 0;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$86>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $91 = __THREW__; __THREW__ = 0;
  $92 = $91&1;
  if ($92) {
   $93 = ___cxa_find_matching_catch_3(0|0)|0;
   $94 = tempRet0;
   ___clang_call_terminate($93);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $95 = (($30) + ($$0$i$i$i53<<2)|0);
   HEAP32[$95>>2] = 0;
   $96 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $96;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $97 = HEAP32[$$pre$phiZ2D>>2]|0;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  FUNCTION_TABLE_vii[$99 & 1023]($31,$38);
  $100 = ((($7)) + 11|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = ($101<<24>>24)<(0);
  if ($102) {
   $103 = HEAP32[$7>>2]|0;
   HEAP8[$18>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($103,$18);
   $104 = ((($7)) + 4|0);
   HEAP32[$104>>2] = 0;
  } else {
   HEAP8[$19>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$19);
   HEAP8[$100>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($7|0),0);
  $105 = __THREW__; __THREW__ = 0;
  $106 = $105&1;
  if ($106) {
   $107 = ___cxa_find_matching_catch_3(0|0)|0;
   $108 = tempRet0;
   ___clang_call_terminate($107);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$31>>2]|0;HEAP32[$7+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i58 = 0;
  while(1) {
   $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
   if ($exitcond$i$i$i59) {
    break;
   }
   $109 = (($31) + ($$0$i$i$i58<<2)|0);
   HEAP32[$109>>2] = 0;
   $110 = (($$0$i$i$i58) + 1)|0;
   $$0$i$i$i58 = $110;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($31);
  $111 = HEAP32[$38>>2]|0;
  $112 = ((($111)) + 36|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (FUNCTION_TABLE_ii[$113 & 1023]($38)|0);
  $storemerge = $114;
 } else {
  $115 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,21872)|0);
  if ($1) {
   $116 = HEAP32[$115>>2]|0;
   $117 = ((($116)) + 44|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 1023]($32,$115);
   $119 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$119&255;HEAP8[$3+1>>0]=($119>>8)&255;HEAP8[$3+2>>0]=($119>>16)&255;HEAP8[$3+3>>0]=$119>>24;
   $120 = HEAP32[$115>>2]|0;
   $121 = ((($120)) + 32|0);
   $122 = HEAP32[$121>>2]|0;
   FUNCTION_TABLE_vii[$122 & 1023]($33,$115);
   $123 = ((($8)) + 11|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = ($124<<24>>24)<(0);
   if ($125) {
    $126 = HEAP32[$8>>2]|0;
    HEAP8[$16>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($126,$16);
    $127 = ((($8)) + 4|0);
    HEAP32[$127>>2] = 0;
   } else {
    HEAP8[$17>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$17);
    HEAP8[$123>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(413,($8|0),0);
   $128 = __THREW__; __THREW__ = 0;
   $129 = $128&1;
   if ($129) {
    $130 = ___cxa_find_matching_catch_3(0|0)|0;
    $131 = tempRet0;
    ___clang_call_terminate($130);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$33>>2]|0;HEAP32[$8+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i63 = 0;
   while(1) {
    $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
    if ($exitcond$i$i$i64) {
     break;
    }
    $132 = (($33) + ($$0$i$i$i63<<2)|0);
    HEAP32[$132>>2] = 0;
    $133 = (($$0$i$i$i63) + 1)|0;
    $$0$i$i$i63 = $133;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($33);
   $$pre$phi81Z2D = $115;
  } else {
   $134 = HEAP32[$115>>2]|0;
   $135 = ((($134)) + 40|0);
   $136 = HEAP32[$135>>2]|0;
   FUNCTION_TABLE_vii[$136 & 1023]($34,$115);
   $137 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$137&255;HEAP8[$3+1>>0]=($137>>8)&255;HEAP8[$3+2>>0]=($137>>16)&255;HEAP8[$3+3>>0]=$137>>24;
   $138 = HEAP32[$115>>2]|0;
   $139 = ((($138)) + 28|0);
   $140 = HEAP32[$139>>2]|0;
   FUNCTION_TABLE_vii[$140 & 1023]($35,$115);
   $141 = ((($8)) + 11|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = ($142<<24>>24)<(0);
   if ($143) {
    $144 = HEAP32[$8>>2]|0;
    HEAP8[$14>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($144,$14);
    $145 = ((($8)) + 4|0);
    HEAP32[$145>>2] = 0;
   } else {
    HEAP8[$15>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$15);
    HEAP8[$141>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(413,($8|0),0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $148 = ___cxa_find_matching_catch_3(0|0)|0;
    $149 = tempRet0;
    ___clang_call_terminate($148);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$35>>2]|0;HEAP32[$8+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i68 = 0;
   while(1) {
    $exitcond$i$i$i69 = ($$0$i$i$i68|0)==(3);
    if ($exitcond$i$i$i69) {
     break;
    }
    $150 = (($35) + ($$0$i$i$i68<<2)|0);
    HEAP32[$150>>2] = 0;
    $151 = (($$0$i$i$i68) + 1)|0;
    $$0$i$i$i68 = $151;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
   $$pre$phi81Z2D = $115;
  }
  $152 = HEAP32[$115>>2]|0;
  $153 = ((($152)) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($115)|0);
  HEAP8[$4>>0] = $155;
  $156 = HEAP32[$115>>2]|0;
  $157 = ((($156)) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (FUNCTION_TABLE_ii[$158 & 1023]($115)|0);
  HEAP8[$5>>0] = $159;
  $160 = HEAP32[$$pre$phi81Z2D>>2]|0;
  $161 = ((($160)) + 20|0);
  $162 = HEAP32[$161>>2]|0;
  FUNCTION_TABLE_vii[$162 & 1023]($36,$115);
  $163 = ((($6)) + 11|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = ($164<<24>>24)<(0);
  if ($165) {
   $166 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($166,$12);
   $167 = ((($6)) + 4|0);
   HEAP32[$167>>2] = 0;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$163>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $168 = __THREW__; __THREW__ = 0;
  $169 = $168&1;
  if ($169) {
   $170 = ___cxa_find_matching_catch_3(0|0)|0;
   $171 = tempRet0;
   ___clang_call_terminate($170);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$36>>2]|0;HEAP32[$6+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i73 = 0;
  while(1) {
   $exitcond$i$i$i74 = ($$0$i$i$i73|0)==(3);
   if ($exitcond$i$i$i74) {
    break;
   }
   $172 = (($36) + ($$0$i$i$i73<<2)|0);
   HEAP32[$172>>2] = 0;
   $173 = (($$0$i$i$i73) + 1)|0;
   $$0$i$i$i73 = $173;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $174 = HEAP32[$$pre$phi81Z2D>>2]|0;
  $175 = ((($174)) + 24|0);
  $176 = HEAP32[$175>>2]|0;
  FUNCTION_TABLE_vii[$176 & 1023]($37,$115);
  $177 = ((($7)) + 11|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = ($178<<24>>24)<(0);
  if ($179) {
   $180 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($180,$10);
   $181 = ((($7)) + 4|0);
   HEAP32[$181>>2] = 0;
  } else {
   HEAP8[$11>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$11);
   HEAP8[$177>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($7|0),0);
  $182 = __THREW__; __THREW__ = 0;
  $183 = $182&1;
  if ($183) {
   $184 = ___cxa_find_matching_catch_3(0|0)|0;
   $185 = tempRet0;
   ___clang_call_terminate($184);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$37>>2]|0;HEAP32[$7+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i78 = 0;
  while(1) {
   $exitcond$i$i$i79 = ($$0$i$i$i78|0)==(3);
   if ($exitcond$i$i$i79) {
    break;
   }
   $186 = (($37) + ($$0$i$i$i78<<2)|0);
   HEAP32[$186>>2] = 0;
   $187 = (($$0$i$i$i78) + 1)|0;
   $$0$i$i$i78 = $187;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($37);
  $188 = HEAP32[$115>>2]|0;
  $189 = ((($188)) + 36|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (FUNCTION_TABLE_ii[$190 & 1023]($115)|0);
  $storemerge = $191;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$097 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0;
 var $$3 = 0, $$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 511]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $$$097 = $7 ? $68 : $$097;
    $$0101 = $$$097;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $71 = ($70<<24>>24)>(-1);
     if (!($71)) {
      break;
     }
     $72 = $70 << 24 >> 24;
     $73 = HEAP32[$21>>2]|0;
     $74 = (($73) + ($72<<1)|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75 & 2048;
     $77 = ($76<<16>>16)==(0);
     if ($77) {
      break;
     }
     $78 = ((($$0101)) + 1|0);
     $$0101 = $78;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $79 = ($$1102>>>0)>($$$097>>>0);
      $80 = ($$099|0)>(0);
      $81 = $79 & $80;
      if (!($81)) {
       break;
      }
      $82 = ((($$1102)) + -1|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = HEAP32[$2>>2]|0;
      $85 = ((($84)) + 1|0);
      HEAP32[$2>>2] = $85;
      HEAP8[$84>>0] = $83;
      $86 = (($$099) + -1)|0;
      $$099 = $86;$$1102 = $82;
     }
     if ($80) {
      $87 = HEAP32[$6>>2]|0;
      $88 = ((($87)) + 28|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (FUNCTION_TABLE_iii[$89 & 511]($6,48)|0);
      $94 = $90;
     } else {
      $94 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $91 = ($$1100|0)>(0);
      $92 = HEAP32[$2>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$2>>2] = $93;
      if (!($91)) {
       break;
      }
      HEAP8[$92>>0] = $94;
      $95 = (($$1100) + -1)|0;
      $$1100 = $95;
     }
     HEAP8[$92>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $96 = ($$2103|0)==($$$097|0);
    L35: do {
     if ($96) {
      $97 = HEAP32[$6>>2]|0;
      $98 = ((($97)) + 28|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_iii[$99 & 511]($6,48)|0);
      $101 = HEAP32[$2>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$2>>2] = $102;
      HEAP8[$101>>0] = $100;
     } else {
      $103 = HEAP8[$23>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$24>>2]|0;
      $106 = $103&255;
      $107 = $104 ? $105 : $106;
      $108 = ($107|0)==(0);
      if ($108) {
       $$0 = -1;$$093 = 0;$$095 = 0;$$3 = $$2103;
      } else {
       $109 = HEAP32[$11>>2]|0;
       $110 = $104 ? $109 : $11;
       $111 = HEAP8[$110>>0]|0;
       $112 = $111 << 24 >> 24;
       $$0 = $112;$$093 = 0;$$095 = 0;$$3 = $$2103;
      }
      while(1) {
       $113 = ($$3|0)==($$$097|0);
       if ($113) {
        break L35;
       }
       $114 = ($$095|0)==($$0|0);
       if ($114) {
        $115 = HEAP32[$2>>2]|0;
        $116 = ((($115)) + 1|0);
        HEAP32[$2>>2] = $116;
        HEAP8[$115>>0] = $10;
        $117 = (($$093) + 1)|0;
        $118 = HEAP8[$23>>0]|0;
        $119 = ($118<<24>>24)<(0);
        $120 = HEAP32[$24>>2]|0;
        $121 = $118&255;
        $122 = $119 ? $120 : $121;
        $123 = ($117>>>0)<($122>>>0);
        if ($123) {
         $124 = HEAP32[$11>>2]|0;
         $125 = $119 ? $124 : $11;
         $126 = (($125) + ($117)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = ($127<<24>>24)==(127);
         $129 = $127 << 24 >> 24;
         $$ = $128 ? -1 : $129;
         $$1 = $$;$$194 = $117;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $117;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $130 = ((($$3)) + -1|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = HEAP32[$2>>2]|0;
       $133 = ((($132)) + 1|0);
       HEAP32[$2>>2] = $133;
       HEAP8[$132>>0] = $131;
       $134 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $134;$$3 = $130;
      }
     }
    } while(0);
    $135 = HEAP32[$2>>2]|0;
    $136 = ($67|0)==($135|0);
    if ($136) {
     $$2 = $$$097;
    } else {
     $$0$i$i106 = $135;$$07$i$i = $67;
     while(1) {
      $137 = ((($$0$i$i106)) + -1|0);
      $138 = ($$07$i$i>>>0)<($137>>>0);
      if (!($138)) {
       $$2 = $$$097;
       break L4;
      }
      $139 = HEAP8[$$07$i$i>>0]|0;
      $140 = HEAP8[$137>>0]|0;
      HEAP8[$$07$i$i>>0] = $140;
      HEAP8[$137>>0] = $139;
      $141 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $137;$$07$i$i = $141;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $142 = (($$0104) + 1)|0;
  $$0104 = $142;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $143 = HEAP32[$13>>2]|0;
  $144 = $26 ? $143 : $13;
  $145 = (($144) + ($29)|0);
  $146 = HEAP32[$2>>2]|0;
  $$0$i$i = $146;$$pn = $144;
  while(1) {
   $$sroa$08$0$i = ((($$pn)) + 1|0);
   $147 = ($$sroa$08$0$i|0)==($145|0);
   if ($147) {
    break;
   }
   $148 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $148;
   $149 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $149;$$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $150 = $3 & 176;
 $trunc = $150&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $151 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $151;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i54 = 0, $$0$i$i56 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$049 = 0, $$1 = 0, $$150 = 0, $$3 = 0, $$352 = 0, $$4 = 0, $$453 = 0, $$byval_copy = 0, $$pre = 0, $$pre102 = 0, $$sink = 0, $$sink1 = 0, $$sink105 = 0;
 var $$sink106 = 0, $$sroa$068$0 = 0, $$sroa$068$1 = 0, $$sroa$080$0 = 0, $$sroa$080$1 = 0, $$sroa$080$2 = 0, $$sroa$093$0 = 0, $$sroa$093$1 = 0, $$sroa$093$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i55 = 0, $exitcond$i$i57 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1008|0);
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 900|0;
 $7 = sp + 888|0;
 $8 = sp + 488|0;
 $9 = sp + 480|0;
 $10 = sp + 896|0;
 $11 = sp + 476|0;
 $12 = sp + 472|0;
 $13 = sp + 460|0;
 $14 = sp + 448|0;
 $15 = sp + 436|0;
 $16 = sp + 432|0;
 $17 = sp + 32|0;
 $18 = sp + 24|0;
 $19 = sp + 20|0;
 $20 = sp + 16|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$vararg_buffer>>3] = $5;
 $21 = (_snprintf($6,100,17260,$vararg_buffer)|0);
 $22 = ($21>>>0)>(99);
 do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(432)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $$sroa$080$0 = 0;$$sroa$093$0 = 0;
    label = 8;
   } else {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer1>>3] = $5;
    $26 = (invoke_iiiii(454,($7|0),($23|0),(17260|0),($vararg_buffer1|0))|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $$sroa$080$0 = 0;$$sroa$093$0 = 0;
     label = 8;
    } else {
     $29 = HEAP32[$7>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(449);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $$sroa$080$0 = 0;$$sroa$093$0 = 0;
       label = 8;
       break;
      }
      $$pre = HEAP32[$7>>2]|0;
      $149 = $$pre;
     } else {
      $31 = $29;
      $149 = $31;
     }
     $36 = $26 << 2;
     $37 = (_malloc($36)|0);
     $38 = $37;
     $39 = ($37|0)==(0|0);
     if ($39) {
      __THREW__ = 0;
      invoke_v(449);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $$sroa$080$0 = $38;$$sroa$093$0 = $149;
       label = 8;
      } else {
       $$0 = 0;$$047 = $26;$$sroa$080$1 = $38;$$sroa$093$1 = $149;
       label = 11;
      }
     } else {
      $$0 = $37;$$047 = $26;$$sroa$080$1 = $38;$$sroa$093$1 = $149;
      label = 11;
     }
    }
   }
  } else {
   $$0 = $8;$$047 = $21;$$sroa$080$1 = 0;$$sroa$093$1 = 0;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  __THREW__ = 0;
  invoke_vii(353,($9|0),($3|0));
  $42 = __THREW__; __THREW__ = 0;
  $43 = $42&1;
  if ($43) {
   $$sroa$080$0 = $$sroa$080$1;$$sroa$093$0 = $$sroa$093$1;
   label = 8;
  } else {
   __THREW__ = 0;
   $44 = (invoke_iii(354,($9|0),(20192|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   do {
    if ($46) {
     $113 = ___cxa_find_matching_catch_2()|0;
     $114 = tempRet0;
     $$3 = $113;$$352 = $114;
    } else {
     $47 = HEAP32[$7>>2]|0;
     $48 = (($47) + ($$047)|0);
     $49 = HEAP32[$44>>2]|0;
     $50 = ((($49)) + 48|0);
     $51 = HEAP32[$50>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($51|0,($44|0),($47|0),($48|0),($$0|0))|0);
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      $115 = ___cxa_find_matching_catch_2()|0;
      $116 = tempRet0;
      $$3 = $115;$$352 = $116;
      break;
     }
     $54 = ($$047|0)==(0);
     if ($54) {
      $64 = 0;
     } else {
      $55 = HEAP32[$7>>2]|0;
      $56 = HEAP8[$55>>0]|0;
      $57 = ($56<<24>>24)==(45);
      $64 = $57;
     }
     ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break;
      }
      $58 = (($13) + ($$0$i$i<<2)|0);
      HEAP32[$58>>2] = 0;
      $59 = (($$0$i$i) + 1)|0;
      $$0$i$i = $59;
     }
     ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
     $$0$i$i54 = 0;
     while(1) {
      $exitcond$i$i55 = ($$0$i$i54|0)==(3);
      if ($exitcond$i$i55) {
       break;
      }
      $60 = (($14) + ($$0$i$i54<<2)|0);
      HEAP32[$60>>2] = 0;
      $61 = (($$0$i$i54) + 1)|0;
      $$0$i$i54 = $61;
     }
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
     $$0$i$i56 = 0;
     while(1) {
      $exitcond$i$i57 = ($$0$i$i56|0)==(3);
      if ($exitcond$i$i57) {
       break;
      }
      $62 = (($15) + ($$0$i$i56<<2)|0);
      HEAP32[$62>>2] = 0;
      $63 = (($$0$i$i56) + 1)|0;
      $$0$i$i56 = $63;
     }
     __THREW__ = 0;
     invoke_viiiiiiiiii(497,($2|0),($64|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     if ($66) {
      $117 = ___cxa_find_matching_catch_2()|0;
      $118 = tempRet0;
      $$1 = $117;$$150 = $118;
     } else {
      $67 = HEAP32[$16>>2]|0;
      $68 = ($$047|0)>($67|0);
      if ($68) {
       $69 = (($$047) - ($67))|0;
       $70 = $69 << 1;
       $71 = ((($15)) + 8|0);
       $72 = ((($71)) + 3|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = ($73<<24>>24)<(0);
       $75 = ((($15)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $73&255;
       $78 = $74 ? $76 : $77;
       $79 = (($78) + ($70))|0;
       $80 = ((($14)) + 8|0);
       $81 = ((($80)) + 3|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($82<<24>>24)<(0);
       $84 = ((($14)) + 4|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = $82&255;
       $87 = $83 ? $85 : $86;
       $$sink1 = 1;$$sink105 = $79;$$sink106 = $87;
      } else {
       $88 = ((($15)) + 8|0);
       $89 = ((($88)) + 3|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ($90<<24>>24)<(0);
       $92 = ((($15)) + 4|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $90&255;
       $95 = $91 ? $93 : $94;
       $96 = ((($14)) + 8|0);
       $97 = ((($96)) + 3|0);
       $98 = HEAP8[$97>>0]|0;
       $99 = ($98<<24>>24)<(0);
       $100 = ((($14)) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = $98&255;
       $103 = $99 ? $101 : $102;
       $$sink1 = 2;$$sink105 = $103;$$sink106 = $95;
      }
      $104 = (($$sink106) + ($67))|0;
      $$sink = (($104) + ($$sink105))|0;
      $105 = (($$sink) + ($$sink1))|0;
      $106 = ($105>>>0)>(100);
      do {
       if ($106) {
        $107 = $105 << 2;
        $108 = (_malloc($107)|0);
        $109 = $108;
        $110 = ($108|0)==(0|0);
        if ($110) {
         __THREW__ = 0;
         invoke_v(449);
         $111 = __THREW__; __THREW__ = 0;
         $112 = $111&1;
         if ($112) {
          $119 = ___cxa_find_matching_catch_2()|0;
          $120 = tempRet0;
          $$048 = $119;$$049 = $120;$$sroa$068$1 = $109;
          break;
         } else {
          $$pre102 = HEAP32[$16>>2]|0;
          $$046 = 0;$$sroa$068$0 = $109;$126 = $$pre102;
          label = 37;
          break;
         }
        } else {
         $$046 = $108;$$sroa$068$0 = $109;$126 = $67;
         label = 37;
        }
       } else {
        $$046 = $17;$$sroa$068$0 = 0;$126 = $67;
        label = 37;
       }
      } while(0);
      if ((label|0) == 37) {
       $121 = ((($3)) + 4|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = (($$0) + ($$047<<2)|0);
       $124 = HEAP32[$11>>2]|0;
       $125 = HEAP32[$12>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(498,($$046|0),($18|0),($19|0),($122|0),($$0|0),($123|0),($44|0),($64|0),($10|0),($124|0),($125|0),($13|0),($14|0),($15|0),($126|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if (!($128)) {
        $129 = HEAP32[$1>>2]|0;
        HEAP32[$20>>2] = $129;
        $130 = HEAP32[$18>>2]|0;
        $131 = HEAP32[$19>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
        $132 = (invoke_iiiiiii(461,($$byval_copy|0),($$046|0),($130|0),($131|0),($3|0),($4|0))|0);
        $133 = __THREW__; __THREW__ = 0;
        $134 = $133&1;
        if (!($134)) {
         $135 = ($$sroa$068$0|0)==(0);
         if (!($135)) {
          $136 = $$sroa$068$0;
          _free($136);
         }
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
         __ZNSt3__26localeD2Ev($9);
         $137 = ($$sroa$080$1|0)==(0);
         if (!($137)) {
          $138 = $$sroa$080$1;
          _free($138);
         }
         $139 = ($$sroa$093$1|0)==(0);
         if (!($139)) {
          $140 = $$sroa$093$1;
          _free($140);
         }
         STACKTOP = sp;return ($132|0);
        }
       }
       $141 = ___cxa_find_matching_catch_2()|0;
       $142 = tempRet0;
       $$048 = $141;$$049 = $142;$$sroa$068$1 = $$sroa$068$0;
      }
      $143 = ($$sroa$068$1|0)==(0);
      if (!($143)) {
       $144 = $$sroa$068$1;
       _free($144);
      }
      $$1 = $$048;$$150 = $$049;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
     $$3 = $$1;$$352 = $$150;
    }
   } while(0);
   __ZNSt3__26localeD2Ev($9);
   $$4 = $$3;$$453 = $$352;$$sroa$080$2 = $$sroa$080$1;$$sroa$093$2 = $$sroa$093$1;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $$4 = $34;$$453 = $35;$$sroa$080$2 = $$sroa$080$0;$$sroa$093$2 = $$sroa$093$0;
 }
 $145 = ($$sroa$080$2|0)==(0);
 if (!($145)) {
  $146 = $$sroa$080$2;
  _free($146);
 }
 $147 = ($$sroa$093$2|0)==(0);
 if (!($147)) {
  $148 = $$sroa$093$2;
  _free($148);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i37 = 0, $$0$i$i39 = 0, $$032 = 0, $$033 = 0, $$1 = 0, $$134 = 0, $$3 = 0, $$336 = 0, $$byval_copy = 0, $$pre = 0, $$pre62 = 0, $$pre63 = 0, $$sink = 0, $$sink1 = 0, $$sink64 = 0, $$sink65 = 0, $$sroa$052$0 = 0, $$sroa$052$1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i38 = 0, $exitcond$i$i40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 468|0;
 $6 = sp + 464|0;
 $7 = sp + 472|0;
 $8 = sp + 460|0;
 $9 = sp + 456|0;
 $10 = sp + 444|0;
 $11 = sp + 432|0;
 $12 = sp + 420|0;
 $13 = sp + 416|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $17 = sp;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $18 = (invoke_iii(354,($6|0),(20192|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L1: do {
  if ($20) {
   $100 = ___cxa_find_matching_catch_2()|0;
   $101 = tempRet0;
   $$3 = $100;$$336 = $101;
  } else {
   $21 = ((($5)) + 8|0);
   $22 = ((($21)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   $25 = ((($5)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $23&255;
   $28 = $24 ? $26 : $27;
   $29 = ($28|0)==(0);
   do {
    if ($29) {
     $46 = 0;
    } else {
     $30 = HEAP32[$5>>2]|0;
     $31 = $24 ? $30 : $5;
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$18>>2]|0;
     $34 = ((($33)) + 44|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iii($35|0,($18|0),45)|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $102 = ___cxa_find_matching_catch_2()|0;
      $103 = tempRet0;
      $$3 = $102;$$336 = $103;
      break L1;
     } else {
      $39 = ($32|0)==($36|0);
      $46 = $39;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $40 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i) + 1)|0;
    $$0$i$i = $41;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i37 = 0;
   while(1) {
    $exitcond$i$i38 = ($$0$i$i37|0)==(3);
    if ($exitcond$i$i38) {
     break;
    }
    $42 = (($11) + ($$0$i$i37<<2)|0);
    HEAP32[$42>>2] = 0;
    $43 = (($$0$i$i37) + 1)|0;
    $$0$i$i37 = $43;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i39 = 0;
   while(1) {
    $exitcond$i$i40 = ($$0$i$i39|0)==(3);
    if ($exitcond$i$i40) {
     break;
    }
    $44 = (($12) + ($$0$i$i39<<2)|0);
    HEAP32[$44>>2] = 0;
    $45 = (($$0$i$i39) + 1)|0;
    $$0$i$i39 = $45;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(497,($2|0),($46|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $104 = ___cxa_find_matching_catch_2()|0;
    $105 = tempRet0;
    $$1 = $104;$$134 = $105;
   } else {
    $49 = HEAP8[$22>>0]|0;
    $50 = ($49<<24>>24)<(0);
    $51 = HEAP32[$25>>2]|0;
    $52 = $49&255;
    $53 = $50 ? $51 : $52;
    $54 = HEAP32[$13>>2]|0;
    $55 = ($53|0)>($54|0);
    if ($55) {
     $56 = (($53) - ($54))|0;
     $57 = $56 << 1;
     $58 = ((($12)) + 8|0);
     $59 = ((($58)) + 3|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = ($60<<24>>24)<(0);
     $62 = ((($12)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $60&255;
     $65 = $61 ? $63 : $64;
     $66 = (($65) + ($57))|0;
     $67 = ((($11)) + 8|0);
     $68 = ((($67)) + 3|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69<<24>>24)<(0);
     $71 = ((($11)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $69&255;
     $74 = $70 ? $72 : $73;
     $$sink1 = 1;$$sink64 = $66;$$sink65 = $74;
    } else {
     $75 = ((($12)) + 8|0);
     $76 = ((($75)) + 3|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = ($77<<24>>24)<(0);
     $79 = ((($12)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $77&255;
     $82 = $78 ? $80 : $81;
     $83 = ((($11)) + 8|0);
     $84 = ((($83)) + 3|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = ($85<<24>>24)<(0);
     $87 = ((($11)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $85&255;
     $90 = $86 ? $88 : $89;
     $$sink1 = 2;$$sink64 = $90;$$sink65 = $82;
    }
    $91 = (($$sink65) + ($54))|0;
    $$sink = (($91) + ($$sink64))|0;
    $92 = (($$sink) + ($$sink1))|0;
    $93 = ($92>>>0)>(100);
    do {
     if ($93) {
      $94 = $92 << 2;
      $95 = (_malloc($94)|0);
      $96 = $95;
      $97 = ($95|0)==(0|0);
      if ($97) {
       __THREW__ = 0;
       invoke_v(449);
       $98 = __THREW__; __THREW__ = 0;
       $99 = $98&1;
       if ($99) {
        $106 = ___cxa_find_matching_catch_2()|0;
        $107 = tempRet0;
        $$0 = $106;$$033 = $107;$$sroa$052$1 = $96;
        break;
       } else {
        $$pre = HEAP8[$22>>0]|0;
        $$pre62 = HEAP32[$25>>2]|0;
        $$pre63 = HEAP32[$13>>2]|0;
        $$032 = 0;$$sroa$052$0 = $96;$111 = $$pre;$116 = $$pre62;$120 = $$pre63;
        label = 26;
        break;
       }
      } else {
       $$032 = $95;$$sroa$052$0 = $96;$111 = $49;$116 = $51;$120 = $54;
       label = 26;
      }
     } else {
      $$032 = $14;$$sroa$052$0 = 0;$111 = $49;$116 = $51;$120 = $54;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $108 = ((($3)) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($111<<24>>24)<(0);
     $112 = HEAP32[$5>>2]|0;
     $113 = $110 ? $112 : $5;
     $114 = $111&255;
     $115 = $110 ? $116 : $114;
     $117 = (($113) + ($115<<2)|0);
     $118 = HEAP32[$8>>2]|0;
     $119 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(498,($$032|0),($15|0),($16|0),($109|0),($113|0),($117|0),($18|0),($46|0),($7|0),($118|0),($119|0),($10|0),($11|0),($12|0),($120|0));
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if (!($122)) {
      $123 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $123;
      $124 = HEAP32[$15>>2]|0;
      $125 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $126 = (invoke_iiiiiii(461,($$byval_copy|0),($$032|0),($124|0),($125|0),($3|0),($4|0))|0);
      $127 = __THREW__; __THREW__ = 0;
      $128 = $127&1;
      if (!($128)) {
       $129 = ($$sroa$052$0|0)==(0);
       if (!($129)) {
        $130 = $$sroa$052$0;
        _free($130);
       }
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       __ZNSt3__26localeD2Ev($6);
       STACKTOP = sp;return ($126|0);
      }
     }
     $131 = ___cxa_find_matching_catch_2()|0;
     $132 = tempRet0;
     $$0 = $131;$$033 = $132;$$sroa$052$1 = $$sroa$052$0;
    }
    $133 = ($$sroa$052$1|0)==(0);
    if (!($133)) {
     $134 = $$sroa$052$1;
     _free($134);
    }
    $$1 = $$0;$$134 = $$033;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$336 = $$134;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i51 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i49 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i56 = 0;
 var $exitcond$i$i$i61 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i76 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = sp + 163|0;
 $13 = sp + 162|0;
 $14 = sp + 148|0;
 $15 = sp + 144|0;
 $16 = sp + 140|0;
 $17 = sp + 136|0;
 $18 = sp + 132|0;
 $19 = sp + 128|0;
 $20 = sp + 161|0;
 $21 = sp + 160|0;
 $22 = sp + 124|0;
 $23 = sp + 120|0;
 $24 = sp + 116|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 96|0;
 $28 = sp + 92|0;
 $29 = sp + 80|0;
 $30 = sp + 68|0;
 $31 = sp + 56|0;
 $32 = sp + 52|0;
 $33 = sp + 40|0;
 $34 = sp + 36|0;
 $35 = sp + 24|0;
 $36 = sp + 12|0;
 $37 = sp;
 if ($0) {
  $38 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,21896)|0);
  if ($1) {
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   FUNCTION_TABLE_vii[$41 & 1023]($26,$38);
   $42 = HEAP32[$26>>2]|0;
   HEAP8[$3>>0]=$42&255;HEAP8[$3+1>>0]=($42>>8)&255;HEAP8[$3+2>>0]=($42>>16)&255;HEAP8[$3+3>>0]=$42>>24;
   $43 = HEAP32[$38>>2]|0;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   FUNCTION_TABLE_vii[$45 & 1023]($27,$38);
   $46 = ((($8)) + 8|0);
   $47 = ((($46)) + 3|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)<(0);
   if ($49) {
    $50 = HEAP32[$8>>2]|0;
    HEAP32[$24>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($50,$24);
    $51 = ((($8)) + 4|0);
    HEAP32[$51>>2] = 0;
   } else {
    HEAP32[$25>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$25);
    HEAP8[$47>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(494,($8|0),0);
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $54 = ___cxa_find_matching_catch_3(0|0)|0;
    $55 = tempRet0;
    ___clang_call_terminate($54);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$27>>2]|0;HEAP32[$8+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$27+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $56 = (($27) + ($$0$i$i$i<<2)|0);
    HEAP32[$56>>2] = 0;
    $57 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $57;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($27);
  } else {
   $58 = HEAP32[$38>>2]|0;
   $59 = ((($58)) + 40|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vii[$60 & 1023]($28,$38);
   $61 = HEAP32[$28>>2]|0;
   HEAP8[$3>>0]=$61&255;HEAP8[$3+1>>0]=($61>>8)&255;HEAP8[$3+2>>0]=($61>>16)&255;HEAP8[$3+3>>0]=$61>>24;
   $62 = HEAP32[$38>>2]|0;
   $63 = ((($62)) + 28|0);
   $64 = HEAP32[$63>>2]|0;
   FUNCTION_TABLE_vii[$64 & 1023]($29,$38);
   $65 = ((($8)) + 8|0);
   $66 = ((($65)) + 3|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = ($67<<24>>24)<(0);
   if ($68) {
    $69 = HEAP32[$8>>2]|0;
    HEAP32[$22>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($69,$22);
    $70 = ((($8)) + 4|0);
    HEAP32[$70>>2] = 0;
   } else {
    HEAP32[$23>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$23);
    HEAP8[$66>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(494,($8|0),0);
   $71 = __THREW__; __THREW__ = 0;
   $72 = $71&1;
   if ($72) {
    $73 = ___cxa_find_matching_catch_3(0|0)|0;
    $74 = tempRet0;
    ___clang_call_terminate($73);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$29>>2]|0;HEAP32[$8+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$29+8>>2]|0;
   $$0$i$i$i48 = 0;
   while(1) {
    $exitcond$i$i$i49 = ($$0$i$i$i48|0)==(3);
    if ($exitcond$i$i$i49) {
     break;
    }
    $75 = (($29) + ($$0$i$i$i48<<2)|0);
    HEAP32[$75>>2] = 0;
    $76 = (($$0$i$i$i48) + 1)|0;
    $$0$i$i$i48 = $76;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($29);
  }
  $77 = HEAP32[$38>>2]|0;
  $78 = ((($77)) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (FUNCTION_TABLE_ii[$79 & 1023]($38)|0);
  HEAP32[$4>>2] = $80;
  $81 = HEAP32[$38>>2]|0;
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (FUNCTION_TABLE_ii[$83 & 1023]($38)|0);
  HEAP32[$5>>2] = $84;
  $85 = HEAP32[$38>>2]|0;
  $86 = ((($85)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  FUNCTION_TABLE_vii[$87 & 1023]($30,$38);
  $88 = ((($6)) + 11|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = ($89<<24>>24)<(0);
  if ($90) {
   $91 = HEAP32[$6>>2]|0;
   HEAP8[$20>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($91,$20);
   $92 = ((($6)) + 4|0);
   HEAP32[$92>>2] = 0;
  } else {
   HEAP8[$21>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$21);
   HEAP8[$88>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $93 = __THREW__; __THREW__ = 0;
  $94 = $93&1;
  if ($94) {
   $95 = ___cxa_find_matching_catch_3(0|0)|0;
   $96 = tempRet0;
   ___clang_call_terminate($95);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$30>>2]|0;HEAP32[$6+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$30+8>>2]|0;
  $$0$i$i$i51 = 0;
  while(1) {
   $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
   if ($exitcond$i$i$i52) {
    break;
   }
   $97 = (($30) + ($$0$i$i$i51<<2)|0);
   HEAP32[$97>>2] = 0;
   $98 = (($$0$i$i$i51) + 1)|0;
   $$0$i$i$i51 = $98;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
  $99 = HEAP32[$38>>2]|0;
  $100 = ((($99)) + 24|0);
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_vii[$101 & 1023]($31,$38);
  $102 = ((($7)) + 8|0);
  $103 = ((($102)) + 3|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = ($104<<24>>24)<(0);
  if ($105) {
   $106 = HEAP32[$7>>2]|0;
   HEAP32[$18>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($106,$18);
   $107 = ((($7)) + 4|0);
   HEAP32[$107>>2] = 0;
  } else {
   HEAP32[$19>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$19);
   HEAP8[$103>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($7|0),0);
  $108 = __THREW__; __THREW__ = 0;
  $109 = $108&1;
  if ($109) {
   $110 = ___cxa_find_matching_catch_3(0|0)|0;
   $111 = tempRet0;
   ___clang_call_terminate($110);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$31>>2]|0;HEAP32[$7+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$31+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $112 = (($31) + ($$0$i$i$i55<<2)|0);
   HEAP32[$112>>2] = 0;
   $113 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $113;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($31);
  $114 = HEAP32[$38>>2]|0;
  $115 = ((($114)) + 36|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (FUNCTION_TABLE_ii[$116 & 1023]($38)|0);
  $storemerge = $117;
 } else {
  $118 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,21888)|0);
  if ($1) {
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($119)) + 44|0);
   $121 = HEAP32[$120>>2]|0;
   FUNCTION_TABLE_vii[$121 & 1023]($32,$118);
   $122 = HEAP32[$32>>2]|0;
   HEAP8[$3>>0]=$122&255;HEAP8[$3+1>>0]=($122>>8)&255;HEAP8[$3+2>>0]=($122>>16)&255;HEAP8[$3+3>>0]=$122>>24;
   $123 = HEAP32[$118>>2]|0;
   $124 = ((($123)) + 32|0);
   $125 = HEAP32[$124>>2]|0;
   FUNCTION_TABLE_vii[$125 & 1023]($33,$118);
   $126 = ((($8)) + 8|0);
   $127 = ((($126)) + 3|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   if ($129) {
    $130 = HEAP32[$8>>2]|0;
    HEAP32[$16>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($130,$16);
    $131 = ((($8)) + 4|0);
    HEAP32[$131>>2] = 0;
   } else {
    HEAP32[$17>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$17);
    HEAP8[$127>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(494,($8|0),0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    $134 = ___cxa_find_matching_catch_3(0|0)|0;
    $135 = tempRet0;
    ___clang_call_terminate($134);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$33>>2]|0;HEAP32[$8+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$33+8>>2]|0;
   $$0$i$i$i60 = 0;
   while(1) {
    $exitcond$i$i$i61 = ($$0$i$i$i60|0)==(3);
    if ($exitcond$i$i$i61) {
     break;
    }
    $136 = (($33) + ($$0$i$i$i60<<2)|0);
    HEAP32[$136>>2] = 0;
    $137 = (($$0$i$i$i60) + 1)|0;
    $$0$i$i$i60 = $137;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($33);
  } else {
   $138 = HEAP32[$118>>2]|0;
   $139 = ((($138)) + 40|0);
   $140 = HEAP32[$139>>2]|0;
   FUNCTION_TABLE_vii[$140 & 1023]($34,$118);
   $141 = HEAP32[$34>>2]|0;
   HEAP8[$3>>0]=$141&255;HEAP8[$3+1>>0]=($141>>8)&255;HEAP8[$3+2>>0]=($141>>16)&255;HEAP8[$3+3>>0]=$141>>24;
   $142 = HEAP32[$118>>2]|0;
   $143 = ((($142)) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   FUNCTION_TABLE_vii[$144 & 1023]($35,$118);
   $145 = ((($8)) + 8|0);
   $146 = ((($145)) + 3|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = ($147<<24>>24)<(0);
   if ($148) {
    $149 = HEAP32[$8>>2]|0;
    HEAP32[$14>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($149,$14);
    $150 = ((($8)) + 4|0);
    HEAP32[$150>>2] = 0;
   } else {
    HEAP32[$15>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$15);
    HEAP8[$146>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(494,($8|0),0);
   $151 = __THREW__; __THREW__ = 0;
   $152 = $151&1;
   if ($152) {
    $153 = ___cxa_find_matching_catch_3(0|0)|0;
    $154 = tempRet0;
    ___clang_call_terminate($153);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$35>>2]|0;HEAP32[$8+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$35+8>>2]|0;
   $$0$i$i$i65 = 0;
   while(1) {
    $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
    if ($exitcond$i$i$i66) {
     break;
    }
    $155 = (($35) + ($$0$i$i$i65<<2)|0);
    HEAP32[$155>>2] = 0;
    $156 = (($$0$i$i$i65) + 1)|0;
    $$0$i$i$i65 = $156;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($35);
  }
  $157 = HEAP32[$118>>2]|0;
  $158 = ((($157)) + 12|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (FUNCTION_TABLE_ii[$159 & 1023]($118)|0);
  HEAP32[$4>>2] = $160;
  $161 = HEAP32[$118>>2]|0;
  $162 = ((($161)) + 16|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 1023]($118)|0);
  HEAP32[$5>>2] = $164;
  $165 = HEAP32[$118>>2]|0;
  $166 = ((($165)) + 20|0);
  $167 = HEAP32[$166>>2]|0;
  FUNCTION_TABLE_vii[$167 & 1023]($36,$118);
  $168 = ((($6)) + 11|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = ($169<<24>>24)<(0);
  if ($170) {
   $171 = HEAP32[$6>>2]|0;
   HEAP8[$12>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($171,$12);
   $172 = ((($6)) + 4|0);
   HEAP32[$172>>2] = 0;
  } else {
   HEAP8[$13>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$13);
   HEAP8[$168>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(413,($6|0),0);
  $173 = __THREW__; __THREW__ = 0;
  $174 = $173&1;
  if ($174) {
   $175 = ___cxa_find_matching_catch_3(0|0)|0;
   $176 = tempRet0;
   ___clang_call_terminate($175);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$36>>2]|0;HEAP32[$6+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$36+8>>2]|0;
  $$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $177 = (($36) + ($$0$i$i$i70<<2)|0);
   HEAP32[$177>>2] = 0;
   $178 = (($$0$i$i$i70) + 1)|0;
   $$0$i$i$i70 = $178;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($36);
  $179 = HEAP32[$118>>2]|0;
  $180 = ((($179)) + 24|0);
  $181 = HEAP32[$180>>2]|0;
  FUNCTION_TABLE_vii[$181 & 1023]($37,$118);
  $182 = ((($7)) + 8|0);
  $183 = ((($182)) + 3|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = ($184<<24>>24)<(0);
  if ($185) {
   $186 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($186,$10);
   $187 = ((($7)) + 4|0);
   HEAP32[$187>>2] = 0;
  } else {
   HEAP32[$11>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$11);
   HEAP8[$183>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(494,($7|0),0);
  $188 = __THREW__; __THREW__ = 0;
  $189 = $188&1;
  if ($189) {
   $190 = ___cxa_find_matching_catch_3(0|0)|0;
   $191 = tempRet0;
   ___clang_call_terminate($190);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$37>>2]|0;HEAP32[$7+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$37+8>>2]|0;
  $$0$i$i$i75 = 0;
  while(1) {
   $exitcond$i$i$i76 = ($$0$i$i$i75|0)==(3);
   if ($exitcond$i$i$i76) {
    break;
   }
   $192 = (($37) + ($$0$i$i$i75<<2)|0);
   HEAP32[$192>>2] = 0;
   $193 = (($$0$i$i$i75) + 1)|0;
   $$0$i$i$i75 = $193;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($37);
  $194 = HEAP32[$118>>2]|0;
  $195 = ((($194)) + 36|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (FUNCTION_TABLE_ii[$196 & 1023]($118)|0);
  $storemerge = $197;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$ = 0, $$$099 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0;
 var $$3 = 0, $$pre137 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 511]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$65 = $61;
     while(1) {
      $64 = ($65|0)==($62|0);
      if ($64) {
       break;
      }
      $66 = HEAP32[$65>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($65)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$65 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $$$099 = $7 ? $70 : $$099;
    $$0103 = $$$099;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 1023]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($$$099>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 511]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($$$099|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 511]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $132 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0 = -1;$$095 = 0;$$097 = 0;$$3 = $$2105;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0 = $111;$$095 = 0;$$097 = 0;$$3 = $$2105;
     }
     while(1) {
      $112 = ($$3|0)==($$$099|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = HEAP32[$25>>2]|0;
       $118 = $103 ? $117 : $105;
       $119 = ($116>>>0)<($118>>>0);
       if ($119) {
        $120 = HEAP32[$11>>2]|0;
        $121 = $103 ? $120 : $11;
        $122 = (($121) + ($116)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = ($123<<24>>24)==(127);
        $125 = $123 << 24 >> 24;
        $$ = $124 ? -1 : $125;
        $$1 = $$;$$196 = $116;$$198 = 0;$129 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$129 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$129 = $114;
      }
      $126 = ((($$3)) + -4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($129)) + 4|0);
      HEAP32[$2>>2] = $128;
      HEAP32[$129>>2] = $127;
      $130 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $130;$$3 = $126;
     }
     $$pre137 = HEAP32[$2>>2]|0;
     $132 = $$pre137;
    }
    $131 = ($69|0)==($132|0);
    if ($131) {
     $$2 = $$$099;
    } else {
     $$0$i$i108 = $132;$$07$i$i = $69;
     while(1) {
      $133 = ((($$0$i$i108)) + -4|0);
      $134 = ($$07$i$i>>>0)<($133>>>0);
      if (!($134)) {
       $$2 = $$$099;
       break L4;
      }
      $135 = HEAP32[$$07$i$i>>2]|0;
      $136 = HEAP32[$133>>2]|0;
      HEAP32[$$07$i$i>>2] = $136;
      HEAP32[$133>>2] = $135;
      $137 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $133;$$07$i$i = $137;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $138 = (($$0106) + 1)|0;
  $$0106 = $138;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $139 = HEAP32[$13>>2]|0;
  $140 = $27 ? $139 : $13;
  $141 = ((($140)) + 4|0);
  $142 = (($140) + ($30<<2)|0);
  $143 = HEAP32[$2>>2]|0;
  $144 = $141;
  $145 = $142;
  $146 = (($145) - ($144))|0;
  $$0$i$i = $143;$148 = $141;
  while(1) {
   $147 = ($148|0)==($142|0);
   if ($147) {
    break;
   }
   $149 = HEAP32[$148>>2]|0;
   HEAP32[$$0$i$i>>2] = $149;
   $150 = ((($148)) + 4|0);
   $151 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $151;$148 = $150;
  }
  $152 = $146 >>> 2;
  $scevgep$i = (($143) + ($152<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $153 = $3 & 176;
 $trunc = $153&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $154 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $154;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i24 = 0, $$0$i28 = 0, $$1 = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = $11 ? $12 : $5;
 $14 = ((($5)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10&255;
 $17 = $11 ? $15 : $16;
 $18 = (($13) + ($17)|0);
 $$0$i28 = $13;
 while(1) {
  $19 = ($$0$i28>>>0)<($18>>>0);
  if (!($19)) {
   label = 8;
   break;
  }
  $20 = HEAP8[$$0$i28>>0]|0;
  __THREW__ = 0;
  invoke_vii(356,($6|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 9;
   break;
  }
  $23 = ((($$0$i28)) + 1|0);
  $$0$i28 = $23;
 }
 do {
  if ((label|0) == 8) {
   $24 = ($2|0)==(-1);
   $25 = $2 << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   $28 = ((($6)) + 11|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)<(0);
   $31 = HEAP32[$6>>2]|0;
   $32 = $30 ? $31 : $6;
   __THREW__ = 0;
   $33 = (invoke_iiiii(499,($27|0),($3|0),($4|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $47 = ___cxa_find_matching_catch_2()|0;
    $48 = tempRet0;
    $$1 = $47;$$123 = $48;
    break;
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $$0$i$i24 = 0;
   while(1) {
    $exitcond$i$i25 = ($$0$i$i24|0)==(3);
    if ($exitcond$i$i25) {
     break;
    }
    $38 = (($0) + ($$0$i$i24<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = (($$0$i$i24) + 1)|0;
    $$0$i$i24 = $39;
   }
   $40 = (_strlen($33)|0);
   $41 = (($32) + ($40)|0);
   $$0$i = $32;
   while(1) {
    $42 = ($$0$i>>>0)<($41>>>0);
    if (!($42)) {
     label = 19;
     break;
    }
    $43 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(356,($0|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     label = 18;
     break;
    }
    $46 = ((($$0$i)) + 1|0);
    $$0$i = $46;
   }
   if ((label|0) == 18) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$1 = $49;$$123 = $50;
    break;
   }
   else if ((label|0) == 19) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = tempRet0;
   $$1 = $36;$$123 = $37;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__28messagesIcE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i28 = 0, $$0$i31 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $$2 = 0, $$224 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i29 = 0, $or$cond$i = 0, $or$cond$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 184|0;
 $7 = sp + 192|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 168|0;
 $11 = sp + 40|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($14) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($15)) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = (8896);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$5>>2]|0;
 $25 = $23 ? $24 : $5;
 $26 = ((($5)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $22&255;
 $29 = $23 ? $27 : $28;
 $30 = (($25) + ($29<<2)|0);
 $31 = ((($7)) + 32|0);
 $$016$i = $25;$$017$i = 0;
 L5: while(1) {
  $32 = ($$016$i>>>0)<($30>>>0);
  $33 = ($$017$i|0)!=(2);
  $34 = $33 & $32;
  if (!($34)) {
   label = 13;
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $35 = HEAP32[$15>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  __THREW__ = 0;
  $38 = (invoke_iiiiiiiii($37|0,($15|0),($6|0),($$016$i|0),($30|0),($9|0),($7|0),($31|0),($8|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 14;
   break;
  }
  $41 = ($38|0)==(2);
  $42 = HEAP32[$9>>2]|0;
  $43 = ($42|0)==($$016$i|0);
  $or$cond$i30 = $41 | $43;
  if ($or$cond$i30) {
   label = 8;
   break;
  } else {
   $$0$i31 = $7;
  }
  while(1) {
   $45 = HEAP32[$8>>2]|0;
   $46 = ($$0$i31>>>0)<($45>>>0);
   if (!($46)) {
    break;
   }
   $48 = HEAP8[$$0$i31>>0]|0;
   __THREW__ = 0;
   invoke_vii(356,($14|0),($48|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    label = 14;
    break L5;
   }
   $51 = ((($$0$i31)) + 1|0);
   $$0$i31 = $51;
  }
  $47 = HEAP32[$9>>2]|0;
  $$016$i = $47;$$017$i = $38;
 }
 do {
  if ((label|0) == 8) {
   __THREW__ = 0;
   invoke_vi(483,(16805|0));
   $44 = __THREW__; __THREW__ = 0;
   label = 14;
  }
  else if ((label|0) == 13) {
   __ZNSt3__26locale5facetD2Ev($15);
   $52 = ($2|0)==(-1);
   $53 = $2 << 1;
   $54 = $53;
   $55 = $52 ? (-1) : $54;
   $56 = ((($14)) + 11|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)<(0);
   $59 = HEAP32[$14>>2]|0;
   $60 = $58 ? $59 : $14;
   __THREW__ = 0;
   $61 = (invoke_iiiii(499,($55|0),($3|0),($4|0),($60|0))|0);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if ($63) {
    $98 = ___cxa_find_matching_catch_2()|0;
    $99 = tempRet0;
    $$2 = $98;$$224 = $99;
    break;
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $$0$i$i28 = 0;
   while(1) {
    $exitcond$i$i29 = ($$0$i$i28|0)==(3);
    if ($exitcond$i$i29) {
     break;
    }
    $66 = (($0) + ($$0$i$i28<<2)|0);
    HEAP32[$66>>2] = 0;
    $67 = (($$0$i$i28) + 1)|0;
    $$0$i$i28 = $67;
   }
   $68 = ((($16)) + 4|0);
   HEAP32[$68>>2] = 0;
   HEAP32[$16>>2] = (8944);
   $69 = (_strlen($61)|0);
   $70 = (($60) + ($69)|0);
   $71 = $70;
   $72 = ((($11)) + 128|0);
   $$019$i = $60;$$020$i = 0;
   L23: while(1) {
    $73 = ($$019$i>>>0)<($70>>>0);
    $74 = ($$020$i|0)!=(2);
    $75 = $74 & $73;
    if (!($75)) {
     label = 27;
     break;
    }
    HEAP32[$13>>2] = $$019$i;
    $76 = HEAP32[$16>>2]|0;
    $77 = ((($76)) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $$019$i;
    $80 = (($71) - ($79))|0;
    $81 = ($80|0)>(32);
    $82 = ((($$019$i)) + 32|0);
    $83 = $81 ? $82 : $70;
    __THREW__ = 0;
    $84 = (invoke_iiiiiiiii($78|0,($16|0),($10|0),($$019$i|0),($83|0),($13|0),($11|0),($72|0),($12|0))|0);
    $85 = __THREW__; __THREW__ = 0;
    $86 = $85&1;
    if ($86) {
     break;
    }
    $87 = ($84|0)==(2);
    $88 = HEAP32[$13>>2]|0;
    $89 = ($88|0)==($$019$i|0);
    $or$cond$i = $87 | $89;
    if ($or$cond$i) {
     label = 22;
     break;
    } else {
     $$0$i = $11;
    }
    while(1) {
     $91 = HEAP32[$12>>2]|0;
     $92 = ($$0$i>>>0)<($91>>>0);
     if (!($92)) {
      break;
     }
     $94 = HEAP32[$$0$i>>2]|0;
     __THREW__ = 0;
     invoke_vii(490,($0|0),($94|0));
     $95 = __THREW__; __THREW__ = 0;
     $96 = $95&1;
     if ($96) {
      break L23;
     }
     $97 = ((($$0$i)) + 4|0);
     $$0$i = $97;
    }
    $93 = HEAP32[$13>>2]|0;
    $$019$i = $93;$$020$i = $84;
   }
   if ((label|0) == 22) {
    __THREW__ = 0;
    invoke_vi(483,(16805|0));
    $90 = __THREW__; __THREW__ = 0;
   }
   else if ((label|0) == 27) {
    __ZNSt3__26locale5facetD2Ev($16);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
    STACKTOP = sp;return;
   }
   $100 = ___cxa_find_matching_catch_2()|0;
   $101 = tempRet0;
   __ZNSt3__26locale5facetD2Ev($16);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0);
   $$2 = $100;$$224 = $101;
  }
 } while(0);
 if ((label|0) == 14) {
  $64 = ___cxa_find_matching_catch_2()|0;
  $65 = tempRet0;
  __ZNSt3__26locale5facetD2Ev($15);
  $$2 = $64;$$224 = $65;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNKSt3__28messagesIwE8do_closeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$091 = 0, $$185 = 0, $$488 = 0, $$lcssa112$sink = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $or$cond = 0, $or$cond100 = 0, $or$cond97 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 $or$cond = $10 & $6;
 if ($or$cond) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(-17);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(-69);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(-65);
    $19 = ((($0)) + 3|0);
    $$ = $18 ? $19 : $0;
    $$091 = 0;$$185 = $$;
   } else {
    $$091 = 0;$$185 = $0;
   }
  } else {
   $$091 = 0;$$185 = $0;
  }
 } else {
  $$091 = 0;$$185 = $0;
 }
 L5: while(1) {
  $20 = ($$185>>>0)<($1>>>0);
  $21 = ($$091>>>0)<($2>>>0);
  $or$cond97 = $21 & $20;
  if (!($or$cond97)) {
   label = 30;
   break;
  }
  $22 = HEAP8[$$185>>0]|0;
  $23 = $22&255;
  $24 = ($22<<24>>24)>(-1);
  $25 = ((($$185)) + 1|0);
  do {
   if ($24) {
    $26 = ($23>>>0)>($3>>>0);
    if ($26) {
     label = 30;
     break L5;
    } else {
     $$488 = $25;
    }
   } else {
    $27 = ($22&255)<(194);
    if ($27) {
     label = 30;
     break L5;
    }
    $28 = ($22&255)<(224);
    $29 = ((($$185)) + 2|0);
    $30 = $$185;
    $31 = (($7) - ($30))|0;
    if ($28) {
     $32 = ($31|0)<(2);
     if ($32) {
      label = 30;
      break L5;
     }
     $33 = HEAP8[$25>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      label = 30;
      break L5;
     }
     $37 = $23 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($3>>>0);
     if ($41) {
      label = 30;
      break L5;
     } else {
      $$488 = $29;
      break;
     }
    }
    $42 = ($22&255)<(240);
    $43 = ((($$185)) + 3|0);
    if ($42) {
     $44 = ($31|0)<(3);
     if ($44) {
      label = 30;
      break L5;
     }
     $45 = HEAP8[$25>>0]|0;
     $46 = HEAP8[$29>>0]|0;
     $47 = $45&255;
     $48 = $47 & 224;
     switch ($22<<24>>24) {
     case -32:  {
      $49 = ($48|0)==(160);
      if (!($49)) {
       $$lcssa112$sink = $30;
       break L5;
      }
      break;
     }
     case -19:  {
      $50 = ($48|0)==(128);
      if (!($50)) {
       $$lcssa112$sink = $30;
       break L5;
      }
      break;
     }
     default: {
      $51 = $47 & 192;
      $52 = ($51|0)==(128);
      if (!($52)) {
       $$lcssa112$sink = $30;
       break L5;
      }
     }
     }
     $53 = $46&255;
     $54 = $53 & 192;
     $55 = ($54|0)==(128);
     if (!($55)) {
      label = 30;
      break L5;
     }
     $56 = $23 << 12;
     $57 = $56 & 61440;
     $58 = $47 << 6;
     $59 = $58 & 4032;
     $60 = $59 | $57;
     $61 = $53 & 63;
     $62 = $60 | $61;
     $63 = ($62>>>0)>($3>>>0);
     if ($63) {
      label = 30;
      break L5;
     } else {
      $$488 = $43;
      break;
     }
    }
    $64 = ($22&255)>(244);
    $65 = ($31|0)<(4);
    $or$cond100 = $65 | $64;
    if ($or$cond100) {
     label = 30;
     break L5;
    }
    $66 = HEAP8[$25>>0]|0;
    $67 = HEAP8[$29>>0]|0;
    $68 = HEAP8[$43>>0]|0;
    $69 = $66&255;
    switch ($22<<24>>24) {
    case -16:  {
     $$off = (($66) + 112)<<24>>24;
     $70 = ($$off&255)<(48);
     if (!($70)) {
      $$lcssa112$sink = $30;
      break L5;
     }
     break;
    }
    case -12:  {
     $71 = $69 & 240;
     $72 = ($71|0)==(128);
     if (!($72)) {
      $$lcssa112$sink = $30;
      break L5;
     }
     break;
    }
    default: {
     $73 = $69 & 192;
     $74 = ($73|0)==(128);
     if (!($74)) {
      $$lcssa112$sink = $30;
      break L5;
     }
    }
    }
    $75 = $67&255;
    $76 = $75 & 192;
    $77 = ($76|0)==(128);
    if (!($77)) {
     label = 30;
     break L5;
    }
    $78 = $68&255;
    $79 = $78 & 192;
    $80 = ($79|0)==(128);
    if (!($80)) {
     label = 30;
     break L5;
    }
    $81 = $23 << 18;
    $82 = $81 & 1835008;
    $83 = $69 << 12;
    $84 = $83 & 258048;
    $85 = $84 | $82;
    $86 = $75 << 6;
    $87 = $86 & 4032;
    $88 = $85 | $87;
    $89 = $78 & 63;
    $90 = $88 | $89;
    $91 = ($90>>>0)>($3>>>0);
    $92 = ((($$185)) + 4|0);
    if ($91) {
     label = 30;
     break L5;
    } else {
     $$488 = $92;
    }
   }
  } while(0);
  $93 = (($$091) + 1)|0;
  $$091 = $93;$$185 = $$488;
 }
 if ((label|0) == 30) {
  $94 = $$185;
  $$lcssa112$sink = $94;
 }
 $95 = (($$lcssa112$sink) - ($8))|0;
 return ($95|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$sink = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 $10 = $1;
 if (!($9)) {
  $11 = HEAP32[$2>>2]|0;
  $12 = $11;
  $13 = (($10) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$11>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($11)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($11)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($11)) + 3|0);
      HEAP32[$2>>2] = $23;
     }
    }
   }
  }
 }
 L7: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   $$9 = 0;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   $$9 = 1;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  $31 = ((($24)) + 1|0);
  do {
   if ($30) {
    $32 = ($29>>>0)>($6>>>0);
    if ($32) {
     $$9 = 2;
     break L7;
    }
    HEAP32[$26>>2] = $29;
    $$sink = $31;
   } else {
    $33 = ($28&255)<(194);
    if ($33) {
     $$9 = 2;
     break L7;
    }
    $34 = ($28&255)<(224);
    $35 = $24;
    $36 = ((($24)) + 2|0);
    $37 = (($10) - ($35))|0;
    if ($34) {
     $38 = ($37|0)<(2);
     if ($38) {
      $$9 = 1;
      break L7;
     }
     $39 = HEAP8[$31>>0]|0;
     $40 = $39&255;
     $41 = $40 & 192;
     $42 = ($41|0)==(128);
     if (!($42)) {
      $$9 = 2;
      break L7;
     }
     $43 = $29 << 6;
     $44 = $43 & 1984;
     $45 = $40 & 63;
     $46 = $45 | $44;
     $47 = ($46>>>0)>($6>>>0);
     if ($47) {
      $$9 = 2;
      break L7;
     }
     HEAP32[$26>>2] = $46;
     $$sink = $36;
     break;
    }
    $48 = ($28&255)<(240);
    $49 = ((($24)) + 3|0);
    if ($48) {
     $50 = ($37|0)<(3);
     if ($50) {
      $$9 = 1;
      break L7;
     }
     $51 = HEAP8[$31>>0]|0;
     $52 = HEAP8[$36>>0]|0;
     $53 = $51&255;
     $54 = $53 & 224;
     switch ($28<<24>>24) {
     case -32:  {
      $55 = ($54|0)==(160);
      if (!($55)) {
       $$9 = 2;
       break L7;
      }
      break;
     }
     case -19:  {
      $56 = ($54|0)==(128);
      if (!($56)) {
       $$9 = 2;
       break L7;
      }
      break;
     }
     default: {
      $57 = $53 & 192;
      $58 = ($57|0)==(128);
      if (!($58)) {
       $$9 = 2;
       break L7;
      }
     }
     }
     $59 = $52&255;
     $60 = $59 & 192;
     $61 = ($60|0)==(128);
     if (!($61)) {
      $$9 = 2;
      break L7;
     }
     $62 = $29 << 12;
     $63 = $62 & 61440;
     $64 = $53 << 6;
     $65 = $64 & 4032;
     $66 = $65 | $63;
     $67 = $59 & 63;
     $68 = $66 | $67;
     $69 = ($68>>>0)>($6>>>0);
     if ($69) {
      $$9 = 2;
      break L7;
     }
     HEAP32[$26>>2] = $68;
     $$sink = $49;
     break;
    }
    $70 = ($28&255)<(245);
    if (!($70)) {
     $$9 = 2;
     break L7;
    }
    $71 = ($37|0)<(4);
    if ($71) {
     $$9 = 1;
     break L7;
    }
    $72 = HEAP8[$31>>0]|0;
    $73 = HEAP8[$36>>0]|0;
    $74 = HEAP8[$49>>0]|0;
    $75 = $72&255;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($72) + 112)<<24>>24;
     $76 = ($$off&255)<(48);
     if (!($76)) {
      $$9 = 2;
      break L7;
     }
     break;
    }
    case -12:  {
     $77 = $75 & 240;
     $78 = ($77|0)==(128);
     if (!($78)) {
      $$9 = 2;
      break L7;
     }
     break;
    }
    default: {
     $79 = $75 & 192;
     $80 = ($79|0)==(128);
     if (!($80)) {
      $$9 = 2;
      break L7;
     }
    }
    }
    $81 = $73&255;
    $82 = $81 & 192;
    $83 = ($82|0)==(128);
    if (!($83)) {
     $$9 = 2;
     break L7;
    }
    $84 = $74&255;
    $85 = $84 & 192;
    $86 = ($85|0)==(128);
    if (!($86)) {
     $$9 = 2;
     break L7;
    }
    $87 = $29 << 18;
    $88 = $87 & 1835008;
    $89 = $75 << 12;
    $90 = $89 & 258048;
    $91 = $90 | $88;
    $92 = $81 << 6;
    $93 = $92 & 4032;
    $94 = $91 | $93;
    $95 = $84 & 63;
    $96 = $94 | $95;
    $97 = ($96>>>0)>($6>>>0);
    if ($97) {
     $$9 = 2;
     break L7;
    }
    HEAP32[$26>>2] = $96;
    $98 = ((($24)) + 4|0);
    $$sink = $98;
   }
  } while(0);
  HEAP32[$2>>2] = $$sink;
  $99 = HEAP32[$5>>2]|0;
  $100 = ((($99)) + 4|0);
  HEAP32[$5>>2] = $100;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $10 = $4;
 if ($9) {
  label = 4;
 } else {
  $11 = $3;
  $12 = (($10) - ($11))|0;
  $13 = ($12|0)<(3);
  if ($13) {
   $$2 = 1;
  } else {
   $14 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $14;
   HEAP8[$3>>0] = -17;
   $15 = HEAP32[$5>>2]|0;
   $16 = ((($15)) + 1|0);
   HEAP32[$5>>2] = $16;
   HEAP8[$15>>0] = -69;
   $17 = HEAP32[$5>>2]|0;
   $18 = ((($17)) + 1|0);
   HEAP32[$5>>2] = $18;
   HEAP8[$17>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $20 = $$pre;
   while(1) {
    $19 = ($20>>>0)<($1>>>0);
    if (!($19)) {
     $$2 = 0;
     break L4;
    }
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & -2048;
    $23 = ($22|0)==(55296);
    $24 = ($21>>>0)>($6>>>0);
    $or$cond = $24 | $23;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $25 = ($21>>>0)<(128);
    do {
     if ($25) {
      $26 = HEAP32[$5>>2]|0;
      $27 = $26;
      $28 = (($10) - ($27))|0;
      $29 = ($28|0)<(1);
      if ($29) {
       $$2 = 1;
       break L4;
      }
      $30 = $21&255;
      $31 = ((($26)) + 1|0);
      HEAP32[$5>>2] = $31;
      HEAP8[$26>>0] = $30;
     } else {
      $32 = ($21>>>0)<(2048);
      $33 = $21 & 63;
      $34 = $33 | 128;
      $35 = $34&255;
      if ($32) {
       $36 = HEAP32[$5>>2]|0;
       $37 = $36;
       $38 = (($10) - ($37))|0;
       $39 = ($38|0)<(2);
       if ($39) {
        $$2 = 1;
        break L4;
       }
       $40 = $21 >>> 6;
       $41 = $40 | 192;
       $42 = $41&255;
       $43 = ((($36)) + 1|0);
       HEAP32[$5>>2] = $43;
       HEAP8[$36>>0] = $42;
       $44 = HEAP32[$5>>2]|0;
       $45 = ((($44)) + 1|0);
       HEAP32[$5>>2] = $45;
       HEAP8[$44>>0] = $35;
       break;
      }
      $46 = ($21>>>0)<(65536);
      $47 = HEAP32[$5>>2]|0;
      $48 = $47;
      $49 = (($10) - ($48))|0;
      $50 = $21 >>> 6;
      $51 = $50 & 63;
      $52 = $51 | 128;
      $53 = ((($47)) + 1|0);
      $54 = $52&255;
      if ($46) {
       $55 = ($49|0)<(3);
       if ($55) {
        $$2 = 1;
        break L4;
       }
       $56 = $21 >>> 12;
       $57 = $56 | 224;
       $58 = $57&255;
       HEAP32[$5>>2] = $53;
       HEAP8[$47>>0] = $58;
       $59 = HEAP32[$5>>2]|0;
       $60 = ((($59)) + 1|0);
       HEAP32[$5>>2] = $60;
       HEAP8[$59>>0] = $54;
       $61 = HEAP32[$5>>2]|0;
       $62 = ((($61)) + 1|0);
       HEAP32[$5>>2] = $62;
       HEAP8[$61>>0] = $35;
       break;
      } else {
       $63 = ($49|0)<(4);
       if ($63) {
        $$2 = 1;
        break L4;
       }
       $64 = $21 >>> 18;
       $65 = $64 | 240;
       $66 = $65&255;
       HEAP32[$5>>2] = $53;
       HEAP8[$47>>0] = $66;
       $67 = $21 >>> 12;
       $68 = $67 & 63;
       $69 = $68 | 128;
       $70 = $69&255;
       $71 = HEAP32[$5>>2]|0;
       $72 = ((($71)) + 1|0);
       HEAP32[$5>>2] = $72;
       HEAP8[$71>>0] = $70;
       $73 = HEAP32[$5>>2]|0;
       $74 = ((($73)) + 1|0);
       HEAP32[$5>>2] = $74;
       HEAP8[$73>>0] = $54;
       $75 = HEAP32[$5>>2]|0;
       $76 = ((($75)) + 1|0);
       HEAP32[$5>>2] = $76;
       HEAP8[$75>>0] = $35;
       break;
      }
     }
    } while(0);
    $77 = HEAP32[$2>>2]|0;
    $78 = ((($77)) + 4|0);
    HEAP32[$2>>2] = $78;
    $20 = $78;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph87 = 0, $$pre = 0, $$pre170 = 0, $$pre171 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $113 = $$077;
   label = 53;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (___uselocale($34)|0);
  __THREW__ = 0;
  $36 = (invoke_iiiiii(500,($$079|0),($4|0),($31|0),($33|0),($1|0))|0);
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
   break;
  }
  $39 = ($35|0)==(0|0);
  if (!($39)) {
   __THREW__ = 0;
   (invoke_ii(435,($35|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    label = 10;
    break;
   }
  }
  switch ($36|0) {
  case -1:  {
   label = 16;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 50;
   break L6;
   break;
  }
  default: {
  }
  }
  $76 = HEAP32[$7>>2]|0;
  $77 = (($76) + ($36)|0);
  HEAP32[$7>>2] = $77;
  $78 = ($77|0)==($6|0);
  if ($78) {
   label = 51;
   break;
  }
  $79 = ($$171|0)==($3|0);
  if ($79) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph87 = $3;$115 = $77;$116 = $$pre;
  } else {
   $80 = HEAP32[$15>>2]|0;
   $81 = (___uselocale($80)|0);
   __THREW__ = 0;
   $82 = (invoke_iiii(501,($9|0),0,($1|0))|0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    label = 36;
    break;
   }
   $85 = ($81|0)==(0|0);
   if (!($85)) {
    __THREW__ = 0;
    (invoke_ii(435,($81|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 35;
     break;
    }
   }
   $97 = ($82|0)==(-1);
   if ($97) {
    $$173 = 2;
    label = 49;
    break;
   }
   $98 = HEAP32[$7>>2]|0;
   $99 = (($14) - ($98))|0;
   $100 = ($82>>>0)>($99>>>0);
   if ($100) {
    $$173 = 1;
    label = 49;
    break;
   } else {
    $$0 = $9;$$069 = $82;
   }
   while(1) {
    $101 = ($$069|0)==(0);
    if ($101) {
     break;
    }
    $104 = ((($$0)) + 1|0);
    $105 = HEAP8[$$0>>0]|0;
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    HEAP32[$7>>2] = $107;
    HEAP8[$106>>0] = $105;
    $108 = (($$069) + -1)|0;
    $$0 = $104;$$069 = $108;
   }
   $102 = HEAP32[$4>>2]|0;
   $103 = ((($102)) + 4|0);
   HEAP32[$4>>2] = $103;
   $$2 = $103;
   while(1) {
    $109 = ($$2|0)==($3|0);
    if ($109) {
     $$2$lcssa = $3;
     break;
    }
    $110 = HEAP32[$$2>>2]|0;
    $111 = ($110|0)==(0);
    if ($111) {
     $$2$lcssa = $$2;
     break;
    }
    $112 = ((($$2)) + 4|0);
    $$2 = $112;
   }
   $$pre170 = HEAP32[$7>>2]|0;
   $$5$ph87 = $$2$lcssa;$115 = $$pre170;$116 = $103;
  }
  $$077 = $116;$$079 = $115;$$171 = $$5$ph87;
 }
 do {
  if ((label|0) == 10) {
   $42 = ___cxa_find_matching_catch_3(0|0)|0;
   $43 = tempRet0;
   ___clang_call_terminate($42);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = tempRet0;
   $46 = ($35|0)==(0|0);
   if (!($46)) {
    __THREW__ = 0;
    (invoke_ii(435,($35|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $49 = ___cxa_find_matching_catch_3(0|0)|0;
     $50 = tempRet0;
     ___clang_call_terminate($49);
     // unreachable;
    }
   }
   ___resumeException($44|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   HEAP32[$7>>2] = $$079;
   $$178 = $$077;$56 = $$079;
   while(1) {
    $51 = HEAP32[$4>>2]|0;
    $52 = ($$178|0)==($51|0);
    if ($52) {
     label = 28;
     break;
    }
    $53 = HEAP32[$$178>>2]|0;
    $54 = HEAP32[$15>>2]|0;
    $55 = (___uselocale($54)|0);
    __THREW__ = 0;
    $57 = (invoke_iiii(501,($56|0),($53|0),($8|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 22;
     break;
    }
    $60 = ($55|0)==(0|0);
    if (!($60)) {
     __THREW__ = 0;
     (invoke_ii(435,($55|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 21;
      break;
     }
    }
    $72 = ($57|0)==(-1);
    if ($72) {
     label = 28;
     break;
    }
    $73 = HEAP32[$7>>2]|0;
    $74 = (($73) + ($57)|0);
    HEAP32[$7>>2] = $74;
    $75 = ((($$178)) + 4|0);
    $$178 = $75;$56 = $74;
   }
   if ((label|0) == 21) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $65 = ___cxa_find_matching_catch_2()|0;
    $66 = tempRet0;
    $67 = ($55|0)==(0|0);
    if (!($67)) {
     __THREW__ = 0;
     (invoke_ii(435,($55|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $70 = ___cxa_find_matching_catch_3(0|0)|0;
      $71 = tempRet0;
      ___clang_call_terminate($70);
      // unreachable;
     }
    }
    ___resumeException($65|0);
    // unreachable;
   }
   else if ((label|0) == 28) {
    HEAP32[$4>>2] = $$178;
    $$375$ph = 2;
    label = 50;
    break;
   }
  }
  else if ((label|0) == 35) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  else if ((label|0) == 36) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $92 = ($81|0)==(0|0);
   if (!($92)) {
    __THREW__ = 0;
    (invoke_ii(435,($81|0))|0);
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $95 = ___cxa_find_matching_catch_3(0|0)|0;
     $96 = tempRet0;
     ___clang_call_terminate($95);
     // unreachable;
    }
   }
   ___resumeException($90|0);
   // unreachable;
  }
  else if ((label|0) == 49) {
   $$375$ph = $$173;
   label = 50;
  }
  else if ((label|0) == 51) {
   $$pre171 = HEAP32[$4>>2]|0;
   $113 = $$pre171;
   label = 53;
  }
 } while(0);
 if ((label|0) == 50) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 53) {
  $not$ = ($113|0)!=($3|0);
  $114 = $not$&1;
  $$476 = $114;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$pre176 = 0, $$pre177 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $not$78 = 0, $or$cond = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $106 = $$074;
   label = 50;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (___uselocale($33)|0);
  __THREW__ = 0;
  $35 = (invoke_iiiiii(502,($$077|0),($4|0),($29|0),($32|0),($1|0))|0);
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   label = 11;
   break;
  }
  $38 = ($34|0)==(0|0);
  if (!($38)) {
   __THREW__ = 0;
   (invoke_ii(435,($34|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    label = 10;
    break;
   }
  }
  $50 = ($35|0)==(-1);
  if ($50) {
   $$175 = $$074;$storemerge = $$077;
   label = 16;
   break;
  }
  $76 = HEAP32[$7>>2]|0;
  $77 = (($76) + ($35<<2)|0);
  HEAP32[$7>>2] = $77;
  $78 = ($77|0)==($6|0);
  if ($78) {
   label = 47;
   break;
  }
  $79 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($79) {
   $$4$ph = $3;$108 = $77;$109 = $$pre;
  } else {
   $80 = HEAP32[$14>>2]|0;
   $81 = (___uselocale($80)|0);
   __THREW__ = 0;
   $82 = (invoke_iiiii(503,($77|0),($$pre|0),1,($1|0))|0);
   $83 = __THREW__; __THREW__ = 0;
   $84 = $83&1;
   if ($84) {
    label = 37;
    break;
   }
   $85 = ($81|0)==(0|0);
   if (!($85)) {
    __THREW__ = 0;
    (invoke_ii(435,($81|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    $87 = $86&1;
    if ($87) {
     label = 36;
     break;
    }
   }
   $97 = ($82|0)==(0);
   if (!($97)) {
    $$172$ph = 2;
    label = 46;
    break;
   }
   $98 = HEAP32[$7>>2]|0;
   $99 = ((($98)) + 4|0);
   HEAP32[$7>>2] = $99;
   $100 = HEAP32[$4>>2]|0;
   $101 = ((($100)) + 1|0);
   HEAP32[$4>>2] = $101;
   $$2 = $101;
   while(1) {
    $102 = ($$2|0)==($3|0);
    if ($102) {
     $$2$lcssa = $3;
     break;
    }
    $103 = HEAP8[$$2>>0]|0;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $$2$lcssa = $$2;
     break;
    }
    $105 = ((($$2)) + 1|0);
    $$2 = $105;
   }
   $$pre176 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$108 = $$pre176;$109 = $101;
  }
  $$074 = $109;$$077 = $108;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  else if ((label|0) == 11) {
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = tempRet0;
   $45 = ($34|0)==(0|0);
   if (!($45)) {
    __THREW__ = 0;
    (invoke_ii(435,($34|0))|0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch_3(0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    }
   }
   ___resumeException($43|0);
   // unreachable;
  }
  else if ((label|0) == 16) {
   L30: while(1) {
    label = 0;
    HEAP32[$7>>2] = $storemerge;
    $51 = HEAP32[$4>>2]|0;
    $52 = ($$175|0)==($51|0);
    if ($52) {
     label = 30;
     break;
    }
    $53 = $$175;
    $54 = (($27) - ($53))|0;
    $55 = HEAP32[$14>>2]|0;
    $56 = (___uselocale($55)|0);
    __THREW__ = 0;
    $57 = (invoke_iiiii(503,($storemerge|0),($$175|0),($54|0),($8|0))|0);
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 21;
     break;
    }
    $60 = ($56|0)==(0|0);
    if (!($60)) {
     __THREW__ = 0;
     (invoke_ii(435,($56|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 20;
      break;
     }
    }
    switch ($57|0) {
    case -1:  {
     label = 27;
     break L30;
     break;
    }
    case -2:  {
     label = 28;
     break L30;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $57;
    }
    }
    $72 = (($$175) + ($$sink)|0);
    $73 = HEAP32[$7>>2]|0;
    $74 = ((($73)) + 4|0);
    $$175 = $72;$storemerge = $74;
    label = 16;
   }
   if ((label|0) == 20) {
    $63 = ___cxa_find_matching_catch_3(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   else if ((label|0) == 21) {
    $65 = ___cxa_find_matching_catch_2()|0;
    $66 = tempRet0;
    $67 = ($56|0)==(0|0);
    if (!($67)) {
     __THREW__ = 0;
     (invoke_ii(435,($56|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $70 = ___cxa_find_matching_catch_3(0|0)|0;
      $71 = tempRet0;
      ___clang_call_terminate($70);
      // unreachable;
     }
    }
    ___resumeException($65|0);
    // unreachable;
   }
   else if ((label|0) == 27) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 46;
    break;
   }
   else if ((label|0) == 28) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 46;
    break;
   }
   else if ((label|0) == 30) {
    HEAP32[$4>>2] = $$175;
    $not$78 = ($$175|0)!=($3|0);
    $75 = $not$78&1;
    $$172$ph = $75;
    label = 46;
    break;
   }
  }
  else if ((label|0) == 36) {
   $88 = ___cxa_find_matching_catch_3(0|0)|0;
   $89 = tempRet0;
   ___clang_call_terminate($88);
   // unreachable;
  }
  else if ((label|0) == 37) {
   $90 = ___cxa_find_matching_catch_2()|0;
   $91 = tempRet0;
   $92 = ($81|0)==(0|0);
   if (!($92)) {
    __THREW__ = 0;
    (invoke_ii(435,($81|0))|0);
    $93 = __THREW__; __THREW__ = 0;
    $94 = $93&1;
    if ($94) {
     $95 = ___cxa_find_matching_catch_3(0|0)|0;
     $96 = tempRet0;
     ___clang_call_terminate($95);
     // unreachable;
    }
   }
   ___resumeException($90|0);
   // unreachable;
  }
  else if ((label|0) == 47) {
   $$pre177 = HEAP32[$4>>2]|0;
   $106 = $$pre177;
   label = 50;
  }
 } while(0);
 if ((label|0) == 46) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 50) {
  $not$ = ($106|0)!=($3|0);
  $107 = $not$&1;
  $$273 = $107;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (___uselocale($7)|0);
 __THREW__ = 0;
 $9 = (invoke_iiii(501,($5|0),0,($1|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  $19 = ($8|0)==(0|0);
  if (!($19)) {
   __THREW__ = 0;
   (invoke_ii(435,($8|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    ___clang_call_terminate($22);
    // unreachable;
   }
  }
  ___resumeException($17|0);
  // unreachable;
 }
 $12 = ($8|0)==(0|0);
 if (!($12)) {
  __THREW__ = 0;
  (invoke_ii(435,($8|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $15 = ___cxa_find_matching_catch_3(0|0)|0;
   $16 = tempRet0;
   ___clang_call_terminate($15);
   // unreachable;
  }
 }
 L12: do {
  switch ($9|0) {
  case 0: case -1:  {
   $$019 = 2;
   break;
  }
  default: {
   $24 = (($9) + -1)|0;
   $25 = HEAP32[$4>>2]|0;
   $26 = $3;
   $27 = (($26) - ($25))|0;
   $28 = ($24>>>0)>($27>>>0);
   if ($28) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $24;
    while(1) {
     $29 = ($$018|0)==(0);
     if ($29) {
      $$019 = 0;
      break L12;
     }
     $30 = ((($$0)) + 1|0);
     $31 = HEAP8[$$0>>0]|0;
     $32 = HEAP32[$4>>2]|0;
     $33 = ((($32)) + 1|0);
     HEAP32[$4>>2] = $33;
     HEAP8[$32>>0] = $31;
     $34 = (($$018) + -1)|0;
     $$0 = $30;$$018 = $34;
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_ii(435,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 21;
  } else {
   __THREW__ = 0;
   $6 = (invoke_iiii(504,(0|0),(0|0),4)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $14 = ___cxa_find_matching_catch_3(0|0)|0;
    $15 = tempRet0;
    $16 = ($3|0)==(0|0);
    if ($16) {
     $eh$lpad$body$indexZ2D = $14;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(435,($3|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     $eh$lpad$body$indexZ2D = $14;
     break;
    }
    $19 = ___cxa_find_matching_catch_3(0|0)|0;
    $20 = tempRet0;
    ___clang_call_terminate($19);
    // unreachable;
   }
   $9 = ($3|0)==(0|0);
   if (!($9)) {
    __THREW__ = 0;
    (invoke_ii(435,($3|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch_3(0|0)|0;
     $13 = tempRet0;
     ___clang_call_terminate($12);
     // unreachable;
    }
   }
   $21 = ($6|0)==(0);
   if ($21) {
    $22 = HEAP32[$1>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $24 = (invoke_ii(435,($22|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 21;
      break;
     }
     __THREW__ = 0;
     $27 = (invoke_i(505)|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $35 = ___cxa_find_matching_catch_3(0|0)|0;
      $36 = tempRet0;
      $37 = ($24|0)==(0|0);
      if ($37) {
       $eh$lpad$body$indexZ2D = $35;
       break;
      }
      __THREW__ = 0;
      (invoke_ii(435,($24|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if (!($39)) {
       $eh$lpad$body$indexZ2D = $35;
       break;
      }
      $40 = ___cxa_find_matching_catch_3(0|0)|0;
      $41 = tempRet0;
      ___clang_call_terminate($40);
      // unreachable;
     }
     $30 = ($24|0)==(0|0);
     if (!($30)) {
      __THREW__ = 0;
      (invoke_ii(435,($24|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = tempRet0;
       ___clang_call_terminate($33);
       // unreachable;
      }
     }
     $42 = ($27|0)==(1);
     $$ = $42&1;
     return ($$|0);
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 21) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  $eh$lpad$body$indexZ2D = $43;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   label = 14;
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (___uselocale($11)|0);
  __THREW__ = 0;
  $13 = (invoke_iiii(506,($$034|0),($10|0),($1|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   label = 7;
   break;
  }
  $16 = ($12|0)==(0|0);
  if (!($16)) {
   __THREW__ = 0;
   (invoke_ii(435,($12|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 6;
    break;
   }
  }
  switch ($13|0) {
  case -2: case -1:  {
   label = 14;
   break L1;
   break;
  }
  case 0:  {
   $$sink = 1;
   break;
  }
  default: {
   $$sink = $13;
  }
  }
  $28 = (($$034) + ($$sink)|0);
  $$131 = (($$sink) + ($$030))|0;
  $29 = (($$029) + 1)|0;
  $$029 = $29;$$030 = $$131;$$034 = $28;
 }
 if ((label|0) == 6) {
  $19 = ___cxa_find_matching_catch_3(0|0)|0;
  $20 = tempRet0;
  ___clang_call_terminate($19);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  $23 = ($12|0)==(0|0);
  if (!($23)) {
   __THREW__ = 0;
   (invoke_ii(435,($12|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch_3(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
  }
  ___resumeException($21|0);
  // unreachable;
 }
 else if ((label|0) == 14) {
  return ($$030|0);
 }
 return (0)|0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $22 = 1;
  } else {
   __THREW__ = 0;
   $4 = (invoke_ii(435,($2|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   do {
    if ($6) {
     $23 = ___cxa_find_matching_catch_3(0|0)|0;
     $24 = tempRet0;
     $eh$lpad$body$indexZ2D = $23;
    } else {
     __THREW__ = 0;
     $7 = (invoke_i(505)|0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      $15 = ___cxa_find_matching_catch_3(0|0)|0;
      $16 = tempRet0;
      $17 = ($4|0)==(0|0);
      if ($17) {
       $eh$lpad$body$indexZ2D = $15;
       break;
      }
      __THREW__ = 0;
      (invoke_ii(435,($4|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       $eh$lpad$body$indexZ2D = $15;
       break;
      }
      $20 = ___cxa_find_matching_catch_3(0|0)|0;
      $21 = tempRet0;
      ___clang_call_terminate($20);
      // unreachable;
     } else {
      $10 = ($4|0)==(0|0);
      if ($10) {
       $22 = $7;
       break L1;
      }
      __THREW__ = 0;
      (invoke_ii(435,($4|0))|0);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if (!($12)) {
       $22 = $7;
       break L1;
      }
      $13 = ___cxa_find_matching_catch_3(0|0)|0;
      $14 = tempRet0;
      ___clang_call_terminate($13);
      // unreachable;
     }
    }
   } while(0);
   ___clang_call_terminate($eh$lpad$body$indexZ2D);
   // unreachable;
  }
 } while(0);
 return ($22|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (8992);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_i(432)|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = ($2|0)==($3|0);
   if (!($6)) {
    $7 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi(478,($7|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
   }
   __ZNSt3__26locale5facetD2Ev($0);
   return;
  }
 } while(0);
 $10 = ___cxa_find_matching_catch_3(0|0)|0;
 $11 = tempRet0;
 __ZNSt3__26locale5facetD2Ev($0);
 ___clang_call_terminate($10);
 // unreachable;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0100 = 0, $$194 = 0, $$2102 = 0, $$598 = 0, $$lcssa125$sink = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $or$cond = 0, $or$cond110 = 0, $or$cond115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 $or$cond = $10 & $6;
 if ($or$cond) {
  $11 = HEAP8[$0>>0]|0;
  $12 = ($11<<24>>24)==(-17);
  if ($12) {
   $13 = ((($0)) + 1|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14<<24>>24)==(-69);
   if ($15) {
    $16 = ((($0)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(-65);
    $19 = ((($0)) + 3|0);
    $$ = $18 ? $19 : $0;
    $$0100 = 0;$$194 = $$;
   } else {
    $$0100 = 0;$$194 = $0;
   }
  } else {
   $$0100 = 0;$$194 = $0;
  }
 } else {
  $$0100 = 0;$$194 = $0;
 }
 L5: while(1) {
  $20 = ($$194>>>0)<($1>>>0);
  $21 = ($$0100>>>0)<($2>>>0);
  $or$cond110 = $21 & $20;
  if (!($or$cond110)) {
   label = 31;
   break;
  }
  $22 = HEAP8[$$194>>0]|0;
  $23 = $22&255;
  $24 = ($23>>>0)>($3>>>0);
  if ($24) {
   label = 31;
   break;
  }
  $25 = ($22<<24>>24)>(-1);
  $26 = ((($$194)) + 1|0);
  do {
   if ($25) {
    $$2102 = $$0100;$$598 = $26;
   } else {
    $27 = ($22&255)<(194);
    if ($27) {
     label = 31;
     break L5;
    }
    $28 = ($22&255)<(224);
    $29 = ((($$194)) + 2|0);
    $30 = $$194;
    $31 = (($7) - ($30))|0;
    if ($28) {
     $32 = ($31|0)<(2);
     if ($32) {
      label = 31;
      break L5;
     }
     $33 = HEAP8[$26>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      label = 31;
      break L5;
     }
     $37 = $23 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($3>>>0);
     if ($41) {
      label = 31;
      break L5;
     } else {
      $$2102 = $$0100;$$598 = $29;
      break;
     }
    }
    $42 = ($22&255)<(240);
    $43 = ((($$194)) + 3|0);
    if ($42) {
     $44 = ($31|0)<(3);
     if ($44) {
      label = 31;
      break L5;
     }
     $45 = HEAP8[$26>>0]|0;
     $46 = HEAP8[$29>>0]|0;
     $47 = $45&255;
     $48 = $47 & 224;
     switch ($22<<24>>24) {
     case -32:  {
      $49 = ($48|0)==(160);
      if (!($49)) {
       $$lcssa125$sink = $30;
       break L5;
      }
      break;
     }
     case -19:  {
      $50 = ($48|0)==(128);
      if (!($50)) {
       $$lcssa125$sink = $30;
       break L5;
      }
      break;
     }
     default: {
      $51 = $47 & 192;
      $52 = ($51|0)==(128);
      if (!($52)) {
       $$lcssa125$sink = $30;
       break L5;
      }
     }
     }
     $53 = $46&255;
     $54 = $53 & 192;
     $55 = ($54|0)==(128);
     if (!($55)) {
      label = 31;
      break L5;
     }
     $56 = $23 << 12;
     $57 = $56 & 61440;
     $58 = $47 << 6;
     $59 = $58 & 4032;
     $60 = $59 | $57;
     $61 = $53 & 63;
     $62 = $60 | $61;
     $63 = ($62>>>0)>($3>>>0);
     if ($63) {
      label = 31;
      break L5;
     } else {
      $$2102 = $$0100;$$598 = $43;
      break;
     }
    }
    $64 = ($22&255)<(245);
    if (!($64)) {
     label = 31;
     break L5;
    }
    $65 = ($31|0)<(4);
    $66 = (($2) - ($$0100))|0;
    $67 = ($66>>>0)<(2);
    $or$cond115 = $67 | $65;
    if ($or$cond115) {
     label = 31;
     break L5;
    }
    $68 = HEAP8[$26>>0]|0;
    $69 = HEAP8[$29>>0]|0;
    $70 = HEAP8[$43>>0]|0;
    $71 = $68&255;
    switch ($22<<24>>24) {
    case -16:  {
     $$off = (($68) + 112)<<24>>24;
     $72 = ($$off&255)<(48);
     if (!($72)) {
      $$lcssa125$sink = $30;
      break L5;
     }
     break;
    }
    case -12:  {
     $73 = $71 & 240;
     $74 = ($73|0)==(128);
     if (!($74)) {
      $$lcssa125$sink = $30;
      break L5;
     }
     break;
    }
    default: {
     $75 = $71 & 192;
     $76 = ($75|0)==(128);
     if (!($76)) {
      $$lcssa125$sink = $30;
      break L5;
     }
    }
    }
    $77 = $69&255;
    $78 = $77 & 192;
    $79 = ($78|0)==(128);
    if (!($79)) {
     label = 31;
     break L5;
    }
    $80 = $70&255;
    $81 = $80 & 192;
    $82 = ($81|0)==(128);
    if (!($82)) {
     label = 31;
     break L5;
    }
    $83 = $23 << 18;
    $84 = $83 & 1835008;
    $85 = $71 << 12;
    $86 = $85 & 258048;
    $87 = $86 | $84;
    $88 = $77 << 6;
    $89 = $88 & 4032;
    $90 = $87 | $89;
    $91 = $80 & 63;
    $92 = $90 | $91;
    $93 = ($92>>>0)>($3>>>0);
    $94 = (($$0100) + 1)|0;
    $95 = ((($$194)) + 4|0);
    if ($93) {
     label = 31;
     break L5;
    } else {
     $$2102 = $94;$$598 = $95;
    }
   }
  } while(0);
  $96 = (($$2102) + 1)|0;
  $$0100 = $96;$$194 = $$598;
 }
 if ((label|0) == 31) {
  $97 = $$194;
  $$lcssa125$sink = $97;
 }
 $98 = (($$lcssa125$sink) - ($8))|0;
 return ($98|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 $10 = $1;
 if (!($9)) {
  $11 = HEAP32[$2>>2]|0;
  $12 = $11;
  $13 = (($10) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$11>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($11)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($11)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($11)) + 3|0);
      HEAP32[$2>>2] = $23;
     }
    }
   }
  }
 }
 $24 = $4;
 L8: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   label = 40;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   label = 40;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  $33 = ((($25)) + 1|0);
  do {
   if ($32) {
    $34 = $29&255;
    HEAP16[$27>>1] = $34;
    $$sink = $33;
   } else {
    $35 = ($29&255)<(194);
    if ($35) {
     $$8 = 2;
     break L8;
    }
    $36 = ($29&255)<(224);
    $37 = $25;
    $38 = (($10) - ($37))|0;
    $39 = ((($25)) + 2|0);
    if ($36) {
     $40 = ($38|0)<(2);
     if ($40) {
      $$8 = 1;
      break L8;
     }
     $41 = HEAP8[$33>>0]|0;
     $42 = $41&255;
     $43 = $42 & 192;
     $44 = ($43|0)==(128);
     if (!($44)) {
      $$8 = 2;
      break L8;
     }
     $45 = $30 << 6;
     $46 = $45 & 1984;
     $47 = $42 & 63;
     $48 = $47 | $46;
     $49 = ($48>>>0)>($6>>>0);
     if ($49) {
      $$8 = 2;
      break L8;
     }
     $50 = $48&65535;
     HEAP16[$27>>1] = $50;
     $$sink = $39;
     break;
    }
    $51 = ($29&255)<(240);
    $52 = ((($25)) + 3|0);
    if ($51) {
     $53 = ($38|0)<(3);
     if ($53) {
      $$8 = 1;
      break L8;
     }
     $54 = HEAP8[$33>>0]|0;
     $55 = HEAP8[$39>>0]|0;
     $56 = $54&255;
     $57 = $56 & 224;
     switch ($29<<24>>24) {
     case -32:  {
      $58 = ($57|0)==(160);
      if (!($58)) {
       $$8 = 2;
       break L8;
      }
      break;
     }
     case -19:  {
      $59 = ($57|0)==(128);
      if (!($59)) {
       $$8 = 2;
       break L8;
      }
      break;
     }
     default: {
      $60 = $56 & 192;
      $61 = ($60|0)==(128);
      if (!($61)) {
       $$8 = 2;
       break L8;
      }
     }
     }
     $62 = $55&255;
     $63 = $62 & 192;
     $64 = ($63|0)==(128);
     if (!($64)) {
      $$8 = 2;
      break L8;
     }
     $65 = $30 << 12;
     $66 = $56 << 6;
     $67 = $66 & 4032;
     $68 = $67 | $65;
     $69 = $62 & 63;
     $70 = $68 | $69;
     $71 = $70 & 65535;
     $72 = ($71>>>0)>($6>>>0);
     if ($72) {
      $$8 = 2;
      break L8;
     }
     $73 = $70&65535;
     HEAP16[$27>>1] = $73;
     $$sink = $52;
     break;
    }
    $74 = ($29&255)<(245);
    if (!($74)) {
     $$8 = 2;
     break L8;
    }
    $75 = ($38|0)<(4);
    if ($75) {
     $$8 = 1;
     break L8;
    }
    $76 = HEAP8[$33>>0]|0;
    $77 = HEAP8[$39>>0]|0;
    $78 = HEAP8[$52>>0]|0;
    $79 = $76&255;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($76) + 112)<<24>>24;
     $80 = ($$off&255)<(48);
     if (!($80)) {
      $$8 = 2;
      break L8;
     }
     break;
    }
    case -12:  {
     $81 = $79 & 240;
     $82 = ($81|0)==(128);
     if (!($82)) {
      $$8 = 2;
      break L8;
     }
     break;
    }
    default: {
     $83 = $79 & 192;
     $84 = ($83|0)==(128);
     if (!($84)) {
      $$8 = 2;
      break L8;
     }
    }
    }
    $85 = $77&255;
    $86 = $85 & 192;
    $87 = ($86|0)==(128);
    if (!($87)) {
     $$8 = 2;
     break L8;
    }
    $88 = $78&255;
    $89 = $88 & 192;
    $90 = ($89|0)==(128);
    if (!($90)) {
     $$8 = 2;
     break L8;
    }
    $91 = $27;
    $92 = (($24) - ($91))|0;
    $93 = ($92|0)<(4);
    if ($93) {
     $$8 = 1;
     break L8;
    }
    $94 = $30 & 7;
    $95 = $94 << 18;
    $96 = $79 << 12;
    $97 = $96 & 258048;
    $98 = $97 | $95;
    $99 = $85 << 6;
    $100 = $99 & 4032;
    $101 = $98 | $100;
    $102 = $88 & 63;
    $103 = $101 | $102;
    $104 = ($103>>>0)>($6>>>0);
    if ($104) {
     $$8 = 2;
     break L8;
    }
    $105 = $94 << 2;
    $106 = $79 >>> 4;
    $107 = $106 & 3;
    $108 = $107 | $105;
    $109 = $108 << 6;
    $110 = (($109) + 16320)|0;
    $111 = $79 << 2;
    $112 = $111 & 60;
    $113 = $85 >>> 4;
    $114 = $113 & 3;
    $115 = $112 | $114;
    $116 = $115 | $110;
    $117 = $116 | 55296;
    $118 = $117&65535;
    HEAP16[$27>>1] = $118;
    $119 = $99 & 960;
    $120 = $102 | $119;
    $121 = $120 | 56320;
    $122 = $121&65535;
    $123 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $123;
    HEAP16[$123>>1] = $122;
    $124 = HEAP32[$2>>2]|0;
    $125 = ((($124)) + 4|0);
    $$sink = $125;
   }
  } while(0);
  HEAP32[$2>>2] = $$sink;
  $126 = HEAP32[$5>>2]|0;
  $127 = ((($126)) + 2|0);
  HEAP32[$5>>2] = $127;
 }
 if ((label|0) == 40) {
  $128 = $26&1;
  $$8 = $128;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $10 = $4;
 if ($9) {
  label = 4;
 } else {
  $11 = $3;
  $12 = (($10) - ($11))|0;
  $13 = ($12|0)<(3);
  if ($13) {
   $$4 = 1;
  } else {
   $14 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $14;
   HEAP8[$3>>0] = -17;
   $15 = HEAP32[$5>>2]|0;
   $16 = ((($15)) + 1|0);
   HEAP32[$5>>2] = $16;
   HEAP8[$15>>0] = -69;
   $17 = HEAP32[$5>>2]|0;
   $18 = ((($17)) + 1|0);
   HEAP32[$5>>2] = $18;
   HEAP8[$17>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $19 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $21 = $$pre;
   while(1) {
    $20 = ($21>>>0)<($1>>>0);
    if (!($20)) {
     $$4 = 0;
     break L4;
    }
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&65535;
    $24 = ($23>>>0)>($6>>>0);
    if ($24) {
     $$4 = 2;
     break L4;
    }
    $25 = ($22&65535)<(128);
    do {
     if ($25) {
      $26 = HEAP32[$5>>2]|0;
      $27 = $26;
      $28 = (($10) - ($27))|0;
      $29 = ($28|0)<(1);
      if ($29) {
       $$4 = 1;
       break L4;
      }
      $30 = $22&255;
      $31 = ((($26)) + 1|0);
      HEAP32[$5>>2] = $31;
      HEAP8[$26>>0] = $30;
     } else {
      $32 = ($22&65535)<(2048);
      $33 = $23 & 63;
      $34 = $33 | 128;
      $35 = $34&255;
      if ($32) {
       $36 = HEAP32[$5>>2]|0;
       $37 = $36;
       $38 = (($10) - ($37))|0;
       $39 = ($38|0)<(2);
       if ($39) {
        $$4 = 1;
        break L4;
       }
       $40 = $23 >>> 6;
       $41 = $40 | 192;
       $42 = $41&255;
       $43 = ((($36)) + 1|0);
       HEAP32[$5>>2] = $43;
       HEAP8[$36>>0] = $42;
       $44 = HEAP32[$5>>2]|0;
       $45 = ((($44)) + 1|0);
       HEAP32[$5>>2] = $45;
       HEAP8[$44>>0] = $35;
       break;
      }
      $46 = ($22&65535)<(55296);
      $47 = $23 >>> 12;
      $48 = $47 | 224;
      $49 = $48&255;
      $50 = $23 >>> 6;
      $51 = $50 & 63;
      $52 = $51 | 128;
      $53 = $52&255;
      if ($46) {
       $54 = HEAP32[$5>>2]|0;
       $55 = $54;
       $56 = (($10) - ($55))|0;
       $57 = ($56|0)<(3);
       if ($57) {
        $$4 = 1;
        break L4;
       }
       $58 = ((($54)) + 1|0);
       HEAP32[$5>>2] = $58;
       HEAP8[$54>>0] = $49;
       $59 = HEAP32[$5>>2]|0;
       $60 = ((($59)) + 1|0);
       HEAP32[$5>>2] = $60;
       HEAP8[$59>>0] = $53;
       $61 = HEAP32[$5>>2]|0;
       $62 = ((($61)) + 1|0);
       HEAP32[$5>>2] = $62;
       HEAP8[$61>>0] = $35;
       break;
      }
      $63 = ($22&65535)<(56320);
      if (!($63)) {
       $113 = ($22&65535)<(57344);
       if ($113) {
        $$4 = 2;
        break L4;
       }
       $114 = HEAP32[$5>>2]|0;
       $115 = $114;
       $116 = (($10) - ($115))|0;
       $117 = ($116|0)<(3);
       if ($117) {
        $$4 = 1;
        break L4;
       }
       $118 = ((($114)) + 1|0);
       HEAP32[$5>>2] = $118;
       HEAP8[$114>>0] = $49;
       $119 = HEAP32[$5>>2]|0;
       $120 = ((($119)) + 1|0);
       HEAP32[$5>>2] = $120;
       HEAP8[$119>>0] = $53;
       $121 = HEAP32[$5>>2]|0;
       $122 = ((($121)) + 1|0);
       HEAP32[$5>>2] = $122;
       HEAP8[$121>>0] = $35;
       break;
      }
      $64 = $21;
      $65 = (($19) - ($64))|0;
      $66 = ($65|0)<(4);
      if ($66) {
       $$4 = 1;
       break L4;
      }
      $67 = ((($21)) + 2|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68&65535;
      $70 = $69 & 64512;
      $71 = ($70|0)==(56320);
      if (!($71)) {
       $$4 = 2;
       break L4;
      }
      $72 = HEAP32[$5>>2]|0;
      $73 = (($10) - ($72))|0;
      $74 = ($73|0)<(4);
      if ($74) {
       $$4 = 1;
       break L4;
      }
      $75 = $23 & 960;
      $76 = $75 << 10;
      $77 = (($76) + 65536)|0;
      $78 = $33 << 10;
      $79 = $77 | $78;
      $80 = $69 & 1023;
      $81 = $79 | $80;
      $82 = ($81>>>0)>($6>>>0);
      if ($82) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $67;
      $83 = $75 >>> 6;
      $84 = (($83) + 1)|0;
      $85 = $84 >>> 2;
      $86 = $85 | 240;
      $87 = $86&255;
      $88 = HEAP32[$5>>2]|0;
      $89 = ((($88)) + 1|0);
      HEAP32[$5>>2] = $89;
      HEAP8[$88>>0] = $87;
      $90 = $84 << 4;
      $91 = $90 & 48;
      $92 = $23 >>> 2;
      $93 = $92 & 15;
      $94 = $93 | $91;
      $95 = $94 | 128;
      $96 = $95&255;
      $97 = HEAP32[$5>>2]|0;
      $98 = ((($97)) + 1|0);
      HEAP32[$5>>2] = $98;
      HEAP8[$97>>0] = $96;
      $99 = $23 << 4;
      $100 = $99 & 48;
      $101 = $69 >>> 6;
      $102 = $101 & 15;
      $103 = $100 | $102;
      $104 = $103 | 128;
      $105 = $104&255;
      $106 = HEAP32[$5>>2]|0;
      $107 = ((($106)) + 1|0);
      HEAP32[$5>>2] = $107;
      HEAP8[$106>>0] = $105;
      $108 = $69 & 63;
      $109 = $108 | 128;
      $110 = $109&255;
      $111 = HEAP32[$5>>2]|0;
      $112 = ((($111)) + 1|0);
      HEAP32[$5>>2] = $112;
      HEAP8[$111>>0] = $110;
     }
    } while(0);
    $123 = HEAP32[$2>>2]|0;
    $124 = ((($123)) + 2|0);
    HEAP32[$2>>2] = $124;
    $21 = $124;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9040);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__214__shared_count16__release_sharedEv($11)|0);
  }
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = ((($0)) + 4|0);
   $$pre$i$i = HEAP32[$3>>2]|0;
   $5 = $$pre$i$i;
   while(1) {
    $4 = ($5|0)==($1|0);
    if ($4) {
     break;
    }
    $6 = ((($5)) + -4|0);
    HEAP32[$3>>2] = $6;
    $5 = $6;
   }
   $7 = ((($0)) + 16|0);
   $8 = ($7|0)==($1|0);
   if ($8) {
    $9 = ((($0)) + 128|0);
    HEAP8[$9>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9060);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1&255;
  $4 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1 << 24 >> 24;
  $4 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1<<24>>24)>(-1);
 $$ = $3 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $7 = ($6<<24>>24)>(-1);
  $$ = $7 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $8 = ((($$09)) + 1|0);
  $9 = ((($$0)) + 1|0);
  $$0 = $9;$$09 = $8;
 }
 return ($2|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(507)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(508)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(509)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9112);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(17837)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,17837,$2);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(17831)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,17831,$2);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9152);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(9208)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,9208,$2);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(9184)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,9184,$2);
 return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(128);
 if ($3) {
  $4 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $5 = (($4) + ($2<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & $1;
  $8 = ($7<<16>>16)!=(0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 return ($9|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$08>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $13 = $11;
  } else {
   $13 = 0;
  }
  $12 = $13&65535;
  HEAP16[$$0>>1] = $12;
  $14 = ((($$08)) + 4|0);
  $15 = ((($$0)) + 2|0);
  $$0 = $15;$$08 = $14;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$0>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & $1;
   $12 = ($11<<16>>16)==(0);
   if (!($12)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if (!($6)) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & $1;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $$0$lcssa = $$0;
   break;
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $$pre = HEAP32[$8>>2]|0;
   $9 = $$pre;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $$pre = HEAP32[$8>>2]|0;
   $9 = $$pre;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = ((($$0)) + 4|0);
  $$0 = $10;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<(128);
 $4 = $1&255;
 $$0 = $3 ? $4 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $11 = ($10>>>0)<(128);
  $12 = $10&255;
  $storemerge = $11 ? $12 : $3;
  HEAP8[$$0>>0] = $storemerge;
  $13 = ((($$09)) + 4|0);
  $14 = ((($$0)) + 1|0);
  $$0 = $14;$$09 = $13;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9468);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9504);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2&1;
 $5 = (($3) + -1)|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = (9060);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 12|0);
 HEAP8[$8>>0] = $4;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$7>>2] = $10;
 }
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(510,($1|0),(17884|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9756);
  ___cxa_throw(($1|0),(1936|0),(330|0));
  // unreachable;
 }
}
function __ZNSt3__26locale5__impC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$cast$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (9040);
 $4 = ((($0)) + 8|0);
 __THREW__ = 0;
 invoke_vii(511,($4|0),28);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $128 = ___cxa_find_matching_catch_2()|0;
  $129 = tempRet0;
  $$1 = $129;$$14 = $128;
 } else {
  $7 = ((($0)) + 144|0);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __THREW__ = 0;
  $8 = (invoke_ii(359,(15739|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 62;
  } else {
   __THREW__ = 0;
   invoke_viii(360,($7|0),(15739|0),($8|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    label = 62;
   } else {
    $13 = ((($0)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$4>>2]|0;
    $$cast$i = $15;
    $16 = $14;
    $18 = $16;
    while(1) {
     $17 = ($18|0)==($$cast$i|0);
     if ($17) {
      break;
     }
     $19 = ((($18)) + -4|0);
     HEAP32[$13>>2] = $19;
     $18 = $19;
    }
    $20 = (($14) - ($15))|0;
    $21 = $20 >> 2;
    __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($4,$21);
    __THREW__ = 0;
    invoke_v(512);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    do {
     if (!($23)) {
      __THREW__ = 0;
      invoke_vii(513,($0|0),(19016|0));
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if (!($25)) {
       __THREW__ = 0;
       invoke_v(514);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       if (!($27)) {
        __THREW__ = 0;
        invoke_vii(515,($0|0),(19024|0));
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if (!($29)) {
         __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
         __THREW__ = 0;
         invoke_vii(516,($0|0),(19032|0));
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if (!($31)) {
          __THREW__ = 0;
          invoke_v(517);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if (!($33)) {
           __THREW__ = 0;
           invoke_vii(518,($0|0),(19048|0));
           $34 = __THREW__; __THREW__ = 0;
           $35 = $34&1;
           if (!($35)) {
            __THREW__ = 0;
            invoke_v(519);
            $36 = __THREW__; __THREW__ = 0;
            $37 = $36&1;
            if (!($37)) {
             __THREW__ = 0;
             invoke_vii(520,($0|0),(19056|0));
             $38 = __THREW__; __THREW__ = 0;
             $39 = $38&1;
             if (!($39)) {
              __THREW__ = 0;
              invoke_v(521);
              $40 = __THREW__; __THREW__ = 0;
              $41 = $40&1;
              if (!($41)) {
               __THREW__ = 0;
               invoke_vii(522,($0|0),(19064|0));
               $42 = __THREW__; __THREW__ = 0;
               $43 = $42&1;
               if (!($43)) {
                __THREW__ = 0;
                invoke_v(523);
                $44 = __THREW__; __THREW__ = 0;
                $45 = $44&1;
                if (!($45)) {
                 __THREW__ = 0;
                 invoke_vii(524,($0|0),(19080|0));
                 $46 = __THREW__; __THREW__ = 0;
                 $47 = $46&1;
                 if (!($47)) {
                  __THREW__ = 0;
                  invoke_v(525);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if (!($49)) {
                   __THREW__ = 0;
                   invoke_vii(526,($0|0),(19088|0));
                   $50 = __THREW__; __THREW__ = 0;
                   $51 = $50&1;
                   if ($51) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(527,($0|0),(19096|0));
                   $52 = __THREW__; __THREW__ = 0;
                   $53 = $52&1;
                   if ($53) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(528,($0|0),(19120|0));
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(529);
                   $56 = __THREW__; __THREW__ = 0;
                   $57 = $56&1;
                   if ($57) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(530,($0|0),(19152|0));
                   $58 = __THREW__; __THREW__ = 0;
                   $59 = $58&1;
                   if ($59) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(531);
                   $60 = __THREW__; __THREW__ = 0;
                   $61 = $60&1;
                   if ($61) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(532,($0|0),(19160|0));
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(533);
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if ($65) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(534,($0|0),(19168|0));
                   $66 = __THREW__; __THREW__ = 0;
                   $67 = $66&1;
                   if ($67) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(535);
                   $68 = __THREW__; __THREW__ = 0;
                   $69 = $68&1;
                   if ($69) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(536,($0|0),(19176|0));
                   $70 = __THREW__; __THREW__ = 0;
                   $71 = $70&1;
                   if ($71) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(537);
                   $72 = __THREW__; __THREW__ = 0;
                   $73 = $72&1;
                   if ($73) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(538,($0|0),(19184|0));
                   $74 = __THREW__; __THREW__ = 0;
                   $75 = $74&1;
                   if ($75) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(539);
                   $76 = __THREW__; __THREW__ = 0;
                   $77 = $76&1;
                   if ($77) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(540,($0|0),(19192|0));
                   $78 = __THREW__; __THREW__ = 0;
                   $79 = $78&1;
                   if ($79) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(541);
                   $80 = __THREW__; __THREW__ = 0;
                   $81 = $80&1;
                   if ($81) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(542,($0|0),(19200|0));
                   $82 = __THREW__; __THREW__ = 0;
                   $83 = $82&1;
                   if ($83) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(543);
                   $84 = __THREW__; __THREW__ = 0;
                   $85 = $84&1;
                   if ($85) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(544,($0|0),(19208|0));
                   $86 = __THREW__; __THREW__ = 0;
                   $87 = $86&1;
                   if ($87) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(545);
                   $88 = __THREW__; __THREW__ = 0;
                   $89 = $88&1;
                   if ($89) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(546,($0|0),(19216|0));
                   $90 = __THREW__; __THREW__ = 0;
                   $91 = $90&1;
                   if ($91) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(547);
                   $92 = __THREW__; __THREW__ = 0;
                   $93 = $92&1;
                   if ($93) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(548,($0|0),(19224|0));
                   $94 = __THREW__; __THREW__ = 0;
                   $95 = $94&1;
                   if ($95) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(549);
                   $96 = __THREW__; __THREW__ = 0;
                   $97 = $96&1;
                   if ($97) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(550,($0|0),(19232|0));
                   $98 = __THREW__; __THREW__ = 0;
                   $99 = $98&1;
                   if ($99) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(551);
                   $100 = __THREW__; __THREW__ = 0;
                   $101 = $100&1;
                   if ($101) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(552,($0|0),(19240|0));
                   $102 = __THREW__; __THREW__ = 0;
                   $103 = $102&1;
                   if ($103) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(553);
                   $104 = __THREW__; __THREW__ = 0;
                   $105 = $104&1;
                   if ($105) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(554,($0|0),(19248|0));
                   $106 = __THREW__; __THREW__ = 0;
                   $107 = $106&1;
                   if ($107) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(555);
                   $108 = __THREW__; __THREW__ = 0;
                   $109 = $108&1;
                   if ($109) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(556,($0|0),(19264|0));
                   $110 = __THREW__; __THREW__ = 0;
                   $111 = $110&1;
                   if ($111) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(557);
                   $112 = __THREW__; __THREW__ = 0;
                   $113 = $112&1;
                   if ($113) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(558,($0|0),(19280|0));
                   $114 = __THREW__; __THREW__ = 0;
                   $115 = $114&1;
                   if ($115) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(559);
                   $116 = __THREW__; __THREW__ = 0;
                   $117 = $116&1;
                   if ($117) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(560,($0|0),(19296|0));
                   $118 = __THREW__; __THREW__ = 0;
                   $119 = $118&1;
                   if ($119) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(561);
                   $120 = __THREW__; __THREW__ = 0;
                   $121 = $120&1;
                   if ($121) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(562,($0|0),(19312|0));
                   $122 = __THREW__; __THREW__ = 0;
                   $123 = $122&1;
                   if ($123) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(563);
                   $124 = __THREW__; __THREW__ = 0;
                   $125 = $124&1;
                   if ($125) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(564,($0|0),(19320|0));
                   $126 = __THREW__; __THREW__ = 0;
                   $127 = $126&1;
                   if ($127) {
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $132 = ___cxa_find_matching_catch_2()|0;
    $133 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    $$0 = $133;$$03 = $132;
   }
  }
  if ((label|0) == 62) {
   $130 = ___cxa_find_matching_catch_2()|0;
   $131 = tempRet0;
   $$0 = $131;$$03 = $130;
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($4);
  $$1 = $$0;$$14 = $$03;
 }
 __ZNSt3__26locale5facetD2Ev($0);
 ___resumeException($$14|0);
 // unreachable;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(565,($0|0),($1|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(566,($0|0),($1|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     break;
    }
   }
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = tempRet0;
   __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
   ___resumeException($10|0);
   // unreachable;
  }
 } while(0);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$2,$7,$8,$13);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19020)>>2] = 0;
 HEAP32[4754] = (6704);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20144)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19028)>>2] = 0;
 HEAP32[4756] = (6736);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20152)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbj(19032,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20160)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19052)>>2] = 0;
 HEAP32[4762] = (9256);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20192)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19060)>>2] = 0;
 HEAP32[4764] = (9324);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21952)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(19064,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21960)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19084)>>2] = 0;
 HEAP32[4770] = (9372);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21968)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19092)>>2] = 0;
 HEAP32[4772] = (9420);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21976)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Ej(19096,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20176)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Ej(19120,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20200)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19156)>>2] = 0;
 HEAP32[4788] = (6768);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20184)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19164)>>2] = 0;
 HEAP32[4790] = (6832);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20208)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19172)>>2] = 0;
 HEAP32[4792] = (6896);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20216)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19180)>>2] = 0;
 HEAP32[4794] = (6948);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(20224)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19188)>>2] = 0;
 HEAP32[4796] = (8496);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21872)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19196)>>2] = 0;
 HEAP32[4798] = (8552);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21880)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19204)>>2] = 0;
 HEAP32[4800] = (8608);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21888)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19212)>>2] = 0;
 HEAP32[4802] = (8664);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21896)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19220)>>2] = 0;
 HEAP32[4804] = (8720);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21904)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19228)>>2] = 0;
 HEAP32[4806] = (8748);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21912)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19236)>>2] = 0;
 HEAP32[4808] = (8776);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21920)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19244)>>2] = 0;
 HEAP32[4810] = (8804);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21928)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19252)>>2] = 0;
 HEAP32[4812] = (9236);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((19256));
 HEAP32[4812] = (7000);
 HEAP32[(19256)>>2] = (7048);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21036)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19268)>>2] = 0;
 HEAP32[4816] = (9236);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((19272));
 HEAP32[4816] = (7084);
 HEAP32[(19272)>>2] = (7132);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21848)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19284)>>2] = 0;
 HEAP32[4820] = (9236);
 __THREW__ = 0;
 $0 = (invoke_i(432)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26locale5facetD2Ev(19280);
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[(19288)>>2] = $0;
  HEAP32[4820] = (8448);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21856)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19300)>>2] = 0;
 HEAP32[4824] = (9236);
 __THREW__ = 0;
 $0 = (invoke_i(432)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZNSt3__26locale5facetD2Ev(19296);
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[(19304)>>2] = $0;
  HEAP32[4824] = (8472);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21864)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19316)>>2] = 0;
 HEAP32[4828] = (8832);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21936)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(19324)>>2] = 0;
 HEAP32[4830] = (8864);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(21944)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($1);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($2>>>0);
 do {
  if ($9) {
   $10 = $6;
   $$pre$phiZ2D = $3;$18 = $10;
  } else {
   $11 = (($2) + 1)|0;
   __THREW__ = 0;
   invoke_vii(567,($3|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$pre = HEAP32[$3>>2]|0;
    $$pre$phiZ2D = $3;$18 = $$pre;
    break;
   }
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $16 = ($1|0)==(0|0);
   if (!($16)) {
    __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($1);
   }
   ___resumeException($14|0);
   // unreachable;
  }
 } while(0);
 $17 = (($18) + ($2<<2)|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $22 = $18;
 } else {
  (__ZNSt3__214__shared_count16__release_sharedEv($19)|0);
  $$pre14 = HEAP32[$$pre$phiZ2D>>2]|0;
  $22 = $$pre14;
 }
 $21 = (($22) + ($2<<2)|0);
 HEAP32[$21>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 if ($7) {
  $9 = (($1) - ($6))|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$9);
 } else {
  $10 = ($6>>>0)>($1>>>0);
  if ($10) {
   $11 = (($8) + ($1<<2)|0);
   $$pre$i$cast$i = $3;
   $13 = $$pre$i$cast$i;
   while(1) {
    $12 = ($13|0)==($11|0);
    if ($12) {
     break;
    }
    $14 = ((($13)) + -4|0);
    HEAP32[$2>>2] = $14;
    $13 = $14;
   }
   __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_shrinkEj($0,$6);
  }
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__214__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 do {
  if ($9) {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$0>>2]|0;
   $12 = (($6) - ($11))|0;
   $13 = $12 >> 2;
   $14 = (($13) + ($1))|0;
   $15 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0)|0);
   $16 = ($15>>>0)<($14>>>0);
   if ($16) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   }
   $17 = HEAP32[$3>>2]|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = $15 >>> 1;
   $22 = ($20>>>0)<($21>>>0);
   $23 = $19 >> 1;
   $24 = ($23>>>0)<($14>>>0);
   $$sroa$speculated$i = $24 ? $14 : $23;
   $$sroa$speculated$$i = $22 ? $$sroa$speculated$i : $15;
   $25 = HEAP32[$5>>2]|0;
   $26 = (($25) - ($18))|0;
   $27 = $26 >> 2;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($2,$$sroa$speculated$$i,$27,$10);
   __THREW__ = 0;
   invoke_vii(568,($2|0),($1|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_vii(569,($0|0),($2|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
     break;
    }
   }
   $32 = ___cxa_find_matching_catch_2()|0;
   $33 = tempRet0;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
   ___resumeException($32|0);
   // unreachable;
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $$0 = $1;
 while(1) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotatorC2ERKS6_j($2,$0,1);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$4>>2] = 0;
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 4|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$not$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $12 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $$not$i$i = ($8<<24>>24)==(0);
   $9 = ($1>>>0)<(29);
   $or$cond$i$i = $9 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $12 = $3;
    break;
   } else {
    $10 = $1 << 2;
    $11 = (__Znwj($10)|0);
    $12 = $11;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $12;
 $13 = (($12) + ($2<<2)|0);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = (($12) + ($1<<2)|0);
 $17 = ((($0)) + 12|0);
 HEAP32[$17>>2] = $16;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 $24 = HEAP32[$3>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($0,$27);
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $5 = $$pre$i$i$i;
 while(1) {
  $4 = ($5|0)==($2|0);
  if ($4) {
   break;
  }
  $6 = ((($5)) + -4|0);
  HEAP32[$3>>2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($7|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotatorC2ERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28numpunctIwEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (9152);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (9112);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (8992);
 __THREW__ = 0;
 $4 = (invoke_i(432)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  __ZNSt3__26locale5facetD2Ev($0);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $4;
  return;
 }
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$not$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $4 = ((($0)) + 128|0);
 $5 = HEAP8[$4>>0]|0;
 $$not$i$i = ($5<<24>>24)==(0);
 $6 = ($1>>>0)<(29);
 $or$cond$i$i = $6 & $$not$i$i;
 if ($or$cond$i$i) {
  $7 = ((($0)) + 16|0);
  HEAP8[$4>>0] = 1;
  $$0$i$i = $7;
 } else {
  $8 = $1 << 2;
  $9 = (__Znwj($8)|0);
  $$0$i$i = $9;
 }
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = $$0$i$i;
 HEAP32[$0>>2] = $$0$i$i;
 $11 = (($$0$i$i) + ($1<<2)|0);
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = $11;
 __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE14__annotate_newEj($0,0);
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19328]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(19328)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(570)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[5497] = 21984;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[5497]|0;
 return ($6|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[5496] = 19336;
 return (21984|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Ej(19336,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(21992,$0);
 return (21992|0);
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __ZNSt3__214__shared_count12__add_sharedEv($2);
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19496]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(19496)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(571)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = tempRet0;
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[5499] = 21992;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[5499]|0;
 return ($6|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = (invoke_i(572)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $5 = ___cxa_find_matching_catch_3(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  $4 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $4;
  __ZNSt3__214__shared_count12__add_sharedEv($4);
  return;
 }
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__shared_countD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__219__shared_weak_countD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZNSt3__214__shared_count12__add_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($1);
 return;
}
function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__214__shared_count16__release_sharedEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($1)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($0);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $$0$i = (($1) + -1)|0;
 return ($$0$i|0);
}
function __ZNSt3__219__shared_weak_count12__add_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__219__shared_weak_count16__release_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__214__shared_count16__release_sharedEv($0)|0);
 if ($1) {
  __ZNSt3__219__shared_weak_count14__release_weakEv($0);
 }
 return;
}
function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = (__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_($1)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 1023]($0);
 }
 return;
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((22000|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((22028|0),(22000|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   HEAP32[$0>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(573,(22000|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    __THREW__ = 0;
    invoke_vi($2|0,($1|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     (invoke_ii(574,(22000|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP32[$0>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(573,(22000|0))|0);
      $13 = __THREW__; __THREW__ = 0;
      $14 = $13&1;
      if (!($14)) {
       __THREW__ = 0;
       (invoke_ii(575,(22028|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if (!($16)) {
        break;
       }
      }
     }
    }
   }
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = tempRet0;
   (___cxa_begin_catch(($17|0))|0);
   __THREW__ = 0;
   (invoke_ii(574,(22000|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    HEAP32[$0>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(573,(22000|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     __THREW__ = 0;
     (invoke_ii(575,(22028|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      __THREW__ = 0;
      invoke_v(576);
      $25 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_v(358);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    ___resumeException($26|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((22000|0))|0);
  }
 } while(0);
 return;
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 1023]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(1888|0),(327|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(1888|0),(327|0));
 // unreachable;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9716);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(577,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9736);
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 __THREW__ = 0;
 invoke_vii(577,($2|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9736);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(577,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(510,($1|0),(17946|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (9756);
  ___cxa_throw(($1|0),(1936|0),(330|0));
  // unreachable;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $5 = ($2>>>0)<(11);
  if ($5) {
   $6 = $2&255;
   $7 = ((($0)) + 11|0);
   HEAP8[$7>>0] = $6;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $5 = ($1>>>0)<(11);
  if ($5) {
   $6 = $1&255;
   $7 = ((($0)) + 11|0);
   HEAP8[$7>>0] = $6;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $8 = (($1) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $1;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE6assignEPcjc($$0,$1,$2)|0);
 $14 = (($$0) + ($1)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignEPcjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
  $5 = $4&255;
  _memset(($0|0),($5|0),($1|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = $5 ? $6 : $1;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $4&255;
  $11 = $5 ? $9 : $10;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$7,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$01739 = 0, $$018$off037 = 0, $$1404753 = 0, $$141 = 0, $$phitmp$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i21 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 10 : $phitmp$i21;
 $17 = ($$phitmp$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $28 = HEAP32[$0>>2]|0;
     if ($5) {
      $$01739 = $28;$$018$off037 = 0;$$141 = $0;
      label = 17;
     } else {
      $29 = $4&255;
      $30 = (($29) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$28,$30)|0);
      __ZdlPv($28);
      label = 19;
     }
    } else {
     $19 = ($$phitmp$i>>>0)>($18>>>0);
     $20 = (($$phitmp$i) + 1)|0;
     if ($19) {
      $21 = (__Znwj($20)|0);
      $$016 = $21;
     } else {
      __THREW__ = 0;
      $22 = (invoke_ii(393,($20|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $25 = ___cxa_find_matching_catch_3(0|0)|0;
       $26 = tempRet0;
       (___cxa_begin_catch(($25|0))|0);
       ___cxa_end_catch();
       break L8;
      } else {
       $$016 = $22;
      }
     }
     if ($5) {
      $27 = HEAP32[$0>>2]|0;
      $$01739 = $27;$$018$off037 = 1;$$141 = $$016;
      label = 17;
      break;
     } else {
      $31 = $4&255;
      $32 = (($31) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$016,$0,$32)|0);
      $$1404753 = $$016;
      label = 18;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $33 = ((($0)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$141,$$01739,$35)|0);
    __ZdlPv($$01739);
    if ($$018$off037) {
     $$1404753 = $$141;
     label = 18;
    } else {
     label = 19;
    }
   }
   if ((label|0) == 18) {
    $36 = (($$phitmp$i) + 1)|0;
    $37 = $36 | -2147483648;
    $38 = ((($0)) + 8|0);
    HEAP32[$38>>2] = $37;
    $39 = ((($0)) + 4|0);
    HEAP32[$39>>2] = $13;
    HEAP32[$0>>2] = $$1404753;
    break;
   }
   else if ((label|0) == 19) {
    $40 = $13&255;
    HEAP8[$3>>0] = $40;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 1|0;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 do {
  if ($11) {
   $13 = (($1) - ($12))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$13,$2)|0);
  } else {
   if ($7) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($15,$3);
    $16 = ((($0)) + 4|0);
    HEAP32[$16>>2] = $1;
    break;
   } else {
    $17 = (($0) + ($1)|0);
    HEAP8[$4>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($17,$4);
    $18 = $1&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $phitmp$i;$16 = $12;
  } else {
   $13 = $6&255;
   $15 = 10;$16 = $13;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($1>>>0);
  $18 = (($16) + ($1))|0;
  if ($17) {
   $19 = (($18) - ($15))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21<<24>>24)<(0);
  if ($20) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($16)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcjc($23,$1,$2)|0);
  $25 = HEAP8[$5>>0]|0;
  $26 = ($25<<24>>24)<(0);
  if ($26) {
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $18;
  } else {
   $28 = $18&255;
   HEAP8[$5>>0] = $28;
  }
  $29 = (($24) + ($18)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($29,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwj($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $phitmp$i;$15 = $11;
 } else {
  $12 = $5&255;
  $14 = 10;$15 = $12;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($2>>>0);
 $17 = (($15) + ($2))|0;
 if ($16) {
  $27 = (($17) - ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$14,$27,$15,$15,0,$2,$1);
 } else {
  $18 = ($2|0)==(0);
  if (!($18)) {
   if ($6) {
    $19 = HEAP32[$0>>2]|0;
    $21 = $19;
   } else {
    $21 = $0;
   }
   $20 = (($21) + ($15)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$1,$2)|0);
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $17;
   } else {
    $25 = $17&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($21) + ($17)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = (($$019) + 1)|0;
  if ($16) {
   $23 = $17;
   label = 8;
  } else {
   $20 = $17;
   label = 7;
  }
 } else {
  $18 = (($$018) + 1)|0;
  if ($6) {
   $23 = $18;
   label = 8;
  } else {
   $20 = $18;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $19 = $20&255;
  HEAP8[$4>>0] = $19;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = $23;
  $$pn = $21;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $24 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $5 = ($2>>>0)<(2);
  if ($5) {
   $6 = $2&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $9 = (($2) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    $12 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($12);
    ___cxa_throw(($12|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $13 = $10 << 2;
    $14 = (__Znwj($13)|0);
    HEAP32[$0>>2] = $14;
    $15 = $10 | -2147483648;
    $16 = ((($0)) + 8|0);
    HEAP32[$16>>2] = $15;
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    $$0 = $14;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$0,$1,$2)|0);
 $18 = (($$0) + ($2<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($18,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $5 = ($1>>>0)<(2);
  if ($5) {
   $6 = $1&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $9 = (($1) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if ($11) {
    $12 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($12);
    ___cxa_throw(($12|0),(1888|0),(327|0));
    // unreachable;
   } else {
    $13 = $10 << 2;
    $14 = (__Znwj($13)|0);
    HEAP32[$0>>2] = $14;
    $15 = $10 | -2147483648;
    $16 = ((($0)) + 8|0);
    HEAP32[$16>>2] = $15;
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $1;
    $$0 = $14;
    break;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwjw($$0,$1,$2)|0);
 $18 = (($$0) + ($1<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($18,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignEPwjw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 1;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($7) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $6&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($7) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwj($13,$1,$2)|0);
   $14 = (($13) + ($2<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($14,$3);
   $15 = HEAP8[$5>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (1073741806 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($11)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $30 = $15;
 } else {
  $30 = $0;
 }
 $16 = ($1>>>0)<(536870887);
 if ($16) {
  $17 = (($2) + ($1))|0;
  $18 = $1 << 1;
  $19 = ($17>>>0)<($18>>>0);
  $$sroa$speculated = $19 ? $18 : $17;
  $20 = ($$sroa$speculated>>>0)<(2);
  $21 = (($$sroa$speculated) + 4)|0;
  $22 = $21 & -4;
  $23 = $20 ? 2 : $22;
  $24 = ($23>>>0)>(1073741823);
  if ($24) {
   $25 = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($25);
   ___cxa_throw(($25|0),(1888|0),(327|0));
   // unreachable;
  } else {
   $27 = $23;
  }
 } else {
  $27 = 1073741807;
 }
 $26 = $27 << 2;
 $28 = (__Znwj($26)|0);
 $29 = ($4|0)==(0);
 if (!($29)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($28,$30,$4)|0);
 }
 $31 = ($6|0)==(0);
 if (!($31)) {
  $32 = (($28) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($32,$7,$6)|0);
 }
 $33 = (($3) - ($5))|0;
 $34 = (($33) - ($4))|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = (($30) + ($4<<2)|0);
  $37 = (($36) + ($5<<2)|0);
  $38 = (($28) + ($4<<2)|0);
  $39 = (($38) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($39,$37,$34)|0);
 }
 $40 = ($1|0)==(1);
 if (!($40)) {
  __ZdlPv($30);
 }
 HEAP32[$0>>2] = $28;
 $41 = $27 | -2147483648;
 HEAP32[$11>>2] = $41;
 $42 = (($33) + ($6))|0;
 $43 = ((($0)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = (($28) + ($42<<2)|0);
 HEAP32[$8>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($44,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01742 = 0, $$018$off040 = 0, $$1435056 = 0, $$144 = 0, $$phitmp$i = 0, $$sink = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $13 = $11;$18 = 1;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $$phitmp$i = $14 ? 1 : $phitmp$i22;
 $17 = ($$phitmp$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $34 = HEAP32[$0>>2]|0;
     if ($6) {
      $$01742 = $34;$$018$off040 = 0;$$144 = $0;
      label = 21;
     } else {
      $35 = $5&255;
      $36 = (($35) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($0,$34,$36)|0);
      __ZdlPv($34);
      label = 23;
     }
    } else {
     $19 = ($$phitmp$i>>>0)>($18>>>0);
     $20 = (($$phitmp$i) + 1)|0;
     $21 = ($20>>>0)>(1073741823);
     do {
      if ($19) {
       if ($21) {
        $22 = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($22);
        ___cxa_throw(($22|0),(1888|0),(327|0));
        // unreachable;
       } else {
        $23 = $20 << 2;
        $24 = (__Znwj($23)|0);
        $$sink = $24;
        break;
       }
      } else {
       if ($21) {
        $25 = (___cxa_allocate_exception(4)|0);
        __ZNSt9bad_allocC2Ev($25);
        __THREW__ = 0;
        invoke_viii(429,($25|0),(1888|0),(327|0));
        $26 = __THREW__; __THREW__ = 0;
       } else {
        $27 = $20 << 2;
        __THREW__ = 0;
        $28 = (invoke_ii(393,($27|0))|0);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         $$sink = $28;
         break;
        }
       }
       $31 = ___cxa_find_matching_catch_3(0|0)|0;
       $32 = tempRet0;
       (___cxa_begin_catch(($31|0))|0);
       ___cxa_end_catch();
       break L8;
      }
     } while(0);
     if ($6) {
      $33 = HEAP32[$0>>2]|0;
      $$01742 = $33;$$018$off040 = 1;$$144 = $$sink;
      label = 21;
      break;
     } else {
      $37 = $5&255;
      $38 = (($37) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$sink,$0,$38)|0);
      $$1435056 = $$sink;
      label = 22;
      break;
     }
    }
   } while(0);
   if ((label|0) == 21) {
    $39 = ((($0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwj($$144,$$01742,$41)|0);
    __ZdlPv($$01742);
    if ($$018$off040) {
     $$1435056 = $$144;
     label = 22;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 22) {
    $42 = (($$phitmp$i) + 1)|0;
    $43 = $42 | -2147483648;
    HEAP32[$3>>2] = $43;
    $44 = ((($0)) + 4|0);
    HEAP32[$44>>2] = $13;
    HEAP32[$0>>2] = $$1435056;
    break;
   }
   else if ((label|0) == 23) {
    $45 = $13&255;
    HEAP8[$4>>0] = $45;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $28 = $13;
 } else {
  $28 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   $23 = (___cxa_allocate_exception(4)|0);
   __ZNSt9bad_allocC2Ev($23);
   ___cxa_throw(($23|0),(1888|0),(327|0));
   // unreachable;
  } else {
   $25 = $21;
  }
 } else {
  $25 = 1073741807;
 }
 $24 = $25 << 2;
 $26 = (__Znwj($24)|0);
 $27 = ($4|0)==(0);
 if (!($27)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($26,$28,$4)|0);
 }
 $29 = (($3) - ($5))|0;
 $30 = (($29) - ($4))|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $32 = (($28) + ($4<<2)|0);
  $33 = (($32) + ($5<<2)|0);
  $34 = (($26) + ($4<<2)|0);
  $35 = (($34) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwj($35,$33,$30)|0);
 }
 $36 = ($1|0)==(1);
 if (!($36)) {
  __ZdlPv($28);
 }
 HEAP32[$0>>2] = $26;
 $37 = $25 | -2147483648;
 HEAP32[$9>>2] = $37;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $8 = $6&255;
  $$018 = $8;$$019 = 1;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$5>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = (($$019) + 1)|0;
  if ($16) {
   $23 = $17;
   label = 8;
  } else {
   $20 = $17;
   label = 7;
  }
 } else {
  $18 = (($$018) + 1)|0;
  if ($7) {
   $23 = $18;
   label = 8;
  } else {
   $20 = $18;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $19 = $20&255;
  HEAP8[$5>>0] = $19;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = $23;
  $$pn = $21;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$2);
 $24 = ((($$0)) + 4|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($24,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__214error_categoryD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__214error_category23default_error_conditionEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 return;
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viii[$6 & 1023]($3,$0,$1);
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12|0)==($13|0);
  $15 = $14;
 } else {
  $15 = 0;
 }
 STACKTOP = sp;return ($15|0);
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($0|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==($2|0);
 $8 = $5 & $7;
 return ($8|0);
}
function __ZNSt3__212system_errorD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 return;
}
function __ZNSt3__212system_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__212__do_message7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($2)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $4 = (__ZNSt3__211char_traitsIcE6lengthEPKc($3)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$3,$4);
 return;
}
function __ZNKSt3__210error_code7messageEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viii[$6 & 1023]($0,$3,$7);
 return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   $6 = ((($2)) + 11|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)<(0);
   if ($8) {
    $9 = ((($2)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $13 = $10;
   } else {
    $11 = $7&255;
    $13 = $11;
   }
   $12 = ($13|0)==(0);
   if (!($12)) {
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2,18030)|0);
   }
   __ZNKSt3__210error_code7messageEv($3,$1);
   $14 = ((($3)) + 11|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)<(0);
   $17 = HEAP32[$3>>2]|0;
   $18 = $16 ? $17 : $3;
   $19 = ((($3)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $15&255;
   $22 = $16 ? $20 : $21;
   __THREW__ = 0;
   (invoke_iiii(578,($2|0),($18|0),($22|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch_2()|0;
    $26 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    ___resumeException($25|0);
    // unreachable;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    break;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $27 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$27>>2] = 0;
  $28 = (($$0$i$i) + 1)|0;
  $$0$i$i = $28;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4,$2,$5);
 __THREW__ = 0;
 invoke_viii(579,($3|0),($1|0),($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $$0 = $22;$$03 = $21;
  } else {
   __THREW__ = 0;
   invoke_vii(580,($0|0),($3|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    $$0 = $24;$$03 = $23;
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    HEAP32[$0>>2] = (9588);
    $10 = ((($0)) + 8|0);
    $11 = $1;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $10;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 ___resumeException($$03|0);
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    $36 = HEAP32[2401]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(18119,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[456]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 1023](1824,$23,$0)|0);
   $30 = HEAP32[2401]|0;
   if ($29) {
    $31 = HEAP32[$0>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 1023]($31)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $35;
    _abort_message(18033,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = $30;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(18078,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(18157,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((22076|0),(581|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[5520]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(18308,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[662]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,1848,1832,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 511]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    $13 = ((($1)) + 32|0);
    if (!($12)) {
     $14 = ((($1)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($2|0);
     if (!($16)) {
      HEAP32[$13>>2] = $3;
      HEAP32[$14>>2] = $2;
      $18 = ((($1)) + 40|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + 1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ((($1)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(1);
      if ($23) {
       $24 = ((($1)) + 24|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(2);
       if ($26) {
        $27 = ((($1)) + 54|0);
        HEAP8[$27>>0] = 1;
       }
      }
      $28 = ((($1)) + 44|0);
      HEAP32[$28>>2] = 4;
      break;
     }
    }
    $17 = ($3|0)==(1);
    if ($17) {
     HEAP32[$13>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 24|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   HEAP32[$8>>2] = $3;
   HEAP32[$7>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $12 = HEAP32[$7>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$7>>2] = $13;
    HEAP32[$8>>2] = 2;
    $14 = ((($1)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $10 = HEAP32[$8>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$8>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($1)) + 48|0);
   $15 = ((($1)) + 24|0);
   $16 = ((($1)) + 36|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    HEAP32[$15>>2] = $4;
    HEAP32[$16>>2] = 1;
    $17 = HEAP32[$14>>2]|0;
    $18 = ($17|0)==(1);
    $19 = ($4|0)==(1);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$13>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$16>>2] = $28;
    HEAP8[$13>>0] = 1;
    break;
   }
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$15>>2] = $4;
    $26 = $4;
   } else {
    $26 = $21;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $25 = ($26|0)==(1);
   $or$cond22 = $24 & $25;
   if ($or$cond22) {
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 511]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 511]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 511]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 8|0);
   if (!($9)) {
    $41 = HEAP32[$10>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viiiii[$44 & 511]($41,$1,$2,$3,$4);
    break;
   }
   $11 = ((($1)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($2|0);
   $14 = ((($1)) + 32|0);
   if (!($13)) {
    $15 = ((($1)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    if (!($17)) {
     HEAP32[$14>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = HEAP32[$10>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viiiiii[$27 & 511]($24,$1,$2,$2,1,$4);
     $28 = HEAP8[$23>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = HEAP8[$22>>0]|0;
      $not$ = ($30<<24>>24)==(0);
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$15>>2] = $2;
      $31 = ((($1)) + 40|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
      $34 = ((($1)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       $37 = ((($1)) + 24|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(2);
       if ($39) {
        $40 = ((($1)) + 54|0);
        HEAP8[$40>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $18 = ($3|0)==(1);
   if ($18) {
    HEAP32[$14>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 511]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((22080|0),(582|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18357,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[5520]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18407,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(583)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(584,(18460|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(584,(18500|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(358);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2400]|0;HEAP32[2400] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18550|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9716);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($1)|0);
 return ($2|0);
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($0)|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 return ($2|0);
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9736);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($1)|0);
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt8bad_castD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt8bad_castD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (18629|0);
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($1)) + 54|0);
    $21 = ((($0)) + 8|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$21>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$21>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 12|0);
   $11 = ((($1)) + 24|0);
   $12 = ((($1)) + 36|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($0)) + 8|0);
   $15 = ((($0)) + 16|0);
   if (!($9)) {
    $55 = HEAP32[$10>>2]|0;
    $56 = (((($0)) + 16|0) + ($55<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15,$1,$2,$3,$4);
    $57 = ((($0)) + 24|0);
    $58 = ($55|0)>(1);
    if (!($58)) {
     break;
    }
    $59 = HEAP32[$14>>2]|0;
    $60 = $59 & 2;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = HEAP32[$12>>2]|0;
     $63 = ($62|0)==(1);
     if ($63) {
      $$0 = $57;
     } else {
      $68 = $59 & 1;
      $69 = ($68|0)==(0);
      if ($69) {
       $$2 = $57;
       while(1) {
        $78 = HEAP8[$13>>0]|0;
        $79 = ($78<<24>>24)==(0);
        if (!($79)) {
         break L1;
        }
        $80 = HEAP32[$12>>2]|0;
        $81 = ($80|0)==(1);
        if ($81) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $82 = ((($$2)) + 8|0);
        $83 = ($82>>>0)<($56>>>0);
        if ($83) {
         $$2 = $82;
        } else {
         break L1;
        }
       }
      } else {
       $$1 = $57;
      }
      while(1) {
       $70 = HEAP8[$13>>0]|0;
       $71 = ($70<<24>>24)==(0);
       if (!($71)) {
        break L1;
       }
       $72 = HEAP32[$12>>2]|0;
       $73 = ($72|0)==(1);
       if ($73) {
        $74 = HEAP32[$11>>2]|0;
        $75 = ($74|0)==(1);
        if ($75) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $76 = ((($$1)) + 8|0);
       $77 = ($76>>>0)<($56>>>0);
       if ($77) {
        $$1 = $76;
       } else {
        break L1;
       }
      }
     }
    } else {
     $$0 = $57;
    }
    while(1) {
     $64 = HEAP8[$13>>0]|0;
     $65 = ($64<<24>>24)==(0);
     if (!($65)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $66 = ((($$0)) + 8|0);
     $67 = ($66>>>0)<($56>>>0);
     if ($67) {
      $$0 = $66;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   $19 = ((($1)) + 32|0);
   if (!($18)) {
    $20 = ((($1)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($2|0);
    if (!($22)) {
     HEAP32[$19>>2] = $3;
     $24 = ((($1)) + 44|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(4);
     if ($26) {
      break;
     }
     $27 = HEAP32[$10>>2]|0;
     $28 = (((($0)) + 16|0) + ($27<<3)|0);
     $29 = ((($1)) + 52|0);
     $30 = ((($1)) + 53|0);
     $$081$off0 = 0;$$084 = $15;$$085$off0 = 0;
     L29: while(1) {
      $31 = ($$084>>>0)<($28>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$29>>0] = 0;
      HEAP8[$30>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$13>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$30>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$29>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$14>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L29;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$11>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L29;
        }
        $40 = HEAP32[$14>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L29;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$20>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = HEAP32[$12>>2]|0;
        $51 = ($50|0)==(1);
        if ($51) {
         $52 = HEAP32[$11>>2]|0;
         $53 = ($52|0)==(2);
         if ($53) {
          HEAP8[$13>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $54 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $54 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $54 = 3;
     }
     HEAP32[$24>>2] = $54;
     break;
    }
   }
   $23 = ($3|0)==(1);
   if ($23) {
    HEAP32[$19>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 511]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 511]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 511]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt8bad_castC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9776);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (9696);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5521]|0;HEAP32[5521] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 1023]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,1848,1984,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  return FUNCTION_TABLE_iiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0;
  return FUNCTION_TABLE_iiiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_didd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  return +FUNCTION_TABLE_didd[index&511](a1|0,+a2,+a3);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&127](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_iiiiiiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0;
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(11);return 0;
}
function b12(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0; nullFunc_iiiiiiiiiiiii(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(13);
}
function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14);
}
function b15(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function b16(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0;
}
function b17(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0;
}
function b18(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_didd(18);return +0;
}
function b19() {
 ; nullFunc_i(19);return 0;
}
function b20(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(20);return 0;
}
function b21(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(21);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b22() {
 ; nullFunc_v(22);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b23(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(23);return 0;
}
function b24(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(24);return 0;
}
function b25(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b0,b0,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE
,b0,b0,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangeb,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_S8_EE6invokeEPFvS8_S8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_SF_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_iiiiiid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b2,b2,b2,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,b3,__ZNSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,b3,b3,b3,b3,b3,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,b3,b3,b3,b3,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,b3
,b3,b3,b3,b3,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,b3,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,b3,b3,b3,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3
,b3,b3,b3,b3,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3
,b3,b3,b3,b3,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3
,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,b3,b3,b3,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,b3,b3,b3,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,b3,b3,b3,b3,b3,b3
,b3,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,b3,b3,b3,b3,b3
,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev
,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__214__shared_countD2Ev,__ZNSt3__214__shared_countD0Ev,b3,__ZNSt3__219__shared_weak_countD0Ev,b3,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev
,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__Z18loadFileFromSourceNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__Z8loadWordNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN7EncoderC2Ev,__ZN7EncoderD2Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,___cxx_global_array_dtor_117,___cxx_global_array_dtor_69,___cxx_global_array_dtor,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,___cxx_global_array_dtor_120,___cxx_global_array_dtor_93,___cxx_global_array_dtor_54,_freelocale
,b3,b3,__ZNSt3__212__do_nothingEPv,b3,__ZNSt3__221__throw_runtime_errorEPKc,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv
,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__28messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv
,b4,b4,b4,b4,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__28ios_base4initEPv,b4,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,__ZNKSt3__28ios_base6getlocEv,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__28ios_base5clearEj,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_,b4,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFvS8_EPNS0_11BindingTypeIS8_EUt_E,b4,b4,b4,b4,b4,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b4,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E,b4,b4,__ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_
,__ZNSt3__26vectorINS0_INS_10shared_ptrI5LevelEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,__ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_,__ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_,b4,__ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE,__ZN7Encoder12insert_cacheENSt3__210shared_ptrI5LevelEE,b4,__ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_,__ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE8allocateEj,b4,b4,b4,b4,b4,b4,b4,__ZN5Level9to_stringEv,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_,b4,b4,b4,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,b4,b4,b4
,b4,b4,__ZNKSt3__26vectorIfNS_9allocatorIfEEE17__annotate_shrinkEj,b4,b4,b4,b4,b4,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZNSt13runtime_errorC2EPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,b4,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,b4,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_
,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_,b4,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj
,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__218__libcpp_refstringC2EPKc,b4,b4,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv
,b6,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b6,b6,b6,b6,b6,b6,b6,b6,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b6,b6,b6,b6,__ZNKSt3__219__iostream_category4nameEv
,b6,b6,b6,b6,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,b6,b6,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv
,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,b6,b6,b6
,b6,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,b6,b6,b6,b6,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,b6
,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,b6,b6,b6
,b6,b6,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,b6
,b6,b6,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,b6,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6,b6,__ZNKSt8bad_cast4whatEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZNSt3__211char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__Znwj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,___uselocale,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__211char_traitsIwE6lengthEPKw,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,b7,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8
,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,b8,b8,b8,b8,b8,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__27collateIcE7do_hashEPKcS3_,b8,b8,b8,b8,__ZNKSt3__27collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__25ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__25ctypeIwE5do_isEtw,b8,b8,b8,b8,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__25ctypeIwE9do_narrowEwc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__211char_traitsIcE7compareEPKcS3_j,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__0clENS0_10shared_ptrI5LevelEESB_,b8,b8,b8,b8,b8,b8,b8,b8,__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE10LevelRangebENK3__1clERKS6_SA_,b8,__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__2clENS0_10shared_ptrI5LevelEESE_,b8,__ZZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangebENK3__3clERKS6_SD_
,b8,b8,b8,b8,b8,b8,b8,_do_read,b8,b8,b8,b8,b8,b8,b8,___newlocale,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,_vasprintf,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,b8,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorIS9_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,b8,b8,b8,b8,_wcrtomb,b8,b8,_mbtowc,b8,_mbrlen,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN7Encoder8completeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6vectorIS6_NS4_IS6_EEEE10LevelRangeb,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe
,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,b11,b11,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b11,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b11
,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b11,b11,b11,b11,b11,b11,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,b11,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiiiiiiiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b13,b13,b13,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14,b14,b14,b14,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b14,b14,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b15,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b15,b15,b15,__ZNKSt3__220__shared_ptr_pointerIP5LevelNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__25ctypeIcE10do_toupperEc,b15,__ZNKSt3__25ctypeIcE10do_tolowerEc,b15,__ZNKSt3__25ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__25ctypeIwE10do_toupperEw,b15,__ZNKSt3__25ctypeIwE10do_tolowerEw,b15,__ZNKSt3__25ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__2rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE,b15,b15,b15,b15,__ZNKSt3__26locale9use_facetERNS0_2idE,b15,b15,b15,b15
,b15,b15,b15,__ZNSt3__23mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEEixERSB_,b15,__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN5Level13areStartEqualENSt3__210shared_ptrIS_EES2_,__ZN5Level16areAnywhereEqualENSt3__210shared_ptrIS_EES2_,__ZN5Level11areEndEqualENSt3__210shared_ptrIS_EES2_,__ZN5Level15areExactlyEqualENSt3__210shared_ptrIS_EES2_,b15,b15,b15,b15,b15,b15
,__ZN5LevelaSERKS_,__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c,b15,__ZN5Level18isExactlyContainedENSt3__210shared_ptrIS_EES2_,__ZN5Level19isAnywhereContainedENSt3__210shared_ptrIS_EES2_,__ZN5Level16isStartContainedENSt3__210shared_ptrIS_EES2_,__ZN5Level14isEndContainedENSt3__210shared_ptrIS_EES2_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l,_isdigit_l,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,b16,b16,b16,b16,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b16,b16,b16,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b16,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm
,b16,b16,b16,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j
,b16,b16,b16,b16,b16,b16,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,b16,b16,b16,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16
,b16,b16,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_wcsnrtombs,b16,_mbsnrtowcs,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,b17,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_didd = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,__ZN7Encoder9averagifyEff,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18];
var FUNCTION_TABLE_i = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN7Encoder6sharedEv,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__26__clocEv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___ctype_get_mb_cur_max,b19,___ctype_tolower_loc,___ctype_toupper_loc
,___ctype_b_loc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,___cxa_get_globals_fast,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,b20,b20,b20,b20,b20,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji
,b20,b20,b20,b20,b20,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,_mbsrtowcs,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,_catgets,b20,b20,b20,_mbrtowc,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_viii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,__ZNKSt3__214error_category23default_error_conditionEi,b21,b21,__ZNKSt3__219__iostream_category7messageEi,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,b21,b21,b21,b21,b21,b21
,b21,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__Z8completeNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_,b21,b21,b21,b21,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN7Encoder17fetch_cache_levelEj,b21,b21,b21,__ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangebE3__1PS7_EEvT0_SC_T_,b21,b21,b21,b21,b21,b21,__ZN5Level17matchedLowerLevelENSt3__210shared_ptrIS_EE,b21,__ZNSt3__26__sortIRZN7Encoder8completeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIS7_NS5_IS7_EEEE10LevelRangebE3__3PS7_EEvT0_SF_T_,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,___cxa_throw__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b21,b21,b21,b21,b21,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_v = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,___cxa_pure_virtual__wrapper,b22,b22,b22,b22,__ZL25default_terminate_handlerv,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,___cxa_end_catch__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,__ZSt17__throw_bad_allocv,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__2L10init_weeksEv,__ZNSt3__2L11init_monthsEv,__ZNSt3__2L10init_am_pmEv,b22,b22,b22,b22,__ZNSt3__2L11init_wweeksEv,__ZNSt3__2L12init_wmonthsEv,__ZNSt3__2L11init_wam_pmEv,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_,b22,b22,__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_,b22,b22,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_,b22
,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_,b22,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,___cxa_rethrow__wrapper,b22,b22,b22,b22,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_iiiiiiiii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b23,b23,b23,b23
,b23,b23,b23,b23,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b23,b23,b23,b23,b23,b23
,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_iiiiid = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b24,b24,b24,b24,b24,b24,b24
,b24,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b24,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__27collateIcE12do_transformEPKcS3_,b25,b25,b25,b25,__ZNKSt3__27collateIwE12do_transformEPKwS3_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN7Encoder6encodeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_S8_EEEEENSH_INS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEEiEEbEERKT_DpOT0_,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_j,b25,b25,b25,__Z12completeFromNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_S5_,b25,__ZN10emscripten8internal7InvokerIvJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_EE6invokeEPFvS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_SF_,b25,b25,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE10LevelRangeEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__26vectorINS_10shared_ptrI5LevelEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_j,__ZN7Encoder7listifyENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb,__ZN7Encoder8encodifyENSt3__210shared_ptrI5LevelEEb,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_SA_EEEEENSJ_INS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEEiEEbEERKT_DpOT0_,__ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI5LevelEEEENS_19__map_value_compareIS7_SB_NS_4lessIS7_EELb1EEENS5_ISB_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSL_SL_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];

  return { stackSave: stackSave, getTempRet0: getTempRet0, ___udivdi3: ___udivdi3, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_quickhit_cpp: __GLOBAL__sub_I_quickhit_cpp, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, stackAlloc: stackAlloc, _i64Subtract: _i64Subtract, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___udivmoddi4: ___udivmoddi4, setTempRet0: setTempRet0, _i64Add: _i64Add, _pthread_mutex_unlock: _pthread_mutex_unlock, _emscripten_get_global_libc: _emscripten_get_global_libc, ___getTypeName: ___getTypeName, _pthread_cond_broadcast: _pthread_cond_broadcast, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, _memset: _memset, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiiiiiiii: dynCall_iiiiiiiiiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_didd: dynCall_didd, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__sub_I_quickhit_cpp = asm["__GLOBAL__sub_I_quickhit_cpp"]; asm["__GLOBAL__sub_I_quickhit_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_quickhit_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_cond_broadcast.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_quickhit_cpp = Module["__GLOBAL__sub_I_quickhit_cpp"] = asm["__GLOBAL__sub_I_quickhit_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _memset = Module["_memset"] = asm["_memset"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_didd = Module["dynCall_didd"] = asm["dynCall_didd"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



